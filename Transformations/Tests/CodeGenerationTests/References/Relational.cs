//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.Relational
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the Named class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://ttc/Relational")]
    [XmlNamespacePrefixAttribute("rel")]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Named")]
    [DebuggerDisplayAttribute("Named {Name}")]
    public abstract partial class Named : ModelElement, INamed, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Named")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Named")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanging;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Named.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Named")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<INamed, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(INamed modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Table class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc/Relational")]
    [XmlNamespacePrefixAttribute("rel")]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Table")]
    [DebuggerDisplayAttribute("Table {Name}")]
    public partial class Table : Named, ITable, IModelElement
    {
        
        private static Lazy<ITypedElement> _colReference = new Lazy<ITypedElement>(RetrieveColReference);
        
        /// <summary>
        /// The backing field for the Col property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TableColCollection _col;
        
        private static Lazy<ITypedElement> _keyReference = new Lazy<ITypedElement>(RetrieveKeyReference);
        
        /// <summary>
        /// The backing field for the Key property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TableKeyCollection _key;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Table()
        {
            this._col = new TableColCollection(this);
            this._col.CollectionChanging += this.ColCollectionChanging;
            this._col.CollectionChanged += this.ColCollectionChanged;
            this._key = new TableKeyCollection(this);
            this._key.CollectionChanging += this.KeyCollectionChanging;
            this._key.CollectionChanged += this.KeyCollectionChanged;
        }
        
        /// <summary>
        /// The col property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("col")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owner")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IColumn> Col
        {
            get
            {
                return this._col;
            }
        }
        
        /// <summary>
        /// The key property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("key")]
        [CategoryAttribute("Table")]
        [XmlElementNameAttribute("key")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("keyOf")]
        [ConstantAttribute()]
        public ISetExpression<IColumn> Key
        {
            get
            {
                return this._key;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new TableChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Table")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveColReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Table.ClassInstance)).Resolve("col")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Col property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ColCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Col", e, _colReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Col property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ColCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Col", e, _colReference);
        }
        
        private static ITypedElement RetrieveKeyReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Table.ClassInstance)).Resolve("key")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Key property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void KeyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Key", e, _keyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Key property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void KeyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Key", e, _keyReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int colIndex = ModelHelper.IndexOfReference(this.Col, element);
            if ((colIndex != -1))
            {
                return ModelHelper.CreatePath("col", colIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "COL"))
            {
                if ((index < this.Col.Count))
                {
                    return this.Col[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COL"))
            {
                return this._col;
            }
            if ((feature == "KEY"))
            {
                return this._key;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._col))
            {
                return "col";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Table")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Table class
        /// </summary>
        public class TableChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Table _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TableChildrenCollection(Table parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Col.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Col.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Col.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IColumn colCasted = item.As<IColumn>();
                if ((colCasted != null))
                {
                    this._parent.Col.Add(colCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Col.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Col.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> colEnumerator = this._parent.Col.GetEnumerator();
                try
                {
                    for (
                    ; colEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = colEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    colEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IColumn columnItem = item.As<IColumn>();
                if (((columnItem != null) 
                            && this._parent.Col.Remove(columnItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Col).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Table class
        /// </summary>
        public class TableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Table _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TableReferencedElementsCollection(Table parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Col.Count);
                    count = (count + this._parent.Key.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Col.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Key.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Col.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Key.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IColumn colCasted = item.As<IColumn>();
                if ((colCasted != null))
                {
                    this._parent.Col.Add(colCasted);
                }
                IColumn keyCasted = item.As<IColumn>();
                if ((keyCasted != null))
                {
                    this._parent.Key.Add(keyCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Col.Clear();
                this._parent.Key.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Col.Contains(item))
                {
                    return true;
                }
                if (this._parent.Key.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> colEnumerator = this._parent.Col.GetEnumerator();
                try
                {
                    for (
                    ; colEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = colEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    colEnumerator.Dispose();
                }
                IEnumerator<IModelElement> keyEnumerator = this._parent.Key.GetEnumerator();
                try
                {
                    for (
                    ; keyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = keyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    keyEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IColumn columnItem = item.As<IColumn>();
                if (((columnItem != null) 
                            && this._parent.Col.Remove(columnItem)))
                {
                    return true;
                }
                if (((columnItem != null) 
                            && this._parent.Key.Remove(columnItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Col).Concat(this._parent.Key).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Column class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc/Relational")]
    [XmlNamespacePrefixAttribute("rel")]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Column")]
    [DebuggerDisplayAttribute("Column {Name}")]
    public partial class Column : Named, IColumn, IModelElement
    {
        
        private static Lazy<ITypedElement> _ownerReference = new Lazy<ITypedElement>(RetrieveOwnerReference);
        
        private static Lazy<ITypedElement> _keyOfReference = new Lazy<ITypedElement>(RetrieveKeyOfReference);
        
        /// <summary>
        /// The backing field for the KeyOf property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITable _keyOf;
        
        private static Lazy<ITypedElement> _typeReference = new Lazy<ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TemporaryGeneratedCode.Relational.IType _type;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The owner property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owner")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("col")]
        public ITable Owner
        {
            get
            {
                return ModelHelper.CastAs<ITable>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The keyOf property
        /// </summary>
        [DisplayNameAttribute("keyOf")]
        [CategoryAttribute("Column")]
        [XmlElementNameAttribute("keyOf")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("key")]
        public ITable KeyOf
        {
            get
            {
                return this._keyOf;
            }
            set
            {
                if ((this._keyOf != value))
                {
                    ITable old = this._keyOf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKeyOfChanging(e);
                    this.OnPropertyChanging("KeyOf", e, _keyOfReference);
                    this._keyOf = value;
                    if ((old != null))
                    {
                        old.Key.Remove(this);
                        old.Deleted -= this.OnResetKeyOf;
                    }
                    if ((value != null))
                    {
                        value.Key.Add(this);
                        value.Deleted += this.OnResetKeyOf;
                    }
                    this.OnKeyOfChanged(e);
                    this.OnPropertyChanged("KeyOf", e, _keyOfReference);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [DisplayNameAttribute("type")]
        [CategoryAttribute("Column")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public TemporaryGeneratedCode.Relational.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    TemporaryGeneratedCode.Relational.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ColumnReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Column")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Owner property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OwnerChanging;
        
        /// <summary>
        /// Gets fired when the Owner property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OwnerChanged;
        
        /// <summary>
        /// Gets fired before the KeyOf property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> KeyOfChanging;
        
        /// <summary>
        /// Gets fired when the KeyOf property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> KeyOfChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TypeChanged;
        
        private static ITypedElement RetrieveOwnerReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Column.ClassInstance)).Resolve("owner")));
        }
        
        /// <summary>
        /// Raises the OwnerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOwnerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OwnerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITable oldOwner = ModelHelper.CastAs<ITable>(oldParent);
            ITable newOwner = ModelHelper.CastAs<ITable>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwner, newOwner);
            this.OnOwnerChanging(e);
            this.OnPropertyChanging("Owner", e, _ownerReference);
        }
        
        /// <summary>
        /// Raises the OwnerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOwnerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OwnerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITable oldOwner = ModelHelper.CastAs<ITable>(oldParent);
            ITable newOwner = ModelHelper.CastAs<ITable>(newParent);
            if ((oldOwner != null))
            {
                oldOwner.Col.Remove(this);
            }
            if ((newOwner != null))
            {
                newOwner.Col.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwner, newOwner);
            this.OnOwnerChanged(e);
            this.OnPropertyChanged("Owner", e, _ownerReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveKeyOfReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Column.ClassInstance)).Resolve("keyOf")));
        }
        
        /// <summary>
        /// Raises the KeyOfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKeyOfChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.KeyOfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KeyOfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKeyOfChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.KeyOfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the KeyOf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetKeyOf(object sender, EventArgs eventArgs)
        {
            if ((sender == this.KeyOf))
            {
                this.KeyOf = null;
            }
        }
        
        private static ITypedElement RetrieveTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Relational.Column.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Type))
            {
                this.Type = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNER"))
            {
                return this.Owner;
            }
            if ((reference == "KEYOF"))
            {
                return this.KeyOf;
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OWNER"))
            {
                this.Owner = ((ITable)(value));
                return;
            }
            if ((feature == "KEYOF"))
            {
                this.KeyOf = ((ITable)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((TemporaryGeneratedCode.Relational.IType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OWNER"))
            {
                return new OwnerProxy(this);
            }
            if ((reference == "KEYOF"))
            {
                return new KeyOfProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Column")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Column class
        /// </summary>
        public class ColumnReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Column _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ColumnReferencedElementsCollection(Column parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Owner != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.KeyOf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.OwnerChanged += this.PropagateValueChanges;
                this._parent.KeyOfChanged += this.PropagateValueChanges;
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.OwnerChanged -= this.PropagateValueChanges;
                this._parent.KeyOfChanged -= this.PropagateValueChanges;
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Owner == null))
                {
                    ITable ownerCasted = item.As<ITable>();
                    if ((ownerCasted != null))
                    {
                        this._parent.Owner = ownerCasted;
                        return;
                    }
                }
                if ((this._parent.KeyOf == null))
                {
                    ITable keyOfCasted = item.As<ITable>();
                    if ((keyOfCasted != null))
                    {
                        this._parent.KeyOf = keyOfCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    TemporaryGeneratedCode.Relational.IType typeCasted = item.As<TemporaryGeneratedCode.Relational.IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Owner = null;
                this._parent.KeyOf = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Owner))
                {
                    return true;
                }
                if ((item == this._parent.KeyOf))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Owner != null))
                {
                    array[arrayIndex] = this._parent.Owner;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.KeyOf != null))
                {
                    array[arrayIndex] = this._parent.KeyOf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Owner == item))
                {
                    this._parent.Owner = null;
                    return true;
                }
                if ((this._parent.KeyOf == item))
                {
                    this._parent.KeyOf = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Owner).Concat(this._parent.KeyOf).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owner property
        /// </summary>
        private sealed class OwnerProxy : ModelPropertyChange<IColumn, ITable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnerProxy(IColumn modelElement) : 
                    base(modelElement, "owner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITable Value
            {
                get
                {
                    return this.ModelElement.Owner;
                }
                set
                {
                    this.ModelElement.Owner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the keyOf property
        /// </summary>
        private sealed class KeyOfProxy : ModelPropertyChange<IColumn, ITable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KeyOfProxy(IColumn modelElement) : 
                    base(modelElement, "keyOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITable Value
            {
                get
                {
                    return this.ModelElement.KeyOf;
                }
                set
                {
                    this.ModelElement.KeyOf = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IColumn, TemporaryGeneratedCode.Relational.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IColumn modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override TemporaryGeneratedCode.Relational.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Type class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc/Relational")]
    [XmlNamespacePrefixAttribute("rel")]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Type")]
    [DebuggerDisplayAttribute("Type {Name}")]
    public partial class Type : Named, TemporaryGeneratedCode.Relational.IType, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Type")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Relational#//Type")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The public interface for Type
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Type))]
    [XmlDefaultImplementationTypeAttribute(typeof(Type))]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Type")]
    public interface IType : IModelElement, INamed
    {
    }
    
    /// <summary>
    /// The public interface for Column
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Column))]
    [XmlDefaultImplementationTypeAttribute(typeof(Column))]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Column")]
    public interface IColumn : IModelElement, INamed
    {
        
        /// <summary>
        /// The owner property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owner")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("col")]
        ITable Owner
        {
            get;
            set;
        }
        
        /// <summary>
        /// The keyOf property
        /// </summary>
        [DisplayNameAttribute("keyOf")]
        [CategoryAttribute("Column")]
        [XmlElementNameAttribute("keyOf")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("key")]
        ITable KeyOf
        {
            get;
            set;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [DisplayNameAttribute("type")]
        [CategoryAttribute("Column")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        TemporaryGeneratedCode.Relational.IType Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Owner property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OwnerChanging;
        
        /// <summary>
        /// Gets fired when the Owner property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OwnerChanged;
        
        /// <summary>
        /// Gets fired before the KeyOf property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> KeyOfChanging;
        
        /// <summary>
        /// Gets fired when the KeyOf property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> KeyOfChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TypeChanged;
    }
    
    /// <summary>
    /// Denotes a class to implement the col reference
    /// </summary>
    public class TableColCollection : ObservableOppositeOrderedSet<ITable, IColumn>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Table</param>
        public TableColCollection(ITable parent) : 
                base(parent)
        {
        }
        
        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((IColumn)(sender)));
            }
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(IColumn item, ITable newParent)
        {
            if ((newParent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.Owner = newParent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.Owner == this.Parent))
                {
                    item.Owner = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// Denotes a class to implement the key reference
    /// </summary>
    public class TableKeyCollection : ObservableOppositeSet<ITable, IColumn>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Table</param>
        public TableKeyCollection(ITable parent) : 
                base(parent)
        {
        }
        
        private void OnItemDeleted(object sender, EventArgs e)
        {
            this.Remove(((IColumn)(sender)));
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(IColumn item, ITable newParent)
        {
            if ((newParent != null))
            {
                item.Deleted += this.OnItemDeleted;
                item.KeyOf = newParent;
            }
            else
            {
                item.Deleted -= this.OnItemDeleted;
                if ((item.KeyOf == this.Parent))
                {
                    item.KeyOf = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Table
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Table))]
    [XmlDefaultImplementationTypeAttribute(typeof(Table))]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Table")]
    public interface ITable : IModelElement, INamed
    {
        
        /// <summary>
        /// The col property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("col")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owner")]
        [ConstantAttribute()]
        IOrderedSetExpression<IColumn> Col
        {
            get;
        }
        
        /// <summary>
        /// The key property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("key")]
        [CategoryAttribute("Table")]
        [XmlElementNameAttribute("key")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("keyOf")]
        [ConstantAttribute()]
        ISetExpression<IColumn> Key
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Named
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Named))]
    [XmlDefaultImplementationTypeAttribute(typeof(Named))]
    [ModelRepresentationClassAttribute("http://ttc/Relational#//Named")]
    public interface INamed : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Named")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanging;
    }
}
