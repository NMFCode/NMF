//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    
    
    /// <summary>
    /// The default implementation of the ClassA class
    /// </summary>
    [XmlNamespaceAttribute("test")]
    [XmlNamespacePrefixAttribute("test")]
    public partial class ClassA : ModelElement, IClassA, IModelElement
    {
        
        private static System.Lazy<IOperation> _foo01Operation = new System.Lazy<IOperation>(RetrieveFoo01Operation);
        
        private static System.Lazy<IOperation> _foo02Operation = new System.Lazy<IOperation>(RetrieveFoo02Operation);
        
        private static System.Lazy<IOperation> _foo03Operation = new System.Lazy<IOperation>(RetrieveFoo03Operation);
        
        /// <summary>
        /// The backing field for the Attr01 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _attr01 = "default_value";
        
        private static Lazy<ITypedElement> _attr01Attribute = new Lazy<ITypedElement>(RetrieveAttr01Attribute);
        
        private static Lazy<ITypedElement> _attr02Reference = new Lazy<ITypedElement>(RetrieveAttr02Reference);
        
        /// <summary>
        /// The backing field for the Attr02 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassB _attr02;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The attr01 property
        /// </summary>
        [DefaultValueAttribute("default_value")]
        [DisplayNameAttribute("attr01")]
        [CategoryAttribute("ClassA")]
        [XmlElementNameAttribute("attr01")]
        [XmlAttributeAttribute(true)]
        public string Attr01
        {
            get
            {
                return this._attr01;
            }
            set
            {
                if ((this._attr01 != value))
                {
                    string old = this._attr01;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAttr01Changing(e);
                    this.OnPropertyChanging("Attr01", e, _attr01Attribute);
                    this._attr01 = value;
                    this.OnAttr01Changed(e);
                    this.OnPropertyChanged("Attr01", e, _attr01Attribute);
                }
            }
        }
        
        /// <summary>
        /// The attr02 property
        /// </summary>
        [DisplayNameAttribute("attr02")]
        [CategoryAttribute("ClassA")]
        [XmlElementNameAttribute("attr02")]
        [XmlAttributeAttribute(true)]
        public IClassB Attr02
        {
            get
            {
                return this._attr02;
            }
            set
            {
                if ((this._attr02 != value))
                {
                    IClassB old = this._attr02;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAttr02Changing(e);
                    this.OnPropertyChanging("Attr02", e, _attr02Reference);
                    this._attr02 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAttr02;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAttr02;
                    }
                    this.OnAttr02Changed(e);
                    this.OnPropertyChanged("Attr02", e, _attr02Reference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassAReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired before the operation foo01 gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo01Calling;
        
        /// <summary>
        /// Gets fired after the operation foo01 got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo01Called;
        
        /// <summary>
        /// Gets fired before the operation foo02 gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo02Calling;
        
        /// <summary>
        /// Gets fired after the operation foo02 got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo02Called;
        
        /// <summary>
        /// Gets fired before the operation foo03 gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo03Calling;
        
        /// <summary>
        /// Gets fired after the operation foo03 got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Foo03Called;
        
        /// <summary>
        /// Gets fired when the Attr01 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr01Changed;
        
        /// <summary>
        /// Gets fired before the Attr01 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr01Changing;
        
        /// <summary>
        /// Gets fired before the Attr02 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr02Changing;
        
        /// <summary>
        /// Gets fired when the Attr02 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr02Changed;
        
        /// <summary>
        /// 
        /// </summary>
        public string Foo01()
        {
            System.Func<IClassA, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassA, string>>(_foo01Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method foo01 registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _foo01Operation.Value);
            this.OnFoo01Calling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _foo01Operation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnFoo01Called(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _foo01Operation.Value, e));
            return result;
        }
        
        private static IOperation RetrieveFoo01Operation()
        {
            return ClassInstance.LookupOperation("foo01");
        }
        
        /// <summary>
        /// Raises the Foo01Calling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo01Calling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo01Calling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Foo01Called event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo01Called(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo01Called;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public int Foo02()
        {
            System.Func<IClassA, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassA, int>>(_foo02Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method foo02 registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _foo02Operation.Value);
            this.OnFoo02Calling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _foo02Operation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnFoo02Called(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _foo02Operation.Value, e));
            return result;
        }
        
        private static IOperation RetrieveFoo02Operation()
        {
            return ClassInstance.LookupOperation("foo02");
        }
        
        /// <summary>
        /// Raises the Foo02Calling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo02Calling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo02Calling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Foo02Called event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo02Called(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo02Called;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public IClassB Foo03()
        {
            System.Func<IClassA, IClassB> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassA, IClassB>>(_foo03Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method foo03 registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _foo03Operation.Value);
            this.OnFoo03Calling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _foo03Operation.Value, e));
            IClassB result = handler.Invoke(this);
            e.Result = result;
            this.OnFoo03Called(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _foo03Operation.Value, e));
            return result;
        }
        
        private static IOperation RetrieveFoo03Operation()
        {
            return ClassInstance.LookupOperation("foo03");
        }
        
        /// <summary>
        /// Raises the Foo03Calling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo03Calling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo03Calling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Foo03Called event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFoo03Called(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Foo03Called;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAttr01Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Test.ClassA.ClassInstance)).Resolve("attr01")));
        }
        
        /// <summary>
        /// Raises the Attr01Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr01Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr01Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Attr01Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr01Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr01Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAttr02Reference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Test.ClassA.ClassInstance)).Resolve("attr02")));
        }
        
        /// <summary>
        /// Raises the Attr02Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr02Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr02Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Attr02Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr02Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr02Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Attr02 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAttr02(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Attr02))
            {
                this.Attr02 = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ATTR02"))
            {
                return this.Attr02;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ATTR01"))
            {
                return this.Attr01;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ATTR02"))
            {
                this.Attr02 = ((IClassB)(value));
                return;
            }
            if ((feature == "ATTR01"))
            {
                this.Attr01 = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ATTR01"))
            {
                return new Attr01Proxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ATTR02"))
            {
                return new Attr02Proxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("ClassA does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassA class
        /// </summary>
        public class ClassAReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassA _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassAReferencedElementsCollection(ClassA parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Attr02 != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Attr02Changed += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Attr02Changed -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Attr02 == null))
                {
                    IClassB attr02Casted = item.As<IClassB>();
                    if ((attr02Casted != null))
                    {
                        this._parent.Attr02 = attr02Casted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Attr02 = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Attr02))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Attr02 != null))
                {
                    array[arrayIndex] = this._parent.Attr02;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Attr02 == item))
                {
                    this._parent.Attr02 = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Attr02).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the attr01 property
        /// </summary>
        private sealed class Attr01Proxy : ModelPropertyChange<IClassA, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Attr01Proxy(IClassA modelElement) : 
                    base(modelElement, "attr01")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Attr01;
                }
                set
                {
                    this.ModelElement.Attr01 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the attr02 property
        /// </summary>
        private sealed class Attr02Proxy : ModelPropertyChange<IClassA, IClassB>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Attr02Proxy(IClassA modelElement) : 
                    base(modelElement, "attr02")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassB Value
            {
                get
                {
                    return this.ModelElement.Attr02;
                }
                set
                {
                    this.ModelElement.Attr02 = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ClassB class
    /// </summary>
    [XmlNamespaceAttribute("test")]
    [XmlNamespacePrefixAttribute("test")]
    public partial class ClassB : ModelElement, IClassB, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Attr01 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _attr01;
        
        private static Lazy<ITypedElement> _attr01Attribute = new Lazy<ITypedElement>(RetrieveAttr01Attribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The attr01 property
        /// </summary>
        [DisplayNameAttribute("attr01")]
        [CategoryAttribute("ClassB")]
        [XmlElementNameAttribute("attr01")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Attr01
        {
            get
            {
                return this._attr01;
            }
            set
            {
                if ((this._attr01 != value))
                {
                    Nullable<int> old = this._attr01;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAttr01Changing(e);
                    this.OnPropertyChanging("Attr01", e, _attr01Attribute);
                    this._attr01 = value;
                    this.OnAttr01Changed(e);
                    this.OnPropertyChanged("Attr01", e, _attr01Attribute);
                }
            }
        }
        
        /// <summary>
        /// Gets fired when the Attr01 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr01Changed;
        
        /// <summary>
        /// Gets fired before the Attr01 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Attr01Changing;
        
        private static ITypedElement RetrieveAttr01Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Test.ClassB.ClassInstance)).Resolve("attr01")));
        }
        
        /// <summary>
        /// Raises the Attr01Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr01Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr01Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Attr01Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttr01Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Attr01Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ATTR01"))
            {
                return this.Attr01;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ATTR01"))
            {
                this.Attr01 = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ATTR01"))
            {
                return Observable.Box(new Attr01Proxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("ClassB does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the attr01 property
        /// </summary>
        private sealed class Attr01Proxy : ModelPropertyChange<IClassB, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Attr01Proxy(IClassB modelElement) : 
                    base(modelElement, "attr01")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Attr01;
                }
                set
                {
                    this.ModelElement.Attr01 = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for ClassB
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ClassB))]
    [XmlDefaultImplementationTypeAttribute(typeof(ClassB))]
    public interface IClassB : IModelElement
    {
        
        /// <summary>
        /// The attr01 property
        /// </summary>
        [DisplayNameAttribute("attr01")]
        [CategoryAttribute("ClassB")]
        [XmlElementNameAttribute("attr01")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Attr01
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Attr01 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr01Changed;
        
        /// <summary>
        /// Gets fired before the Attr01 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr01Changing;
    }
    
    /// <summary>
    /// The public interface for ClassA
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ClassA))]
    [XmlDefaultImplementationTypeAttribute(typeof(ClassA))]
    public interface IClassA : IModelElement
    {
        
        /// <summary>
        /// The attr01 property
        /// </summary>
        [DefaultValueAttribute("default_value")]
        [DisplayNameAttribute("attr01")]
        [CategoryAttribute("ClassA")]
        [XmlElementNameAttribute("attr01")]
        [XmlAttributeAttribute(true)]
        string Attr01
        {
            get;
            set;
        }
        
        /// <summary>
        /// The attr02 property
        /// </summary>
        [DisplayNameAttribute("attr02")]
        [CategoryAttribute("ClassA")]
        [XmlElementNameAttribute("attr02")]
        [XmlAttributeAttribute(true)]
        IClassB Attr02
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation foo01 gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo01Calling;
        
        /// <summary>
        /// Gets fired after the operation foo01 got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo01Called;
        
        /// <summary>
        /// Gets fired before the operation foo02 gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo02Calling;
        
        /// <summary>
        /// Gets fired after the operation foo02 got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo02Called;
        
        /// <summary>
        /// Gets fired before the operation foo03 gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo03Calling;
        
        /// <summary>
        /// Gets fired after the operation foo03 got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Foo03Called;
        
        /// <summary>
        /// Gets fired when the Attr01 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr01Changed;
        
        /// <summary>
        /// Gets fired before the Attr01 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr01Changing;
        
        /// <summary>
        /// Gets fired before the Attr02 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr02Changing;
        
        /// <summary>
        /// Gets fired when the Attr02 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Attr02Changed;
        
        /// <summary>
        /// 
        /// </summary>
        string Foo01();
        
        /// <summary>
        /// 
        /// </summary>
        int Foo02();
        
        /// <summary>
        /// 
        /// </summary>
        IClassB Foo03();
    }
}
