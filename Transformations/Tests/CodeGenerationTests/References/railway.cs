//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.Railway
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the Segment class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Segment")]
    public partial class Segment : TrackElement, ISegment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Length property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private int _length;
        
        private static Lazy<ITypedElement> _lengthAttribute = new Lazy<ITypedElement>(RetrieveLengthAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The length property
        /// </summary>
        [DisplayNameAttribute("length")]
        [CategoryAttribute("Segment")]
        [XmlElementNameAttribute("length")]
        [XmlAttributeAttribute(true)]
        public int Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    int old = this._length;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Length", e, _lengthAttribute);
                    this._length = value;
                    this.OnPropertyChanged("Length", e, _lengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Segment")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Segment.ClassInstance)).Resolve("length")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LENGTH"))
            {
                return this.Length;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LENGTH"))
            {
                this.Length = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LENGTH"))
            {
                return Observable.Box(new LengthProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Segment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the length property
        /// </summary>
        private sealed class LengthProxy : ModelPropertyChange<ISegment, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LengthProxy(ISegment modelElement) : 
                    base(modelElement, "length")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Length;
                }
                set
                {
                    this.ModelElement.Length = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the TrackElement class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//TrackElement")]
    public abstract partial class TrackElement : RailwayElement, ITrackElement, IModelElement
    {
        
        private static Lazy<ITypedElement> _sensorReference = new Lazy<ITypedElement>(RetrieveSensorReference);
        
        private static Lazy<ITypedElement> _connectsToReference = new Lazy<ITypedElement>(RetrieveConnectsToReference);
        
        /// <summary>
        /// The backing field for the ConnectsTo property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<ITrackElement> _connectsTo;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public TrackElement()
        {
            this._connectsTo = new ObservableAssociationOrderedSet<ITrackElement>();
            this._connectsTo.CollectionChanging += this.ConnectsToCollectionChanging;
            this._connectsTo.CollectionChanged += this.ConnectsToCollectionChanged;
        }
        
        /// <summary>
        /// The sensor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sensor")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("elements")]
        public ISensor Sensor
        {
            get
            {
                return ModelHelper.CastAs<ISensor>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The connectsTo property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("connectsTo")]
        [CategoryAttribute("TrackElement")]
        [XmlElementNameAttribute("connectsTo")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITrackElement> ConnectsTo
        {
            get
            {
                return this._connectsTo;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TrackElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//TrackElement")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveSensorReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.TrackElement.ClassInstance)).Resolve("sensor")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ISensor oldSensor = ModelHelper.CastAs<ISensor>(oldParent);
            ISensor newSensor = ModelHelper.CastAs<ISensor>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSensor, newSensor);
            this.OnPropertyChanging("Sensor", e, _sensorReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ISensor oldSensor = ModelHelper.CastAs<ISensor>(oldParent);
            ISensor newSensor = ModelHelper.CastAs<ISensor>(newParent);
            if ((oldSensor != null))
            {
                oldSensor.Elements.Remove(this);
            }
            if ((newSensor != null))
            {
                newSensor.Elements.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSensor, newSensor);
            this.OnPropertyChanged("Sensor", e, _sensorReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveConnectsToReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.TrackElement.ClassInstance)).Resolve("connectsTo")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConnectsTo property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectsToCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConnectsTo", e, _connectsToReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConnectsTo property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectsToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConnectsTo", e, _connectsToReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SENSOR"))
            {
                return this.Sensor;
            }
            if ((reference == "CONNECTSTO"))
            {
                if ((index < this.ConnectsTo.Count))
                {
                    return this.ConnectsTo[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONNECTSTO"))
            {
                return this._connectsTo;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SENSOR"))
            {
                this.Sensor = ((ISensor)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SENSOR"))
            {
                return new SensorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//TrackElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TrackElement class
        /// </summary>
        public class TrackElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TrackElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TrackElementReferencedElementsCollection(TrackElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Sensor != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConnectsTo.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.ConnectsTo.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.ConnectsTo.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Sensor == null))
                {
                    ISensor sensorCasted = item.As<ISensor>();
                    if ((sensorCasted != null))
                    {
                        this._parent.Sensor = sensorCasted;
                        return;
                    }
                }
                ITrackElement connectsToCasted = item.As<ITrackElement>();
                if ((connectsToCasted != null))
                {
                    this._parent.ConnectsTo.Add(connectsToCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Sensor = null;
                this._parent.ConnectsTo.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Sensor))
                {
                    return true;
                }
                if (this._parent.ConnectsTo.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Sensor != null))
                {
                    array[arrayIndex] = this._parent.Sensor;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> connectsToEnumerator = this._parent.ConnectsTo.GetEnumerator();
                try
                {
                    for (
                    ; connectsToEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectsToEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectsToEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Sensor == item))
                {
                    this._parent.Sensor = null;
                    return true;
                }
                ITrackElement trackElementItem = item.As<ITrackElement>();
                if (((trackElementItem != null) 
                            && this._parent.ConnectsTo.Remove(trackElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Sensor).Concat(this._parent.ConnectsTo).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sensor property
        /// </summary>
        private sealed class SensorProxy : ModelPropertyChange<ITrackElement, ISensor>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensorProxy(ITrackElement modelElement) : 
                    base(modelElement, "sensor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISensor Value
            {
                get
                {
                    return this.ModelElement.Sensor;
                }
                set
                {
                    this.ModelElement.Sensor = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Switch class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")]
    public partial class Switch : TrackElement, ISwitch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CurrentPosition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Position _currentPosition;
        
        private static Lazy<ITypedElement> _currentPositionAttribute = new Lazy<ITypedElement>(RetrieveCurrentPositionAttribute);
        
        private static Lazy<ITypedElement> _positionsReference = new Lazy<ITypedElement>(RetrievePositionsReference);
        
        /// <summary>
        /// The backing field for the Positions property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private SwitchPositionsCollection _positions;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Switch()
        {
            this._positions = new SwitchPositionsCollection(this);
            this._positions.CollectionChanging += this.PositionsCollectionChanging;
            this._positions.CollectionChanged += this.PositionsCollectionChanged;
        }
        
        /// <summary>
        /// The currentPosition property
        /// </summary>
        [DisplayNameAttribute("currentPosition")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("currentPosition")]
        [XmlAttributeAttribute(true)]
        public Position CurrentPosition
        {
            get
            {
                return this._currentPosition;
            }
            set
            {
                if ((this._currentPosition != value))
                {
                    Position old = this._currentPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("CurrentPosition", e, _currentPositionAttribute);
                    this._currentPosition = value;
                    this.OnPropertyChanged("CurrentPosition", e, _currentPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The positions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("positions")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("positions")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("switch")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISwitchPosition> Positions
        {
            get
            {
                return this._positions;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveCurrentPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Switch.ClassInstance)).Resolve("currentPosition")));
        }
        
        private static ITypedElement RetrievePositionsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Switch.ClassInstance)).Resolve("positions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Positions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Positions", e, _positionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Positions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Positions", e, _positionsReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "POSITIONS"))
            {
                if ((index < this.Positions.Count))
                {
                    return this.Positions[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CURRENTPOSITION"))
            {
                return this.CurrentPosition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POSITIONS"))
            {
                return this._positions;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CURRENTPOSITION"))
            {
                this.CurrentPosition = ((Position)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CURRENTPOSITION"))
            {
                return Observable.Box(new CurrentPositionProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchReferencedElementsCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Positions.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchPosition positionsCasted = item.As<ISwitchPosition>();
                if ((positionsCasted != null))
                {
                    this._parent.Positions.Add(positionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Positions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Positions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> positionsEnumerator = this._parent.Positions.GetEnumerator();
                try
                {
                    for (
                    ; positionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = positionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    positionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchPosition switchPositionItem = item.As<ISwitchPosition>();
                if (((switchPositionItem != null) 
                            && this._parent.Positions.Remove(switchPositionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Positions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentPosition property
        /// </summary>
        private sealed class CurrentPositionProxy : ModelPropertyChange<ISwitch, Position>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentPositionProxy(ISwitch modelElement) : 
                    base(modelElement, "currentPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Position Value
            {
                get
                {
                    return this.ModelElement.CurrentPosition;
                }
                set
                {
                    this.ModelElement.CurrentPosition = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Route class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Route")]
    public partial class Route : RailwayElement, IRoute, IModelElement
    {
        
        private static Lazy<ITypedElement> _entryReference = new Lazy<ITypedElement>(RetrieveEntryReference);
        
        /// <summary>
        /// The backing field for the Entry property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISemaphore _entry;
        
        private static Lazy<ITypedElement> _followsReference = new Lazy<ITypedElement>(RetrieveFollowsReference);
        
        /// <summary>
        /// The backing field for the Follows property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private RouteFollowsCollection _follows;
        
        private static Lazy<ITypedElement> _exitReference = new Lazy<ITypedElement>(RetrieveExitReference);
        
        /// <summary>
        /// The backing field for the Exit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISemaphore _exit;
        
        private static Lazy<ITypedElement> _definedByReference = new Lazy<ITypedElement>(RetrieveDefinedByReference);
        
        /// <summary>
        /// The backing field for the DefinedBy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ISensor> _definedBy;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Route()
        {
            this._follows = new RouteFollowsCollection(this);
            this._follows.CollectionChanging += this.FollowsCollectionChanging;
            this._follows.CollectionChanged += this.FollowsCollectionChanged;
            this._definedBy = new ObservableCompositionOrderedSet<ISensor>(this);
            this._definedBy.CollectionChanging += this.DefinedByCollectionChanging;
            this._definedBy.CollectionChanged += this.DefinedByCollectionChanged;
        }
        
        /// <summary>
        /// The entry property
        /// </summary>
        [DisplayNameAttribute("entry")]
        [CategoryAttribute("Route")]
        [XmlElementNameAttribute("entry")]
        [XmlAttributeAttribute(true)]
        public ISemaphore Entry
        {
            get
            {
                return this._entry;
            }
            set
            {
                if ((this._entry != value))
                {
                    ISemaphore old = this._entry;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Entry", e, _entryReference);
                    this._entry = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEntry;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEntry;
                    }
                    this.OnPropertyChanged("Entry", e, _entryReference);
                }
            }
        }
        
        /// <summary>
        /// The follows property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("follows")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("route")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISwitchPosition> Follows
        {
            get
            {
                return this._follows;
            }
        }
        
        /// <summary>
        /// The exit property
        /// </summary>
        [DisplayNameAttribute("exit")]
        [CategoryAttribute("Route")]
        [XmlElementNameAttribute("exit")]
        [XmlAttributeAttribute(true)]
        public ISemaphore Exit
        {
            get
            {
                return this._exit;
            }
            set
            {
                if ((this._exit != value))
                {
                    ISemaphore old = this._exit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Exit", e, _exitReference);
                    this._exit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetExit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetExit;
                    }
                    this.OnPropertyChanged("Exit", e, _exitReference);
                }
            }
        }
        
        /// <summary>
        /// The definedBy property
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("definedBy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISensor> DefinedBy
        {
            get
            {
                return this._definedBy;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RouteChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RouteReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Route")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveEntryReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Route.ClassInstance)).Resolve("entry")));
        }
        
        /// <summary>
        /// Handles the event that the Entry property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEntry(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Entry))
            {
                this.Entry = null;
            }
        }
        
        private static ITypedElement RetrieveFollowsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Route.ClassInstance)).Resolve("follows")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Follows property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FollowsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Follows", e, _followsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Follows property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FollowsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Follows", e, _followsReference);
        }
        
        private static ITypedElement RetrieveExitReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Route.ClassInstance)).Resolve("exit")));
        }
        
        /// <summary>
        /// Handles the event that the Exit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExit(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Exit))
            {
                this.Exit = null;
            }
        }
        
        private static ITypedElement RetrieveDefinedByReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Route.ClassInstance)).Resolve("definedBy")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DefinedBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DefinedByCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DefinedBy", e, _definedByReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DefinedBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DefinedByCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DefinedBy", e, _definedByReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int followsIndex = ModelHelper.IndexOfReference(this.Follows, element);
            if ((followsIndex != -1))
            {
                return ModelHelper.CreatePath("follows", followsIndex);
            }
            int definedByIndex = ModelHelper.IndexOfReference(this.DefinedBy, element);
            if ((definedByIndex != -1))
            {
                return ModelHelper.CreatePath("definedBy", definedByIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ENTRY"))
            {
                return this.Entry;
            }
            if ((reference == "FOLLOWS"))
            {
                if ((index < this.Follows.Count))
                {
                    return this.Follows[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "EXIT"))
            {
                return this.Exit;
            }
            if ((reference == "DEFINEDBY"))
            {
                if ((index < this.DefinedBy.Count))
                {
                    return this.DefinedBy[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FOLLOWS"))
            {
                return this._follows;
            }
            if ((feature == "DEFINEDBY"))
            {
                return this._definedBy;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENTRY"))
            {
                this.Entry = ((ISemaphore)(value));
                return;
            }
            if ((feature == "EXIT"))
            {
                this.Exit = ((ISemaphore)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ENTRY"))
            {
                return new EntryProxy(this);
            }
            if ((reference == "EXIT"))
            {
                return new ExitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._follows))
            {
                return "follows";
            }
            if ((container == this._definedBy))
            {
                return "definedBy";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Route")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Route class
        /// </summary>
        public class RouteChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Route _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RouteChildrenCollection(Route parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Follows.Count);
                    count = (count + this._parent.DefinedBy.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Follows.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DefinedBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Follows.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DefinedBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchPosition followsCasted = item.As<ISwitchPosition>();
                if ((followsCasted != null))
                {
                    this._parent.Follows.Add(followsCasted);
                }
                ISensor definedByCasted = item.As<ISensor>();
                if ((definedByCasted != null))
                {
                    this._parent.DefinedBy.Add(definedByCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Follows.Clear();
                this._parent.DefinedBy.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Follows.Contains(item))
                {
                    return true;
                }
                if (this._parent.DefinedBy.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> followsEnumerator = this._parent.Follows.GetEnumerator();
                try
                {
                    for (
                    ; followsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = followsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    followsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> definedByEnumerator = this._parent.DefinedBy.GetEnumerator();
                try
                {
                    for (
                    ; definedByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = definedByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    definedByEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchPosition switchPositionItem = item.As<ISwitchPosition>();
                if (((switchPositionItem != null) 
                            && this._parent.Follows.Remove(switchPositionItem)))
                {
                    return true;
                }
                ISensor sensorItem = item.As<ISensor>();
                if (((sensorItem != null) 
                            && this._parent.DefinedBy.Remove(sensorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Follows).Concat(this._parent.DefinedBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Route class
        /// </summary>
        public class RouteReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Route _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RouteReferencedElementsCollection(Route parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Entry != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Follows.Count);
                    if ((this._parent.Exit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DefinedBy.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Follows.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.DefinedBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Follows.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.DefinedBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Entry == null))
                {
                    ISemaphore entryCasted = item.As<ISemaphore>();
                    if ((entryCasted != null))
                    {
                        this._parent.Entry = entryCasted;
                        return;
                    }
                }
                ISwitchPosition followsCasted = item.As<ISwitchPosition>();
                if ((followsCasted != null))
                {
                    this._parent.Follows.Add(followsCasted);
                }
                if ((this._parent.Exit == null))
                {
                    ISemaphore exitCasted = item.As<ISemaphore>();
                    if ((exitCasted != null))
                    {
                        this._parent.Exit = exitCasted;
                        return;
                    }
                }
                ISensor definedByCasted = item.As<ISensor>();
                if ((definedByCasted != null))
                {
                    this._parent.DefinedBy.Add(definedByCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Entry = null;
                this._parent.Follows.Clear();
                this._parent.Exit = null;
                this._parent.DefinedBy.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Entry))
                {
                    return true;
                }
                if (this._parent.Follows.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Exit))
                {
                    return true;
                }
                if (this._parent.DefinedBy.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Entry != null))
                {
                    array[arrayIndex] = this._parent.Entry;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> followsEnumerator = this._parent.Follows.GetEnumerator();
                try
                {
                    for (
                    ; followsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = followsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    followsEnumerator.Dispose();
                }
                if ((this._parent.Exit != null))
                {
                    array[arrayIndex] = this._parent.Exit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> definedByEnumerator = this._parent.DefinedBy.GetEnumerator();
                try
                {
                    for (
                    ; definedByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = definedByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    definedByEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Entry == item))
                {
                    this._parent.Entry = null;
                    return true;
                }
                ISwitchPosition switchPositionItem = item.As<ISwitchPosition>();
                if (((switchPositionItem != null) 
                            && this._parent.Follows.Remove(switchPositionItem)))
                {
                    return true;
                }
                if ((this._parent.Exit == item))
                {
                    this._parent.Exit = null;
                    return true;
                }
                ISensor sensorItem = item.As<ISensor>();
                if (((sensorItem != null) 
                            && this._parent.DefinedBy.Remove(sensorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Entry).Concat(this._parent.Follows).Concat(this._parent.Exit).Concat(this._parent.DefinedBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entry property
        /// </summary>
        private sealed class EntryProxy : ModelPropertyChange<IRoute, ISemaphore>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntryProxy(IRoute modelElement) : 
                    base(modelElement, "entry")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISemaphore Value
            {
                get
                {
                    return this.ModelElement.Entry;
                }
                set
                {
                    this.ModelElement.Entry = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the exit property
        /// </summary>
        private sealed class ExitProxy : ModelPropertyChange<IRoute, ISemaphore>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExitProxy(IRoute modelElement) : 
                    base(modelElement, "exit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISemaphore Value
            {
                get
                {
                    return this.ModelElement.Exit;
                }
                set
                {
                    this.ModelElement.Exit = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Semaphore class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Semaphore")]
    public partial class Semaphore : RailwayElement, ISemaphore, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Signal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Signal _signal;
        
        private static Lazy<ITypedElement> _signalAttribute = new Lazy<ITypedElement>(RetrieveSignalAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The signal property
        /// </summary>
        [DisplayNameAttribute("signal")]
        [CategoryAttribute("Semaphore")]
        [XmlElementNameAttribute("signal")]
        [XmlAttributeAttribute(true)]
        public Signal Signal
        {
            get
            {
                return this._signal;
            }
            set
            {
                if ((this._signal != value))
                {
                    Signal old = this._signal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Signal", e, _signalAttribute);
                    this._signal = value;
                    this.OnPropertyChanged("Signal", e, _signalAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Semaphore")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveSignalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Semaphore.ClassInstance)).Resolve("signal")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SIGNAL"))
            {
                return this.Signal;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SIGNAL"))
            {
                this.Signal = ((Signal)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SIGNAL"))
            {
                return Observable.Box(new SignalProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Semaphore")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the signal property
        /// </summary>
        private sealed class SignalProxy : ModelPropertyChange<ISemaphore, Signal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SignalProxy(ISemaphore modelElement) : 
                    base(modelElement, "signal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Signal Value
            {
                get
                {
                    return this.ModelElement.Signal;
                }
                set
                {
                    this.ModelElement.Signal = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the SwitchPosition class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//SwitchPosition")]
    public partial class SwitchPosition : RailwayElement, ISwitchPosition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Position property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Position _position;
        
        private static Lazy<ITypedElement> _positionAttribute = new Lazy<ITypedElement>(RetrievePositionAttribute);
        
        private static Lazy<ITypedElement> _switchReference = new Lazy<ITypedElement>(RetrieveSwitchReference);
        
        /// <summary>
        /// The backing field for the Switch property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISwitch _switch;
        
        private static Lazy<ITypedElement> _routeReference = new Lazy<ITypedElement>(RetrieveRouteReference);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The position property
        /// </summary>
        [DisplayNameAttribute("position")]
        [CategoryAttribute("SwitchPosition")]
        [XmlElementNameAttribute("position")]
        [XmlAttributeAttribute(true)]
        public Position Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    Position old = this._position;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Position", e, _positionAttribute);
                    this._position = value;
                    this.OnPropertyChanged("Position", e, _positionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switch property
        /// </summary>
        [DisplayNameAttribute("switch")]
        [CategoryAttribute("SwitchPosition")]
        [XmlElementNameAttribute("switch")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("positions")]
        public ISwitch Switch
        {
            get
            {
                return this._switch;
            }
            set
            {
                if ((this._switch != value))
                {
                    ISwitch old = this._switch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Switch", e, _switchReference);
                    this._switch = value;
                    if ((old != null))
                    {
                        old.Positions.Remove(this);
                        old.Deleted -= this.OnResetSwitch;
                    }
                    if ((value != null))
                    {
                        value.Positions.Add(this);
                        value.Deleted += this.OnResetSwitch;
                    }
                    this.OnPropertyChanged("Switch", e, _switchReference);
                }
            }
        }
        
        /// <summary>
        /// The route property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("route")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("follows")]
        public IRoute Route
        {
            get
            {
                return ModelHelper.CastAs<IRoute>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchPositionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//SwitchPosition")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrievePositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.SwitchPosition.ClassInstance)).Resolve("position")));
        }
        
        private static ITypedElement RetrieveSwitchReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.SwitchPosition.ClassInstance)).Resolve("switch")));
        }
        
        /// <summary>
        /// Handles the event that the Switch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwitch(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Switch))
            {
                this.Switch = null;
            }
        }
        
        private static ITypedElement RetrieveRouteReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.SwitchPosition.ClassInstance)).Resolve("route")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IRoute oldRoute = ModelHelper.CastAs<IRoute>(oldParent);
            IRoute newRoute = ModelHelper.CastAs<IRoute>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRoute, newRoute);
            this.OnPropertyChanging("Route", e, _routeReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRoute oldRoute = ModelHelper.CastAs<IRoute>(oldParent);
            IRoute newRoute = ModelHelper.CastAs<IRoute>(newParent);
            if ((oldRoute != null))
            {
                oldRoute.Follows.Remove(this);
            }
            if ((newRoute != null))
            {
                newRoute.Follows.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRoute, newRoute);
            this.OnPropertyChanged("Route", e, _routeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SWITCH"))
            {
                return this.Switch;
            }
            if ((reference == "ROUTE"))
            {
                return this.Route;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POSITION"))
            {
                return this.Position;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SWITCH"))
            {
                this.Switch = ((ISwitch)(value));
                return;
            }
            if ((feature == "ROUTE"))
            {
                this.Route = ((IRoute)(value));
                return;
            }
            if ((feature == "POSITION"))
            {
                this.Position = ((Position)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "POSITION"))
            {
                return Observable.Box(new PositionProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SWITCH"))
            {
                return new SwitchProxy(this);
            }
            if ((reference == "ROUTE"))
            {
                return new RouteProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//SwitchPosition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SwitchPosition class
        /// </summary>
        public class SwitchPositionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SwitchPosition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchPositionReferencedElementsCollection(SwitchPosition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Switch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Route != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Switch == null))
                {
                    ISwitch switchCasted = item.As<ISwitch>();
                    if ((switchCasted != null))
                    {
                        this._parent.Switch = switchCasted;
                        return;
                    }
                }
                if ((this._parent.Route == null))
                {
                    IRoute routeCasted = item.As<IRoute>();
                    if ((routeCasted != null))
                    {
                        this._parent.Route = routeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Switch = null;
                this._parent.Route = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Switch))
                {
                    return true;
                }
                if ((item == this._parent.Route))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Switch != null))
                {
                    array[arrayIndex] = this._parent.Switch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Route != null))
                {
                    array[arrayIndex] = this._parent.Route;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Switch == item))
                {
                    this._parent.Switch = null;
                    return true;
                }
                if ((this._parent.Route == item))
                {
                    this._parent.Route = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Switch).Concat(this._parent.Route).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the position property
        /// </summary>
        private sealed class PositionProxy : ModelPropertyChange<ISwitchPosition, Position>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositionProxy(ISwitchPosition modelElement) : 
                    base(modelElement, "position")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Position Value
            {
                get
                {
                    return this.ModelElement.Position;
                }
                set
                {
                    this.ModelElement.Position = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switch property
        /// </summary>
        private sealed class SwitchProxy : ModelPropertyChange<ISwitchPosition, ISwitch>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchProxy(ISwitchPosition modelElement) : 
                    base(modelElement, "switch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISwitch Value
            {
                get
                {
                    return this.ModelElement.Switch;
                }
                set
                {
                    this.ModelElement.Switch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the route property
        /// </summary>
        private sealed class RouteProxy : ModelPropertyChange<ISwitchPosition, IRoute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RouteProxy(ISwitchPosition modelElement) : 
                    base(modelElement, "route")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRoute Value
            {
                get
                {
                    return this.ModelElement.Route;
                }
                set
                {
                    this.ModelElement.Route = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the RailwayElement class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayElement")]
    public abstract partial class RailwayElement : ModelElement, IRailwayElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("RailwayElement")]
        [XmlElementNameAttribute("id")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    Nullable<int> old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnPropertyChanged("Id", e, _idAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayElement")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.RailwayElement.ClassInstance)).Resolve("id")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return Observable.Box(new IdProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IRailwayElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IRailwayElement modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Sensor class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Sensor")]
    public partial class Sensor : RailwayElement, ISensor, IModelElement
    {
        
        private static Lazy<ITypedElement> _elementsReference = new Lazy<ITypedElement>(RetrieveElementsReference);
        
        /// <summary>
        /// The backing field for the Elements property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private SensorElementsCollection _elements;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Sensor()
        {
            this._elements = new SensorElementsCollection(this);
            this._elements.CollectionChanging += this.ElementsCollectionChanging;
            this._elements.CollectionChanged += this.ElementsCollectionChanged;
        }
        
        /// <summary>
        /// The elements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("elements")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("sensor")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITrackElement> Elements
        {
            get
            {
                return this._elements;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SensorChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SensorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Sensor")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveElementsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.Sensor.ClassInstance)).Resolve("elements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Elements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Elements", e, _elementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Elements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Elements", e, _elementsReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int elementsIndex = ModelHelper.IndexOfReference(this.Elements, element);
            if ((elementsIndex != -1))
            {
                return ModelHelper.CreatePath("elements", elementsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ELEMENTS"))
            {
                if ((index < this.Elements.Count))
                {
                    return this.Elements[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ELEMENTS"))
            {
                return this._elements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._elements))
            {
                return "elements";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Sensor")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Sensor class
        /// </summary>
        public class SensorChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Sensor _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SensorChildrenCollection(Sensor parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elements.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Elements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Elements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITrackElement elementsCasted = item.As<ITrackElement>();
                if ((elementsCasted != null))
                {
                    this._parent.Elements.Add(elementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elementsEnumerator = this._parent.Elements.GetEnumerator();
                try
                {
                    for (
                    ; elementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITrackElement trackElementItem = item.As<ITrackElement>();
                if (((trackElementItem != null) 
                            && this._parent.Elements.Remove(trackElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Sensor class
        /// </summary>
        public class SensorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Sensor _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SensorReferencedElementsCollection(Sensor parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elements.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Elements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Elements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITrackElement elementsCasted = item.As<ITrackElement>();
                if ((elementsCasted != null))
                {
                    this._parent.Elements.Add(elementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elementsEnumerator = this._parent.Elements.GetEnumerator();
                try
                {
                    for (
                    ; elementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITrackElement trackElementItem = item.As<ITrackElement>();
                if (((trackElementItem != null) 
                            && this._parent.Elements.Remove(trackElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elements).GetEnumerator();
            }
        }
    }
    
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Signal")]
    public enum Signal
    {
        
        FAILURE = 1,
        
        STOP = 2,
        
        GO = 2,
    }
    
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Position")]
    public enum Position
    {
        
        FAILURE = 0,
        
        LEFT = 1,
        
        RIGHT = 2,
        
        STRAIGHT = 3,
    }
    
    /// <summary>
    /// The default implementation of the RailwayContainer class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayContainer")]
    public partial class RailwayContainer : ModelElement, IRailwayContainer, IModelElement
    {
        
        private static Lazy<ITypedElement> _invalidsReference = new Lazy<ITypedElement>(RetrieveInvalidsReference);
        
        /// <summary>
        /// The backing field for the Invalids property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IRailwayElement> _invalids;
        
        private static Lazy<ITypedElement> _semaphoresReference = new Lazy<ITypedElement>(RetrieveSemaphoresReference);
        
        /// <summary>
        /// The backing field for the Semaphores property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ISemaphore> _semaphores;
        
        private static Lazy<ITypedElement> _routesReference = new Lazy<ITypedElement>(RetrieveRoutesReference);
        
        /// <summary>
        /// The backing field for the Routes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IRoute> _routes;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public RailwayContainer()
        {
            this._invalids = new ObservableCompositionOrderedSet<IRailwayElement>(this);
            this._invalids.CollectionChanging += this.InvalidsCollectionChanging;
            this._invalids.CollectionChanged += this.InvalidsCollectionChanged;
            this._semaphores = new ObservableCompositionOrderedSet<ISemaphore>(this);
            this._semaphores.CollectionChanging += this.SemaphoresCollectionChanging;
            this._semaphores.CollectionChanged += this.SemaphoresCollectionChanged;
            this._routes = new ObservableCompositionOrderedSet<IRoute>(this);
            this._routes.CollectionChanging += this.RoutesCollectionChanging;
            this._routes.CollectionChanged += this.RoutesCollectionChanged;
        }
        
        /// <summary>
        /// The invalids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("invalids")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IRailwayElement> Invalids
        {
            get
            {
                return this._invalids;
            }
        }
        
        /// <summary>
        /// The semaphores property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("semaphores")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISemaphore> Semaphores
        {
            get
            {
                return this._semaphores;
            }
        }
        
        /// <summary>
        /// The routes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("routes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IRoute> Routes
        {
            get
            {
                return this._routes;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RailwayContainerChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RailwayContainerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayContainer")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveInvalidsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.RailwayContainer.ClassInstance)).Resolve("invalids")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Invalids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InvalidsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Invalids", e, _invalidsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Invalids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InvalidsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Invalids", e, _invalidsReference);
        }
        
        private static ITypedElement RetrieveSemaphoresReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.RailwayContainer.ClassInstance)).Resolve("semaphores")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Semaphores property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SemaphoresCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Semaphores", e, _semaphoresReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Semaphores property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SemaphoresCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Semaphores", e, _semaphoresReference);
        }
        
        private static ITypedElement RetrieveRoutesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Railway.RailwayContainer.ClassInstance)).Resolve("routes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Routes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RoutesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Routes", e, _routesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Routes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RoutesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Routes", e, _routesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int invalidsIndex = ModelHelper.IndexOfReference(this.Invalids, element);
            if ((invalidsIndex != -1))
            {
                return ModelHelper.CreatePath("invalids", invalidsIndex);
            }
            int semaphoresIndex = ModelHelper.IndexOfReference(this.Semaphores, element);
            if ((semaphoresIndex != -1))
            {
                return ModelHelper.CreatePath("semaphores", semaphoresIndex);
            }
            int routesIndex = ModelHelper.IndexOfReference(this.Routes, element);
            if ((routesIndex != -1))
            {
                return ModelHelper.CreatePath("routes", routesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INVALIDS"))
            {
                if ((index < this.Invalids.Count))
                {
                    return this.Invalids[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SEMAPHORES"))
            {
                if ((index < this.Semaphores.Count))
                {
                    return this.Semaphores[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ROUTES"))
            {
                if ((index < this.Routes.Count))
                {
                    return this.Routes[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INVALIDS"))
            {
                return this._invalids;
            }
            if ((feature == "SEMAPHORES"))
            {
                return this._semaphores;
            }
            if ((feature == "ROUTES"))
            {
                return this._routes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._invalids))
            {
                return "invalids";
            }
            if ((container == this._semaphores))
            {
                return "semaphores";
            }
            if ((container == this._routes))
            {
                return "routes";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayContainer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RailwayContainer class
        /// </summary>
        public class RailwayContainerChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RailwayContainer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RailwayContainerChildrenCollection(RailwayContainer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Invalids.Count);
                    count = (count + this._parent.Semaphores.Count);
                    count = (count + this._parent.Routes.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Invalids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Semaphores.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Invalids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Semaphores.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRailwayElement invalidsCasted = item.As<IRailwayElement>();
                if ((invalidsCasted != null))
                {
                    this._parent.Invalids.Add(invalidsCasted);
                }
                ISemaphore semaphoresCasted = item.As<ISemaphore>();
                if ((semaphoresCasted != null))
                {
                    this._parent.Semaphores.Add(semaphoresCasted);
                }
                IRoute routesCasted = item.As<IRoute>();
                if ((routesCasted != null))
                {
                    this._parent.Routes.Add(routesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Invalids.Clear();
                this._parent.Semaphores.Clear();
                this._parent.Routes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Invalids.Contains(item))
                {
                    return true;
                }
                if (this._parent.Semaphores.Contains(item))
                {
                    return true;
                }
                if (this._parent.Routes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> invalidsEnumerator = this._parent.Invalids.GetEnumerator();
                try
                {
                    for (
                    ; invalidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = invalidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    invalidsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> semaphoresEnumerator = this._parent.Semaphores.GetEnumerator();
                try
                {
                    for (
                    ; semaphoresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = semaphoresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    semaphoresEnumerator.Dispose();
                }
                IEnumerator<IModelElement> routesEnumerator = this._parent.Routes.GetEnumerator();
                try
                {
                    for (
                    ; routesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = routesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    routesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRailwayElement railwayElementItem = item.As<IRailwayElement>();
                if (((railwayElementItem != null) 
                            && this._parent.Invalids.Remove(railwayElementItem)))
                {
                    return true;
                }
                ISemaphore semaphoreItem = item.As<ISemaphore>();
                if (((semaphoreItem != null) 
                            && this._parent.Semaphores.Remove(semaphoreItem)))
                {
                    return true;
                }
                IRoute routeItem = item.As<IRoute>();
                if (((routeItem != null) 
                            && this._parent.Routes.Remove(routeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Invalids).Concat(this._parent.Semaphores).Concat(this._parent.Routes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RailwayContainer class
        /// </summary>
        public class RailwayContainerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RailwayContainer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RailwayContainerReferencedElementsCollection(RailwayContainer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Invalids.Count);
                    count = (count + this._parent.Semaphores.Count);
                    count = (count + this._parent.Routes.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Invalids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Semaphores.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Invalids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Semaphores.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRailwayElement invalidsCasted = item.As<IRailwayElement>();
                if ((invalidsCasted != null))
                {
                    this._parent.Invalids.Add(invalidsCasted);
                }
                ISemaphore semaphoresCasted = item.As<ISemaphore>();
                if ((semaphoresCasted != null))
                {
                    this._parent.Semaphores.Add(semaphoresCasted);
                }
                IRoute routesCasted = item.As<IRoute>();
                if ((routesCasted != null))
                {
                    this._parent.Routes.Add(routesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Invalids.Clear();
                this._parent.Semaphores.Clear();
                this._parent.Routes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Invalids.Contains(item))
                {
                    return true;
                }
                if (this._parent.Semaphores.Contains(item))
                {
                    return true;
                }
                if (this._parent.Routes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> invalidsEnumerator = this._parent.Invalids.GetEnumerator();
                try
                {
                    for (
                    ; invalidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = invalidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    invalidsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> semaphoresEnumerator = this._parent.Semaphores.GetEnumerator();
                try
                {
                    for (
                    ; semaphoresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = semaphoresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    semaphoresEnumerator.Dispose();
                }
                IEnumerator<IModelElement> routesEnumerator = this._parent.Routes.GetEnumerator();
                try
                {
                    for (
                    ; routesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = routesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    routesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRailwayElement railwayElementItem = item.As<IRailwayElement>();
                if (((railwayElementItem != null) 
                            && this._parent.Invalids.Remove(railwayElementItem)))
                {
                    return true;
                }
                ISemaphore semaphoreItem = item.As<ISemaphore>();
                if (((semaphoreItem != null) 
                            && this._parent.Semaphores.Remove(semaphoreItem)))
                {
                    return true;
                }
                IRoute routeItem = item.As<IRoute>();
                if (((routeItem != null) 
                            && this._parent.Routes.Remove(routeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Invalids).Concat(this._parent.Semaphores).Concat(this._parent.Routes).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The public interface for RailwayContainer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RailwayContainer))]
    [XmlDefaultImplementationTypeAttribute(typeof(RailwayContainer))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayContainer")]
    public partial interface IRailwayContainer : IModelElement
    {
        
        /// <summary>
        /// The invalids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("invalids")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IRailwayElement> Invalids
        {
            get;
        }
        
        /// <summary>
        /// The semaphores property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("semaphores")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<ISemaphore> Semaphores
        {
            get;
        }
        
        /// <summary>
        /// The routes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("routes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IRoute> Routes
        {
            get;
        }
    }
    
    /// <summary>
    /// Denotes a class to implement the elements reference
    /// </summary>
    public class SensorElementsCollection : ObservableOppositeOrderedSet<ISensor, ITrackElement>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Sensor</param>
        public SensorElementsCollection(ISensor parent) : 
                base(parent)
        {
        }
        
        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((ITrackElement)(sender)));
            }
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(ITrackElement item, ISensor newParent)
        {
            if ((newParent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.Sensor = newParent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.Sensor == this.Parent))
                {
                    item.Sensor = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Sensor
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Sensor))]
    [XmlDefaultImplementationTypeAttribute(typeof(Sensor))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Sensor")]
    public partial interface ISensor : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The elements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("elements")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("sensor")]
        [ConstantAttribute()]
        IOrderedSetExpression<ITrackElement> Elements
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for RailwayElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RailwayElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(RailwayElement))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//RailwayElement")]
    public partial interface IRailwayElement : IModelElement
    {
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("RailwayElement")]
        [XmlElementNameAttribute("id")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Id
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// The public interface for SwitchPosition
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SwitchPosition))]
    [XmlDefaultImplementationTypeAttribute(typeof(SwitchPosition))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//SwitchPosition")]
    public partial interface ISwitchPosition : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The position property
        /// </summary>
        [DisplayNameAttribute("position")]
        [CategoryAttribute("SwitchPosition")]
        [XmlElementNameAttribute("position")]
        [XmlAttributeAttribute(true)]
        Position Position
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switch property
        /// </summary>
        [DisplayNameAttribute("switch")]
        [CategoryAttribute("SwitchPosition")]
        [XmlElementNameAttribute("switch")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("positions")]
        ISwitch Switch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The route property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("route")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("follows")]
        IRoute Route
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// The public interface for Semaphore
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Semaphore))]
    [XmlDefaultImplementationTypeAttribute(typeof(Semaphore))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Semaphore")]
    public partial interface ISemaphore : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The signal property
        /// </summary>
        [DisplayNameAttribute("signal")]
        [CategoryAttribute("Semaphore")]
        [XmlElementNameAttribute("signal")]
        [XmlAttributeAttribute(true)]
        Signal Signal
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// Denotes a class to implement the follows reference
    /// </summary>
    public class RouteFollowsCollection : ObservableOppositeOrderedSet<IRoute, ISwitchPosition>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Route</param>
        public RouteFollowsCollection(IRoute parent) : 
                base(parent)
        {
        }
        
        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((ISwitchPosition)(sender)));
            }
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(ISwitchPosition item, IRoute newParent)
        {
            if ((newParent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.Route = newParent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.Route == this.Parent))
                {
                    item.Route = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Route
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Route))]
    [XmlDefaultImplementationTypeAttribute(typeof(Route))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Route")]
    public partial interface IRoute : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The entry property
        /// </summary>
        [DisplayNameAttribute("entry")]
        [CategoryAttribute("Route")]
        [XmlElementNameAttribute("entry")]
        [XmlAttributeAttribute(true)]
        ISemaphore Entry
        {
            get;
            set;
        }
        
        /// <summary>
        /// The follows property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("follows")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("route")]
        [ConstantAttribute()]
        IOrderedSetExpression<ISwitchPosition> Follows
        {
            get;
        }
        
        /// <summary>
        /// The exit property
        /// </summary>
        [DisplayNameAttribute("exit")]
        [CategoryAttribute("Route")]
        [XmlElementNameAttribute("exit")]
        [XmlAttributeAttribute(true)]
        ISemaphore Exit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The definedBy property
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("definedBy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<ISensor> DefinedBy
        {
            get;
        }
    }
    
    /// <summary>
    /// Denotes a class to implement the positions reference
    /// </summary>
    public class SwitchPositionsCollection : ObservableOppositeOrderedSet<ISwitch, ISwitchPosition>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Switch</param>
        public SwitchPositionsCollection(ISwitch parent) : 
                base(parent)
        {
        }
        
        private void OnItemDeleted(object sender, EventArgs e)
        {
            this.Remove(((ISwitchPosition)(sender)));
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(ISwitchPosition item, ISwitch newParent)
        {
            if ((newParent != null))
            {
                item.Deleted += this.OnItemDeleted;
                item.Switch = newParent;
            }
            else
            {
                item.Deleted -= this.OnItemDeleted;
                if ((item.Switch == this.Parent))
                {
                    item.Switch = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Switch
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Switch))]
    [XmlDefaultImplementationTypeAttribute(typeof(Switch))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")]
    public partial interface ISwitch : IModelElement, ITrackElement
    {
        
        /// <summary>
        /// The currentPosition property
        /// </summary>
        [DisplayNameAttribute("currentPosition")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("currentPosition")]
        [XmlAttributeAttribute(true)]
        Position CurrentPosition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The positions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("positions")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("positions")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("switch")]
        [ConstantAttribute()]
        IOrderedSetExpression<ISwitchPosition> Positions
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for TrackElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TrackElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(TrackElement))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//TrackElement")]
    public partial interface ITrackElement : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The sensor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sensor")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("elements")]
        ISensor Sensor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The connectsTo property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("connectsTo")]
        [CategoryAttribute("TrackElement")]
        [XmlElementNameAttribute("connectsTo")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<ITrackElement> ConnectsTo
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Segment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Segment))]
    [XmlDefaultImplementationTypeAttribute(typeof(Segment))]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Segment")]
    public partial interface ISegment : IModelElement, ITrackElement
    {
        
        /// <summary>
        /// The length property
        /// </summary>
        [DisplayNameAttribute("length")]
        [CategoryAttribute("Segment")]
        [XmlElementNameAttribute("length")]
        [XmlAttributeAttribute(true)]
        int Length
        {
            get;
            set;
        }
    }
}
