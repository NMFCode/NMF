//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.COSEM
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using TemporaryGeneratedCode.COSEM.COSEMObjects;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the LogicalDevice class
    /// </summary>
    [XmlNamespaceAttribute("foo:cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("foo:cosem#//LogicalDevice")]
    public partial class LogicalDevice : ModelElement, ILogicalDevice, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _aAReference = new Lazy<ITypedElement>(RetrieveAAReference);
        
        /// <summary>
        /// The backing field for the AA property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ICurrentAssociation _aA;
        
        private static Lazy<ITypedElement> _nameReference = new Lazy<ITypedElement>(RetrieveNameReference);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ILogicalDeviceName _name;
        
        private static Lazy<ITypedElement> _autoConnectReference = new Lazy<ITypedElement>(RetrieveAutoConnectReference);
        
        /// <summary>
        /// The backing field for the AutoConnect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAutoConnectObject _autoConnect;
        
        private static Lazy<ITypedElement> _billingPeriodValuesReference = new Lazy<ITypedElement>(RetrieveBillingPeriodValuesReference);
        
        /// <summary>
        /// The backing field for the BillingPeriodValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBillingPeriodValues _billingPeriodValues;
        
        private static Lazy<ITypedElement> _electricityIDReference = new Lazy<ITypedElement>(RetrieveElectricityIDReference);
        
        /// <summary>
        /// The backing field for the ElectricityID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityID _electricityID;
        
        private static Lazy<ITypedElement> _programEntriesReference = new Lazy<ITypedElement>(RetrieveProgramEntriesReference);
        
        /// <summary>
        /// The backing field for the ProgramEntries property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityProgramEntries _programEntries;
        
        private static Lazy<ITypedElement> _outputPulseReference = new Lazy<ITypedElement>(RetrieveOutputPulseReference);
        
        /// <summary>
        /// The backing field for the OutputPulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOutputPulseValues_constants _outputPulse;
        
        private static Lazy<ITypedElement> _readingFactorReference = new Lazy<ITypedElement>(RetrieveReadingFactorReference);
        
        /// <summary>
        /// The backing field for the ReadingFactor property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IReadingFactorAndCT_VTratio _readingFactor;
        
        private static Lazy<ITypedElement> _nominalValuesReference = new Lazy<ITypedElement>(RetrieveNominalValuesReference);
        
        /// <summary>
        /// The backing field for the NominalValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityNominalValues _nominalValues;
        
        private static Lazy<ITypedElement> _inputPulseReference = new Lazy<ITypedElement>(RetrieveInputPulseReference);
        
        /// <summary>
        /// The backing field for the InputPulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPulseValuesOrConstants _inputPulse;
        
        private static Lazy<ITypedElement> _measurementPeriodReference = new Lazy<ITypedElement>(RetrieveMeasurementPeriodReference);
        
        /// <summary>
        /// The backing field for the MeasurementPeriod property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementPeriod_recordingInterval_billingPeriodDuration _measurementPeriod;
        
        private static Lazy<ITypedElement> _timeEntriesReference = new Lazy<ITypedElement>(RetrieveTimeEntriesReference);
        
        /// <summary>
        /// The backing field for the TimeEntries property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITimeEntries _timeEntries;
        
        private static Lazy<ITypedElement> _transformerLineLossesReference = new Lazy<ITypedElement>(RetrieveTransformerLineLossesReference);
        
        /// <summary>
        /// The backing field for the TransformerLineLosses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITransformerAndLineLosses _transformerLineLosses;
        
        private static Lazy<ITypedElement> _measurementAlgorithmReference = new Lazy<ITypedElement>(RetrieveMeasurementAlgorithmReference);
        
        /// <summary>
        /// The backing field for the MeasurementAlgorithm property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementMethods _measurementAlgorithm;
        
        private static Lazy<ITypedElement> _meteringPointReference = new Lazy<ITypedElement>(RetrieveMeteringPointReference);
        
        /// <summary>
        /// The backing field for the MeteringPoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeteringPointID _meteringPoint;
        
        private static Lazy<ITypedElement> _electricityRelatedStatusReference = new Lazy<ITypedElement>(RetrieveElectricityRelatedStatusReference);
        
        /// <summary>
        /// The backing field for the ElectricityRelatedStatus property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityRelatedStatusData _electricityRelatedStatus;
        
        private static Lazy<ITypedElement> _registerMonitorReference = new Lazy<ITypedElement>(RetrieveRegisterMonitorReference);
        
        /// <summary>
        /// The backing field for the RegisterMonitor property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IRegisterMonitorObject _registerMonitor;
        
        private static Lazy<ITypedElement> _electricityValuesReference = new Lazy<ITypedElement>(RetrieveElectricityValuesReference);
        
        /// <summary>
        /// The backing field for the ElectricityValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityValues _electricityValues;
        
        private static Lazy<ITypedElement> _measurementValueTypesReference = new Lazy<ITypedElement>(RetrieveMeasurementValueTypesReference);
        
        /// <summary>
        /// The backing field for the MeasurementValueTypes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementValues _measurementValueTypes;
        
        private static Lazy<ITypedElement> _harmonicsReference = new Lazy<ITypedElement>(RetrieveHarmonicsReference);
        
        /// <summary>
        /// The backing field for the Harmonics property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityHarmonics _harmonics;
        
        private static Lazy<ITypedElement> _tariffsReference = new Lazy<ITypedElement>(RetrieveTariffsReference);
        
        /// <summary>
        /// The backing field for the Tariffs property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ICurrentlyActiveTariff _tariffs;
        
        private static Lazy<ITypedElement> _phaseanglesReference = new Lazy<ITypedElement>(RetrievePhaseanglesReference);
        
        /// <summary>
        /// The backing field for the Phaseangles property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExtendedPhaseAngleMeasurement _phaseangles;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("LogicalDevice")]
        [XmlAttributeAttribute(true)]
        public string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AA property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ICurrentAssociation AA
        {
            get
            {
                return this._aA;
            }
            set
            {
                if ((this._aA != value))
                {
                    ICurrentAssociation old = this._aA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAAChanging(e);
                    this.OnPropertyChanging("AA", e, _aAReference);
                    this._aA = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetAA;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAA;
                    }
                    this.OnAAChanged(e);
                    this.OnPropertyChanged("AA", e, _aAReference);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ILogicalDeviceName Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    ILogicalDeviceName old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameReference);
                    this._name = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetName;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetName;
                    }
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameReference);
                }
            }
        }
        
        /// <summary>
        /// The AutoConnect property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IAutoConnectObject AutoConnect
        {
            get
            {
                return this._autoConnect;
            }
            set
            {
                if ((this._autoConnect != value))
                {
                    IAutoConnectObject old = this._autoConnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoConnectChanging(e);
                    this.OnPropertyChanging("AutoConnect", e, _autoConnectReference);
                    this._autoConnect = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetAutoConnect;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAutoConnect;
                    }
                    this.OnAutoConnectChanged(e);
                    this.OnPropertyChanged("AutoConnect", e, _autoConnectReference);
                }
            }
        }
        
        /// <summary>
        /// The BillingPeriodValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IBillingPeriodValues BillingPeriodValues
        {
            get
            {
                return this._billingPeriodValues;
            }
            set
            {
                if ((this._billingPeriodValues != value))
                {
                    IBillingPeriodValues old = this._billingPeriodValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodValuesChanging(e);
                    this.OnPropertyChanging("BillingPeriodValues", e, _billingPeriodValuesReference);
                    this._billingPeriodValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetBillingPeriodValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetBillingPeriodValues;
                    }
                    this.OnBillingPeriodValuesChanged(e);
                    this.OnPropertyChanged("BillingPeriodValues", e, _billingPeriodValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityID property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityID ElectricityID
        {
            get
            {
                return this._electricityID;
            }
            set
            {
                if ((this._electricityID != value))
                {
                    IElectricityID old = this._electricityID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityIDChanging(e);
                    this.OnPropertyChanging("ElectricityID", e, _electricityIDReference);
                    this._electricityID = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityID;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityID;
                    }
                    this.OnElectricityIDChanged(e);
                    this.OnPropertyChanged("ElectricityID", e, _electricityIDReference);
                }
            }
        }
        
        /// <summary>
        /// The ProgramEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityProgramEntries ProgramEntries
        {
            get
            {
                return this._programEntries;
            }
            set
            {
                if ((this._programEntries != value))
                {
                    IElectricityProgramEntries old = this._programEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProgramEntriesChanging(e);
                    this.OnPropertyChanging("ProgramEntries", e, _programEntriesReference);
                    this._programEntries = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetProgramEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetProgramEntries;
                    }
                    this.OnProgramEntriesChanged(e);
                    this.OnPropertyChanged("ProgramEntries", e, _programEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The OutputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOutputPulseValues_constants OutputPulse
        {
            get
            {
                return this._outputPulse;
            }
            set
            {
                if ((this._outputPulse != value))
                {
                    IOutputPulseValues_constants old = this._outputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputPulseChanging(e);
                    this.OnPropertyChanging("OutputPulse", e, _outputPulseReference);
                    this._outputPulse = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetOutputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetOutputPulse;
                    }
                    this.OnOutputPulseChanged(e);
                    this.OnPropertyChanged("OutputPulse", e, _outputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The ReadingFactor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IReadingFactorAndCT_VTratio ReadingFactor
        {
            get
            {
                return this._readingFactor;
            }
            set
            {
                if ((this._readingFactor != value))
                {
                    IReadingFactorAndCT_VTratio old = this._readingFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingFactorChanging(e);
                    this.OnPropertyChanging("ReadingFactor", e, _readingFactorReference);
                    this._readingFactor = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetReadingFactor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReadingFactor;
                    }
                    this.OnReadingFactorChanged(e);
                    this.OnPropertyChanged("ReadingFactor", e, _readingFactorReference);
                }
            }
        }
        
        /// <summary>
        /// The NominalValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityNominalValues NominalValues
        {
            get
            {
                return this._nominalValues;
            }
            set
            {
                if ((this._nominalValues != value))
                {
                    IElectricityNominalValues old = this._nominalValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalValuesChanging(e);
                    this.OnPropertyChanging("NominalValues", e, _nominalValuesReference);
                    this._nominalValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetNominalValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetNominalValues;
                    }
                    this.OnNominalValuesChanged(e);
                    this.OnPropertyChanged("NominalValues", e, _nominalValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The InputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPulseValuesOrConstants InputPulse
        {
            get
            {
                return this._inputPulse;
            }
            set
            {
                if ((this._inputPulse != value))
                {
                    IInputPulseValuesOrConstants old = this._inputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInputPulseChanging(e);
                    this.OnPropertyChanging("InputPulse", e, _inputPulseReference);
                    this._inputPulse = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetInputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetInputPulse;
                    }
                    this.OnInputPulseChanged(e);
                    this.OnPropertyChanged("InputPulse", e, _inputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementPeriod property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementPeriod_recordingInterval_billingPeriodDuration MeasurementPeriod
        {
            get
            {
                return this._measurementPeriod;
            }
            set
            {
                if ((this._measurementPeriod != value))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration old = this._measurementPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementPeriodChanging(e);
                    this.OnPropertyChanging("MeasurementPeriod", e, _measurementPeriodReference);
                    this._measurementPeriod = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementPeriod;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementPeriod;
                    }
                    this.OnMeasurementPeriodChanged(e);
                    this.OnPropertyChanged("MeasurementPeriod", e, _measurementPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// The TimeEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITimeEntries TimeEntries
        {
            get
            {
                return this._timeEntries;
            }
            set
            {
                if ((this._timeEntries != value))
                {
                    ITimeEntries old = this._timeEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeEntriesChanging(e);
                    this.OnPropertyChanging("TimeEntries", e, _timeEntriesReference);
                    this._timeEntries = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTimeEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTimeEntries;
                    }
                    this.OnTimeEntriesChanged(e);
                    this.OnPropertyChanged("TimeEntries", e, _timeEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerLineLosses property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITransformerAndLineLosses TransformerLineLosses
        {
            get
            {
                return this._transformerLineLosses;
            }
            set
            {
                if ((this._transformerLineLosses != value))
                {
                    ITransformerAndLineLosses old = this._transformerLineLosses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerLineLossesChanging(e);
                    this.OnPropertyChanging("TransformerLineLosses", e, _transformerLineLossesReference);
                    this._transformerLineLosses = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTransformerLineLosses;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTransformerLineLosses;
                    }
                    this.OnTransformerLineLossesChanged(e);
                    this.OnPropertyChanged("TransformerLineLosses", e, _transformerLineLossesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementAlgorithm property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementMethods MeasurementAlgorithm
        {
            get
            {
                return this._measurementAlgorithm;
            }
            set
            {
                if ((this._measurementAlgorithm != value))
                {
                    IMeasurementMethods old = this._measurementAlgorithm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementAlgorithmChanging(e);
                    this.OnPropertyChanging("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                    this._measurementAlgorithm = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementAlgorithm;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementAlgorithm;
                    }
                    this.OnMeasurementAlgorithmChanged(e);
                    this.OnPropertyChanged("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                }
            }
        }
        
        /// <summary>
        /// The MeteringPoint property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeteringPointID MeteringPoint
        {
            get
            {
                return this._meteringPoint;
            }
            set
            {
                if ((this._meteringPoint != value))
                {
                    IMeteringPointID old = this._meteringPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeteringPointChanging(e);
                    this.OnPropertyChanging("MeteringPoint", e, _meteringPointReference);
                    this._meteringPoint = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeteringPoint;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeteringPoint;
                    }
                    this.OnMeteringPointChanged(e);
                    this.OnPropertyChanged("MeteringPoint", e, _meteringPointReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityRelatedStatus property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityRelatedStatusData ElectricityRelatedStatus
        {
            get
            {
                return this._electricityRelatedStatus;
            }
            set
            {
                if ((this._electricityRelatedStatus != value))
                {
                    IElectricityRelatedStatusData old = this._electricityRelatedStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityRelatedStatusChanging(e);
                    this.OnPropertyChanging("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                    this._electricityRelatedStatus = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityRelatedStatus;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityRelatedStatus;
                    }
                    this.OnElectricityRelatedStatusChanged(e);
                    this.OnPropertyChanged("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                }
            }
        }
        
        /// <summary>
        /// The RegisterMonitor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IRegisterMonitorObject RegisterMonitor
        {
            get
            {
                return this._registerMonitor;
            }
            set
            {
                if ((this._registerMonitor != value))
                {
                    IRegisterMonitorObject old = this._registerMonitor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisterMonitorChanging(e);
                    this.OnPropertyChanging("RegisterMonitor", e, _registerMonitorReference);
                    this._registerMonitor = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetRegisterMonitor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRegisterMonitor;
                    }
                    this.OnRegisterMonitorChanged(e);
                    this.OnPropertyChanged("RegisterMonitor", e, _registerMonitorReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityValues ElectricityValues
        {
            get
            {
                return this._electricityValues;
            }
            set
            {
                if ((this._electricityValues != value))
                {
                    IElectricityValues old = this._electricityValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityValuesChanging(e);
                    this.OnPropertyChanging("ElectricityValues", e, _electricityValuesReference);
                    this._electricityValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityValues;
                    }
                    this.OnElectricityValuesChanged(e);
                    this.OnPropertyChanged("ElectricityValues", e, _electricityValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValueTypes property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementValues MeasurementValueTypes
        {
            get
            {
                return this._measurementValueTypes;
            }
            set
            {
                if ((this._measurementValueTypes != value))
                {
                    IMeasurementValues old = this._measurementValueTypes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueTypesChanging(e);
                    this.OnPropertyChanging("MeasurementValueTypes", e, _measurementValueTypesReference);
                    this._measurementValueTypes = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementValueTypes;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementValueTypes;
                    }
                    this.OnMeasurementValueTypesChanged(e);
                    this.OnPropertyChanged("MeasurementValueTypes", e, _measurementValueTypesReference);
                }
            }
        }
        
        /// <summary>
        /// The Harmonics property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityHarmonics Harmonics
        {
            get
            {
                return this._harmonics;
            }
            set
            {
                if ((this._harmonics != value))
                {
                    IElectricityHarmonics old = this._harmonics;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHarmonicsChanging(e);
                    this.OnPropertyChanging("Harmonics", e, _harmonicsReference);
                    this._harmonics = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetHarmonics;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetHarmonics;
                    }
                    this.OnHarmonicsChanged(e);
                    this.OnPropertyChanged("Harmonics", e, _harmonicsReference);
                }
            }
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ICurrentlyActiveTariff Tariffs
        {
            get
            {
                return this._tariffs;
            }
            set
            {
                if ((this._tariffs != value))
                {
                    ICurrentlyActiveTariff old = this._tariffs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTariffsChanging(e);
                    this.OnPropertyChanging("Tariffs", e, _tariffsReference);
                    this._tariffs = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTariffs;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTariffs;
                    }
                    this.OnTariffsChanged(e);
                    this.OnPropertyChanged("Tariffs", e, _tariffsReference);
                }
            }
        }
        
        /// <summary>
        /// The Phaseangles property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExtendedPhaseAngleMeasurement Phaseangles
        {
            get
            {
                return this._phaseangles;
            }
            set
            {
                if ((this._phaseangles != value))
                {
                    IExtendedPhaseAngleMeasurement old = this._phaseangles;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseanglesChanging(e);
                    this.OnPropertyChanging("Phaseangles", e, _phaseanglesReference);
                    this._phaseangles = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetPhaseangles;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetPhaseangles;
                    }
                    this.OnPhaseanglesChanged(e);
                    this.OnPropertyChanged("Phaseangles", e, _phaseanglesReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new LogicalDeviceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LogicalDeviceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//LogicalDevice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the AutoConnect property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AutoConnectChanging;
        
        /// <summary>
        /// Gets fired when the AutoConnect property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AutoConnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityID property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityIDChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramEntries property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProgramEntriesChanging;
        
        /// <summary>
        /// Gets fired when the ProgramEntries property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProgramEntriesChanged;
        
        /// <summary>
        /// Gets fired before the OutputPulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputPulseChanging;
        
        /// <summary>
        /// Gets fired when the OutputPulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputPulseChanged;
        
        /// <summary>
        /// Gets fired before the ReadingFactor property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReadingFactor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingFactorChanged;
        
        /// <summary>
        /// Gets fired before the NominalValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalValuesChanging;
        
        /// <summary>
        /// Gets fired when the NominalValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalValuesChanged;
        
        /// <summary>
        /// Gets fired before the InputPulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> InputPulseChanging;
        
        /// <summary>
        /// Gets fired when the InputPulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> InputPulseChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementPeriod property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementPeriod property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimeEntries property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeEntriesChanging;
        
        /// <summary>
        /// Gets fired when the TimeEntries property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeEntriesChanged;
        
        /// <summary>
        /// Gets fired before the TransformerLineLosses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanging;
        
        /// <summary>
        /// Gets fired when the TransformerLineLosses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementAlgorithm property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementAlgorithm property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanged;
        
        /// <summary>
        /// Gets fired before the MeteringPoint property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeteringPointChanging;
        
        /// <summary>
        /// Gets fired when the MeteringPoint property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeteringPointChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityRelatedStatus property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityRelatedStatus property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanged;
        
        /// <summary>
        /// Gets fired before the RegisterMonitor property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RegisterMonitorChanging;
        
        /// <summary>
        /// Gets fired when the RegisterMonitor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RegisterMonitorChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityValuesChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityValuesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueTypes property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueTypes property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanged;
        
        /// <summary>
        /// Gets fired before the Harmonics property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicsChanging;
        
        /// <summary>
        /// Gets fired when the Harmonics property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicsChanged;
        
        /// <summary>
        /// Gets fired before the Tariffs property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TariffsChanging;
        
        /// <summary>
        /// Gets fired when the Tariffs property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TariffsChanged;
        
        /// <summary>
        /// Gets fired before the Phaseangles property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PhaseanglesChanging;
        
        /// <summary>
        /// Gets fired when the Phaseangles property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PhaseanglesChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ID")));
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAAReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("AA")));
        }
        
        /// <summary>
        /// Raises the AAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAA(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AA))
            {
                this.AA = null;
            }
        }
        
        private static ITypedElement RetrieveNameReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Name property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetName(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Name))
            {
                this.Name = null;
            }
        }
        
        private static ITypedElement RetrieveAutoConnectReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("AutoConnect")));
        }
        
        /// <summary>
        /// Raises the AutoConnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoConnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AutoConnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAutoConnect(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AutoConnect))
            {
                this.AutoConnect = null;
            }
        }
        
        private static ITypedElement RetrieveBillingPeriodValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("BillingPeriodValues")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillingPeriodValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillingPeriodValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.BillingPeriodValues))
            {
                this.BillingPeriodValues = null;
            }
        }
        
        private static ITypedElement RetrieveElectricityIDReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ElectricityID")));
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityID property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityID(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityID))
            {
                this.ElectricityID = null;
            }
        }
        
        private static ITypedElement RetrieveProgramEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ProgramEntries")));
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProgramEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProgramEntries(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ProgramEntries))
            {
                this.ProgramEntries = null;
            }
        }
        
        private static ITypedElement RetrieveOutputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("OutputPulse")));
        }
        
        /// <summary>
        /// Raises the OutputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutputPulse(object sender, EventArgs eventArgs)
        {
            if ((sender == this.OutputPulse))
            {
                this.OutputPulse = null;
            }
        }
        
        private static ITypedElement RetrieveReadingFactorReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ReadingFactor")));
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingFactor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingFactor(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ReadingFactor))
            {
                this.ReadingFactor = null;
            }
        }
        
        private static ITypedElement RetrieveNominalValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("NominalValues")));
        }
        
        /// <summary>
        /// Raises the NominalValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NominalValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNominalValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.NominalValues))
            {
                this.NominalValues = null;
            }
        }
        
        private static ITypedElement RetrieveInputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("InputPulse")));
        }
        
        /// <summary>
        /// Raises the InputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInputPulse(object sender, EventArgs eventArgs)
        {
            if ((sender == this.InputPulse))
            {
                this.InputPulse = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("MeasurementPeriod")));
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementPeriod(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementPeriod))
            {
                this.MeasurementPeriod = null;
            }
        }
        
        private static ITypedElement RetrieveTimeEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("TimeEntries")));
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimeEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimeEntries(object sender, EventArgs eventArgs)
        {
            if ((sender == this.TimeEntries))
            {
                this.TimeEntries = null;
            }
        }
        
        private static ITypedElement RetrieveTransformerLineLossesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("TransformerLineLosses")));
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerLineLosses property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerLineLosses(object sender, EventArgs eventArgs)
        {
            if ((sender == this.TransformerLineLosses))
            {
                this.TransformerLineLosses = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementAlgorithmReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("MeasurementAlgorithm")));
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementAlgorithm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementAlgorithm(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementAlgorithm))
            {
                this.MeasurementAlgorithm = null;
            }
        }
        
        private static ITypedElement RetrieveMeteringPointReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("MeteringPoint")));
        }
        
        /// <summary>
        /// Raises the MeteringPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeteringPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeteringPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeteringPoint(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeteringPoint))
            {
                this.MeteringPoint = null;
            }
        }
        
        private static ITypedElement RetrieveElectricityRelatedStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ElectricityRelatedStatus")));
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityRelatedStatus property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityRelatedStatus(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityRelatedStatus))
            {
                this.ElectricityRelatedStatus = null;
            }
        }
        
        private static ITypedElement RetrieveRegisterMonitorReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("RegisterMonitor")));
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisterMonitor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisterMonitor(object sender, EventArgs eventArgs)
        {
            if ((sender == this.RegisterMonitor))
            {
                this.RegisterMonitor = null;
            }
        }
        
        private static ITypedElement RetrieveElectricityValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("ElectricityValues")));
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityValues))
            {
                this.ElectricityValues = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementValueTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("MeasurementValueTypes")));
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValueTypes property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValueTypes(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementValueTypes))
            {
                this.MeasurementValueTypes = null;
            }
        }
        
        private static ITypedElement RetrieveHarmonicsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("Harmonics")));
        }
        
        /// <summary>
        /// Raises the HarmonicsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HarmonicsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Harmonics property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHarmonics(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Harmonics))
            {
                this.Harmonics = null;
            }
        }
        
        private static ITypedElement RetrieveTariffsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("Tariffs")));
        }
        
        /// <summary>
        /// Raises the TariffsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TariffsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TariffsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TariffsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tariffs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTariffs(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Tariffs))
            {
                this.Tariffs = null;
            }
        }
        
        private static ITypedElement RetrievePhaseanglesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDevice.ClassInstance)).Resolve("Phaseangles")));
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phaseangles property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseangles(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Phaseangles))
            {
                this.Phaseangles = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.AA))
            {
                return ModelHelper.CreatePath("AA");
            }
            if ((element == this.Name))
            {
                return ModelHelper.CreatePath("name");
            }
            if ((element == this.AutoConnect))
            {
                return ModelHelper.CreatePath("AutoConnect");
            }
            if ((element == this.BillingPeriodValues))
            {
                return ModelHelper.CreatePath("BillingPeriodValues");
            }
            if ((element == this.ElectricityID))
            {
                return ModelHelper.CreatePath("ElectricityID");
            }
            if ((element == this.ProgramEntries))
            {
                return ModelHelper.CreatePath("ProgramEntries");
            }
            if ((element == this.OutputPulse))
            {
                return ModelHelper.CreatePath("OutputPulse");
            }
            if ((element == this.ReadingFactor))
            {
                return ModelHelper.CreatePath("ReadingFactor");
            }
            if ((element == this.NominalValues))
            {
                return ModelHelper.CreatePath("NominalValues");
            }
            if ((element == this.InputPulse))
            {
                return ModelHelper.CreatePath("InputPulse");
            }
            if ((element == this.MeasurementPeriod))
            {
                return ModelHelper.CreatePath("MeasurementPeriod");
            }
            if ((element == this.TimeEntries))
            {
                return ModelHelper.CreatePath("TimeEntries");
            }
            if ((element == this.TransformerLineLosses))
            {
                return ModelHelper.CreatePath("TransformerLineLosses");
            }
            if ((element == this.MeasurementAlgorithm))
            {
                return ModelHelper.CreatePath("MeasurementAlgorithm");
            }
            if ((element == this.MeteringPoint))
            {
                return ModelHelper.CreatePath("MeteringPoint");
            }
            if ((element == this.ElectricityRelatedStatus))
            {
                return ModelHelper.CreatePath("ElectricityRelatedStatus");
            }
            if ((element == this.RegisterMonitor))
            {
                return ModelHelper.CreatePath("RegisterMonitor");
            }
            if ((element == this.ElectricityValues))
            {
                return ModelHelper.CreatePath("ElectricityValues");
            }
            if ((element == this.MeasurementValueTypes))
            {
                return ModelHelper.CreatePath("MeasurementValueTypes");
            }
            if ((element == this.Harmonics))
            {
                return ModelHelper.CreatePath("Harmonics");
            }
            if ((element == this.Tariffs))
            {
                return ModelHelper.CreatePath("Tariffs");
            }
            if ((element == this.Phaseangles))
            {
                return ModelHelper.CreatePath("Phaseangles");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "AA"))
            {
                return this.AA;
            }
            if ((reference == "NAME"))
            {
                return this.Name;
            }
            if ((reference == "AUTOCONNECT"))
            {
                return this.AutoConnect;
            }
            if ((reference == "BILLINGPERIODVALUES"))
            {
                return this.BillingPeriodValues;
            }
            if ((reference == "ELECTRICITYID"))
            {
                return this.ElectricityID;
            }
            if ((reference == "PROGRAMENTRIES"))
            {
                return this.ProgramEntries;
            }
            if ((reference == "OUTPUTPULSE"))
            {
                return this.OutputPulse;
            }
            if ((reference == "READINGFACTOR"))
            {
                return this.ReadingFactor;
            }
            if ((reference == "NOMINALVALUES"))
            {
                return this.NominalValues;
            }
            if ((reference == "INPUTPULSE"))
            {
                return this.InputPulse;
            }
            if ((reference == "MEASUREMENTPERIOD"))
            {
                return this.MeasurementPeriod;
            }
            if ((reference == "TIMEENTRIES"))
            {
                return this.TimeEntries;
            }
            if ((reference == "TRANSFORMERLINELOSSES"))
            {
                return this.TransformerLineLosses;
            }
            if ((reference == "MEASUREMENTALGORITHM"))
            {
                return this.MeasurementAlgorithm;
            }
            if ((reference == "METERINGPOINT"))
            {
                return this.MeteringPoint;
            }
            if ((reference == "ELECTRICITYRELATEDSTATUS"))
            {
                return this.ElectricityRelatedStatus;
            }
            if ((reference == "REGISTERMONITOR"))
            {
                return this.RegisterMonitor;
            }
            if ((reference == "ELECTRICITYVALUES"))
            {
                return this.ElectricityValues;
            }
            if ((reference == "MEASUREMENTVALUETYPES"))
            {
                return this.MeasurementValueTypes;
            }
            if ((reference == "HARMONICS"))
            {
                return this.Harmonics;
            }
            if ((reference == "TARIFFS"))
            {
                return this.Tariffs;
            }
            if ((reference == "PHASEANGLES"))
            {
                return this.Phaseangles;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AA"))
            {
                this.AA = ((ICurrentAssociation)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((ILogicalDeviceName)(value));
                return;
            }
            if ((feature == "AUTOCONNECT"))
            {
                this.AutoConnect = ((IAutoConnectObject)(value));
                return;
            }
            if ((feature == "BILLINGPERIODVALUES"))
            {
                this.BillingPeriodValues = ((IBillingPeriodValues)(value));
                return;
            }
            if ((feature == "ELECTRICITYID"))
            {
                this.ElectricityID = ((IElectricityID)(value));
                return;
            }
            if ((feature == "PROGRAMENTRIES"))
            {
                this.ProgramEntries = ((IElectricityProgramEntries)(value));
                return;
            }
            if ((feature == "OUTPUTPULSE"))
            {
                this.OutputPulse = ((IOutputPulseValues_constants)(value));
                return;
            }
            if ((feature == "READINGFACTOR"))
            {
                this.ReadingFactor = ((IReadingFactorAndCT_VTratio)(value));
                return;
            }
            if ((feature == "NOMINALVALUES"))
            {
                this.NominalValues = ((IElectricityNominalValues)(value));
                return;
            }
            if ((feature == "INPUTPULSE"))
            {
                this.InputPulse = ((IInputPulseValuesOrConstants)(value));
                return;
            }
            if ((feature == "MEASUREMENTPERIOD"))
            {
                this.MeasurementPeriod = ((IMeasurementPeriod_recordingInterval_billingPeriodDuration)(value));
                return;
            }
            if ((feature == "TIMEENTRIES"))
            {
                this.TimeEntries = ((ITimeEntries)(value));
                return;
            }
            if ((feature == "TRANSFORMERLINELOSSES"))
            {
                this.TransformerLineLosses = ((ITransformerAndLineLosses)(value));
                return;
            }
            if ((feature == "MEASUREMENTALGORITHM"))
            {
                this.MeasurementAlgorithm = ((IMeasurementMethods)(value));
                return;
            }
            if ((feature == "METERINGPOINT"))
            {
                this.MeteringPoint = ((IMeteringPointID)(value));
                return;
            }
            if ((feature == "ELECTRICITYRELATEDSTATUS"))
            {
                this.ElectricityRelatedStatus = ((IElectricityRelatedStatusData)(value));
                return;
            }
            if ((feature == "REGISTERMONITOR"))
            {
                this.RegisterMonitor = ((IRegisterMonitorObject)(value));
                return;
            }
            if ((feature == "ELECTRICITYVALUES"))
            {
                this.ElectricityValues = ((IElectricityValues)(value));
                return;
            }
            if ((feature == "MEASUREMENTVALUETYPES"))
            {
                this.MeasurementValueTypes = ((IMeasurementValues)(value));
                return;
            }
            if ((feature == "HARMONICS"))
            {
                this.Harmonics = ((IElectricityHarmonics)(value));
                return;
            }
            if ((feature == "TARIFFS"))
            {
                this.Tariffs = ((ICurrentlyActiveTariff)(value));
                return;
            }
            if ((feature == "PHASEANGLES"))
            {
                this.Phaseangles = ((IExtendedPhaseAngleMeasurement)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IDProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AA"))
            {
                return new AAProxy(this);
            }
            if ((reference == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((reference == "AUTOCONNECT"))
            {
                return new AutoConnectProxy(this);
            }
            if ((reference == "BILLINGPERIODVALUES"))
            {
                return new BillingPeriodValuesProxy(this);
            }
            if ((reference == "ELECTRICITYID"))
            {
                return new ElectricityIDProxy(this);
            }
            if ((reference == "PROGRAMENTRIES"))
            {
                return new ProgramEntriesProxy(this);
            }
            if ((reference == "OUTPUTPULSE"))
            {
                return new OutputPulseProxy(this);
            }
            if ((reference == "READINGFACTOR"))
            {
                return new ReadingFactorProxy(this);
            }
            if ((reference == "NOMINALVALUES"))
            {
                return new NominalValuesProxy(this);
            }
            if ((reference == "INPUTPULSE"))
            {
                return new InputPulseProxy(this);
            }
            if ((reference == "MEASUREMENTPERIOD"))
            {
                return new MeasurementPeriodProxy(this);
            }
            if ((reference == "TIMEENTRIES"))
            {
                return new TimeEntriesProxy(this);
            }
            if ((reference == "TRANSFORMERLINELOSSES"))
            {
                return new TransformerLineLossesProxy(this);
            }
            if ((reference == "MEASUREMENTALGORITHM"))
            {
                return new MeasurementAlgorithmProxy(this);
            }
            if ((reference == "METERINGPOINT"))
            {
                return new MeteringPointProxy(this);
            }
            if ((reference == "ELECTRICITYRELATEDSTATUS"))
            {
                return new ElectricityRelatedStatusProxy(this);
            }
            if ((reference == "REGISTERMONITOR"))
            {
                return new RegisterMonitorProxy(this);
            }
            if ((reference == "ELECTRICITYVALUES"))
            {
                return new ElectricityValuesProxy(this);
            }
            if ((reference == "MEASUREMENTVALUETYPES"))
            {
                return new MeasurementValueTypesProxy(this);
            }
            if ((reference == "HARMONICS"))
            {
                return new HarmonicsProxy(this);
            }
            if ((reference == "TARIFFS"))
            {
                return new TariffsProxy(this);
            }
            if ((reference == "PHASEANGLES"))
            {
                return new PhaseanglesProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//LogicalDevice")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDevice class
        /// </summary>
        public class LogicalDeviceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceChildrenCollection(LogicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.NameChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.NameChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.Name == null))
                {
                    ILogicalDeviceName nameCasted = item.As<ILogicalDeviceName>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AA = null;
                this._parent.Name = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.ElectricityRelatedStatus = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.Name))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AA).Concat(this._parent.Name).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDevice class
        /// </summary>
        public class LogicalDeviceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceReferencedElementsCollection(LogicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.NameChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.NameChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.Name == null))
                {
                    ILogicalDeviceName nameCasted = item.As<ILogicalDeviceName>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AA = null;
                this._parent.Name = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.ElectricityRelatedStatus = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.Name))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AA).Concat(this._parent.Name).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<ILogicalDevice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AA property
        /// </summary>
        private sealed class AAProxy : ModelPropertyChange<ILogicalDevice, ICurrentAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AAProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "AA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentAssociation Value
            {
                get
                {
                    return this.ModelElement.AA;
                }
                set
                {
                    this.ModelElement.AA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ILogicalDevice, ILogicalDeviceName>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILogicalDeviceName Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AutoConnect property
        /// </summary>
        private sealed class AutoConnectProxy : ModelPropertyChange<ILogicalDevice, IAutoConnectObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoConnectProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "AutoConnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAutoConnectObject Value
            {
                get
                {
                    return this.ModelElement.AutoConnect;
                }
                set
                {
                    this.ModelElement.AutoConnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodValues property
        /// </summary>
        private sealed class BillingPeriodValuesProxy : ModelPropertyChange<ILogicalDevice, IBillingPeriodValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "BillingPeriodValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBillingPeriodValues Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodValues;
                }
                set
                {
                    this.ModelElement.BillingPeriodValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityID property
        /// </summary>
        private sealed class ElectricityIDProxy : ModelPropertyChange<ILogicalDevice, IElectricityID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityIDProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityID Value
            {
                get
                {
                    return this.ModelElement.ElectricityID;
                }
                set
                {
                    this.ModelElement.ElectricityID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProgramEntries property
        /// </summary>
        private sealed class ProgramEntriesProxy : ModelPropertyChange<ILogicalDevice, IElectricityProgramEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProgramEntriesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ProgramEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityProgramEntries Value
            {
                get
                {
                    return this.ModelElement.ProgramEntries;
                }
                set
                {
                    this.ModelElement.ProgramEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutputPulse property
        /// </summary>
        private sealed class OutputPulseProxy : ModelPropertyChange<ILogicalDevice, IOutputPulseValues_constants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputPulseProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "OutputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputPulseValues_constants Value
            {
                get
                {
                    return this.ModelElement.OutputPulse;
                }
                set
                {
                    this.ModelElement.OutputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingFactor property
        /// </summary>
        private sealed class ReadingFactorProxy : ModelPropertyChange<ILogicalDevice, IReadingFactorAndCT_VTratio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingFactorProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ReadingFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingFactorAndCT_VTratio Value
            {
                get
                {
                    return this.ModelElement.ReadingFactor;
                }
                set
                {
                    this.ModelElement.ReadingFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NominalValues property
        /// </summary>
        private sealed class NominalValuesProxy : ModelPropertyChange<ILogicalDevice, IElectricityNominalValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "NominalValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityNominalValues Value
            {
                get
                {
                    return this.ModelElement.NominalValues;
                }
                set
                {
                    this.ModelElement.NominalValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InputPulse property
        /// </summary>
        private sealed class InputPulseProxy : ModelPropertyChange<ILogicalDevice, IInputPulseValuesOrConstants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputPulseProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "InputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPulseValuesOrConstants Value
            {
                get
                {
                    return this.ModelElement.InputPulse;
                }
                set
                {
                    this.ModelElement.InputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementPeriod property
        /// </summary>
        private sealed class MeasurementPeriodProxy : ModelPropertyChange<ILogicalDevice, IMeasurementPeriod_recordingInterval_billingPeriodDuration>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementPeriodProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementPeriod_recordingInterval_billingPeriodDuration Value
            {
                get
                {
                    return this.ModelElement.MeasurementPeriod;
                }
                set
                {
                    this.ModelElement.MeasurementPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeEntries property
        /// </summary>
        private sealed class TimeEntriesProxy : ModelPropertyChange<ILogicalDevice, ITimeEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeEntriesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "TimeEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeEntries Value
            {
                get
                {
                    return this.ModelElement.TimeEntries;
                }
                set
                {
                    this.ModelElement.TimeEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerLineLosses property
        /// </summary>
        private sealed class TransformerLineLossesProxy : ModelPropertyChange<ILogicalDevice, ITransformerAndLineLosses>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerLineLossesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "TransformerLineLosses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerAndLineLosses Value
            {
                get
                {
                    return this.ModelElement.TransformerLineLosses;
                }
                set
                {
                    this.ModelElement.TransformerLineLosses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementAlgorithm property
        /// </summary>
        private sealed class MeasurementAlgorithmProxy : ModelPropertyChange<ILogicalDevice, IMeasurementMethods>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementAlgorithmProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementAlgorithm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementMethods Value
            {
                get
                {
                    return this.ModelElement.MeasurementAlgorithm;
                }
                set
                {
                    this.ModelElement.MeasurementAlgorithm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeteringPoint property
        /// </summary>
        private sealed class MeteringPointProxy : ModelPropertyChange<ILogicalDevice, IMeteringPointID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeteringPointProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeteringPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeteringPointID Value
            {
                get
                {
                    return this.ModelElement.MeteringPoint;
                }
                set
                {
                    this.ModelElement.MeteringPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityRelatedStatus property
        /// </summary>
        private sealed class ElectricityRelatedStatusProxy : ModelPropertyChange<ILogicalDevice, IElectricityRelatedStatusData>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityRelatedStatusProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityRelatedStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityRelatedStatusData Value
            {
                get
                {
                    return this.ModelElement.ElectricityRelatedStatus;
                }
                set
                {
                    this.ModelElement.ElectricityRelatedStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisterMonitor property
        /// </summary>
        private sealed class RegisterMonitorProxy : ModelPropertyChange<ILogicalDevice, IRegisterMonitorObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisterMonitorProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "RegisterMonitor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisterMonitorObject Value
            {
                get
                {
                    return this.ModelElement.RegisterMonitor;
                }
                set
                {
                    this.ModelElement.RegisterMonitor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityValues property
        /// </summary>
        private sealed class ElectricityValuesProxy : ModelPropertyChange<ILogicalDevice, IElectricityValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityValues Value
            {
                get
                {
                    return this.ModelElement.ElectricityValues;
                }
                set
                {
                    this.ModelElement.ElectricityValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValueTypes property
        /// </summary>
        private sealed class MeasurementValueTypesProxy : ModelPropertyChange<ILogicalDevice, IMeasurementValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueTypesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementValueTypes")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValues Value
            {
                get
                {
                    return this.ModelElement.MeasurementValueTypes;
                }
                set
                {
                    this.ModelElement.MeasurementValueTypes = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Harmonics property
        /// </summary>
        private sealed class HarmonicsProxy : ModelPropertyChange<ILogicalDevice, IElectricityHarmonics>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HarmonicsProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Harmonics")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityHarmonics Value
            {
                get
                {
                    return this.ModelElement.Harmonics;
                }
                set
                {
                    this.ModelElement.Harmonics = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tariffs property
        /// </summary>
        private sealed class TariffsProxy : ModelPropertyChange<ILogicalDevice, ICurrentlyActiveTariff>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TariffsProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Tariffs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentlyActiveTariff Value
            {
                get
                {
                    return this.ModelElement.Tariffs;
                }
                set
                {
                    this.ModelElement.Tariffs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Phaseangles property
        /// </summary>
        private sealed class PhaseanglesProxy : ModelPropertyChange<ILogicalDevice, IExtendedPhaseAngleMeasurement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseanglesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Phaseangles")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExtendedPhaseAngleMeasurement Value
            {
                get
                {
                    return this.ModelElement.Phaseangles;
                }
                set
                {
                    this.ModelElement.Phaseangles = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PhysicalDevice class
    /// </summary>
    [XmlNamespaceAttribute("foo:cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("foo:cosem#//PhysicalDevice")]
    public partial class PhysicalDevice : ModelElement, IPhysicalDevice, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _managementLogicalDeviceReference = new Lazy<ITypedElement>(RetrieveManagementLogicalDeviceReference);
        
        /// <summary>
        /// The backing field for the ManagementLogicalDevice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IManagementLogicalDevice _managementLogicalDevice;
        
        private static Lazy<ITypedElement> _logicalDeviceReference = new Lazy<ITypedElement>(RetrieveLogicalDeviceReference);
        
        /// <summary>
        /// The backing field for the LogicalDevice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<ILogicalDevice> _logicalDevice;
        
        private static Lazy<ITypedElement> _electricityRelatedStatusReference = new Lazy<ITypedElement>(RetrieveElectricityRelatedStatusReference);
        
        /// <summary>
        /// The backing field for the ElectricityRelatedStatus property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityRelatedStatusData _electricityRelatedStatus;
        
        private static Lazy<ITypedElement> _aAReference = new Lazy<ITypedElement>(RetrieveAAReference);
        
        /// <summary>
        /// The backing field for the AA property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ICurrentAssociation _aA;
        
        private static Lazy<ITypedElement> _autoConnectReference = new Lazy<ITypedElement>(RetrieveAutoConnectReference);
        
        /// <summary>
        /// The backing field for the AutoConnect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAutoConnectObject _autoConnect;
        
        private static Lazy<ITypedElement> _billingPeriodValuesReference = new Lazy<ITypedElement>(RetrieveBillingPeriodValuesReference);
        
        /// <summary>
        /// The backing field for the BillingPeriodValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBillingPeriodValues _billingPeriodValues;
        
        private static Lazy<ITypedElement> _electricityIDReference = new Lazy<ITypedElement>(RetrieveElectricityIDReference);
        
        /// <summary>
        /// The backing field for the ElectricityID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityID _electricityID;
        
        private static Lazy<ITypedElement> _programEntriesReference = new Lazy<ITypedElement>(RetrieveProgramEntriesReference);
        
        /// <summary>
        /// The backing field for the ProgramEntries property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityProgramEntries _programEntries;
        
        private static Lazy<ITypedElement> _outputPulseReference = new Lazy<ITypedElement>(RetrieveOutputPulseReference);
        
        /// <summary>
        /// The backing field for the OutputPulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOutputPulseValues_constants _outputPulse;
        
        private static Lazy<ITypedElement> _readingFactorReference = new Lazy<ITypedElement>(RetrieveReadingFactorReference);
        
        /// <summary>
        /// The backing field for the ReadingFactor property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IReadingFactorAndCT_VTratio _readingFactor;
        
        private static Lazy<ITypedElement> _nominalValuesReference = new Lazy<ITypedElement>(RetrieveNominalValuesReference);
        
        /// <summary>
        /// The backing field for the NominalValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityNominalValues _nominalValues;
        
        private static Lazy<ITypedElement> _inputPulseReference = new Lazy<ITypedElement>(RetrieveInputPulseReference);
        
        /// <summary>
        /// The backing field for the InputPulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPulseValuesOrConstants _inputPulse;
        
        private static Lazy<ITypedElement> _measurementPeriodReference = new Lazy<ITypedElement>(RetrieveMeasurementPeriodReference);
        
        /// <summary>
        /// The backing field for the MeasurementPeriod property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementPeriod_recordingInterval_billingPeriodDuration _measurementPeriod;
        
        private static Lazy<ITypedElement> _timeEntriesReference = new Lazy<ITypedElement>(RetrieveTimeEntriesReference);
        
        /// <summary>
        /// The backing field for the TimeEntries property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITimeEntries _timeEntries;
        
        private static Lazy<ITypedElement> _transformerLineLossesReference = new Lazy<ITypedElement>(RetrieveTransformerLineLossesReference);
        
        /// <summary>
        /// The backing field for the TransformerLineLosses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITransformerAndLineLosses _transformerLineLosses;
        
        private static Lazy<ITypedElement> _measurementAlgorithmReference = new Lazy<ITypedElement>(RetrieveMeasurementAlgorithmReference);
        
        /// <summary>
        /// The backing field for the MeasurementAlgorithm property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementMethods _measurementAlgorithm;
        
        private static Lazy<ITypedElement> _meteringPointReference = new Lazy<ITypedElement>(RetrieveMeteringPointReference);
        
        /// <summary>
        /// The backing field for the MeteringPoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeteringPointID _meteringPoint;
        
        private static Lazy<ITypedElement> _registerMonitorReference = new Lazy<ITypedElement>(RetrieveRegisterMonitorReference);
        
        /// <summary>
        /// The backing field for the RegisterMonitor property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IRegisterMonitorObject _registerMonitor;
        
        private static Lazy<ITypedElement> _electricityValuesReference = new Lazy<ITypedElement>(RetrieveElectricityValuesReference);
        
        /// <summary>
        /// The backing field for the ElectricityValues property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityValues _electricityValues;
        
        private static Lazy<ITypedElement> _measurementValueTypesReference = new Lazy<ITypedElement>(RetrieveMeasurementValueTypesReference);
        
        /// <summary>
        /// The backing field for the MeasurementValueTypes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMeasurementValues _measurementValueTypes;
        
        private static Lazy<ITypedElement> _harmonicsReference = new Lazy<ITypedElement>(RetrieveHarmonicsReference);
        
        /// <summary>
        /// The backing field for the Harmonics property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityHarmonics _harmonics;
        
        private static Lazy<ITypedElement> _tariffsReference = new Lazy<ITypedElement>(RetrieveTariffsReference);
        
        /// <summary>
        /// The backing field for the Tariffs property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ICurrentlyActiveTariff _tariffs;
        
        private static Lazy<ITypedElement> _phaseanglesReference = new Lazy<ITypedElement>(RetrievePhaseanglesReference);
        
        /// <summary>
        /// The backing field for the Phaseangles property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExtendedPhaseAngleMeasurement _phaseangles;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public PhysicalDevice()
        {
            this._logicalDevice = new ObservableAssociationOrderedSet<ILogicalDevice>();
            this._logicalDevice.CollectionChanging += this.LogicalDeviceCollectionChanging;
            this._logicalDevice.CollectionChanged += this.LogicalDeviceCollectionChanged;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("PhysicalDevice")]
        [XmlAttributeAttribute(true)]
        public string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The managementLogicalDevice property
        /// </summary>
        [DisplayNameAttribute("managementLogicalDevice")]
        [CategoryAttribute("PhysicalDevice")]
        [XmlElementNameAttribute("managementLogicalDevice")]
        [XmlAttributeAttribute(true)]
        public IManagementLogicalDevice ManagementLogicalDevice
        {
            get
            {
                return this._managementLogicalDevice;
            }
            set
            {
                if ((this._managementLogicalDevice != value))
                {
                    IManagementLogicalDevice old = this._managementLogicalDevice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManagementLogicalDeviceChanging(e);
                    this.OnPropertyChanging("ManagementLogicalDevice", e, _managementLogicalDeviceReference);
                    this._managementLogicalDevice = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetManagementLogicalDevice;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetManagementLogicalDevice;
                    }
                    this.OnManagementLogicalDeviceChanged(e);
                    this.OnPropertyChanged("ManagementLogicalDevice", e, _managementLogicalDeviceReference);
                }
            }
        }
        
        /// <summary>
        /// The LogicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [CategoryAttribute("PhysicalDevice")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<ILogicalDevice> LogicalDevice
        {
            get
            {
                return this._logicalDevice;
            }
        }
        
        /// <summary>
        /// The ElectricityRelatedStatus property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityRelatedStatusData ElectricityRelatedStatus
        {
            get
            {
                return this._electricityRelatedStatus;
            }
            set
            {
                if ((this._electricityRelatedStatus != value))
                {
                    IElectricityRelatedStatusData old = this._electricityRelatedStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityRelatedStatusChanging(e);
                    this.OnPropertyChanging("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                    this._electricityRelatedStatus = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityRelatedStatus;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityRelatedStatus;
                    }
                    this.OnElectricityRelatedStatusChanged(e);
                    this.OnPropertyChanged("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                }
            }
        }
        
        /// <summary>
        /// The AA property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ICurrentAssociation AA
        {
            get
            {
                return this._aA;
            }
            set
            {
                if ((this._aA != value))
                {
                    ICurrentAssociation old = this._aA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAAChanging(e);
                    this.OnPropertyChanging("AA", e, _aAReference);
                    this._aA = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetAA;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAA;
                    }
                    this.OnAAChanged(e);
                    this.OnPropertyChanged("AA", e, _aAReference);
                }
            }
        }
        
        /// <summary>
        /// The AutoConnect property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IAutoConnectObject AutoConnect
        {
            get
            {
                return this._autoConnect;
            }
            set
            {
                if ((this._autoConnect != value))
                {
                    IAutoConnectObject old = this._autoConnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoConnectChanging(e);
                    this.OnPropertyChanging("AutoConnect", e, _autoConnectReference);
                    this._autoConnect = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetAutoConnect;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAutoConnect;
                    }
                    this.OnAutoConnectChanged(e);
                    this.OnPropertyChanged("AutoConnect", e, _autoConnectReference);
                }
            }
        }
        
        /// <summary>
        /// The BillingPeriodValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IBillingPeriodValues BillingPeriodValues
        {
            get
            {
                return this._billingPeriodValues;
            }
            set
            {
                if ((this._billingPeriodValues != value))
                {
                    IBillingPeriodValues old = this._billingPeriodValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodValuesChanging(e);
                    this.OnPropertyChanging("BillingPeriodValues", e, _billingPeriodValuesReference);
                    this._billingPeriodValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetBillingPeriodValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetBillingPeriodValues;
                    }
                    this.OnBillingPeriodValuesChanged(e);
                    this.OnPropertyChanged("BillingPeriodValues", e, _billingPeriodValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityID property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityID ElectricityID
        {
            get
            {
                return this._electricityID;
            }
            set
            {
                if ((this._electricityID != value))
                {
                    IElectricityID old = this._electricityID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityIDChanging(e);
                    this.OnPropertyChanging("ElectricityID", e, _electricityIDReference);
                    this._electricityID = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityID;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityID;
                    }
                    this.OnElectricityIDChanged(e);
                    this.OnPropertyChanged("ElectricityID", e, _electricityIDReference);
                }
            }
        }
        
        /// <summary>
        /// The ProgramEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityProgramEntries ProgramEntries
        {
            get
            {
                return this._programEntries;
            }
            set
            {
                if ((this._programEntries != value))
                {
                    IElectricityProgramEntries old = this._programEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProgramEntriesChanging(e);
                    this.OnPropertyChanging("ProgramEntries", e, _programEntriesReference);
                    this._programEntries = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetProgramEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetProgramEntries;
                    }
                    this.OnProgramEntriesChanged(e);
                    this.OnPropertyChanged("ProgramEntries", e, _programEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The OutputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOutputPulseValues_constants OutputPulse
        {
            get
            {
                return this._outputPulse;
            }
            set
            {
                if ((this._outputPulse != value))
                {
                    IOutputPulseValues_constants old = this._outputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputPulseChanging(e);
                    this.OnPropertyChanging("OutputPulse", e, _outputPulseReference);
                    this._outputPulse = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetOutputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetOutputPulse;
                    }
                    this.OnOutputPulseChanged(e);
                    this.OnPropertyChanged("OutputPulse", e, _outputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The ReadingFactor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IReadingFactorAndCT_VTratio ReadingFactor
        {
            get
            {
                return this._readingFactor;
            }
            set
            {
                if ((this._readingFactor != value))
                {
                    IReadingFactorAndCT_VTratio old = this._readingFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingFactorChanging(e);
                    this.OnPropertyChanging("ReadingFactor", e, _readingFactorReference);
                    this._readingFactor = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetReadingFactor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReadingFactor;
                    }
                    this.OnReadingFactorChanged(e);
                    this.OnPropertyChanged("ReadingFactor", e, _readingFactorReference);
                }
            }
        }
        
        /// <summary>
        /// The NominalValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityNominalValues NominalValues
        {
            get
            {
                return this._nominalValues;
            }
            set
            {
                if ((this._nominalValues != value))
                {
                    IElectricityNominalValues old = this._nominalValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalValuesChanging(e);
                    this.OnPropertyChanging("NominalValues", e, _nominalValuesReference);
                    this._nominalValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetNominalValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetNominalValues;
                    }
                    this.OnNominalValuesChanged(e);
                    this.OnPropertyChanged("NominalValues", e, _nominalValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The InputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPulseValuesOrConstants InputPulse
        {
            get
            {
                return this._inputPulse;
            }
            set
            {
                if ((this._inputPulse != value))
                {
                    IInputPulseValuesOrConstants old = this._inputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInputPulseChanging(e);
                    this.OnPropertyChanging("InputPulse", e, _inputPulseReference);
                    this._inputPulse = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetInputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetInputPulse;
                    }
                    this.OnInputPulseChanged(e);
                    this.OnPropertyChanged("InputPulse", e, _inputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementPeriod property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementPeriod_recordingInterval_billingPeriodDuration MeasurementPeriod
        {
            get
            {
                return this._measurementPeriod;
            }
            set
            {
                if ((this._measurementPeriod != value))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration old = this._measurementPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementPeriodChanging(e);
                    this.OnPropertyChanging("MeasurementPeriod", e, _measurementPeriodReference);
                    this._measurementPeriod = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementPeriod;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementPeriod;
                    }
                    this.OnMeasurementPeriodChanged(e);
                    this.OnPropertyChanged("MeasurementPeriod", e, _measurementPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// The TimeEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITimeEntries TimeEntries
        {
            get
            {
                return this._timeEntries;
            }
            set
            {
                if ((this._timeEntries != value))
                {
                    ITimeEntries old = this._timeEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeEntriesChanging(e);
                    this.OnPropertyChanging("TimeEntries", e, _timeEntriesReference);
                    this._timeEntries = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTimeEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTimeEntries;
                    }
                    this.OnTimeEntriesChanged(e);
                    this.OnPropertyChanged("TimeEntries", e, _timeEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerLineLosses property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ITransformerAndLineLosses TransformerLineLosses
        {
            get
            {
                return this._transformerLineLosses;
            }
            set
            {
                if ((this._transformerLineLosses != value))
                {
                    ITransformerAndLineLosses old = this._transformerLineLosses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerLineLossesChanging(e);
                    this.OnPropertyChanging("TransformerLineLosses", e, _transformerLineLossesReference);
                    this._transformerLineLosses = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTransformerLineLosses;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTransformerLineLosses;
                    }
                    this.OnTransformerLineLossesChanged(e);
                    this.OnPropertyChanged("TransformerLineLosses", e, _transformerLineLossesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementAlgorithm property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementMethods MeasurementAlgorithm
        {
            get
            {
                return this._measurementAlgorithm;
            }
            set
            {
                if ((this._measurementAlgorithm != value))
                {
                    IMeasurementMethods old = this._measurementAlgorithm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementAlgorithmChanging(e);
                    this.OnPropertyChanging("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                    this._measurementAlgorithm = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementAlgorithm;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementAlgorithm;
                    }
                    this.OnMeasurementAlgorithmChanged(e);
                    this.OnPropertyChanged("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                }
            }
        }
        
        /// <summary>
        /// The MeteringPoint property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeteringPointID MeteringPoint
        {
            get
            {
                return this._meteringPoint;
            }
            set
            {
                if ((this._meteringPoint != value))
                {
                    IMeteringPointID old = this._meteringPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeteringPointChanging(e);
                    this.OnPropertyChanging("MeteringPoint", e, _meteringPointReference);
                    this._meteringPoint = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeteringPoint;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeteringPoint;
                    }
                    this.OnMeteringPointChanged(e);
                    this.OnPropertyChanged("MeteringPoint", e, _meteringPointReference);
                }
            }
        }
        
        /// <summary>
        /// The RegisterMonitor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IRegisterMonitorObject RegisterMonitor
        {
            get
            {
                return this._registerMonitor;
            }
            set
            {
                if ((this._registerMonitor != value))
                {
                    IRegisterMonitorObject old = this._registerMonitor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisterMonitorChanging(e);
                    this.OnPropertyChanging("RegisterMonitor", e, _registerMonitorReference);
                    this._registerMonitor = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetRegisterMonitor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRegisterMonitor;
                    }
                    this.OnRegisterMonitorChanged(e);
                    this.OnPropertyChanged("RegisterMonitor", e, _registerMonitorReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityValues ElectricityValues
        {
            get
            {
                return this._electricityValues;
            }
            set
            {
                if ((this._electricityValues != value))
                {
                    IElectricityValues old = this._electricityValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityValuesChanging(e);
                    this.OnPropertyChanging("ElectricityValues", e, _electricityValuesReference);
                    this._electricityValues = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetElectricityValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElectricityValues;
                    }
                    this.OnElectricityValuesChanged(e);
                    this.OnPropertyChanged("ElectricityValues", e, _electricityValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValueTypes property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IMeasurementValues MeasurementValueTypes
        {
            get
            {
                return this._measurementValueTypes;
            }
            set
            {
                if ((this._measurementValueTypes != value))
                {
                    IMeasurementValues old = this._measurementValueTypes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueTypesChanging(e);
                    this.OnPropertyChanging("MeasurementValueTypes", e, _measurementValueTypesReference);
                    this._measurementValueTypes = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMeasurementValueTypes;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMeasurementValueTypes;
                    }
                    this.OnMeasurementValueTypesChanged(e);
                    this.OnPropertyChanged("MeasurementValueTypes", e, _measurementValueTypesReference);
                }
            }
        }
        
        /// <summary>
        /// The Harmonics property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IElectricityHarmonics Harmonics
        {
            get
            {
                return this._harmonics;
            }
            set
            {
                if ((this._harmonics != value))
                {
                    IElectricityHarmonics old = this._harmonics;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHarmonicsChanging(e);
                    this.OnPropertyChanging("Harmonics", e, _harmonicsReference);
                    this._harmonics = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetHarmonics;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetHarmonics;
                    }
                    this.OnHarmonicsChanged(e);
                    this.OnPropertyChanged("Harmonics", e, _harmonicsReference);
                }
            }
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ICurrentlyActiveTariff Tariffs
        {
            get
            {
                return this._tariffs;
            }
            set
            {
                if ((this._tariffs != value))
                {
                    ICurrentlyActiveTariff old = this._tariffs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTariffsChanging(e);
                    this.OnPropertyChanging("Tariffs", e, _tariffsReference);
                    this._tariffs = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetTariffs;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetTariffs;
                    }
                    this.OnTariffsChanged(e);
                    this.OnPropertyChanged("Tariffs", e, _tariffsReference);
                }
            }
        }
        
        /// <summary>
        /// The Phaseangles property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExtendedPhaseAngleMeasurement Phaseangles
        {
            get
            {
                return this._phaseangles;
            }
            set
            {
                if ((this._phaseangles != value))
                {
                    IExtendedPhaseAngleMeasurement old = this._phaseangles;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseanglesChanging(e);
                    this.OnPropertyChanging("Phaseangles", e, _phaseanglesReference);
                    this._phaseangles = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetPhaseangles;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetPhaseangles;
                    }
                    this.OnPhaseanglesChanged(e);
                    this.OnPropertyChanged("Phaseangles", e, _phaseanglesReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PhysicalDeviceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PhysicalDeviceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//PhysicalDevice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired before the ManagementLogicalDevice property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ManagementLogicalDeviceChanging;
        
        /// <summary>
        /// Gets fired when the ManagementLogicalDevice property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ManagementLogicalDeviceChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityRelatedStatus property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityRelatedStatus property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanged;
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanged;
        
        /// <summary>
        /// Gets fired before the AutoConnect property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AutoConnectChanging;
        
        /// <summary>
        /// Gets fired when the AutoConnect property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AutoConnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityID property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityIDChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramEntries property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProgramEntriesChanging;
        
        /// <summary>
        /// Gets fired when the ProgramEntries property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProgramEntriesChanged;
        
        /// <summary>
        /// Gets fired before the OutputPulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputPulseChanging;
        
        /// <summary>
        /// Gets fired when the OutputPulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputPulseChanged;
        
        /// <summary>
        /// Gets fired before the ReadingFactor property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReadingFactor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingFactorChanged;
        
        /// <summary>
        /// Gets fired before the NominalValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalValuesChanging;
        
        /// <summary>
        /// Gets fired when the NominalValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalValuesChanged;
        
        /// <summary>
        /// Gets fired before the InputPulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> InputPulseChanging;
        
        /// <summary>
        /// Gets fired when the InputPulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> InputPulseChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementPeriod property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementPeriod property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimeEntries property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeEntriesChanging;
        
        /// <summary>
        /// Gets fired when the TimeEntries property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeEntriesChanged;
        
        /// <summary>
        /// Gets fired before the TransformerLineLosses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanging;
        
        /// <summary>
        /// Gets fired when the TransformerLineLosses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementAlgorithm property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementAlgorithm property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanged;
        
        /// <summary>
        /// Gets fired before the MeteringPoint property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeteringPointChanging;
        
        /// <summary>
        /// Gets fired when the MeteringPoint property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeteringPointChanged;
        
        /// <summary>
        /// Gets fired before the RegisterMonitor property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RegisterMonitorChanging;
        
        /// <summary>
        /// Gets fired when the RegisterMonitor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RegisterMonitorChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityValues property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityValuesChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityValues property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElectricityValuesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueTypes property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueTypes property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanged;
        
        /// <summary>
        /// Gets fired before the Harmonics property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicsChanging;
        
        /// <summary>
        /// Gets fired when the Harmonics property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicsChanged;
        
        /// <summary>
        /// Gets fired before the Tariffs property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TariffsChanging;
        
        /// <summary>
        /// Gets fired when the Tariffs property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TariffsChanged;
        
        /// <summary>
        /// Gets fired before the Phaseangles property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PhaseanglesChanging;
        
        /// <summary>
        /// Gets fired when the Phaseangles property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PhaseanglesChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ID")));
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManagementLogicalDeviceReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("managementLogicalDevice")));
        }
        
        /// <summary>
        /// Raises the ManagementLogicalDeviceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManagementLogicalDeviceChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ManagementLogicalDeviceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManagementLogicalDeviceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManagementLogicalDeviceChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ManagementLogicalDeviceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ManagementLogicalDevice property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetManagementLogicalDevice(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ManagementLogicalDevice))
            {
                this.ManagementLogicalDevice = null;
            }
        }
        
        private static ITypedElement RetrieveLogicalDeviceReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("LogicalDevice")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LogicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LogicalDeviceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LogicalDevice", e, _logicalDeviceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LogicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LogicalDeviceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LogicalDevice", e, _logicalDeviceReference);
        }
        
        private static ITypedElement RetrieveElectricityRelatedStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ElectricityRelatedStatus")));
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityRelatedStatus property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityRelatedStatus(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityRelatedStatus))
            {
                this.ElectricityRelatedStatus = null;
            }
        }
        
        private static ITypedElement RetrieveAAReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("AA")));
        }
        
        /// <summary>
        /// Raises the AAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAA(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AA))
            {
                this.AA = null;
            }
        }
        
        private static ITypedElement RetrieveAutoConnectReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("AutoConnect")));
        }
        
        /// <summary>
        /// Raises the AutoConnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoConnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AutoConnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAutoConnect(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AutoConnect))
            {
                this.AutoConnect = null;
            }
        }
        
        private static ITypedElement RetrieveBillingPeriodValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("BillingPeriodValues")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillingPeriodValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillingPeriodValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.BillingPeriodValues))
            {
                this.BillingPeriodValues = null;
            }
        }
        
        private static ITypedElement RetrieveElectricityIDReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ElectricityID")));
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityID property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityID(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityID))
            {
                this.ElectricityID = null;
            }
        }
        
        private static ITypedElement RetrieveProgramEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ProgramEntries")));
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProgramEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProgramEntries(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ProgramEntries))
            {
                this.ProgramEntries = null;
            }
        }
        
        private static ITypedElement RetrieveOutputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("OutputPulse")));
        }
        
        /// <summary>
        /// Raises the OutputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutputPulse(object sender, EventArgs eventArgs)
        {
            if ((sender == this.OutputPulse))
            {
                this.OutputPulse = null;
            }
        }
        
        private static ITypedElement RetrieveReadingFactorReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ReadingFactor")));
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingFactor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingFactor(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ReadingFactor))
            {
                this.ReadingFactor = null;
            }
        }
        
        private static ITypedElement RetrieveNominalValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("NominalValues")));
        }
        
        /// <summary>
        /// Raises the NominalValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NominalValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNominalValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.NominalValues))
            {
                this.NominalValues = null;
            }
        }
        
        private static ITypedElement RetrieveInputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("InputPulse")));
        }
        
        /// <summary>
        /// Raises the InputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInputPulse(object sender, EventArgs eventArgs)
        {
            if ((sender == this.InputPulse))
            {
                this.InputPulse = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("MeasurementPeriod")));
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementPeriod(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementPeriod))
            {
                this.MeasurementPeriod = null;
            }
        }
        
        private static ITypedElement RetrieveTimeEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("TimeEntries")));
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimeEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimeEntries(object sender, EventArgs eventArgs)
        {
            if ((sender == this.TimeEntries))
            {
                this.TimeEntries = null;
            }
        }
        
        private static ITypedElement RetrieveTransformerLineLossesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("TransformerLineLosses")));
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerLineLosses property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerLineLosses(object sender, EventArgs eventArgs)
        {
            if ((sender == this.TransformerLineLosses))
            {
                this.TransformerLineLosses = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementAlgorithmReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("MeasurementAlgorithm")));
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementAlgorithm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementAlgorithm(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementAlgorithm))
            {
                this.MeasurementAlgorithm = null;
            }
        }
        
        private static ITypedElement RetrieveMeteringPointReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("MeteringPoint")));
        }
        
        /// <summary>
        /// Raises the MeteringPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeteringPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeteringPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeteringPoint(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeteringPoint))
            {
                this.MeteringPoint = null;
            }
        }
        
        private static ITypedElement RetrieveRegisterMonitorReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("RegisterMonitor")));
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisterMonitor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisterMonitor(object sender, EventArgs eventArgs)
        {
            if ((sender == this.RegisterMonitor))
            {
                this.RegisterMonitor = null;
            }
        }
        
        private static ITypedElement RetrieveElectricityValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("ElectricityValues")));
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityValues(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ElectricityValues))
            {
                this.ElectricityValues = null;
            }
        }
        
        private static ITypedElement RetrieveMeasurementValueTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("MeasurementValueTypes")));
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValueTypes property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValueTypes(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MeasurementValueTypes))
            {
                this.MeasurementValueTypes = null;
            }
        }
        
        private static ITypedElement RetrieveHarmonicsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("Harmonics")));
        }
        
        /// <summary>
        /// Raises the HarmonicsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HarmonicsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Harmonics property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHarmonics(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Harmonics))
            {
                this.Harmonics = null;
            }
        }
        
        private static ITypedElement RetrieveTariffsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("Tariffs")));
        }
        
        /// <summary>
        /// Raises the TariffsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TariffsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TariffsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TariffsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tariffs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTariffs(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Tariffs))
            {
                this.Tariffs = null;
            }
        }
        
        private static ITypedElement RetrievePhaseanglesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.PhysicalDevice.ClassInstance)).Resolve("Phaseangles")));
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phaseangles property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseangles(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Phaseangles))
            {
                this.Phaseangles = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ElectricityRelatedStatus))
            {
                return ModelHelper.CreatePath("ElectricityRelatedStatus");
            }
            if ((element == this.AA))
            {
                return ModelHelper.CreatePath("AA");
            }
            if ((element == this.AutoConnect))
            {
                return ModelHelper.CreatePath("AutoConnect");
            }
            if ((element == this.BillingPeriodValues))
            {
                return ModelHelper.CreatePath("BillingPeriodValues");
            }
            if ((element == this.ElectricityID))
            {
                return ModelHelper.CreatePath("ElectricityID");
            }
            if ((element == this.ProgramEntries))
            {
                return ModelHelper.CreatePath("ProgramEntries");
            }
            if ((element == this.OutputPulse))
            {
                return ModelHelper.CreatePath("OutputPulse");
            }
            if ((element == this.ReadingFactor))
            {
                return ModelHelper.CreatePath("ReadingFactor");
            }
            if ((element == this.NominalValues))
            {
                return ModelHelper.CreatePath("NominalValues");
            }
            if ((element == this.InputPulse))
            {
                return ModelHelper.CreatePath("InputPulse");
            }
            if ((element == this.MeasurementPeriod))
            {
                return ModelHelper.CreatePath("MeasurementPeriod");
            }
            if ((element == this.TimeEntries))
            {
                return ModelHelper.CreatePath("TimeEntries");
            }
            if ((element == this.TransformerLineLosses))
            {
                return ModelHelper.CreatePath("TransformerLineLosses");
            }
            if ((element == this.MeasurementAlgorithm))
            {
                return ModelHelper.CreatePath("MeasurementAlgorithm");
            }
            if ((element == this.MeteringPoint))
            {
                return ModelHelper.CreatePath("MeteringPoint");
            }
            if ((element == this.RegisterMonitor))
            {
                return ModelHelper.CreatePath("RegisterMonitor");
            }
            if ((element == this.ElectricityValues))
            {
                return ModelHelper.CreatePath("ElectricityValues");
            }
            if ((element == this.MeasurementValueTypes))
            {
                return ModelHelper.CreatePath("MeasurementValueTypes");
            }
            if ((element == this.Harmonics))
            {
                return ModelHelper.CreatePath("Harmonics");
            }
            if ((element == this.Tariffs))
            {
                return ModelHelper.CreatePath("Tariffs");
            }
            if ((element == this.Phaseangles))
            {
                return ModelHelper.CreatePath("Phaseangles");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MANAGEMENTLOGICALDEVICE"))
            {
                return this.ManagementLogicalDevice;
            }
            if ((reference == "LOGICALDEVICE"))
            {
                if ((index < this.LogicalDevice.Count))
                {
                    return this.LogicalDevice[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ELECTRICITYRELATEDSTATUS"))
            {
                return this.ElectricityRelatedStatus;
            }
            if ((reference == "AA"))
            {
                return this.AA;
            }
            if ((reference == "AUTOCONNECT"))
            {
                return this.AutoConnect;
            }
            if ((reference == "BILLINGPERIODVALUES"))
            {
                return this.BillingPeriodValues;
            }
            if ((reference == "ELECTRICITYID"))
            {
                return this.ElectricityID;
            }
            if ((reference == "PROGRAMENTRIES"))
            {
                return this.ProgramEntries;
            }
            if ((reference == "OUTPUTPULSE"))
            {
                return this.OutputPulse;
            }
            if ((reference == "READINGFACTOR"))
            {
                return this.ReadingFactor;
            }
            if ((reference == "NOMINALVALUES"))
            {
                return this.NominalValues;
            }
            if ((reference == "INPUTPULSE"))
            {
                return this.InputPulse;
            }
            if ((reference == "MEASUREMENTPERIOD"))
            {
                return this.MeasurementPeriod;
            }
            if ((reference == "TIMEENTRIES"))
            {
                return this.TimeEntries;
            }
            if ((reference == "TRANSFORMERLINELOSSES"))
            {
                return this.TransformerLineLosses;
            }
            if ((reference == "MEASUREMENTALGORITHM"))
            {
                return this.MeasurementAlgorithm;
            }
            if ((reference == "METERINGPOINT"))
            {
                return this.MeteringPoint;
            }
            if ((reference == "REGISTERMONITOR"))
            {
                return this.RegisterMonitor;
            }
            if ((reference == "ELECTRICITYVALUES"))
            {
                return this.ElectricityValues;
            }
            if ((reference == "MEASUREMENTVALUETYPES"))
            {
                return this.MeasurementValueTypes;
            }
            if ((reference == "HARMONICS"))
            {
                return this.Harmonics;
            }
            if ((reference == "TARIFFS"))
            {
                return this.Tariffs;
            }
            if ((reference == "PHASEANGLES"))
            {
                return this.Phaseangles;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LOGICALDEVICE"))
            {
                return this._logicalDevice;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MANAGEMENTLOGICALDEVICE"))
            {
                this.ManagementLogicalDevice = ((IManagementLogicalDevice)(value));
                return;
            }
            if ((feature == "ELECTRICITYRELATEDSTATUS"))
            {
                this.ElectricityRelatedStatus = ((IElectricityRelatedStatusData)(value));
                return;
            }
            if ((feature == "AA"))
            {
                this.AA = ((ICurrentAssociation)(value));
                return;
            }
            if ((feature == "AUTOCONNECT"))
            {
                this.AutoConnect = ((IAutoConnectObject)(value));
                return;
            }
            if ((feature == "BILLINGPERIODVALUES"))
            {
                this.BillingPeriodValues = ((IBillingPeriodValues)(value));
                return;
            }
            if ((feature == "ELECTRICITYID"))
            {
                this.ElectricityID = ((IElectricityID)(value));
                return;
            }
            if ((feature == "PROGRAMENTRIES"))
            {
                this.ProgramEntries = ((IElectricityProgramEntries)(value));
                return;
            }
            if ((feature == "OUTPUTPULSE"))
            {
                this.OutputPulse = ((IOutputPulseValues_constants)(value));
                return;
            }
            if ((feature == "READINGFACTOR"))
            {
                this.ReadingFactor = ((IReadingFactorAndCT_VTratio)(value));
                return;
            }
            if ((feature == "NOMINALVALUES"))
            {
                this.NominalValues = ((IElectricityNominalValues)(value));
                return;
            }
            if ((feature == "INPUTPULSE"))
            {
                this.InputPulse = ((IInputPulseValuesOrConstants)(value));
                return;
            }
            if ((feature == "MEASUREMENTPERIOD"))
            {
                this.MeasurementPeriod = ((IMeasurementPeriod_recordingInterval_billingPeriodDuration)(value));
                return;
            }
            if ((feature == "TIMEENTRIES"))
            {
                this.TimeEntries = ((ITimeEntries)(value));
                return;
            }
            if ((feature == "TRANSFORMERLINELOSSES"))
            {
                this.TransformerLineLosses = ((ITransformerAndLineLosses)(value));
                return;
            }
            if ((feature == "MEASUREMENTALGORITHM"))
            {
                this.MeasurementAlgorithm = ((IMeasurementMethods)(value));
                return;
            }
            if ((feature == "METERINGPOINT"))
            {
                this.MeteringPoint = ((IMeteringPointID)(value));
                return;
            }
            if ((feature == "REGISTERMONITOR"))
            {
                this.RegisterMonitor = ((IRegisterMonitorObject)(value));
                return;
            }
            if ((feature == "ELECTRICITYVALUES"))
            {
                this.ElectricityValues = ((IElectricityValues)(value));
                return;
            }
            if ((feature == "MEASUREMENTVALUETYPES"))
            {
                this.MeasurementValueTypes = ((IMeasurementValues)(value));
                return;
            }
            if ((feature == "HARMONICS"))
            {
                this.Harmonics = ((IElectricityHarmonics)(value));
                return;
            }
            if ((feature == "TARIFFS"))
            {
                this.Tariffs = ((ICurrentlyActiveTariff)(value));
                return;
            }
            if ((feature == "PHASEANGLES"))
            {
                this.Phaseangles = ((IExtendedPhaseAngleMeasurement)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IDProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MANAGEMENTLOGICALDEVICE"))
            {
                return new ManagementLogicalDeviceProxy(this);
            }
            if ((reference == "ELECTRICITYRELATEDSTATUS"))
            {
                return new ElectricityRelatedStatusProxy(this);
            }
            if ((reference == "AA"))
            {
                return new AAProxy(this);
            }
            if ((reference == "AUTOCONNECT"))
            {
                return new AutoConnectProxy(this);
            }
            if ((reference == "BILLINGPERIODVALUES"))
            {
                return new BillingPeriodValuesProxy(this);
            }
            if ((reference == "ELECTRICITYID"))
            {
                return new ElectricityIDProxy(this);
            }
            if ((reference == "PROGRAMENTRIES"))
            {
                return new ProgramEntriesProxy(this);
            }
            if ((reference == "OUTPUTPULSE"))
            {
                return new OutputPulseProxy(this);
            }
            if ((reference == "READINGFACTOR"))
            {
                return new ReadingFactorProxy(this);
            }
            if ((reference == "NOMINALVALUES"))
            {
                return new NominalValuesProxy(this);
            }
            if ((reference == "INPUTPULSE"))
            {
                return new InputPulseProxy(this);
            }
            if ((reference == "MEASUREMENTPERIOD"))
            {
                return new MeasurementPeriodProxy(this);
            }
            if ((reference == "TIMEENTRIES"))
            {
                return new TimeEntriesProxy(this);
            }
            if ((reference == "TRANSFORMERLINELOSSES"))
            {
                return new TransformerLineLossesProxy(this);
            }
            if ((reference == "MEASUREMENTALGORITHM"))
            {
                return new MeasurementAlgorithmProxy(this);
            }
            if ((reference == "METERINGPOINT"))
            {
                return new MeteringPointProxy(this);
            }
            if ((reference == "REGISTERMONITOR"))
            {
                return new RegisterMonitorProxy(this);
            }
            if ((reference == "ELECTRICITYVALUES"))
            {
                return new ElectricityValuesProxy(this);
            }
            if ((reference == "MEASUREMENTVALUETYPES"))
            {
                return new MeasurementValueTypesProxy(this);
            }
            if ((reference == "HARMONICS"))
            {
                return new HarmonicsProxy(this);
            }
            if ((reference == "TARIFFS"))
            {
                return new TariffsProxy(this);
            }
            if ((reference == "PHASEANGLES"))
            {
                return new PhaseanglesProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//PhysicalDevice")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PhysicalDevice class
        /// </summary>
        public class PhysicalDeviceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PhysicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PhysicalDeviceChildrenCollection(PhysicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ElectricityRelatedStatus = null;
                this._parent.AA = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.AA).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PhysicalDevice class
        /// </summary>
        public class PhysicalDeviceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PhysicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PhysicalDeviceReferencedElementsCollection(PhysicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ManagementLogicalDevice != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LogicalDevice.Count);
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ManagementLogicalDeviceChanged += this.PropagateValueChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ManagementLogicalDeviceChanged -= this.PropagateValueChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ManagementLogicalDevice == null))
                {
                    IManagementLogicalDevice managementLogicalDeviceCasted = item.As<IManagementLogicalDevice>();
                    if ((managementLogicalDeviceCasted != null))
                    {
                        this._parent.ManagementLogicalDevice = managementLogicalDeviceCasted;
                        return;
                    }
                }
                ILogicalDevice logicalDeviceCasted = item.As<ILogicalDevice>();
                if ((logicalDeviceCasted != null))
                {
                    this._parent.LogicalDevice.Add(logicalDeviceCasted);
                }
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ManagementLogicalDevice = null;
                this._parent.LogicalDevice.Clear();
                this._parent.ElectricityRelatedStatus = null;
                this._parent.AA = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ManagementLogicalDevice))
                {
                    return true;
                }
                if (this._parent.LogicalDevice.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ManagementLogicalDevice != null))
                {
                    array[arrayIndex] = this._parent.ManagementLogicalDevice;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> logicalDeviceEnumerator = this._parent.LogicalDevice.GetEnumerator();
                try
                {
                    for (
                    ; logicalDeviceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = logicalDeviceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    logicalDeviceEnumerator.Dispose();
                }
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ManagementLogicalDevice == item))
                {
                    this._parent.ManagementLogicalDevice = null;
                    return true;
                }
                ILogicalDevice logicalDeviceItem = item.As<ILogicalDevice>();
                if (((logicalDeviceItem != null) 
                            && this._parent.LogicalDevice.Remove(logicalDeviceItem)))
                {
                    return true;
                }
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ManagementLogicalDevice).Concat(this._parent.LogicalDevice).Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.AA).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IPhysicalDevice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the managementLogicalDevice property
        /// </summary>
        private sealed class ManagementLogicalDeviceProxy : ModelPropertyChange<IPhysicalDevice, IManagementLogicalDevice>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManagementLogicalDeviceProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "managementLogicalDevice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IManagementLogicalDevice Value
            {
                get
                {
                    return this.ModelElement.ManagementLogicalDevice;
                }
                set
                {
                    this.ModelElement.ManagementLogicalDevice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityRelatedStatus property
        /// </summary>
        private sealed class ElectricityRelatedStatusProxy : ModelPropertyChange<IPhysicalDevice, IElectricityRelatedStatusData>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityRelatedStatusProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ElectricityRelatedStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityRelatedStatusData Value
            {
                get
                {
                    return this.ModelElement.ElectricityRelatedStatus;
                }
                set
                {
                    this.ModelElement.ElectricityRelatedStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AA property
        /// </summary>
        private sealed class AAProxy : ModelPropertyChange<IPhysicalDevice, ICurrentAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AAProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "AA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentAssociation Value
            {
                get
                {
                    return this.ModelElement.AA;
                }
                set
                {
                    this.ModelElement.AA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AutoConnect property
        /// </summary>
        private sealed class AutoConnectProxy : ModelPropertyChange<IPhysicalDevice, IAutoConnectObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoConnectProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "AutoConnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAutoConnectObject Value
            {
                get
                {
                    return this.ModelElement.AutoConnect;
                }
                set
                {
                    this.ModelElement.AutoConnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodValues property
        /// </summary>
        private sealed class BillingPeriodValuesProxy : ModelPropertyChange<IPhysicalDevice, IBillingPeriodValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodValuesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "BillingPeriodValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBillingPeriodValues Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodValues;
                }
                set
                {
                    this.ModelElement.BillingPeriodValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityID property
        /// </summary>
        private sealed class ElectricityIDProxy : ModelPropertyChange<IPhysicalDevice, IElectricityID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityIDProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ElectricityID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityID Value
            {
                get
                {
                    return this.ModelElement.ElectricityID;
                }
                set
                {
                    this.ModelElement.ElectricityID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProgramEntries property
        /// </summary>
        private sealed class ProgramEntriesProxy : ModelPropertyChange<IPhysicalDevice, IElectricityProgramEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProgramEntriesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ProgramEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityProgramEntries Value
            {
                get
                {
                    return this.ModelElement.ProgramEntries;
                }
                set
                {
                    this.ModelElement.ProgramEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutputPulse property
        /// </summary>
        private sealed class OutputPulseProxy : ModelPropertyChange<IPhysicalDevice, IOutputPulseValues_constants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputPulseProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "OutputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputPulseValues_constants Value
            {
                get
                {
                    return this.ModelElement.OutputPulse;
                }
                set
                {
                    this.ModelElement.OutputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingFactor property
        /// </summary>
        private sealed class ReadingFactorProxy : ModelPropertyChange<IPhysicalDevice, IReadingFactorAndCT_VTratio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingFactorProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ReadingFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingFactorAndCT_VTratio Value
            {
                get
                {
                    return this.ModelElement.ReadingFactor;
                }
                set
                {
                    this.ModelElement.ReadingFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NominalValues property
        /// </summary>
        private sealed class NominalValuesProxy : ModelPropertyChange<IPhysicalDevice, IElectricityNominalValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalValuesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "NominalValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityNominalValues Value
            {
                get
                {
                    return this.ModelElement.NominalValues;
                }
                set
                {
                    this.ModelElement.NominalValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InputPulse property
        /// </summary>
        private sealed class InputPulseProxy : ModelPropertyChange<IPhysicalDevice, IInputPulseValuesOrConstants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputPulseProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "InputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPulseValuesOrConstants Value
            {
                get
                {
                    return this.ModelElement.InputPulse;
                }
                set
                {
                    this.ModelElement.InputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementPeriod property
        /// </summary>
        private sealed class MeasurementPeriodProxy : ModelPropertyChange<IPhysicalDevice, IMeasurementPeriod_recordingInterval_billingPeriodDuration>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementPeriodProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "MeasurementPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementPeriod_recordingInterval_billingPeriodDuration Value
            {
                get
                {
                    return this.ModelElement.MeasurementPeriod;
                }
                set
                {
                    this.ModelElement.MeasurementPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeEntries property
        /// </summary>
        private sealed class TimeEntriesProxy : ModelPropertyChange<IPhysicalDevice, ITimeEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeEntriesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "TimeEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeEntries Value
            {
                get
                {
                    return this.ModelElement.TimeEntries;
                }
                set
                {
                    this.ModelElement.TimeEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerLineLosses property
        /// </summary>
        private sealed class TransformerLineLossesProxy : ModelPropertyChange<IPhysicalDevice, ITransformerAndLineLosses>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerLineLossesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "TransformerLineLosses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerAndLineLosses Value
            {
                get
                {
                    return this.ModelElement.TransformerLineLosses;
                }
                set
                {
                    this.ModelElement.TransformerLineLosses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementAlgorithm property
        /// </summary>
        private sealed class MeasurementAlgorithmProxy : ModelPropertyChange<IPhysicalDevice, IMeasurementMethods>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementAlgorithmProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "MeasurementAlgorithm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementMethods Value
            {
                get
                {
                    return this.ModelElement.MeasurementAlgorithm;
                }
                set
                {
                    this.ModelElement.MeasurementAlgorithm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeteringPoint property
        /// </summary>
        private sealed class MeteringPointProxy : ModelPropertyChange<IPhysicalDevice, IMeteringPointID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeteringPointProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "MeteringPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeteringPointID Value
            {
                get
                {
                    return this.ModelElement.MeteringPoint;
                }
                set
                {
                    this.ModelElement.MeteringPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisterMonitor property
        /// </summary>
        private sealed class RegisterMonitorProxy : ModelPropertyChange<IPhysicalDevice, IRegisterMonitorObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisterMonitorProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "RegisterMonitor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisterMonitorObject Value
            {
                get
                {
                    return this.ModelElement.RegisterMonitor;
                }
                set
                {
                    this.ModelElement.RegisterMonitor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityValues property
        /// </summary>
        private sealed class ElectricityValuesProxy : ModelPropertyChange<IPhysicalDevice, IElectricityValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityValuesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "ElectricityValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityValues Value
            {
                get
                {
                    return this.ModelElement.ElectricityValues;
                }
                set
                {
                    this.ModelElement.ElectricityValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValueTypes property
        /// </summary>
        private sealed class MeasurementValueTypesProxy : ModelPropertyChange<IPhysicalDevice, IMeasurementValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueTypesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "MeasurementValueTypes")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValues Value
            {
                get
                {
                    return this.ModelElement.MeasurementValueTypes;
                }
                set
                {
                    this.ModelElement.MeasurementValueTypes = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Harmonics property
        /// </summary>
        private sealed class HarmonicsProxy : ModelPropertyChange<IPhysicalDevice, IElectricityHarmonics>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HarmonicsProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "Harmonics")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityHarmonics Value
            {
                get
                {
                    return this.ModelElement.Harmonics;
                }
                set
                {
                    this.ModelElement.Harmonics = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tariffs property
        /// </summary>
        private sealed class TariffsProxy : ModelPropertyChange<IPhysicalDevice, ICurrentlyActiveTariff>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TariffsProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "Tariffs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentlyActiveTariff Value
            {
                get
                {
                    return this.ModelElement.Tariffs;
                }
                set
                {
                    this.ModelElement.Tariffs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Phaseangles property
        /// </summary>
        private sealed class PhaseanglesProxy : ModelPropertyChange<IPhysicalDevice, IExtendedPhaseAngleMeasurement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseanglesProxy(IPhysicalDevice modelElement) : 
                    base(modelElement, "Phaseangles")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExtendedPhaseAngleMeasurement Value
            {
                get
                {
                    return this.ModelElement.Phaseangles;
                }
                set
                {
                    this.ModelElement.Phaseangles = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ManagementLogicalDevice class
    /// </summary>
    [XmlNamespaceAttribute("foo:cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("foo:cosem#//ManagementLogicalDevice")]
    public partial class ManagementLogicalDevice : LogicalDevice, IManagementLogicalDevice, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//ManagementLogicalDevice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//ManagementLogicalDevice")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the LogicalDeviceName class
    /// </summary>
    [XmlNamespaceAttribute("foo:cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("foo:cosem#//LogicalDeviceName")]
    public partial class LogicalDeviceName : ModelElement, ILogicalDeviceName, IModelElement
    {
        
        private static Lazy<ITypedElement> _nameReference = new Lazy<ITypedElement>(RetrieveNameReference);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISAPAssignmentCurrent _name;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public ISAPAssignmentCurrent Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    ISAPAssignmentCurrent old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameReference);
                    this._name = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetName;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetName;
                    }
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new LogicalDeviceNameChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LogicalDeviceNameReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//LogicalDeviceName")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanged;
        
        private static ITypedElement RetrieveNameReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.LogicalDeviceName.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Name property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetName(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Name))
            {
                this.Name = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Name))
            {
                return ModelHelper.CreatePath("name");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NAME"))
            {
                return this.Name;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((ISAPAssignmentCurrent)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//LogicalDeviceName")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDeviceName class
        /// </summary>
        public class LogicalDeviceNameChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDeviceName _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceNameChildrenCollection(LogicalDeviceName parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.NameChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.NameChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Name == null))
                {
                    ISAPAssignmentCurrent nameCasted = item.As<ISAPAssignmentCurrent>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Name = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Name))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Name).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDeviceName class
        /// </summary>
        public class LogicalDeviceNameReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDeviceName _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceNameReferencedElementsCollection(LogicalDeviceName parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.NameChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.NameChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Name == null))
                {
                    ISAPAssignmentCurrent nameCasted = item.As<ISAPAssignmentCurrent>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Name = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Name))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Name).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ILogicalDeviceName, ISAPAssignmentCurrent>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ILogicalDeviceName modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISAPAssignmentCurrent Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the COSEM class
    /// </summary>
    [XmlNamespaceAttribute("foo:cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEM")]
    public partial class COSEM : ModelElement, ICOSEM, IModelElement
    {
        
        private static Lazy<ITypedElement> _physicalDeviceReference = new Lazy<ITypedElement>(RetrievePhysicalDeviceReference);
        
        /// <summary>
        /// The backing field for the PhysicalDevice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IPhysicalDevice> _physicalDevice;
        
        private static Lazy<ITypedElement> _logicalDeviceReference = new Lazy<ITypedElement>(RetrieveLogicalDeviceReference);
        
        /// <summary>
        /// The backing field for the LogicalDevice property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ILogicalDevice> _logicalDevice;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public COSEM()
        {
            this._physicalDevice = new ObservableCompositionOrderedSet<IPhysicalDevice>(this);
            this._physicalDevice.CollectionChanging += this.PhysicalDeviceCollectionChanging;
            this._physicalDevice.CollectionChanged += this.PhysicalDeviceCollectionChanged;
            this._logicalDevice = new ObservableCompositionOrderedSet<ILogicalDevice>(this);
            this._logicalDevice.CollectionChanging += this.LogicalDeviceCollectionChanging;
            this._logicalDevice.CollectionChanged += this.LogicalDeviceCollectionChanged;
        }
        
        /// <summary>
        /// The PhysicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPhysicalDevice> PhysicalDevice
        {
            get
            {
                return this._physicalDevice;
            }
        }
        
        /// <summary>
        /// The LogicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ILogicalDevice> LogicalDevice
        {
            get
            {
                return this._logicalDevice;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new COSEMChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new COSEMReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEM")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrievePhysicalDeviceReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEM.ClassInstance)).Resolve("PhysicalDevice")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PhysicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PhysicalDeviceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PhysicalDevice", e, _physicalDeviceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PhysicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PhysicalDeviceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PhysicalDevice", e, _physicalDeviceReference);
        }
        
        private static ITypedElement RetrieveLogicalDeviceReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEM.ClassInstance)).Resolve("LogicalDevice")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LogicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LogicalDeviceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LogicalDevice", e, _logicalDeviceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LogicalDevice property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LogicalDeviceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LogicalDevice", e, _logicalDeviceReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int physicalDeviceIndex = ModelHelper.IndexOfReference(this.PhysicalDevice, element);
            if ((physicalDeviceIndex != -1))
            {
                return ModelHelper.CreatePath("PhysicalDevice", physicalDeviceIndex);
            }
            int logicalDeviceIndex = ModelHelper.IndexOfReference(this.LogicalDevice, element);
            if ((logicalDeviceIndex != -1))
            {
                return ModelHelper.CreatePath("LogicalDevice", logicalDeviceIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PHYSICALDEVICE"))
            {
                if ((index < this.PhysicalDevice.Count))
                {
                    return this.PhysicalDevice[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "LOGICALDEVICE"))
            {
                if ((index < this.LogicalDevice.Count))
                {
                    return this.LogicalDevice[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PHYSICALDEVICE"))
            {
                return this._physicalDevice;
            }
            if ((feature == "LOGICALDEVICE"))
            {
                return this._logicalDevice;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._physicalDevice))
            {
                return "PhysicalDevice";
            }
            if ((container == this._logicalDevice))
            {
                return "LogicalDevice";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEM")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the COSEM class
        /// </summary>
        public class COSEMChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private COSEM _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public COSEMChildrenCollection(COSEM parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PhysicalDevice.Count);
                    count = (count + this._parent.LogicalDevice.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.PhysicalDevice.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.PhysicalDevice.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPhysicalDevice physicalDeviceCasted = item.As<IPhysicalDevice>();
                if ((physicalDeviceCasted != null))
                {
                    this._parent.PhysicalDevice.Add(physicalDeviceCasted);
                }
                ILogicalDevice logicalDeviceCasted = item.As<ILogicalDevice>();
                if ((logicalDeviceCasted != null))
                {
                    this._parent.LogicalDevice.Add(logicalDeviceCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PhysicalDevice.Clear();
                this._parent.LogicalDevice.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PhysicalDevice.Contains(item))
                {
                    return true;
                }
                if (this._parent.LogicalDevice.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> physicalDeviceEnumerator = this._parent.PhysicalDevice.GetEnumerator();
                try
                {
                    for (
                    ; physicalDeviceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = physicalDeviceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    physicalDeviceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> logicalDeviceEnumerator = this._parent.LogicalDevice.GetEnumerator();
                try
                {
                    for (
                    ; logicalDeviceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = logicalDeviceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    logicalDeviceEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPhysicalDevice physicalDeviceItem = item.As<IPhysicalDevice>();
                if (((physicalDeviceItem != null) 
                            && this._parent.PhysicalDevice.Remove(physicalDeviceItem)))
                {
                    return true;
                }
                ILogicalDevice logicalDeviceItem = item.As<ILogicalDevice>();
                if (((logicalDeviceItem != null) 
                            && this._parent.LogicalDevice.Remove(logicalDeviceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PhysicalDevice).Concat(this._parent.LogicalDevice).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the COSEM class
        /// </summary>
        public class COSEMReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private COSEM _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public COSEMReferencedElementsCollection(COSEM parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PhysicalDevice.Count);
                    count = (count + this._parent.LogicalDevice.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.PhysicalDevice.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.PhysicalDevice.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LogicalDevice.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPhysicalDevice physicalDeviceCasted = item.As<IPhysicalDevice>();
                if ((physicalDeviceCasted != null))
                {
                    this._parent.PhysicalDevice.Add(physicalDeviceCasted);
                }
                ILogicalDevice logicalDeviceCasted = item.As<ILogicalDevice>();
                if ((logicalDeviceCasted != null))
                {
                    this._parent.LogicalDevice.Add(logicalDeviceCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PhysicalDevice.Clear();
                this._parent.LogicalDevice.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PhysicalDevice.Contains(item))
                {
                    return true;
                }
                if (this._parent.LogicalDevice.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> physicalDeviceEnumerator = this._parent.PhysicalDevice.GetEnumerator();
                try
                {
                    for (
                    ; physicalDeviceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = physicalDeviceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    physicalDeviceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> logicalDeviceEnumerator = this._parent.LogicalDevice.GetEnumerator();
                try
                {
                    for (
                    ; logicalDeviceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = logicalDeviceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    logicalDeviceEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPhysicalDevice physicalDeviceItem = item.As<IPhysicalDevice>();
                if (((physicalDeviceItem != null) 
                            && this._parent.PhysicalDevice.Remove(physicalDeviceItem)))
                {
                    return true;
                }
                ILogicalDevice logicalDeviceItem = item.As<ILogicalDevice>();
                if (((logicalDeviceItem != null) 
                            && this._parent.LogicalDevice.Remove(logicalDeviceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PhysicalDevice).Concat(this._parent.LogicalDevice).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The public interface for COSEM
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(COSEM))]
    [XmlDefaultImplementationTypeAttribute(typeof(COSEM))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEM")]
    public partial interface ICOSEM : IModelElement
    {
        
        /// <summary>
        /// The PhysicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IPhysicalDevice> PhysicalDevice
        {
            get;
        }
        
        /// <summary>
        /// The LogicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<ILogicalDevice> LogicalDevice
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for LogicalDeviceName
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(LogicalDeviceName))]
    [XmlDefaultImplementationTypeAttribute(typeof(LogicalDeviceName))]
    [ModelRepresentationClassAttribute("foo:cosem#//LogicalDeviceName")]
    public partial interface ILogicalDeviceName : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ISAPAssignmentCurrent Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanged;
    }
    
    /// <summary>
    /// The public interface for ManagementLogicalDevice
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ManagementLogicalDevice))]
    [XmlDefaultImplementationTypeAttribute(typeof(ManagementLogicalDevice))]
    [ModelRepresentationClassAttribute("foo:cosem#//ManagementLogicalDevice")]
    public partial interface IManagementLogicalDevice : IModelElement, ILogicalDevice
    {
    }
    
    /// <summary>
    /// The public interface for PhysicalDevice
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PhysicalDevice))]
    [XmlDefaultImplementationTypeAttribute(typeof(PhysicalDevice))]
    [ModelRepresentationClassAttribute("foo:cosem#//PhysicalDevice")]
    public partial interface IPhysicalDevice : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("PhysicalDevice")]
        [XmlAttributeAttribute(true)]
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The managementLogicalDevice property
        /// </summary>
        [DisplayNameAttribute("managementLogicalDevice")]
        [CategoryAttribute("PhysicalDevice")]
        [XmlElementNameAttribute("managementLogicalDevice")]
        [XmlAttributeAttribute(true)]
        IManagementLogicalDevice ManagementLogicalDevice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LogicalDevice property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [CategoryAttribute("PhysicalDevice")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<ILogicalDevice> LogicalDevice
        {
            get;
        }
        
        /// <summary>
        /// The ElectricityRelatedStatus property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityRelatedStatusData ElectricityRelatedStatus
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AA property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ICurrentAssociation AA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AutoConnect property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IAutoConnectObject AutoConnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BillingPeriodValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBillingPeriodValues BillingPeriodValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricityID property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityID ElectricityID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ProgramEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityProgramEntries ProgramEntries
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IOutputPulseValues_constants OutputPulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReadingFactor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IReadingFactorAndCT_VTratio ReadingFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NominalValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityNominalValues NominalValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPulseValuesOrConstants InputPulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementPeriod property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementPeriod_recordingInterval_billingPeriodDuration MeasurementPeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ITimeEntries TimeEntries
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TransformerLineLosses property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ITransformerAndLineLosses TransformerLineLosses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementAlgorithm property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementMethods MeasurementAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeteringPoint property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeteringPointID MeteringPoint
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RegisterMonitor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IRegisterMonitorObject RegisterMonitor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricityValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityValues ElectricityValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementValueTypes property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementValues MeasurementValueTypes
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Harmonics property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityHarmonics Harmonics
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ICurrentlyActiveTariff Tariffs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Phaseangles property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IExtendedPhaseAngleMeasurement Phaseangles
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired before the ManagementLogicalDevice property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ManagementLogicalDeviceChanging;
        
        /// <summary>
        /// Gets fired when the ManagementLogicalDevice property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ManagementLogicalDeviceChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityRelatedStatus property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityRelatedStatus property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanged;
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanged;
        
        /// <summary>
        /// Gets fired before the AutoConnect property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AutoConnectChanging;
        
        /// <summary>
        /// Gets fired when the AutoConnect property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AutoConnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityID property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityIDChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramEntries property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ProgramEntriesChanging;
        
        /// <summary>
        /// Gets fired when the ProgramEntries property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ProgramEntriesChanged;
        
        /// <summary>
        /// Gets fired before the OutputPulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputPulseChanging;
        
        /// <summary>
        /// Gets fired when the OutputPulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputPulseChanged;
        
        /// <summary>
        /// Gets fired before the ReadingFactor property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReadingFactor property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingFactorChanged;
        
        /// <summary>
        /// Gets fired before the NominalValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalValuesChanging;
        
        /// <summary>
        /// Gets fired when the NominalValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalValuesChanged;
        
        /// <summary>
        /// Gets fired before the InputPulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> InputPulseChanging;
        
        /// <summary>
        /// Gets fired when the InputPulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> InputPulseChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementPeriod property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementPeriod property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimeEntries property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeEntriesChanging;
        
        /// <summary>
        /// Gets fired when the TimeEntries property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeEntriesChanged;
        
        /// <summary>
        /// Gets fired before the TransformerLineLosses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanging;
        
        /// <summary>
        /// Gets fired when the TransformerLineLosses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementAlgorithm property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementAlgorithm property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanged;
        
        /// <summary>
        /// Gets fired before the MeteringPoint property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeteringPointChanging;
        
        /// <summary>
        /// Gets fired when the MeteringPoint property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeteringPointChanged;
        
        /// <summary>
        /// Gets fired before the RegisterMonitor property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RegisterMonitorChanging;
        
        /// <summary>
        /// Gets fired when the RegisterMonitor property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RegisterMonitorChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityValuesChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityValuesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueTypes property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueTypes property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanged;
        
        /// <summary>
        /// Gets fired before the Harmonics property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicsChanging;
        
        /// <summary>
        /// Gets fired when the Harmonics property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicsChanged;
        
        /// <summary>
        /// Gets fired before the Tariffs property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TariffsChanging;
        
        /// <summary>
        /// Gets fired when the Tariffs property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TariffsChanged;
        
        /// <summary>
        /// Gets fired before the Phaseangles property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PhaseanglesChanging;
        
        /// <summary>
        /// Gets fired when the Phaseangles property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PhaseanglesChanged;
    }
    
    /// <summary>
    /// The public interface for LogicalDevice
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(LogicalDevice))]
    [XmlDefaultImplementationTypeAttribute(typeof(LogicalDevice))]
    [ModelRepresentationClassAttribute("foo:cosem#//LogicalDevice")]
    public partial interface ILogicalDevice : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("LogicalDevice")]
        [XmlAttributeAttribute(true)]
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AA property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ICurrentAssociation AA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ILogicalDeviceName Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AutoConnect property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IAutoConnectObject AutoConnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BillingPeriodValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBillingPeriodValues BillingPeriodValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricityID property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityID ElectricityID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ProgramEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityProgramEntries ProgramEntries
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IOutputPulseValues_constants OutputPulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReadingFactor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IReadingFactorAndCT_VTratio ReadingFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NominalValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityNominalValues NominalValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InputPulse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPulseValuesOrConstants InputPulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementPeriod property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementPeriod_recordingInterval_billingPeriodDuration MeasurementPeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeEntries property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ITimeEntries TimeEntries
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TransformerLineLosses property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ITransformerAndLineLosses TransformerLineLosses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementAlgorithm property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementMethods MeasurementAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeteringPoint property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeteringPointID MeteringPoint
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricityRelatedStatus property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityRelatedStatusData ElectricityRelatedStatus
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RegisterMonitor property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IRegisterMonitorObject RegisterMonitor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricityValues property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityValues ElectricityValues
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementValueTypes property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IMeasurementValues MeasurementValueTypes
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Harmonics property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IElectricityHarmonics Harmonics
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ICurrentlyActiveTariff Tariffs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Phaseangles property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IExtendedPhaseAngleMeasurement Phaseangles
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the AutoConnect property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AutoConnectChanging;
        
        /// <summary>
        /// Gets fired when the AutoConnect property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AutoConnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityID property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityIDChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramEntries property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ProgramEntriesChanging;
        
        /// <summary>
        /// Gets fired when the ProgramEntries property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ProgramEntriesChanged;
        
        /// <summary>
        /// Gets fired before the OutputPulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputPulseChanging;
        
        /// <summary>
        /// Gets fired when the OutputPulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputPulseChanged;
        
        /// <summary>
        /// Gets fired before the ReadingFactor property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReadingFactor property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingFactorChanged;
        
        /// <summary>
        /// Gets fired before the NominalValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalValuesChanging;
        
        /// <summary>
        /// Gets fired when the NominalValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalValuesChanged;
        
        /// <summary>
        /// Gets fired before the InputPulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> InputPulseChanging;
        
        /// <summary>
        /// Gets fired when the InputPulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> InputPulseChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementPeriod property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementPeriod property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimeEntries property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeEntriesChanging;
        
        /// <summary>
        /// Gets fired when the TimeEntries property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeEntriesChanged;
        
        /// <summary>
        /// Gets fired before the TransformerLineLosses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanging;
        
        /// <summary>
        /// Gets fired when the TransformerLineLosses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransformerLineLossesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementAlgorithm property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementAlgorithm property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanged;
        
        /// <summary>
        /// Gets fired before the MeteringPoint property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeteringPointChanging;
        
        /// <summary>
        /// Gets fired when the MeteringPoint property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeteringPointChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityRelatedStatus property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityRelatedStatus property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanged;
        
        /// <summary>
        /// Gets fired before the RegisterMonitor property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RegisterMonitorChanging;
        
        /// <summary>
        /// Gets fired when the RegisterMonitor property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RegisterMonitorChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityValues property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityValuesChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityValues property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ElectricityValuesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueTypes property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueTypes property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanged;
        
        /// <summary>
        /// Gets fired before the Harmonics property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicsChanging;
        
        /// <summary>
        /// Gets fired when the Harmonics property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicsChanged;
        
        /// <summary>
        /// Gets fired before the Tariffs property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TariffsChanging;
        
        /// <summary>
        /// Gets fired when the Tariffs property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TariffsChanged;
        
        /// <summary>
        /// Gets fired before the Phaseangles property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PhaseanglesChanging;
        
        /// <summary>
        /// Gets fired when the Phaseangles property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PhaseanglesChanged;
    }
}
namespace TemporaryGeneratedCode.COSEM.Datatypes
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// The default implementation of the scal_unit_type class
    /// </summary>
    [XmlNamespaceAttribute("data")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("foo:cosem#//Datatypes/scal_unit_type")]
    [XmlElementNameAttribute("scal_unit_type")]
    public partial class Scal_unit_type : ModelElement, IScal_unit_type, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Scaler property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _scaler;
        
        private static Lazy<ITypedElement> _scalerAttribute = new Lazy<ITypedElement>(RetrieveScalerAttribute);
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<Units> _unit;
        
        private static Lazy<ITypedElement> _unitAttribute = new Lazy<ITypedElement>(RetrieveUnitAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The scaler property
        /// </summary>
        [DisplayNameAttribute("scaler")]
        [CategoryAttribute("scal_unit_type")]
        [XmlElementNameAttribute("scaler")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Scaler
        {
            get
            {
                return this._scaler;
            }
            set
            {
                if ((this._scaler != value))
                {
                    Nullable<int> old = this._scaler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScalerChanging(e);
                    this.OnPropertyChanging("Scaler", e, _scalerAttribute);
                    this._scaler = value;
                    this.OnScalerChanged(e);
                    this.OnPropertyChanged("Scaler", e, _scalerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Unit property
        /// </summary>
        [CategoryAttribute("scal_unit_type")]
        [XmlAttributeAttribute(true)]
        public Nullable<Units> Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    Nullable<Units> old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e, _unitAttribute);
                    this._unit = value;
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e, _unitAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//Datatypes/scal_unit_type")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Scaler property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ScalerChanged;
        
        /// <summary>
        /// Gets fired before the Scaler property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ScalerChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UnitChanging;
        
        private static ITypedElement RetrieveScalerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.Datatypes.Scal_unit_type.ClassInstance)).Resolve("scaler")));
        }
        
        /// <summary>
        /// Raises the ScalerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ScalerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ScalerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.Datatypes.Scal_unit_type.ClassInstance)).Resolve("Unit")));
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SCALER"))
            {
                return this.Scaler;
            }
            if ((attribute == "UNIT"))
            {
                return this.Unit;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCALER"))
            {
                this.Scaler = ((int)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((Units)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SCALER"))
            {
                return Observable.Box(new ScalerProxy(this));
            }
            if ((attribute == "UNIT"))
            {
                return Observable.Box(new UnitProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//Datatypes/scal_unit_type")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scaler property
        /// </summary>
        private sealed class ScalerProxy : ModelPropertyChange<IScal_unit_type, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScalerProxy(IScal_unit_type modelElement) : 
                    base(modelElement, "scaler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Scaler;
                }
                set
                {
                    this.ModelElement.Scaler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IScal_unit_type, Nullable<Units>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IScal_unit_type modelElement) : 
                    base(modelElement, "Unit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<Units> Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
        }
    }
    
    [TypeConverterAttribute(typeof(UnitsConverter))]
    [ModelRepresentationClassAttribute("foo:cosem#//Datatypes/Units")]
    public enum Units
    {
        
        Year = 0,
        
        Month = 1,
        
        Week = 2,
        
        Day = 3,
        
        Hour = 4,
        
        Min = 5,
        
        Second = 6,
        
        Degree = 7,
        
        Degree_celsius = 8,
        
        Currency = 9,
        
        Metre = 10,
        
        Metre_per_second = 11,
        
        Cubic_metre = 12,
        
        Cubic_metre_per_hour = 13,
        
        Litre = 14,
        
        Kilogram = 15,
        
        Newton = 16,
        
        Newton_meter = 17,
        
        Pascal = 18,
        
        Bar = 19,
        
        Joule = 20,
        
        Joule_per_hour = 21,
        
        Watt = 22,
        
        Volt_ampere = 23,
        
        Var = 24,
        
        Watt_hour = 25,
        
        Volt_ampere_hour = 26,
        
        Var_hour = 27,
        
        Ampere = 28,
        
        Coulomb = 29,
        
        Volt = 30,
        
        Volt_per_metre = 31,
        
        Farad = 32,
        
        Ohm = 33,
        
        Weber = 34,
        
        Tesla = 35,
        
        Ampere_per_metre = 36,
        
        Henry = 37,
        
        Hertz = 38,
        
        Active_energy_meter_constant = 39,
        
        Reactive_energy_meter_constant = 40,
        
        Apparent_energy_meter_constant = 41,
        
        Volt_squared_hours = 42,
        
        Ampere_squared_hours = 43,
        
        Kilogram_per_second = 44,
        
        Siemens = 45,
        
        Kelvin = 46,
        
        Percentage = 47,
        
        Ampere_hour = 48,
        
        Energy_per_volume = 49,
        
        Mole_percent = 50,
        
        Calorific_value = 51,
        
        Mass_density = 52,
        
        Pascal_second = 53,
        
        Joule_kilogram = 54,
        
        Signal_strength_milliwatt = 55,
        
        Signal_strenght_microvolt = 56,
        
        Count = 57,
    }
    
    [ModelRepresentationClassAttribute("foo:cosem#//Datatypes/DisconnectControlState")]
    public enum DisconnectControlState
    {
        
        Disconnected = 0,
        
        Connected = 1,
        
        Ready_for_reconnection = 2,
    }
    
    [TypeConverterAttribute(typeof(DisconnectControlTransitionConverter))]
    [ModelRepresentationClassAttribute("foo:cosem#//Datatypes/DisconnectControlTransition")]
    public enum DisconnectControlTransition
    {
        
        Remote_reconnect = 0,
        
        Remote_disconnect = 1,
        
        Manual_reconnect = 2,
        
        Manual_disconnect = 3,
        
        Local_disconnect = 4,
        
        Local_reconnect = 5,
    }
    
    /// <summary>
    /// Implements a type converter for the enumeration DisconnectControlTransition
    /// </summary>
    public class DisconnectControlTransitionConverter : TypeConverter
    {
        
        /// <summary>
        /// Determines whether the converter can convert from the provided source type into DisconnectControlTransition
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="sourceType">the source type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        /// <summary>
        /// Determines whether the converter can convert to the destination type from DisconnectControlTransition
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        /// <summary>
        /// Convert the provided value into a DisconnectControlTransition
        /// </summary>
        /// <returns>the converted value as a DisconnectControlTransition</returns>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(DisconnectControlTransition);
            }
            string valueString = value.ToString();
            if ((valueString == "remote_reconnect"))
            {
                return DisconnectControlTransition.Remote_reconnect;
            }
            if ((valueString == "remote_disconnect"))
            {
                return DisconnectControlTransition.Remote_disconnect;
            }
            if ((valueString == "manual_reconnect"))
            {
                return DisconnectControlTransition.Manual_reconnect;
            }
            if ((valueString == "manual_disconnect"))
            {
                return DisconnectControlTransition.Manual_disconnect;
            }
            if ((valueString == "local_disconnect"))
            {
                return DisconnectControlTransition.Local_disconnect;
            }
            if ((valueString == "local_reconnect"))
            {
                return DisconnectControlTransition.Local_reconnect;
            }
            return default(DisconnectControlTransition);
        }
        
        /// <summary>
        /// Convert the provided value into a DisconnectControlTransition
        /// </summary>
        /// <returns>the converted value</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            DisconnectControlTransition valueCasted = ((DisconnectControlTransition)(value));
            if ((valueCasted == DisconnectControlTransition.Remote_reconnect))
            {
                return "remote_reconnect";
            }
            if ((valueCasted == DisconnectControlTransition.Remote_disconnect))
            {
                return "remote_disconnect";
            }
            if ((valueCasted == DisconnectControlTransition.Manual_reconnect))
            {
                return "manual_reconnect";
            }
            if ((valueCasted == DisconnectControlTransition.Manual_disconnect))
            {
                return "manual_disconnect";
            }
            if ((valueCasted == DisconnectControlTransition.Local_disconnect))
            {
                return "local_disconnect";
            }
            if ((valueCasted == DisconnectControlTransition.Local_reconnect))
            {
                return "local_reconnect";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
    
    /// <summary>
    /// Implements a type converter for the enumeration Units
    /// </summary>
    public class UnitsConverter : TypeConverter
    {
        
        /// <summary>
        /// Determines whether the converter can convert from the provided source type into Units
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="sourceType">the source type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        /// <summary>
        /// Determines whether the converter can convert to the destination type from Units
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        /// <summary>
        /// Convert the provided value into a Units
        /// </summary>
        /// <returns>the converted value as a Units</returns>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(Units);
            }
            string valueString = value.ToString();
            if ((valueString == "year"))
            {
                return Units.Year;
            }
            if ((valueString == "month"))
            {
                return Units.Month;
            }
            if ((valueString == "week"))
            {
                return Units.Week;
            }
            if ((valueString == "day"))
            {
                return Units.Day;
            }
            if ((valueString == "hour"))
            {
                return Units.Hour;
            }
            if ((valueString == "min"))
            {
                return Units.Min;
            }
            if ((valueString == "second"))
            {
                return Units.Second;
            }
            if ((valueString == "degree"))
            {
                return Units.Degree;
            }
            if ((valueString == "degree_celsius"))
            {
                return Units.Degree_celsius;
            }
            if ((valueString == "currency"))
            {
                return Units.Currency;
            }
            if ((valueString == "metre"))
            {
                return Units.Metre;
            }
            if ((valueString == "metre_per_second"))
            {
                return Units.Metre_per_second;
            }
            if ((valueString == "cubic_metre"))
            {
                return Units.Cubic_metre;
            }
            if ((valueString == "cubic_metre_per_hour"))
            {
                return Units.Cubic_metre_per_hour;
            }
            if ((valueString == "litre"))
            {
                return Units.Litre;
            }
            if ((valueString == "kilogram"))
            {
                return Units.Kilogram;
            }
            if ((valueString == "newton"))
            {
                return Units.Newton;
            }
            if ((valueString == "newton_meter"))
            {
                return Units.Newton_meter;
            }
            if ((valueString == "pascal"))
            {
                return Units.Pascal;
            }
            if ((valueString == "bar"))
            {
                return Units.Bar;
            }
            if ((valueString == "joule"))
            {
                return Units.Joule;
            }
            if ((valueString == "joule_per_hour"))
            {
                return Units.Joule_per_hour;
            }
            if ((valueString == "watt"))
            {
                return Units.Watt;
            }
            if ((valueString == "volt_ampere"))
            {
                return Units.Volt_ampere;
            }
            if ((valueString == "var"))
            {
                return Units.Var;
            }
            if ((valueString == "watt_hour"))
            {
                return Units.Watt_hour;
            }
            if ((valueString == "volt_ampere_hour"))
            {
                return Units.Volt_ampere_hour;
            }
            if ((valueString == "var_hour"))
            {
                return Units.Var_hour;
            }
            if ((valueString == "ampere"))
            {
                return Units.Ampere;
            }
            if ((valueString == "coulomb"))
            {
                return Units.Coulomb;
            }
            if ((valueString == "volt"))
            {
                return Units.Volt;
            }
            if ((valueString == "volt_per_metre"))
            {
                return Units.Volt_per_metre;
            }
            if ((valueString == "farad"))
            {
                return Units.Farad;
            }
            if ((valueString == "ohm"))
            {
                return Units.Ohm;
            }
            if ((valueString == "weber"))
            {
                return Units.Weber;
            }
            if ((valueString == "tesla"))
            {
                return Units.Tesla;
            }
            if ((valueString == "ampere_per_metre"))
            {
                return Units.Ampere_per_metre;
            }
            if ((valueString == "henry"))
            {
                return Units.Henry;
            }
            if ((valueString == "hertz"))
            {
                return Units.Hertz;
            }
            if ((valueString == "active_energy_meter_constant"))
            {
                return Units.Active_energy_meter_constant;
            }
            if ((valueString == "reactive_energy_meter_constant"))
            {
                return Units.Reactive_energy_meter_constant;
            }
            if ((valueString == "apparent_energy_meter_constant"))
            {
                return Units.Apparent_energy_meter_constant;
            }
            if ((valueString == "volt_squared_hours"))
            {
                return Units.Volt_squared_hours;
            }
            if ((valueString == "ampere_squared_hours"))
            {
                return Units.Ampere_squared_hours;
            }
            if ((valueString == "kilogram_per_second"))
            {
                return Units.Kilogram_per_second;
            }
            if ((valueString == "siemens"))
            {
                return Units.Siemens;
            }
            if ((valueString == "kelvin"))
            {
                return Units.Kelvin;
            }
            if ((valueString == "percentage"))
            {
                return Units.Percentage;
            }
            if ((valueString == "Ampere_hour"))
            {
                return Units.Ampere_hour;
            }
            if ((valueString == "energy_per_volume"))
            {
                return Units.Energy_per_volume;
            }
            if ((valueString == "mole_percent"))
            {
                return Units.Mole_percent;
            }
            if ((valueString == "calorific_value"))
            {
                return Units.Calorific_value;
            }
            if ((valueString == "mass_density"))
            {
                return Units.Mass_density;
            }
            if ((valueString == "pascal_second"))
            {
                return Units.Pascal_second;
            }
            if ((valueString == "Joule_kilogram"))
            {
                return Units.Joule_kilogram;
            }
            if ((valueString == "Signal_strength_milliwatt"))
            {
                return Units.Signal_strength_milliwatt;
            }
            if ((valueString == "Signal_strenght_microvolt"))
            {
                return Units.Signal_strenght_microvolt;
            }
            if ((valueString == "count"))
            {
                return Units.Count;
            }
            return default(Units);
        }
        
        /// <summary>
        /// Convert the provided value into a Units
        /// </summary>
        /// <returns>the converted value</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            Units valueCasted = ((Units)(value));
            if ((valueCasted == Units.Year))
            {
                return "year";
            }
            if ((valueCasted == Units.Month))
            {
                return "month";
            }
            if ((valueCasted == Units.Week))
            {
                return "week";
            }
            if ((valueCasted == Units.Day))
            {
                return "day";
            }
            if ((valueCasted == Units.Hour))
            {
                return "hour";
            }
            if ((valueCasted == Units.Min))
            {
                return "min";
            }
            if ((valueCasted == Units.Second))
            {
                return "second";
            }
            if ((valueCasted == Units.Degree))
            {
                return "degree";
            }
            if ((valueCasted == Units.Degree_celsius))
            {
                return "degree_celsius";
            }
            if ((valueCasted == Units.Currency))
            {
                return "currency";
            }
            if ((valueCasted == Units.Metre))
            {
                return "metre";
            }
            if ((valueCasted == Units.Metre_per_second))
            {
                return "metre_per_second";
            }
            if ((valueCasted == Units.Cubic_metre))
            {
                return "cubic_metre";
            }
            if ((valueCasted == Units.Cubic_metre_per_hour))
            {
                return "cubic_metre_per_hour";
            }
            if ((valueCasted == Units.Litre))
            {
                return "litre";
            }
            if ((valueCasted == Units.Kilogram))
            {
                return "kilogram";
            }
            if ((valueCasted == Units.Newton))
            {
                return "newton";
            }
            if ((valueCasted == Units.Newton_meter))
            {
                return "newton_meter";
            }
            if ((valueCasted == Units.Pascal))
            {
                return "pascal";
            }
            if ((valueCasted == Units.Bar))
            {
                return "bar";
            }
            if ((valueCasted == Units.Joule))
            {
                return "joule";
            }
            if ((valueCasted == Units.Joule_per_hour))
            {
                return "joule_per_hour";
            }
            if ((valueCasted == Units.Watt))
            {
                return "watt";
            }
            if ((valueCasted == Units.Volt_ampere))
            {
                return "volt_ampere";
            }
            if ((valueCasted == Units.Var))
            {
                return "var";
            }
            if ((valueCasted == Units.Watt_hour))
            {
                return "watt_hour";
            }
            if ((valueCasted == Units.Volt_ampere_hour))
            {
                return "volt_ampere_hour";
            }
            if ((valueCasted == Units.Var_hour))
            {
                return "var_hour";
            }
            if ((valueCasted == Units.Ampere))
            {
                return "ampere";
            }
            if ((valueCasted == Units.Coulomb))
            {
                return "coulomb";
            }
            if ((valueCasted == Units.Volt))
            {
                return "volt";
            }
            if ((valueCasted == Units.Volt_per_metre))
            {
                return "volt_per_metre";
            }
            if ((valueCasted == Units.Farad))
            {
                return "farad";
            }
            if ((valueCasted == Units.Ohm))
            {
                return "ohm";
            }
            if ((valueCasted == Units.Weber))
            {
                return "weber";
            }
            if ((valueCasted == Units.Tesla))
            {
                return "tesla";
            }
            if ((valueCasted == Units.Ampere_per_metre))
            {
                return "ampere_per_metre";
            }
            if ((valueCasted == Units.Henry))
            {
                return "henry";
            }
            if ((valueCasted == Units.Hertz))
            {
                return "hertz";
            }
            if ((valueCasted == Units.Active_energy_meter_constant))
            {
                return "active_energy_meter_constant";
            }
            if ((valueCasted == Units.Reactive_energy_meter_constant))
            {
                return "reactive_energy_meter_constant";
            }
            if ((valueCasted == Units.Apparent_energy_meter_constant))
            {
                return "apparent_energy_meter_constant";
            }
            if ((valueCasted == Units.Volt_squared_hours))
            {
                return "volt_squared_hours";
            }
            if ((valueCasted == Units.Ampere_squared_hours))
            {
                return "ampere_squared_hours";
            }
            if ((valueCasted == Units.Kilogram_per_second))
            {
                return "kilogram_per_second";
            }
            if ((valueCasted == Units.Siemens))
            {
                return "siemens";
            }
            if ((valueCasted == Units.Kelvin))
            {
                return "kelvin";
            }
            if ((valueCasted == Units.Percentage))
            {
                return "percentage";
            }
            if ((valueCasted == Units.Ampere_hour))
            {
                return "Ampere_hour";
            }
            if ((valueCasted == Units.Energy_per_volume))
            {
                return "energy_per_volume";
            }
            if ((valueCasted == Units.Mole_percent))
            {
                return "mole_percent";
            }
            if ((valueCasted == Units.Calorific_value))
            {
                return "calorific_value";
            }
            if ((valueCasted == Units.Mass_density))
            {
                return "mass_density";
            }
            if ((valueCasted == Units.Pascal_second))
            {
                return "pascal_second";
            }
            if ((valueCasted == Units.Joule_kilogram))
            {
                return "Joule_kilogram";
            }
            if ((valueCasted == Units.Signal_strength_milliwatt))
            {
                return "Signal_strength_milliwatt";
            }
            if ((valueCasted == Units.Signal_strenght_microvolt))
            {
                return "Signal_strenght_microvolt";
            }
            if ((valueCasted == Units.Count))
            {
                return "count";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
    
    /// <summary>
    /// The public interface for scal_unit_type
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Scal_unit_type))]
    [XmlDefaultImplementationTypeAttribute(typeof(Scal_unit_type))]
    [ModelRepresentationClassAttribute("foo:cosem#//Datatypes/scal_unit_type")]
    public partial interface IScal_unit_type : IModelElement
    {
        
        /// <summary>
        /// The scaler property
        /// </summary>
        [DisplayNameAttribute("scaler")]
        [CategoryAttribute("scal_unit_type")]
        [XmlElementNameAttribute("scaler")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Scaler
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Unit property
        /// </summary>
        [CategoryAttribute("scal_unit_type")]
        [XmlAttributeAttribute(true)]
        Nullable<Units> Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Scaler property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ScalerChanged;
        
        /// <summary>
        /// Gets fired before the Scaler property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ScalerChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> UnitChanging;
    }
}
namespace TemporaryGeneratedCode.COSEM.InterfaceClasses
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Repository;
    using System.Collections.Specialized;
    using TemporaryGeneratedCode.COSEM.Datatypes;
    using TemporaryGeneratedCode.COSEM;
    
    
    /// <summary>
    /// The default implementation of the S_FSK_PHY_MACsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSK_PHY_MACsetup")]
    public partial class S_FSK_PHY_MACsetup : Base, IS_FSK_PHY_MACsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSK_PHY_MACsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSK_PHY_MACsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKActiveinitiator class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKActiveinitiator")]
    public partial class S_FSKActiveinitiator : Base, IS_FSKActiveinitiator, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKActiveinitiator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKActiveinitiator")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKMACsynctimeouts class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKMACsynctimeouts")]
    public partial class S_FSKMACsynctimeouts : Base, IS_FSKMACsynctimeouts, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKMACsynctimeouts")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKMACsynctimeouts")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKMACcounters class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKMACcounters")]
    public partial class S_FSKMACcounters : Base, IS_FSKMACcounters, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKMACcounters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKMACcounters")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC61334_4_32LLCsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC61334_4_32LLCsetup")]
    public partial class IEC61334_4_32LLCsetup : Base, IIEC61334_4_32LLCsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC61334_4_32LLCsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC61334_4_32LLCsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKReportingsystemlist class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKReportingsystemlist")]
    public partial class S_FSKReportingsystemlist : Base, IS_FSKReportingsystemlist, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKReportingsystemlist")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/S_FSKReportingsystemlist")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the t61334_32_LLC_SSCS_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/t61334_32_LLC_SSCS_setup")]
    [XmlElementNameAttribute("t61334_32_LLC_SSCS_setup")]
    public partial class T61334_32_LLC_SSCS_setup : Base, IT61334_32_LLC_SSCS_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/t61334_32_LLC_SSCS_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/t61334_32_LLC_SSCS_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_Phy_layer_counters class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Phy_layer_counters")]
    public partial class PRIME_NB_OFDM_PLC_Phy_layer_counters : Base, IPRIME_NB_OFDM_PLC_Phy_layer_counters, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Phy_layer_counters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Phy_layer_counters")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MACsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACsetup")]
    public partial class PRIME_NB_OFDM_PLC_MACsetup : Base, IPRIME_NB_OFDM_PLC_MACsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_counters class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_counters")]
    public partial class PRIME_NB_OFDM_PLC_MAC_counters : Base, IPRIME_NB_OFDM_PLC_MAC_counters, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_counters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_counters")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_functionalparams class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_functionalparams")]
    public partial class PRIME_NB_OFDM_PLC_MAC_functionalparams : Base, IPRIME_NB_OFDM_PLC_MAC_functionalparams, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_functionalparams")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_functionalparams")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MACnetworkadmindata class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACnetworkadmindata")]
    public partial class PRIME_NB_OFDM_PLC_MACnetworkadmindata : Base, IPRIME_NB_OFDM_PLC_MACnetworkadmindata, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACnetworkadmindata")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACnetworkadmindata")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_Application_identification class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Application_identification")]
    public partial class PRIME_NB_OFDM_PLC_Application_identification : Base, IPRIME_NB_OFDM_PLC_Application_identification, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Application_identification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Application_identification")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_MAC_layer_counters class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_MAC_layer_counters")]
    public partial class G3_PLC_MAC_layer_counters : Base, IG3_PLC_MAC_layer_counters, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_MAC_layer_counters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_MAC_layer_counters")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_MAC_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_MAC_setup")]
    public partial class G3_PLC_MAC_setup : Base, IG3_PLC_MAC_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_MAC_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_MAC_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_6LoWPAN class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_6LoWPAN")]
    public partial class G3_PLC_6LoWPAN : Base, IG3_PLC_6LoWPAN, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_6LoWPAN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/G3_PLC_6LoWPAN")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_startup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_startup")]
    public partial class ZigBee_SAS_startup : Base, IZigBee_SAS_startup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_startup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_startup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_join class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_join")]
    public partial class ZigBee_SAS_join : Base, IZigBee_SAS_join, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_join")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_join")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_APS_fragmentation class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_APS_fragmentation")]
    public partial class ZigBee_SAS_APS_fragmentation : Base, IZigBee_SAS_APS_fragmentation, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_APS_fragmentation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBee_SAS_APS_fragmentation")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBeenetworkcontrol class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBeenetworkcontrol")]
    public partial class ZigBeenetworkcontrol : Base, IZigBeenetworkcontrol, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBeenetworkcontrol")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBeenetworkcontrol")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBeetunnelsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBeetunnelsetup")]
    public partial class ZigBeetunnelsetup : Base, IZigBeetunnelsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBeetunnelsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ZigBeetunnelsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the TCP_UDPsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/TCP_UDPsetup")]
    public partial class TCP_UDPsetup : Base, ITCP_UDPsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/TCP_UDPsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/TCP_UDPsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IPv4setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IPv4setup")]
    public partial class IPv4setup : Base, IIPv4setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IPv4setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IPv4setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IPv6setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IPv6setup")]
    public partial class IPv6setup : Base, IIPv6setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IPv6setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IPv6setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the MACaddresssetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/MACaddresssetup")]
    public partial class MACaddresssetup : Base, IMACaddresssetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/MACaddresssetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/MACaddresssetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PPPsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PPPsetup")]
    public partial class PPPsetup : Base, IPPPsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PPPsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/PPPsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SMTPsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/SMTPsetup")]
    public partial class SMTPsetup : Base, ISMTPsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/SMTPsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/SMTPsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Modemconfiguration class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Modemconfiguration")]
    public partial class Modemconfiguration : Base, IModemconfiguration, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Modemconfiguration")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Modemconfiguration")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Auto_answer class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Auto_answer")]
    public partial class Auto_answer : Base, IAuto_answer, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Auto_answer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Auto_answer")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Auto_connect class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Auto_connect")]
    public partial class Auto_connect : Base, IAuto_connect, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Auto_connect")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Auto_connect")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GPRS_modem_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/GPRS_modem_setup")]
    public partial class GPRS_modem_setup : Base, IGPRS_modem_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/GPRS_modem_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/GPRS_modem_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GSM_Diagnostic class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/GSM_Diagnostic")]
    public partial class GSM_Diagnostic : Base, IGSM_Diagnostic, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/GSM_Diagnostic")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/GSM_Diagnostic")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_twisted_pair_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_twisted_pair_setup")]
    public partial class IEC_twisted_pair_setup : Base, IIEC_twisted_pair_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_twisted_pair_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_twisted_pair_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_Bus_slave_port_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_slave_port_setup")]
    public partial class M_Bus_slave_port_setup : Base, IM_Bus_slave_port_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_slave_port_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_slave_port_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_Bus_client class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_client")]
    public partial class M_Bus_client : Base, IM_Bus_client, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_client")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_client")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Wireless_Mode_Q_Channel class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Wireless_Mode_Q_Channel")]
    public partial class Wireless_Mode_Q_Channel : Base, IWireless_Mode_Q_Channel, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Wireless_Mode_Q_Channel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Wireless_Mode_Q_Channel")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_Bus_master_port_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_master_port_setup")]
    public partial class M_Bus_master_port_setup : Base, IM_Bus_master_port_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_master_port_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_master_port_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DLMS_COSEM_Server_M_Bus_port_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DLMS_COSEM_Server_M_Bus_port_setup")]
    public partial class DLMS_COSEM_Server_M_Bus_port_setup : Base, IDLMS_COSEM_Server_M_Bus_port_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DLMS_COSEM_Server_M_Bus_port_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DLMS_COSEM_Server_M_Bus_port_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_Bus_diagnostic class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_diagnostic")]
    public partial class M_Bus_diagnostic : Base, IM_Bus_diagnostic, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_diagnostic")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/M_Bus_diagnostic")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Scripttable class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Scripttable")]
    public partial class Scripttable : Base, IScripttable, IModelElement
    {
        
        private static Lazy<IOperation> _executeOperation = new Lazy<IOperation>(RetrieveExecuteOperation);
        
        private static Lazy<ITypedElement> _includesReference = new Lazy<ITypedElement>(RetrieveIncludesReference);
        
        /// <summary>
        /// The backing field for the Includes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<IScript> _includes;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Scripttable()
        {
            this._includes = new ObservableAssociationOrderedSet<IScript>();
            this._includes.CollectionChanging += this.IncludesCollectionChanging;
            this._includes.CollectionChanged += this.IncludesCollectionChanged;
        }
        
        /// <summary>
        /// The includes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("includes")]
        [CategoryAttribute("Scripttable")]
        [XmlElementNameAttribute("includes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IScript> Includes
        {
            get
            {
                return this._includes;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ScripttableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Scripttable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation execute gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> ExecuteCalling;
        
        /// <summary>
        /// Gets fired after the operation execute got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> ExecuteCalled;
        
        /// <summary>
        /// 
        /// </summary>
        public void Execute()
        {
            System.Action<IScripttable> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IScripttable>>(_executeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method execute registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _executeOperation.Value);
            this.OnExecuteCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _executeOperation.Value, e));
            handler.Invoke(this);
            this.OnExecuteCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _executeOperation.Value, e));
        }
        
        private static IOperation RetrieveExecuteOperation()
        {
            return ClassInstance.LookupOperation("execute");
        }
        
        /// <summary>
        /// Raises the ExecuteCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExecuteCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.ExecuteCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExecuteCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExecuteCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.ExecuteCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIncludesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Scripttable.ClassInstance)).Resolve("includes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Includes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Includes", e, _includesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Includes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Includes", e, _includesReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INCLUDES"))
            {
                if ((index < this.Includes.Count))
                {
                    return this.Includes[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INCLUDES"))
            {
                return this._includes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Scripttable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Scripttable class
        /// </summary>
        public class ScripttableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Scripttable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ScripttableReferencedElementsCollection(Scripttable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Includes.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Includes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Includes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IScript includesCasted = item.As<IScript>();
                if ((includesCasted != null))
                {
                    this._parent.Includes.Add(includesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Includes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Includes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> includesEnumerator = this._parent.Includes.GetEnumerator();
                try
                {
                    for (
                    ; includesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = includesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    includesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IScript scriptItem = item.As<IScript>();
                if (((scriptItem != null) 
                            && this._parent.Includes.Remove(scriptItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Includes).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Script class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Script")]
    public partial class Script : ModelElement, IScript, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Script")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Script")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Schedule class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Schedule")]
    public partial class Schedule : Base, ISchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Schedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Schedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Specialdaystable class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Specialdaystable")]
    public partial class Specialdaystable : Base, ISpecialdaystable, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Specialdaystable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Specialdaystable")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Activitycalendar class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Activitycalendar")]
    public partial class Activitycalendar : Base, IActivitycalendar, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Activitycalendar")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Activitycalendar")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Registermonitor class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Registermonitor")]
    public partial class Registermonitor : Base, IRegistermonitor, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Registermonitor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Registermonitor")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Singleactionschedule class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Singleactionschedule")]
    public partial class Singleactionschedule : Base, ISingleactionschedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Singleactionschedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Singleactionschedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Parametermonitor class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Parametermonitor")]
    public partial class Parametermonitor : Base, IParametermonitor, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Parametermonitor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Parametermonitor")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Sensormanager class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Sensormanager")]
    public partial class Sensormanager : Base, ISensormanager, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Sensormanager")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Sensormanager")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Arbitrator class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Arbitrator")]
    public partial class Arbitrator : Base, IArbitrator, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Arbitrator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Arbitrator")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DisconnectControl class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DisconnectControl")]
    public partial class DisconnectControl : Base, TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl, IModelElement
    {
        
        /// <summary>
        /// The backing field for the State property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DisconnectControlState> _state;
        
        private static Lazy<ITypedElement> _stateAttribute = new Lazy<ITypedElement>(RetrieveStateAttribute);
        
        /// <summary>
        /// The backing field for the Transition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DisconnectControlTransition> _transition;
        
        private static Lazy<ITypedElement> _transitionAttribute = new Lazy<ITypedElement>(RetrieveTransitionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The state property
        /// </summary>
        [DisplayNameAttribute("state")]
        [CategoryAttribute("DisconnectControl")]
        [XmlElementNameAttribute("state")]
        [XmlAttributeAttribute(true)]
        public Nullable<DisconnectControlState> State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    Nullable<DisconnectControlState> old = this._state;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStateChanging(e);
                    this.OnPropertyChanging("State", e, _stateAttribute);
                    this._state = value;
                    this.OnStateChanged(e);
                    this.OnPropertyChanged("State", e, _stateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transition property
        /// </summary>
        [DisplayNameAttribute("transition")]
        [CategoryAttribute("DisconnectControl")]
        [XmlElementNameAttribute("transition")]
        [XmlAttributeAttribute(true)]
        public Nullable<DisconnectControlTransition> Transition
        {
            get
            {
                return this._transition;
            }
            set
            {
                if ((this._transition != value))
                {
                    Nullable<DisconnectControlTransition> old = this._transition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransitionChanging(e);
                    this.OnPropertyChanging("Transition", e, _transitionAttribute);
                    this._transition = value;
                    this.OnTransitionChanged(e);
                    this.OnPropertyChanged("Transition", e, _transitionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DisconnectControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the State property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StateChanged;
        
        /// <summary>
        /// Gets fired before the State property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StateChanging;
        
        /// <summary>
        /// Gets fired when the Transition property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransitionChanged;
        
        /// <summary>
        /// Gets fired before the Transition property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransitionChanging;
        
        private static ITypedElement RetrieveStateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.DisconnectControl.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Raises the StateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransitionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.DisconnectControl.ClassInstance)).Resolve("transition")));
        }
        
        /// <summary>
        /// Raises the TransitionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransitionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransitionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransitionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransitionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransitionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATE"))
            {
                return this.State;
            }
            if ((attribute == "TRANSITION"))
            {
                return this.Transition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATE"))
            {
                this.State = ((DisconnectControlState)(value));
                return;
            }
            if ((feature == "TRANSITION"))
            {
                this.Transition = ((DisconnectControlTransition)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STATE"))
            {
                return Observable.Box(new StateProxy(this));
            }
            if ((attribute == "TRANSITION"))
            {
                return Observable.Box(new TransitionProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DisconnectControl")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl, Nullable<DisconnectControlState>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DisconnectControlState> Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transition property
        /// </summary>
        private sealed class TransitionProxy : ModelPropertyChange<TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl, Nullable<DisconnectControlTransition>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransitionProxy(TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl modelElement) : 
                    base(modelElement, "transition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DisconnectControlTransition> Value
            {
                get
                {
                    return this.ModelElement.Transition;
                }
                set
                {
                    this.ModelElement.Transition = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Limiter class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Limiter")]
    public partial class Limiter : Base, ILimiter, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Limiter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Limiter")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Account class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Account")]
    public partial class Account : Base, IAccount, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Account")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Account")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Credit class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Credit")]
    public partial class Credit : Base, ICredit, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Credit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Credit")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Charge class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Charge")]
    public partial class Charge : Base, ICharge, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Charge")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Charge")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Tokengateway class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Tokengateway")]
    public partial class Tokengateway : Base, ITokengateway, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Tokengateway")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Tokengateway")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_local_port_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_local_port_setup")]
    public partial class IEC_local_port_setup : Base, IIEC_local_port_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_local_port_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_local_port_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_HDLC_setup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_HDLC_setup")]
    public partial class IEC_HDLC_setup : Base, IIEC_HDLC_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_HDLC_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_HDLC_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_8802_2_LLC_Type_1 class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_Type_1")]
    public partial class IEC_8802_2_LLC_Type_1 : Base, IIEC_8802_2_LLC_Type_1, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_Type_1")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_Type_1")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_8802_2_LLC_G3_NB class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_G3_NB")]
    public partial class IEC_8802_2_LLC_G3_NB : Base, IIEC_8802_2_LLC_G3_NB, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_G3_NB")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_G3_NB")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC8802_2LLCType3 class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC8802_2LLCType3")]
    public partial class IEC8802_2LLCType3 : Base, IIEC8802_2LLCType3, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC8802_2LLCType3")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/IEC8802_2LLCType3")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Register class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Register")]
    public partial class Register : Data, IRegister, IModelElement
    {
        
        private static Lazy<IOperation> _resetOperation = new Lazy<IOperation>(RetrieveResetOperation);
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<float> _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static Lazy<ITypedElement> _scaler_unitReference = new Lazy<ITypedElement>(RetrieveScaler_unitReference);
        
        /// <summary>
        /// The backing field for the Scaler_unit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IScal_unit_type _scaler_unit;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("Register")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public Nullable<float> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    Nullable<float> old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The scaler_unit property
        /// </summary>
        [DisplayNameAttribute("scaler_unit")]
        [CategoryAttribute("Register")]
        [XmlElementNameAttribute("scaler_unit")]
        [XmlAttributeAttribute(true)]
        public IScal_unit_type Scaler_unit
        {
            get
            {
                return this._scaler_unit;
            }
            set
            {
                if ((this._scaler_unit != value))
                {
                    IScal_unit_type old = this._scaler_unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScaler_unitChanging(e);
                    this.OnPropertyChanging("Scaler_unit", e, _scaler_unitReference);
                    this._scaler_unit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetScaler_unit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetScaler_unit;
                    }
                    this.OnScaler_unitChanged(e);
                    this.OnPropertyChanged("Scaler_unit", e, _scaler_unitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegisterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Register")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation reset gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> ResetCalling;
        
        /// <summary>
        /// Gets fired after the operation reset got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> ResetCalled;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired before the Scaler_unit property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Scaler_unitChanging;
        
        /// <summary>
        /// Gets fired when the Scaler_unit property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Scaler_unitChanged;
        
        /// <summary>
        /// 
        /// </summary>
        public void Reset()
        {
            System.Action<IRegister> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IRegister>>(_resetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method reset registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _resetOperation.Value);
            this.OnResetCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _resetOperation.Value, e));
            handler.Invoke(this);
            this.OnResetCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _resetOperation.Value, e));
        }
        
        private static IOperation RetrieveResetOperation()
        {
            return ClassInstance.LookupOperation("reset");
        }
        
        /// <summary>
        /// Raises the ResetCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResetCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.ResetCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResetCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResetCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.ResetCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Register.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveScaler_unitReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Register.ClassInstance)).Resolve("scaler_unit")));
        }
        
        /// <summary>
        /// Raises the Scaler_unitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScaler_unitChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Scaler_unitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Scaler_unitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScaler_unitChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Scaler_unitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Scaler_unit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScaler_unit(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Scaler_unit))
            {
                this.Scaler_unit = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SCALER_UNIT"))
            {
                return this.Scaler_unit;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCALER_UNIT"))
            {
                this.Scaler_unit = ((IScal_unit_type)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return Observable.Box(new ValueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SCALER_UNIT"))
            {
                return new Scaler_unitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Register")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Register class
        /// </summary>
        public class RegisterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Register _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegisterReferencedElementsCollection(Register parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Scaler_unit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Scaler_unitChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Scaler_unitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Scaler_unit == null))
                {
                    IScal_unit_type scaler_unitCasted = item.As<IScal_unit_type>();
                    if ((scaler_unitCasted != null))
                    {
                        this._parent.Scaler_unit = scaler_unitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Scaler_unit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Scaler_unit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Scaler_unit != null))
                {
                    array[arrayIndex] = this._parent.Scaler_unit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Scaler_unit == item))
                {
                    this._parent.Scaler_unit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Scaler_unit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IRegister, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IRegister modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scaler_unit property
        /// </summary>
        private sealed class Scaler_unitProxy : ModelPropertyChange<IRegister, IScal_unit_type>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Scaler_unitProxy(IRegister modelElement) : 
                    base(modelElement, "scaler_unit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScal_unit_type Value
            {
                get
                {
                    return this.ModelElement.Scaler_unit;
                }
                set
                {
                    this.ModelElement.Scaler_unit = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the SAPAssignment class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/SAPAssignment")]
    public partial class SAPAssignment : Base, ISAPAssignment, IModelElement
    {
        
        private static Lazy<ITypedElement> _ldnnameReference = new Lazy<ITypedElement>(RetrieveLdnnameReference);
        
        /// <summary>
        /// The backing field for the Ldnname property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ILogicalDeviceName _ldnname;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ldnname property
        /// </summary>
        [DisplayNameAttribute("ldnname")]
        [CategoryAttribute("SAPAssignment")]
        [XmlElementNameAttribute("ldnname")]
        [XmlAttributeAttribute(true)]
        public ILogicalDeviceName Ldnname
        {
            get
            {
                return this._ldnname;
            }
            set
            {
                if ((this._ldnname != value))
                {
                    ILogicalDeviceName old = this._ldnname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLdnnameChanging(e);
                    this.OnPropertyChanging("Ldnname", e, _ldnnameReference);
                    this._ldnname = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLdnname;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLdnname;
                    }
                    this.OnLdnnameChanged(e);
                    this.OnPropertyChanged("Ldnname", e, _ldnnameReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SAPAssignmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/SAPAssignment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Ldnname property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LdnnameChanging;
        
        /// <summary>
        /// Gets fired when the Ldnname property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LdnnameChanged;
        
        private static ITypedElement RetrieveLdnnameReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.SAPAssignment.ClassInstance)).Resolve("ldnname")));
        }
        
        /// <summary>
        /// Raises the LdnnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLdnnameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LdnnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LdnnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLdnnameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LdnnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ldnname property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLdnname(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Ldnname))
            {
                this.Ldnname = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LDNNAME"))
            {
                return this.Ldnname;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LDNNAME"))
            {
                this.Ldnname = ((ILogicalDeviceName)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LDNNAME"))
            {
                return new LdnnameProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/SAPAssignment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SAPAssignment class
        /// </summary>
        public class SAPAssignmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SAPAssignment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SAPAssignmentReferencedElementsCollection(SAPAssignment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Ldnname != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.LdnnameChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.LdnnameChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Ldnname == null))
                {
                    ILogicalDeviceName ldnnameCasted = item.As<ILogicalDeviceName>();
                    if ((ldnnameCasted != null))
                    {
                        this._parent.Ldnname = ldnnameCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Ldnname = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Ldnname))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Ldnname != null))
                {
                    array[arrayIndex] = this._parent.Ldnname;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Ldnname == item))
                {
                    this._parent.Ldnname = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Ldnname).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ldnname property
        /// </summary>
        private sealed class LdnnameProxy : ModelPropertyChange<ISAPAssignment, ILogicalDeviceName>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LdnnameProxy(ISAPAssignment modelElement) : 
                    base(modelElement, "ldnname")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILogicalDeviceName Value
            {
                get
                {
                    return this.ModelElement.Ldnname;
                }
                set
                {
                    this.ModelElement.Ldnname = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the AssociationLN class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/AssociationLN")]
    public partial class AssociationLN : Base, IAssociationLN, IModelElement
    {
        
        private static Lazy<ITypedElement> _aAReference = new Lazy<ITypedElement>(RetrieveAAReference);
        
        /// <summary>
        /// The backing field for the AA property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IApplicationAssociation _aA;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The AA property
        /// </summary>
        [CategoryAttribute("AssociationLN")]
        [XmlAttributeAttribute(true)]
        public IApplicationAssociation AA
        {
            get
            {
                return this._aA;
            }
            set
            {
                if ((this._aA != value))
                {
                    IApplicationAssociation old = this._aA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAAChanging(e);
                    this.OnPropertyChanging("AA", e, _aAReference);
                    this._aA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAA;
                    }
                    this.OnAAChanged(e);
                    this.OnPropertyChanged("AA", e, _aAReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssociationLNReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/AssociationLN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AAChanged;
        
        private static ITypedElement RetrieveAAReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.AssociationLN.ClassInstance)).Resolve("AA")));
        }
        
        /// <summary>
        /// Raises the AAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAA(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AA))
            {
                this.AA = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "AA"))
            {
                return this.AA;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AA"))
            {
                this.AA = ((IApplicationAssociation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AA"))
            {
                return new AAProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/AssociationLN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssociationLN class
        /// </summary>
        public class AssociationLNReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssociationLN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationLNReferencedElementsCollection(AssociationLN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.AAChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.AAChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AA == null))
                {
                    IApplicationAssociation aACasted = item.As<IApplicationAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AA = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AA))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AA).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AA property
        /// </summary>
        private sealed class AAProxy : ModelPropertyChange<IAssociationLN, IApplicationAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AAProxy(IAssociationLN modelElement) : 
                    base(modelElement, "AA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IApplicationAssociation Value
            {
                get
                {
                    return this.ModelElement.AA;
                }
                set
                {
                    this.ModelElement.AA = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Data class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Data")]
    public partial class Data : Base, IData, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Data")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Data")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ExtendedRegister class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ExtendedRegister")]
    public partial class ExtendedRegister : Register, IExtendedRegister, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ExtendedRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ExtendedRegister")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DemandRegister class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DemandRegister")]
    public partial class DemandRegister : ExtendedRegister, IDemandRegister, IModelElement
    {
        
        private static Lazy<IOperation> _calculate_current_average_valueOperation = new Lazy<IOperation>(RetrieveCalculate_current_average_valueOperation);
        
        private static Lazy<IOperation> _calculate_last_average_valueOperation = new Lazy<IOperation>(RetrieveCalculate_last_average_valueOperation);
        
        /// <summary>
        /// The backing field for the Number_of_periods property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _number_of_periods;
        
        private static Lazy<ITypedElement> _number_of_periodsAttribute = new Lazy<ITypedElement>(RetrieveNumber_of_periodsAttribute);
        
        /// <summary>
        /// The backing field for the Period property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _period;
        
        private static Lazy<ITypedElement> _periodAttribute = new Lazy<ITypedElement>(RetrievePeriodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The number_of_periods property
        /// </summary>
        [DisplayNameAttribute("number_of_periods")]
        [CategoryAttribute("DemandRegister")]
        [XmlElementNameAttribute("number_of_periods")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Number_of_periods
        {
            get
            {
                return this._number_of_periods;
            }
            set
            {
                if ((this._number_of_periods != value))
                {
                    Nullable<int> old = this._number_of_periods;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumber_of_periodsChanging(e);
                    this.OnPropertyChanging("Number_of_periods", e, _number_of_periodsAttribute);
                    this._number_of_periods = value;
                    this.OnNumber_of_periodsChanged(e);
                    this.OnPropertyChanged("Number_of_periods", e, _number_of_periodsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The period property
        /// </summary>
        [DisplayNameAttribute("period")]
        [CategoryAttribute("DemandRegister")]
        [XmlElementNameAttribute("period")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Period
        {
            get
            {
                return this._period;
            }
            set
            {
                if ((this._period != value))
                {
                    Nullable<int> old = this._period;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPeriodChanging(e);
                    this.OnPropertyChanging("Period", e, _periodAttribute);
                    this._period = value;
                    this.OnPeriodChanged(e);
                    this.OnPropertyChanged("Period", e, _periodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DemandRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation calculate_current_average_value gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Calculate_current_average_valueCalling;
        
        /// <summary>
        /// Gets fired after the operation calculate_current_average_value got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Calculate_current_average_valueCalled;
        
        /// <summary>
        /// Gets fired before the operation calculate_last_average_value gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Calculate_last_average_valueCalling;
        
        /// <summary>
        /// Gets fired after the operation calculate_last_average_value got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Calculate_last_average_valueCalled;
        
        /// <summary>
        /// Gets fired when the Number_of_periods property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Number_of_periodsChanged;
        
        /// <summary>
        /// Gets fired before the Number_of_periods property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Number_of_periodsChanging;
        
        /// <summary>
        /// Gets fired when the Period property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PeriodChanged;
        
        /// <summary>
        /// Gets fired before the Period property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PeriodChanging;
        
        /// <summary>
        /// 
        /// </summary>
        public void Calculate_current_average_value()
        {
            System.Action<IDemandRegister> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IDemandRegister>>(_calculate_current_average_valueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method calculate_current_average_value registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _calculate_current_average_valueOperation.Value);
            this.OnCalculate_current_average_valueCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _calculate_current_average_valueOperation.Value, e));
            handler.Invoke(this);
            this.OnCalculate_current_average_valueCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _calculate_current_average_valueOperation.Value, e));
        }
        
        private static IOperation RetrieveCalculate_current_average_valueOperation()
        {
            return ClassInstance.LookupOperation("calculate_current_average_value");
        }
        
        /// <summary>
        /// Raises the Calculate_current_average_valueCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculate_current_average_valueCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Calculate_current_average_valueCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Calculate_current_average_valueCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculate_current_average_valueCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Calculate_current_average_valueCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Calculate_last_average_value()
        {
            System.Action<IDemandRegister> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IDemandRegister>>(_calculate_last_average_valueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method calculate_last_average_value registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _calculate_last_average_valueOperation.Value);
            this.OnCalculate_last_average_valueCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _calculate_last_average_valueOperation.Value, e));
            handler.Invoke(this);
            this.OnCalculate_last_average_valueCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _calculate_last_average_valueOperation.Value, e));
        }
        
        private static IOperation RetrieveCalculate_last_average_valueOperation()
        {
            return ClassInstance.LookupOperation("calculate_last_average_value");
        }
        
        /// <summary>
        /// Raises the Calculate_last_average_valueCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculate_last_average_valueCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Calculate_last_average_valueCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Calculate_last_average_valueCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculate_last_average_valueCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Calculate_last_average_valueCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumber_of_periodsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.DemandRegister.ClassInstance)).Resolve("number_of_periods")));
        }
        
        /// <summary>
        /// Raises the Number_of_periodsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_of_periodsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Number_of_periodsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Number_of_periodsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_of_periodsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Number_of_periodsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.DemandRegister.ClassInstance)).Resolve("period")));
        }
        
        /// <summary>
        /// Raises the PeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NUMBER_OF_PERIODS"))
            {
                return this.Number_of_periods;
            }
            if ((attribute == "PERIOD"))
            {
                return this.Period;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NUMBER_OF_PERIODS"))
            {
                this.Number_of_periods = ((int)(value));
                return;
            }
            if ((feature == "PERIOD"))
            {
                this.Period = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NUMBER_OF_PERIODS"))
            {
                return Observable.Box(new Number_of_periodsProxy(this));
            }
            if ((attribute == "PERIOD"))
            {
                return Observable.Box(new PeriodProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/DemandRegister")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the number_of_periods property
        /// </summary>
        private sealed class Number_of_periodsProxy : ModelPropertyChange<IDemandRegister, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Number_of_periodsProxy(IDemandRegister modelElement) : 
                    base(modelElement, "number_of_periods")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Number_of_periods;
                }
                set
                {
                    this.ModelElement.Number_of_periods = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the period property
        /// </summary>
        private sealed class PeriodProxy : ModelPropertyChange<IDemandRegister, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PeriodProxy(IDemandRegister modelElement) : 
                    base(modelElement, "period")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Period;
                }
                set
                {
                    this.ModelElement.Period = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the RegisterActivation class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/RegisterActivation")]
    public partial class RegisterActivation : Base, IRegisterActivation, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/RegisterActivation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/RegisterActivation")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Profilegeneric class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Profilegeneric")]
    public partial class Profilegeneric : Base, IProfilegeneric, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Profilegeneric")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Profilegeneric")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Base class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Base")]
    public partial class Base : ModelElement, IBase, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Logical_name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _logical_name;
        
        private static Lazy<ITypedElement> _logical_nameAttribute = new Lazy<ITypedElement>(RetrieveLogical_nameAttribute);
        
        /// <summary>
        /// The backing field for the OBIScode property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _oBIScode;
        
        private static Lazy<ITypedElement> _oBIScodeAttribute = new Lazy<ITypedElement>(RetrieveOBIScodeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The logical_name property
        /// </summary>
        [DisplayNameAttribute("logical_name")]
        [CategoryAttribute("Base")]
        [XmlElementNameAttribute("logical_name")]
        [XmlAttributeAttribute(true)]
        public string Logical_name
        {
            get
            {
                return this._logical_name;
            }
            set
            {
                if ((this._logical_name != value))
                {
                    string old = this._logical_name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLogical_nameChanging(e);
                    this.OnPropertyChanging("Logical_name", e, _logical_nameAttribute);
                    this._logical_name = value;
                    this.OnLogical_nameChanged(e);
                    this.OnPropertyChanged("Logical_name", e, _logical_nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OBIScode property
        /// </summary>
        [CategoryAttribute("Base")]
        [XmlAttributeAttribute(true)]
        public string OBIScode
        {
            get
            {
                return this._oBIScode;
            }
            set
            {
                if ((this._oBIScode != value))
                {
                    string old = this._oBIScode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOBIScodeChanging(e);
                    this.OnPropertyChanging("OBIScode", e, _oBIScodeAttribute);
                    this._oBIScode = value;
                    this.OnOBIScodeChanged(e);
                    this.OnPropertyChanged("OBIScode", e, _oBIScodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Base")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Logical_name property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Logical_nameChanged;
        
        /// <summary>
        /// Gets fired before the Logical_name property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Logical_nameChanging;
        
        /// <summary>
        /// Gets fired when the OBIScode property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OBIScodeChanged;
        
        /// <summary>
        /// Gets fired before the OBIScode property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OBIScodeChanging;
        
        private static ITypedElement RetrieveLogical_nameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Base.ClassInstance)).Resolve("logical_name")));
        }
        
        /// <summary>
        /// Raises the Logical_nameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLogical_nameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Logical_nameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Logical_nameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLogical_nameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Logical_nameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOBIScodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Base.ClassInstance)).Resolve("OBIScode")));
        }
        
        /// <summary>
        /// Raises the OBIScodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOBIScodeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OBIScodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OBIScodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOBIScodeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OBIScodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOGICAL_NAME"))
            {
                return this.Logical_name;
            }
            if ((attribute == "OBISCODE"))
            {
                return this.OBIScode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOGICAL_NAME"))
            {
                this.Logical_name = ((string)(value));
                return;
            }
            if ((feature == "OBISCODE"))
            {
                this.OBIScode = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LOGICAL_NAME"))
            {
                return new Logical_nameProxy(this);
            }
            if ((attribute == "OBISCODE"))
            {
                return new OBIScodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Base")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the logical_name property
        /// </summary>
        private sealed class Logical_nameProxy : ModelPropertyChange<IBase, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Logical_nameProxy(IBase modelElement) : 
                    base(modelElement, "logical_name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Logical_name;
                }
                set
                {
                    this.ModelElement.Logical_name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OBIScode property
        /// </summary>
        private sealed class OBIScodeProxy : ModelPropertyChange<IBase, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OBIScodeProxy(IBase modelElement) : 
                    base(modelElement, "OBIScode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OBIScode;
                }
                set
                {
                    this.ModelElement.OBIScode = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Utilitytables class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Utilitytables")]
    public partial class Utilitytables : Base, IUtilitytables, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Utilitytables")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Utilitytables")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Registertable class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Registertable")]
    public partial class Registertable : Base, IRegistertable, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Registertable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Registertable")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Compactdata class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Compactdata")]
    public partial class Compactdata : Base, ICompactdata, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Compact_buffer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _compact_buffer;
        
        private static Lazy<ITypedElement> _compact_bufferAttribute = new Lazy<ITypedElement>(RetrieveCompact_bufferAttribute);
        
        /// <summary>
        /// The backing field for the Template_id property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _template_id;
        
        private static Lazy<ITypedElement> _template_idAttribute = new Lazy<ITypedElement>(RetrieveTemplate_idAttribute);
        
        /// <summary>
        /// The backing field for the Template_description property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _template_description;
        
        private static Lazy<ITypedElement> _template_descriptionAttribute = new Lazy<ITypedElement>(RetrieveTemplate_descriptionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The compact_buffer property
        /// </summary>
        [DisplayNameAttribute("compact_buffer")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("compact_buffer")]
        [XmlAttributeAttribute(true)]
        public string Compact_buffer
        {
            get
            {
                return this._compact_buffer;
            }
            set
            {
                if ((this._compact_buffer != value))
                {
                    string old = this._compact_buffer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompact_bufferChanging(e);
                    this.OnPropertyChanging("Compact_buffer", e, _compact_bufferAttribute);
                    this._compact_buffer = value;
                    this.OnCompact_bufferChanged(e);
                    this.OnPropertyChanged("Compact_buffer", e, _compact_bufferAttribute);
                }
            }
        }
        
        /// <summary>
        /// The template_id property
        /// </summary>
        [DisplayNameAttribute("template_id")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("template_id")]
        [XmlAttributeAttribute(true)]
        public string Template_id
        {
            get
            {
                return this._template_id;
            }
            set
            {
                if ((this._template_id != value))
                {
                    string old = this._template_id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTemplate_idChanging(e);
                    this.OnPropertyChanging("Template_id", e, _template_idAttribute);
                    this._template_id = value;
                    this.OnTemplate_idChanged(e);
                    this.OnPropertyChanged("Template_id", e, _template_idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The template_description property
        /// </summary>
        [DisplayNameAttribute("template_description")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("template_description")]
        [XmlAttributeAttribute(true)]
        public string Template_description
        {
            get
            {
                return this._template_description;
            }
            set
            {
                if ((this._template_description != value))
                {
                    string old = this._template_description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTemplate_descriptionChanging(e);
                    this.OnPropertyChanging("Template_description", e, _template_descriptionAttribute);
                    this._template_description = value;
                    this.OnTemplate_descriptionChanged(e);
                    this.OnPropertyChanged("Template_description", e, _template_descriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Compactdata")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Compact_buffer property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compact_bufferChanged;
        
        /// <summary>
        /// Gets fired before the Compact_buffer property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compact_bufferChanging;
        
        /// <summary>
        /// Gets fired when the Template_id property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Template_idChanged;
        
        /// <summary>
        /// Gets fired before the Template_id property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Template_idChanging;
        
        /// <summary>
        /// Gets fired when the Template_description property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Template_descriptionChanged;
        
        /// <summary>
        /// Gets fired before the Template_description property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Template_descriptionChanging;
        
        private static ITypedElement RetrieveCompact_bufferAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Compactdata.ClassInstance)).Resolve("compact_buffer")));
        }
        
        /// <summary>
        /// Raises the Compact_bufferChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompact_bufferChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compact_bufferChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compact_bufferChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompact_bufferChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compact_bufferChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTemplate_idAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Compactdata.ClassInstance)).Resolve("template_id")));
        }
        
        /// <summary>
        /// Raises the Template_idChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_idChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Template_idChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Template_idChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_idChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Template_idChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTemplate_descriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Compactdata.ClassInstance)).Resolve("template_description")));
        }
        
        /// <summary>
        /// Raises the Template_descriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_descriptionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Template_descriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Template_descriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_descriptionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Template_descriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMPACT_BUFFER"))
            {
                return this.Compact_buffer;
            }
            if ((attribute == "TEMPLATE_ID"))
            {
                return this.Template_id;
            }
            if ((attribute == "TEMPLATE_DESCRIPTION"))
            {
                return this.Template_description;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMPACT_BUFFER"))
            {
                this.Compact_buffer = ((string)(value));
                return;
            }
            if ((feature == "TEMPLATE_ID"))
            {
                this.Template_id = ((string)(value));
                return;
            }
            if ((feature == "TEMPLATE_DESCRIPTION"))
            {
                this.Template_description = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "COMPACT_BUFFER"))
            {
                return new Compact_bufferProxy(this);
            }
            if ((attribute == "TEMPLATE_ID"))
            {
                return new Template_idProxy(this);
            }
            if ((attribute == "TEMPLATE_DESCRIPTION"))
            {
                return new Template_descriptionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Compactdata")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the compact_buffer property
        /// </summary>
        private sealed class Compact_bufferProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compact_bufferProxy(ICompactdata modelElement) : 
                    base(modelElement, "compact_buffer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Compact_buffer;
                }
                set
                {
                    this.ModelElement.Compact_buffer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the template_id property
        /// </summary>
        private sealed class Template_idProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Template_idProxy(ICompactdata modelElement) : 
                    base(modelElement, "template_id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Template_id;
                }
                set
                {
                    this.ModelElement.Template_id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the template_description property
        /// </summary>
        private sealed class Template_descriptionProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Template_descriptionProxy(ICompactdata modelElement) : 
                    base(modelElement, "template_description")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Template_description;
                }
                set
                {
                    this.ModelElement.Template_description = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Statusmapping class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Statusmapping")]
    public partial class Statusmapping : Base, IStatusmapping, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Statusmapping")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Statusmapping")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the AssociationSN class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/AssociationSN")]
    public partial class AssociationSN : Base, IAssociationSN, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/AssociationSN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/AssociationSN")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Imagetransfer class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Imagetransfer")]
    public partial class Imagetransfer : Base, IImagetransfer, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Imagetransfer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Imagetransfer")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Dataprotection class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Dataprotection")]
    public partial class Dataprotection : Base, IDataprotection, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Dataprotection")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Dataprotection")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Pushsetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Pushsetup")]
    public partial class Pushsetup : Base, IPushsetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Pushsetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Pushsetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Securitysetup class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Securitysetup")]
    public partial class Securitysetup : Base, ISecuritysetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Securitysetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Securitysetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Clock class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Clock")]
    public partial class Clock : Base, IClock, IModelElement
    {
        
        private static Lazy<IOperation> _adjust_to_quarterOperation = new Lazy<IOperation>(RetrieveAdjust_to_quarterOperation);
        
        private static Lazy<IOperation> _adjust_to_measuring_periodOperation = new Lazy<IOperation>(RetrieveAdjust_to_measuring_periodOperation);
        
        private static Lazy<IOperation> _adjust_to_minuteOperation = new Lazy<IOperation>(RetrieveAdjust_to_minuteOperation);
        
        private static Lazy<IOperation> _adjust_to_present_timeOperation = new Lazy<IOperation>(RetrieveAdjust_to_present_timeOperation);
        
        private static Lazy<IOperation> _present_adjusting_timeOperation = new Lazy<IOperation>(RetrievePresent_adjusting_timeOperation);
        
        private static Lazy<IOperation> _shift_timeOperation = new Lazy<IOperation>(RetrieveShift_timeOperation);
        
        /// <summary>
        /// The backing field for the Time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time;
        
        private static Lazy<ITypedElement> _timeAttribute = new Lazy<ITypedElement>(RetrieveTimeAttribute);
        
        /// <summary>
        /// The backing field for the Time_zone property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<long> _time_zone;
        
        private static Lazy<ITypedElement> _time_zoneAttribute = new Lazy<ITypedElement>(RetrieveTime_zoneAttribute);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status;
        
        private static Lazy<ITypedElement> _statusAttribute = new Lazy<ITypedElement>(RetrieveStatusAttribute);
        
        /// <summary>
        /// The backing field for the Daylight_savings_begin property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _daylight_savings_begin;
        
        private static Lazy<ITypedElement> _daylight_savings_beginAttribute = new Lazy<ITypedElement>(RetrieveDaylight_savings_beginAttribute);
        
        /// <summary>
        /// The backing field for the Daylight_savings_end property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _daylight_savings_end;
        
        private static Lazy<ITypedElement> _daylight_savings_endAttribute = new Lazy<ITypedElement>(RetrieveDaylight_savings_endAttribute);
        
        /// <summary>
        /// The backing field for the Daylight_savings_deviation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<int> _daylight_savings_deviation;
        
        private static Lazy<ITypedElement> _daylight_savings_deviationAttribute = new Lazy<ITypedElement>(RetrieveDaylight_savings_deviationAttribute);
        
        /// <summary>
        /// The backing field for the Daylight_savings_enabled property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _daylight_savings_enabled;
        
        private static Lazy<ITypedElement> _daylight_savings_enabledAttribute = new Lazy<ITypedElement>(RetrieveDaylight_savings_enabledAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Clock()
        {
            this._time_zone = new ObservableOrderedSet<long>();
            this._time_zone.CollectionChanging += this.Time_zoneCollectionChanging;
            this._time_zone.CollectionChanged += this.Time_zoneCollectionChanged;
            this._daylight_savings_deviation = new ObservableOrderedSet<int>();
            this._daylight_savings_deviation.CollectionChanging += this.Daylight_savings_deviationCollectionChanging;
            this._daylight_savings_deviation.CollectionChanged += this.Daylight_savings_deviationCollectionChanged;
        }
        
        /// <summary>
        /// The time property
        /// </summary>
        [DisplayNameAttribute("time")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("time")]
        [XmlAttributeAttribute(true)]
        public string Time
        {
            get
            {
                return this._time;
            }
            set
            {
                if ((this._time != value))
                {
                    string old = this._time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeChanging(e);
                    this.OnPropertyChanging("Time", e, _timeAttribute);
                    this._time = value;
                    this.OnTimeChanged(e);
                    this.OnPropertyChanged("Time", e, _timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The time_zone property
        /// </summary>
        [UpperBoundAttribute(720)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("time_zone")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("time_zone")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<long> Time_zone
        {
            get
            {
                return this._time_zone;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [DisplayNameAttribute("status")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    string old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusAttribute);
                    this._status = value;
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The daylight_savings_begin property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_begin")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_begin")]
        [XmlAttributeAttribute(true)]
        public string Daylight_savings_begin
        {
            get
            {
                return this._daylight_savings_begin;
            }
            set
            {
                if ((this._daylight_savings_begin != value))
                {
                    string old = this._daylight_savings_begin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDaylight_savings_beginChanging(e);
                    this.OnPropertyChanging("Daylight_savings_begin", e, _daylight_savings_beginAttribute);
                    this._daylight_savings_begin = value;
                    this.OnDaylight_savings_beginChanged(e);
                    this.OnPropertyChanged("Daylight_savings_begin", e, _daylight_savings_beginAttribute);
                }
            }
        }
        
        /// <summary>
        /// The daylight_savings_end property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_end")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_end")]
        [XmlAttributeAttribute(true)]
        public string Daylight_savings_end
        {
            get
            {
                return this._daylight_savings_end;
            }
            set
            {
                if ((this._daylight_savings_end != value))
                {
                    string old = this._daylight_savings_end;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDaylight_savings_endChanging(e);
                    this.OnPropertyChanging("Daylight_savings_end", e, _daylight_savings_endAttribute);
                    this._daylight_savings_end = value;
                    this.OnDaylight_savings_endChanged(e);
                    this.OnPropertyChanged("Daylight_savings_end", e, _daylight_savings_endAttribute);
                }
            }
        }
        
        /// <summary>
        /// The daylight_savings_deviation property
        /// </summary>
        [UpperBoundAttribute(120)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("daylight_savings_deviation")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_deviation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<int> Daylight_savings_deviation
        {
            get
            {
                return this._daylight_savings_deviation;
            }
        }
        
        /// <summary>
        /// The daylight_savings_enabled property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_enabled")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_enabled")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Daylight_savings_enabled
        {
            get
            {
                return this._daylight_savings_enabled;
            }
            set
            {
                if ((this._daylight_savings_enabled != value))
                {
                    Nullable<bool> old = this._daylight_savings_enabled;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDaylight_savings_enabledChanging(e);
                    this.OnPropertyChanging("Daylight_savings_enabled", e, _daylight_savings_enabledAttribute);
                    this._daylight_savings_enabled = value;
                    this.OnDaylight_savings_enabledChanged(e);
                    this.OnPropertyChanged("Daylight_savings_enabled", e, _daylight_savings_enabledAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Clock")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation adjust_to_quarter gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_quarterCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_quarter got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_quarterCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_measuring_period gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_measuring_periodCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_measuring_period got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_measuring_periodCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_minute gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_minuteCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_minute got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_minuteCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_present_time gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_present_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_present_time got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Adjust_to_present_timeCalled;
        
        /// <summary>
        /// Gets fired before the operation present_adjusting_time gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Present_adjusting_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation present_adjusting_time got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Present_adjusting_timeCalled;
        
        /// <summary>
        /// Gets fired before the operation shift_time gets called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Shift_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation shift_time got called
        /// </summary>
        public event EventHandler<OperationCallEventArgs> Shift_timeCalled;
        
        /// <summary>
        /// Gets fired when the Time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeChanged;
        
        /// <summary>
        /// Gets fired before the Time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_begin property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_beginChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_begin property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_beginChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_end property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_endChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_end property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_endChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_enabled property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_enabledChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_enabled property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Daylight_savings_enabledChanging;
        
        /// <summary>
        /// 
        /// </summary>
        public void Adjust_to_quarter()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_adjust_to_quarterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method adjust_to_quarter registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _adjust_to_quarterOperation.Value);
            this.OnAdjust_to_quarterCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _adjust_to_quarterOperation.Value, e));
            handler.Invoke(this);
            this.OnAdjust_to_quarterCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _adjust_to_quarterOperation.Value, e));
        }
        
        private static IOperation RetrieveAdjust_to_quarterOperation()
        {
            return ClassInstance.LookupOperation("adjust_to_quarter");
        }
        
        /// <summary>
        /// Raises the Adjust_to_quarterCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_quarterCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_quarterCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Adjust_to_quarterCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_quarterCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_quarterCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Adjust_to_measuring_period()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_adjust_to_measuring_periodOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method adjust_to_measuring_period registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _adjust_to_measuring_periodOperation.Value);
            this.OnAdjust_to_measuring_periodCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _adjust_to_measuring_periodOperation.Value, e));
            handler.Invoke(this);
            this.OnAdjust_to_measuring_periodCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _adjust_to_measuring_periodOperation.Value, e));
        }
        
        private static IOperation RetrieveAdjust_to_measuring_periodOperation()
        {
            return ClassInstance.LookupOperation("adjust_to_measuring_period");
        }
        
        /// <summary>
        /// Raises the Adjust_to_measuring_periodCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_measuring_periodCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_measuring_periodCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Adjust_to_measuring_periodCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_measuring_periodCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_measuring_periodCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Adjust_to_minute()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_adjust_to_minuteOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method adjust_to_minute registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _adjust_to_minuteOperation.Value);
            this.OnAdjust_to_minuteCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _adjust_to_minuteOperation.Value, e));
            handler.Invoke(this);
            this.OnAdjust_to_minuteCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _adjust_to_minuteOperation.Value, e));
        }
        
        private static IOperation RetrieveAdjust_to_minuteOperation()
        {
            return ClassInstance.LookupOperation("adjust_to_minute");
        }
        
        /// <summary>
        /// Raises the Adjust_to_minuteCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_minuteCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_minuteCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Adjust_to_minuteCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_minuteCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_minuteCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Adjust_to_present_time()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_adjust_to_present_timeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method adjust_to_present_time registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _adjust_to_present_timeOperation.Value);
            this.OnAdjust_to_present_timeCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _adjust_to_present_timeOperation.Value, e));
            handler.Invoke(this);
            this.OnAdjust_to_present_timeCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _adjust_to_present_timeOperation.Value, e));
        }
        
        private static IOperation RetrieveAdjust_to_present_timeOperation()
        {
            return ClassInstance.LookupOperation("adjust_to_present_time");
        }
        
        /// <summary>
        /// Raises the Adjust_to_present_timeCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_present_timeCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_present_timeCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Adjust_to_present_timeCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdjust_to_present_timeCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Adjust_to_present_timeCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Present_adjusting_time()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_present_adjusting_timeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method present_adjusting_time registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _present_adjusting_timeOperation.Value);
            this.OnPresent_adjusting_timeCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _present_adjusting_timeOperation.Value, e));
            handler.Invoke(this);
            this.OnPresent_adjusting_timeCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _present_adjusting_timeOperation.Value, e));
        }
        
        private static IOperation RetrievePresent_adjusting_timeOperation()
        {
            return ClassInstance.LookupOperation("present_adjusting_time");
        }
        
        /// <summary>
        /// Raises the Present_adjusting_timeCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresent_adjusting_timeCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Present_adjusting_timeCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Present_adjusting_timeCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresent_adjusting_timeCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Present_adjusting_timeCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Shift_time()
        {
            System.Action<IClock> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IClock>>(_shift_timeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new InvalidOperationException("There is no implementation for method shift_time registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _shift_timeOperation.Value);
            this.OnShift_timeCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _shift_timeOperation.Value, e));
            handler.Invoke(this);
            this.OnShift_timeCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _shift_timeOperation.Value, e));
        }
        
        private static IOperation RetrieveShift_timeOperation()
        {
            return ClassInstance.LookupOperation("shift_time");
        }
        
        /// <summary>
        /// Raises the Shift_timeCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShift_timeCalling(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Shift_timeCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shift_timeCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShift_timeCalled(OperationCallEventArgs eventArgs)
        {
            EventHandler<OperationCallEventArgs> handler = this.Shift_timeCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("time")));
        }
        
        /// <summary>
        /// Raises the TimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_zoneAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("time_zone")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Time_zone property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Time_zoneCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Time_zone", e, _time_zoneAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Time_zone property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Time_zoneCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Time_zone", e, _time_zoneAttribute);
        }
        
        private static ITypedElement RetrieveStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDaylight_savings_beginAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("daylight_savings_begin")));
        }
        
        /// <summary>
        /// Raises the Daylight_savings_beginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_beginChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_beginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Daylight_savings_beginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_beginChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_beginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDaylight_savings_endAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("daylight_savings_end")));
        }
        
        /// <summary>
        /// Raises the Daylight_savings_endChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_endChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_endChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Daylight_savings_endChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_endChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_endChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDaylight_savings_deviationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("daylight_savings_deviation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Daylight_savings_deviation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Daylight_savings_deviationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Daylight_savings_deviation", e, _daylight_savings_deviationAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Daylight_savings_deviation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Daylight_savings_deviationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Daylight_savings_deviation", e, _daylight_savings_deviationAttribute);
        }
        
        private static ITypedElement RetrieveDaylight_savings_enabledAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.InterfaceClasses.Clock.ClassInstance)).Resolve("daylight_savings_enabled")));
        }
        
        /// <summary>
        /// Raises the Daylight_savings_enabledChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_enabledChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_enabledChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Daylight_savings_enabledChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDaylight_savings_enabledChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Daylight_savings_enabledChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIME"))
            {
                return this.Time;
            }
            if ((attribute == "TIME_ZONE"))
            {
                if ((index < this.Time_zone.Count))
                {
                    return this.Time_zone[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "STATUS"))
            {
                return this.Status;
            }
            if ((attribute == "DAYLIGHT_SAVINGS_BEGIN"))
            {
                return this.Daylight_savings_begin;
            }
            if ((attribute == "DAYLIGHT_SAVINGS_END"))
            {
                return this.Daylight_savings_end;
            }
            if ((attribute == "DAYLIGHT_SAVINGS_DEVIATION"))
            {
                if ((index < this.Daylight_savings_deviation.Count))
                {
                    return this.Daylight_savings_deviation[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "DAYLIGHT_SAVINGS_ENABLED"))
            {
                return this.Daylight_savings_enabled;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TIME_ZONE"))
            {
                return this._time_zone;
            }
            if ((feature == "DAYLIGHT_SAVINGS_DEVIATION"))
            {
                return this._daylight_savings_deviation;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIME"))
            {
                this.Time = ((string)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((string)(value));
                return;
            }
            if ((feature == "DAYLIGHT_SAVINGS_BEGIN"))
            {
                this.Daylight_savings_begin = ((string)(value));
                return;
            }
            if ((feature == "DAYLIGHT_SAVINGS_END"))
            {
                this.Daylight_savings_end = ((string)(value));
                return;
            }
            if ((feature == "DAYLIGHT_SAVINGS_ENABLED"))
            {
                this.Daylight_savings_enabled = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TIME"))
            {
                return new TimeProxy(this);
            }
            if ((attribute == "STATUS"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "DAYLIGHT_SAVINGS_BEGIN"))
            {
                return new Daylight_savings_beginProxy(this);
            }
            if ((attribute == "DAYLIGHT_SAVINGS_END"))
            {
                return new Daylight_savings_endProxy(this);
            }
            if ((attribute == "DAYLIGHT_SAVINGS_ENABLED"))
            {
                return Observable.Box(new Daylight_savings_enabledProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/Clock")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the time property
        /// </summary>
        private sealed class TimeProxy : ModelPropertyChange<IClock, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeProxy(IClock modelElement) : 
                    base(modelElement, "time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time;
                }
                set
                {
                    this.ModelElement.Time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IClock, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IClock modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the daylight_savings_begin property
        /// </summary>
        private sealed class Daylight_savings_beginProxy : ModelPropertyChange<IClock, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Daylight_savings_beginProxy(IClock modelElement) : 
                    base(modelElement, "daylight_savings_begin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Daylight_savings_begin;
                }
                set
                {
                    this.ModelElement.Daylight_savings_begin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the daylight_savings_end property
        /// </summary>
        private sealed class Daylight_savings_endProxy : ModelPropertyChange<IClock, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Daylight_savings_endProxy(IClock modelElement) : 
                    base(modelElement, "daylight_savings_end")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Daylight_savings_end;
                }
                set
                {
                    this.ModelElement.Daylight_savings_end = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the daylight_savings_enabled property
        /// </summary>
        private sealed class Daylight_savings_enabledProxy : ModelPropertyChange<IClock, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Daylight_savings_enabledProxy(IClock modelElement) : 
                    base(modelElement, "daylight_savings_enabled")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Daylight_savings_enabled;
                }
                set
                {
                    this.ModelElement.Daylight_savings_enabled = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ApplicationAssociation class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ApplicationAssociation")]
    public partial class ApplicationAssociation : ModelElement, IApplicationAssociation, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ApplicationAssociation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//InterfaceClasses/ApplicationAssociation")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The public interface for ApplicationAssociation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ApplicationAssociation))]
    [XmlDefaultImplementationTypeAttribute(typeof(ApplicationAssociation))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ApplicationAssociation")]
    public partial interface IApplicationAssociation : IModelElement
    {
    }
    
    /// <summary>
    /// The public interface for Clock
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Clock))]
    [XmlDefaultImplementationTypeAttribute(typeof(Clock))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Clock")]
    public partial interface IClock : IModelElement, IBase
    {
        
        /// <summary>
        /// The time property
        /// </summary>
        [DisplayNameAttribute("time")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("time")]
        [XmlAttributeAttribute(true)]
        string Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The time_zone property
        /// </summary>
        [UpperBoundAttribute(720)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("time_zone")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("time_zone")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<long> Time_zone
        {
            get;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [DisplayNameAttribute("status")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        string Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// The daylight_savings_begin property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_begin")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_begin")]
        [XmlAttributeAttribute(true)]
        string Daylight_savings_begin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The daylight_savings_end property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_end")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_end")]
        [XmlAttributeAttribute(true)]
        string Daylight_savings_end
        {
            get;
            set;
        }
        
        /// <summary>
        /// The daylight_savings_deviation property
        /// </summary>
        [UpperBoundAttribute(120)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("daylight_savings_deviation")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_deviation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<int> Daylight_savings_deviation
        {
            get;
        }
        
        /// <summary>
        /// The daylight_savings_enabled property
        /// </summary>
        [DisplayNameAttribute("daylight_savings_enabled")]
        [CategoryAttribute("Clock")]
        [XmlElementNameAttribute("daylight_savings_enabled")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Daylight_savings_enabled
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation adjust_to_quarter gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_quarterCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_quarter got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_quarterCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_measuring_period gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_measuring_periodCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_measuring_period got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_measuring_periodCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_minute gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_minuteCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_minute got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_minuteCalled;
        
        /// <summary>
        /// Gets fired before the operation adjust_to_present_time gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_present_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation adjust_to_present_time got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Adjust_to_present_timeCalled;
        
        /// <summary>
        /// Gets fired before the operation present_adjusting_time gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Present_adjusting_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation present_adjusting_time got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Present_adjusting_timeCalled;
        
        /// <summary>
        /// Gets fired before the operation shift_time gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Shift_timeCalling;
        
        /// <summary>
        /// Gets fired after the operation shift_time got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Shift_timeCalled;
        
        /// <summary>
        /// Gets fired when the Time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeChanged;
        
        /// <summary>
        /// Gets fired before the Time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_begin property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_beginChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_begin property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_beginChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_end property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_endChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_end property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_endChanging;
        
        /// <summary>
        /// Gets fired when the Daylight_savings_enabled property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_enabledChanged;
        
        /// <summary>
        /// Gets fired before the Daylight_savings_enabled property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Daylight_savings_enabledChanging;
        
        /// <summary>
        /// 
        /// </summary>
        void Adjust_to_quarter();
        
        /// <summary>
        /// 
        /// </summary>
        void Adjust_to_measuring_period();
        
        /// <summary>
        /// 
        /// </summary>
        void Adjust_to_minute();
        
        /// <summary>
        /// 
        /// </summary>
        void Adjust_to_present_time();
        
        /// <summary>
        /// 
        /// </summary>
        void Present_adjusting_time();
        
        /// <summary>
        /// 
        /// </summary>
        void Shift_time();
    }
    
    /// <summary>
    /// The public interface for Securitysetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Securitysetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(Securitysetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Securitysetup")]
    public partial interface ISecuritysetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Pushsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Pushsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(Pushsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Pushsetup")]
    public partial interface IPushsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Dataprotection
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Dataprotection))]
    [XmlDefaultImplementationTypeAttribute(typeof(Dataprotection))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Dataprotection")]
    public partial interface IDataprotection : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Imagetransfer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Imagetransfer))]
    [XmlDefaultImplementationTypeAttribute(typeof(Imagetransfer))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Imagetransfer")]
    public partial interface IImagetransfer : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for AssociationSN
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AssociationSN))]
    [XmlDefaultImplementationTypeAttribute(typeof(AssociationSN))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/AssociationSN")]
    public partial interface IAssociationSN : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Statusmapping
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Statusmapping))]
    [XmlDefaultImplementationTypeAttribute(typeof(Statusmapping))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Statusmapping")]
    public partial interface IStatusmapping : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Compactdata
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Compactdata))]
    [XmlDefaultImplementationTypeAttribute(typeof(Compactdata))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Compactdata")]
    public partial interface ICompactdata : IModelElement, IBase
    {
        
        /// <summary>
        /// The compact_buffer property
        /// </summary>
        [DisplayNameAttribute("compact_buffer")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("compact_buffer")]
        [XmlAttributeAttribute(true)]
        string Compact_buffer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The template_id property
        /// </summary>
        [DisplayNameAttribute("template_id")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("template_id")]
        [XmlAttributeAttribute(true)]
        string Template_id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The template_description property
        /// </summary>
        [DisplayNameAttribute("template_description")]
        [CategoryAttribute("Compactdata")]
        [XmlElementNameAttribute("template_description")]
        [XmlAttributeAttribute(true)]
        string Template_description
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Compact_buffer property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compact_bufferChanged;
        
        /// <summary>
        /// Gets fired before the Compact_buffer property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compact_bufferChanging;
        
        /// <summary>
        /// Gets fired when the Template_id property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Template_idChanged;
        
        /// <summary>
        /// Gets fired before the Template_id property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Template_idChanging;
        
        /// <summary>
        /// Gets fired when the Template_description property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Template_descriptionChanged;
        
        /// <summary>
        /// Gets fired before the Template_description property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Template_descriptionChanging;
    }
    
    /// <summary>
    /// The public interface for Registertable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Registertable))]
    [XmlDefaultImplementationTypeAttribute(typeof(Registertable))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Registertable")]
    public partial interface IRegistertable : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Utilitytables
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Utilitytables))]
    [XmlDefaultImplementationTypeAttribute(typeof(Utilitytables))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Utilitytables")]
    public partial interface IUtilitytables : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Base
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Base))]
    [XmlDefaultImplementationTypeAttribute(typeof(Base))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Base")]
    public partial interface IBase : IModelElement
    {
        
        /// <summary>
        /// The logical_name property
        /// </summary>
        [DisplayNameAttribute("logical_name")]
        [CategoryAttribute("Base")]
        [XmlElementNameAttribute("logical_name")]
        [XmlAttributeAttribute(true)]
        string Logical_name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OBIScode property
        /// </summary>
        [CategoryAttribute("Base")]
        [XmlAttributeAttribute(true)]
        string OBIScode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Logical_name property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Logical_nameChanged;
        
        /// <summary>
        /// Gets fired before the Logical_name property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Logical_nameChanging;
        
        /// <summary>
        /// Gets fired when the OBIScode property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OBIScodeChanged;
        
        /// <summary>
        /// Gets fired before the OBIScode property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OBIScodeChanging;
    }
    
    /// <summary>
    /// The public interface for Profilegeneric
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Profilegeneric))]
    [XmlDefaultImplementationTypeAttribute(typeof(Profilegeneric))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Profilegeneric")]
    public partial interface IProfilegeneric : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for RegisterActivation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RegisterActivation))]
    [XmlDefaultImplementationTypeAttribute(typeof(RegisterActivation))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/RegisterActivation")]
    public partial interface IRegisterActivation : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for DemandRegister
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DemandRegister))]
    [XmlDefaultImplementationTypeAttribute(typeof(DemandRegister))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DemandRegister")]
    public partial interface IDemandRegister : IModelElement, IExtendedRegister
    {
        
        /// <summary>
        /// The number_of_periods property
        /// </summary>
        [DisplayNameAttribute("number_of_periods")]
        [CategoryAttribute("DemandRegister")]
        [XmlElementNameAttribute("number_of_periods")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Number_of_periods
        {
            get;
            set;
        }
        
        /// <summary>
        /// The period property
        /// </summary>
        [DisplayNameAttribute("period")]
        [CategoryAttribute("DemandRegister")]
        [XmlElementNameAttribute("period")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Period
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation calculate_current_average_value gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Calculate_current_average_valueCalling;
        
        /// <summary>
        /// Gets fired after the operation calculate_current_average_value got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Calculate_current_average_valueCalled;
        
        /// <summary>
        /// Gets fired before the operation calculate_last_average_value gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Calculate_last_average_valueCalling;
        
        /// <summary>
        /// Gets fired after the operation calculate_last_average_value got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> Calculate_last_average_valueCalled;
        
        /// <summary>
        /// Gets fired when the Number_of_periods property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Number_of_periodsChanged;
        
        /// <summary>
        /// Gets fired before the Number_of_periods property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Number_of_periodsChanging;
        
        /// <summary>
        /// Gets fired when the Period property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PeriodChanged;
        
        /// <summary>
        /// Gets fired before the Period property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PeriodChanging;
        
        /// <summary>
        /// 
        /// </summary>
        void Calculate_current_average_value();
        
        /// <summary>
        /// 
        /// </summary>
        void Calculate_last_average_value();
    }
    
    /// <summary>
    /// The public interface for ExtendedRegister
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ExtendedRegister))]
    [XmlDefaultImplementationTypeAttribute(typeof(ExtendedRegister))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ExtendedRegister")]
    public partial interface IExtendedRegister : IModelElement, IRegister
    {
    }
    
    /// <summary>
    /// The public interface for Data
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Data))]
    [XmlDefaultImplementationTypeAttribute(typeof(Data))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Data")]
    public partial interface IData : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for AssociationLN
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AssociationLN))]
    [XmlDefaultImplementationTypeAttribute(typeof(AssociationLN))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/AssociationLN")]
    public partial interface IAssociationLN : IModelElement, IBase
    {
        
        /// <summary>
        /// The AA property
        /// </summary>
        [CategoryAttribute("AssociationLN")]
        [XmlAttributeAttribute(true)]
        IApplicationAssociation AA
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AAChanged;
    }
    
    /// <summary>
    /// The public interface for SAPAssignment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SAPAssignment))]
    [XmlDefaultImplementationTypeAttribute(typeof(SAPAssignment))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/SAPAssignment")]
    public partial interface ISAPAssignment : IModelElement, IBase
    {
        
        /// <summary>
        /// The ldnname property
        /// </summary>
        [DisplayNameAttribute("ldnname")]
        [CategoryAttribute("SAPAssignment")]
        [XmlElementNameAttribute("ldnname")]
        [XmlAttributeAttribute(true)]
        ILogicalDeviceName Ldnname
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Ldnname property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LdnnameChanging;
        
        /// <summary>
        /// Gets fired when the Ldnname property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LdnnameChanged;
    }
    
    /// <summary>
    /// The public interface for Register
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Register))]
    [XmlDefaultImplementationTypeAttribute(typeof(Register))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Register")]
    public partial interface IRegister : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("Register")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        Nullable<float> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scaler_unit property
        /// </summary>
        [DisplayNameAttribute("scaler_unit")]
        [CategoryAttribute("Register")]
        [XmlElementNameAttribute("scaler_unit")]
        [XmlAttributeAttribute(true)]
        IScal_unit_type Scaler_unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation reset gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> ResetCalling;
        
        /// <summary>
        /// Gets fired after the operation reset got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> ResetCalled;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired before the Scaler_unit property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Scaler_unitChanging;
        
        /// <summary>
        /// Gets fired when the Scaler_unit property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Scaler_unitChanged;
        
        /// <summary>
        /// 
        /// </summary>
        void Reset();
    }
    
    /// <summary>
    /// The public interface for IEC8802_2LLCType3
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC8802_2LLCType3))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC8802_2LLCType3))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC8802_2LLCType3")]
    public partial interface IIEC8802_2LLCType3 : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC_8802_2_LLC_G3_NB
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_8802_2_LLC_G3_NB))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_8802_2_LLC_G3_NB))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_G3_NB")]
    public partial interface IIEC_8802_2_LLC_G3_NB : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC_8802_2_LLC_Type_1
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_8802_2_LLC_Type_1))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_8802_2_LLC_Type_1))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_8802_2_LLC_Type_1")]
    public partial interface IIEC_8802_2_LLC_Type_1 : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC_HDLC_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_HDLC_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_HDLC_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_HDLC_setup")]
    public partial interface IIEC_HDLC_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC_local_port_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_local_port_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_local_port_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_local_port_setup")]
    public partial interface IIEC_local_port_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Tokengateway
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Tokengateway))]
    [XmlDefaultImplementationTypeAttribute(typeof(Tokengateway))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Tokengateway")]
    public partial interface ITokengateway : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Charge
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Charge))]
    [XmlDefaultImplementationTypeAttribute(typeof(Charge))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Charge")]
    public partial interface ICharge : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Credit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Credit))]
    [XmlDefaultImplementationTypeAttribute(typeof(Credit))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Credit")]
    public partial interface ICredit : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Account
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Account))]
    [XmlDefaultImplementationTypeAttribute(typeof(Account))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Account")]
    public partial interface IAccount : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Limiter
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Limiter))]
    [XmlDefaultImplementationTypeAttribute(typeof(Limiter))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Limiter")]
    public partial interface ILimiter : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for DisconnectControl
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DisconnectControl))]
    [XmlDefaultImplementationTypeAttribute(typeof(DisconnectControl))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DisconnectControl")]
    public partial interface IDisconnectControl : IModelElement, IBase
    {
        
        /// <summary>
        /// The state property
        /// </summary>
        [DisplayNameAttribute("state")]
        [CategoryAttribute("DisconnectControl")]
        [XmlElementNameAttribute("state")]
        [XmlAttributeAttribute(true)]
        Nullable<DisconnectControlState> State
        {
            get;
            set;
        }
        
        /// <summary>
        /// The transition property
        /// </summary>
        [DisplayNameAttribute("transition")]
        [CategoryAttribute("DisconnectControl")]
        [XmlElementNameAttribute("transition")]
        [XmlAttributeAttribute(true)]
        Nullable<DisconnectControlTransition> Transition
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the State property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StateChanged;
        
        /// <summary>
        /// Gets fired before the State property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StateChanging;
        
        /// <summary>
        /// Gets fired when the Transition property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransitionChanged;
        
        /// <summary>
        /// Gets fired before the Transition property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TransitionChanging;
    }
    
    /// <summary>
    /// The public interface for Arbitrator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Arbitrator))]
    [XmlDefaultImplementationTypeAttribute(typeof(Arbitrator))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Arbitrator")]
    public partial interface IArbitrator : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Sensormanager
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Sensormanager))]
    [XmlDefaultImplementationTypeAttribute(typeof(Sensormanager))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Sensormanager")]
    public partial interface ISensormanager : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Parametermonitor
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Parametermonitor))]
    [XmlDefaultImplementationTypeAttribute(typeof(Parametermonitor))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Parametermonitor")]
    public partial interface IParametermonitor : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Singleactionschedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Singleactionschedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(Singleactionschedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Singleactionschedule")]
    public partial interface ISingleactionschedule : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Registermonitor
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Registermonitor))]
    [XmlDefaultImplementationTypeAttribute(typeof(Registermonitor))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Registermonitor")]
    public partial interface IRegistermonitor : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Activitycalendar
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Activitycalendar))]
    [XmlDefaultImplementationTypeAttribute(typeof(Activitycalendar))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Activitycalendar")]
    public partial interface IActivitycalendar : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Specialdaystable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Specialdaystable))]
    [XmlDefaultImplementationTypeAttribute(typeof(Specialdaystable))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Specialdaystable")]
    public partial interface ISpecialdaystable : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Schedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Schedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(Schedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Schedule")]
    public partial interface ISchedule : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Script
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Script))]
    [XmlDefaultImplementationTypeAttribute(typeof(Script))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Script")]
    public partial interface IScript : IModelElement
    {
    }
    
    /// <summary>
    /// The public interface for Scripttable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Scripttable))]
    [XmlDefaultImplementationTypeAttribute(typeof(Scripttable))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Scripttable")]
    public partial interface IScripttable : IModelElement, IBase
    {
        
        /// <summary>
        /// The includes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("includes")]
        [CategoryAttribute("Scripttable")]
        [XmlElementNameAttribute("includes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<IScript> Includes
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the operation execute gets called
        /// </summary>
        event EventHandler<OperationCallEventArgs> ExecuteCalling;
        
        /// <summary>
        /// Gets fired after the operation execute got called
        /// </summary>
        event EventHandler<OperationCallEventArgs> ExecuteCalled;
        
        /// <summary>
        /// 
        /// </summary>
        void Execute();
    }
    
    /// <summary>
    /// The public interface for M_Bus_diagnostic
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_Bus_diagnostic))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_Bus_diagnostic))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_diagnostic")]
    public partial interface IM_Bus_diagnostic : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for DLMS_COSEM_Server_M_Bus_port_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DLMS_COSEM_Server_M_Bus_port_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(DLMS_COSEM_Server_M_Bus_port_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/DLMS_COSEM_Server_M_Bus_port_setup")]
    public partial interface IDLMS_COSEM_Server_M_Bus_port_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for M_Bus_master_port_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_Bus_master_port_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_Bus_master_port_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_master_port_setup")]
    public partial interface IM_Bus_master_port_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Wireless_Mode_Q_Channel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Wireless_Mode_Q_Channel))]
    [XmlDefaultImplementationTypeAttribute(typeof(Wireless_Mode_Q_Channel))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Wireless_Mode_Q_Channel")]
    public partial interface IWireless_Mode_Q_Channel : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for M_Bus_client
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_Bus_client))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_Bus_client))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_client")]
    public partial interface IM_Bus_client : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for M_Bus_slave_port_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_Bus_slave_port_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_Bus_slave_port_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/M_Bus_slave_port_setup")]
    public partial interface IM_Bus_slave_port_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC_twisted_pair_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_twisted_pair_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_twisted_pair_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC_twisted_pair_setup")]
    public partial interface IIEC_twisted_pair_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for GSM_Diagnostic
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GSM_Diagnostic))]
    [XmlDefaultImplementationTypeAttribute(typeof(GSM_Diagnostic))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/GSM_Diagnostic")]
    public partial interface IGSM_Diagnostic : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for GPRS_modem_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GPRS_modem_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(GPRS_modem_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/GPRS_modem_setup")]
    public partial interface IGPRS_modem_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Auto_connect
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Auto_connect))]
    [XmlDefaultImplementationTypeAttribute(typeof(Auto_connect))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Auto_connect")]
    public partial interface IAuto_connect : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Auto_answer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Auto_answer))]
    [XmlDefaultImplementationTypeAttribute(typeof(Auto_answer))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Auto_answer")]
    public partial interface IAuto_answer : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for Modemconfiguration
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Modemconfiguration))]
    [XmlDefaultImplementationTypeAttribute(typeof(Modemconfiguration))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/Modemconfiguration")]
    public partial interface IModemconfiguration : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for SMTPsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SMTPsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(SMTPsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/SMTPsetup")]
    public partial interface ISMTPsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PPPsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PPPsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(PPPsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PPPsetup")]
    public partial interface IPPPsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for MACaddresssetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MACaddresssetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(MACaddresssetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/MACaddresssetup")]
    public partial interface IMACaddresssetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IPv6setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IPv6setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IPv6setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IPv6setup")]
    public partial interface IIPv6setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IPv4setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IPv4setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IPv4setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IPv4setup")]
    public partial interface IIPv4setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for TCP_UDPsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TCP_UDPsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(TCP_UDPsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/TCP_UDPsetup")]
    public partial interface ITCP_UDPsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for ZigBeetunnelsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBeetunnelsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBeetunnelsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBeetunnelsetup")]
    public partial interface IZigBeetunnelsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for ZigBeenetworkcontrol
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBeenetworkcontrol))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBeenetworkcontrol))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBeenetworkcontrol")]
    public partial interface IZigBeenetworkcontrol : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_APS_fragmentation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_APS_fragmentation))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_APS_fragmentation))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_APS_fragmentation")]
    public partial interface IZigBee_SAS_APS_fragmentation : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_join
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_join))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_join))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_join")]
    public partial interface IZigBee_SAS_join : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_startup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_startup))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_startup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/ZigBee_SAS_startup")]
    public partial interface IZigBee_SAS_startup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_6LoWPAN
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_6LoWPAN))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_6LoWPAN))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_6LoWPAN")]
    public partial interface IG3_PLC_6LoWPAN : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_MAC_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_MAC_setup")]
    public partial interface IG3_PLC_MAC_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_MAC_layer_counters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_layer_counters))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_layer_counters))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/G3_PLC_MAC_layer_counters")]
    public partial interface IG3_PLC_MAC_layer_counters : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_Application_identification
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Application_identification))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Application_identification))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Application_identification")]
    public partial interface IPRIME_NB_OFDM_PLC_Application_identification : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MACnetworkadmindata
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MACnetworkadmindata))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MACnetworkadmindata))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACnetworkadmindata")]
    public partial interface IPRIME_NB_OFDM_PLC_MACnetworkadmindata : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_functionalparams
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_functionalparams))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_functionalparams))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_functionalparams")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_functionalparams : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_counters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_counters))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_counters))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MAC_counters")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_counters : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MACsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MACsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MACsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_MACsetup")]
    public partial interface IPRIME_NB_OFDM_PLC_MACsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_Phy_layer_counters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Phy_layer_counters))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Phy_layer_counters))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/PRIME_NB_OFDM_PLC_Phy_layer_counters")]
    public partial interface IPRIME_NB_OFDM_PLC_Phy_layer_counters : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for t61334_32_LLC_SSCS_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(T61334_32_LLC_SSCS_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(T61334_32_LLC_SSCS_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/t61334_32_LLC_SSCS_setup")]
    public partial interface IT61334_32_LLC_SSCS_setup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKReportingsystemlist
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKReportingsystemlist))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKReportingsystemlist))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKReportingsystemlist")]
    public partial interface IS_FSKReportingsystemlist : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for IEC61334_4_32LLCsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC61334_4_32LLCsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC61334_4_32LLCsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/IEC61334_4_32LLCsetup")]
    public partial interface IIEC61334_4_32LLCsetup : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKMACcounters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKMACcounters))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKMACcounters))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKMACcounters")]
    public partial interface IS_FSKMACcounters : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKMACsynctimeouts
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKMACsynctimeouts))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKMACsynctimeouts))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKMACsynctimeouts")]
    public partial interface IS_FSKMACsynctimeouts : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKActiveinitiator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKActiveinitiator))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKActiveinitiator))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSKActiveinitiator")]
    public partial interface IS_FSKActiveinitiator : IModelElement, IBase
    {
    }
    
    /// <summary>
    /// The public interface for S_FSK_PHY_MACsetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSK_PHY_MACsetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSK_PHY_MACsetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//InterfaceClasses/S_FSK_PHY_MACsetup")]
    public partial interface IS_FSK_PHY_MACsetup : IModelElement, IBase
    {
    }
}
namespace TemporaryGeneratedCode.COSEM.COSEMObjects
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using TemporaryGeneratedCode.COSEM.InterfaceClasses;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the ProgramEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ProgramEntries")]
    public partial class ProgramEntries : Data, IProgramEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveFirmwareIdentifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _activeFirmwareIdentifier;
        
        private static Lazy<ITypedElement> _activeFirmwareIdentifierAttribute = new Lazy<ITypedElement>(RetrieveActiveFirmwareIdentifierAttribute);
        
        /// <summary>
        /// The backing field for the ActiveFirmwareVersion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _activeFirmwareVersion;
        
        private static Lazy<ITypedElement> _activeFirmwareVersionAttribute = new Lazy<ITypedElement>(RetrieveActiveFirmwareVersionAttribute);
        
        /// <summary>
        /// The backing field for the ActiveFirmwareSignature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _activeFirmwareSignature;
        
        private static Lazy<ITypedElement> _activeFirmwareSignatureAttribute = new Lazy<ITypedElement>(RetrieveActiveFirmwareSignatureAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActiveFirmwareIdentifier property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string ActiveFirmwareIdentifier
        {
            get
            {
                return this._activeFirmwareIdentifier;
            }
            set
            {
                if ((this._activeFirmwareIdentifier != value))
                {
                    string old = this._activeFirmwareIdentifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveFirmwareIdentifierChanging(e);
                    this.OnPropertyChanging("ActiveFirmwareIdentifier", e, _activeFirmwareIdentifierAttribute);
                    this._activeFirmwareIdentifier = value;
                    this.OnActiveFirmwareIdentifierChanged(e);
                    this.OnPropertyChanged("ActiveFirmwareIdentifier", e, _activeFirmwareIdentifierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActiveFirmwareVersion property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string ActiveFirmwareVersion
        {
            get
            {
                return this._activeFirmwareVersion;
            }
            set
            {
                if ((this._activeFirmwareVersion != value))
                {
                    string old = this._activeFirmwareVersion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveFirmwareVersionChanging(e);
                    this.OnPropertyChanging("ActiveFirmwareVersion", e, _activeFirmwareVersionAttribute);
                    this._activeFirmwareVersion = value;
                    this.OnActiveFirmwareVersionChanged(e);
                    this.OnPropertyChanged("ActiveFirmwareVersion", e, _activeFirmwareVersionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActiveFirmwareSignature property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string ActiveFirmwareSignature
        {
            get
            {
                return this._activeFirmwareSignature;
            }
            set
            {
                if ((this._activeFirmwareSignature != value))
                {
                    string old = this._activeFirmwareSignature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveFirmwareSignatureChanging(e);
                    this.OnPropertyChanging("ActiveFirmwareSignature", e, _activeFirmwareSignatureAttribute);
                    this._activeFirmwareSignature = value;
                    this.OnActiveFirmwareSignatureChanged(e);
                    this.OnPropertyChanged("ActiveFirmwareSignature", e, _activeFirmwareSignatureAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ProgramEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareIdentifier property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareIdentifierChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareIdentifier property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareIdentifierChanging;
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareVersion property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareVersionChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareVersion property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareVersionChanging;
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareSignature property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareSignatureChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareSignature property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveFirmwareSignatureChanging;
        
        private static ITypedElement RetrieveActiveFirmwareIdentifierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ProgramEntries.ClassInstance)).Resolve("ActiveFirmwareIdentifier")));
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareIdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareIdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareIdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareIdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActiveFirmwareVersionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ProgramEntries.ClassInstance)).Resolve("ActiveFirmwareVersion")));
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareVersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareVersionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareVersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareVersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareVersionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareVersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActiveFirmwareSignatureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ProgramEntries.ClassInstance)).Resolve("ActiveFirmwareSignature")));
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareSignatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareSignatureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareSignatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveFirmwareSignatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveFirmwareSignatureChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveFirmwareSignatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                return this.ActiveFirmwareIdentifier;
            }
            if ((attribute == "ACTIVEFIRMWAREVERSION"))
            {
                return this.ActiveFirmwareVersion;
            }
            if ((attribute == "ACTIVEFIRMWARESIGNATURE"))
            {
                return this.ActiveFirmwareSignature;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                this.ActiveFirmwareIdentifier = ((string)(value));
                return;
            }
            if ((feature == "ACTIVEFIRMWAREVERSION"))
            {
                this.ActiveFirmwareVersion = ((string)(value));
                return;
            }
            if ((feature == "ACTIVEFIRMWARESIGNATURE"))
            {
                this.ActiveFirmwareSignature = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                return new ActiveFirmwareIdentifierProxy(this);
            }
            if ((attribute == "ACTIVEFIRMWAREVERSION"))
            {
                return new ActiveFirmwareVersionProxy(this);
            }
            if ((attribute == "ACTIVEFIRMWARESIGNATURE"))
            {
                return new ActiveFirmwareSignatureProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ProgramEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveFirmwareIdentifier property
        /// </summary>
        private sealed class ActiveFirmwareIdentifierProxy : ModelPropertyChange<IProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveFirmwareIdentifierProxy(IProgramEntries modelElement) : 
                    base(modelElement, "ActiveFirmwareIdentifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActiveFirmwareIdentifier;
                }
                set
                {
                    this.ModelElement.ActiveFirmwareIdentifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveFirmwareVersion property
        /// </summary>
        private sealed class ActiveFirmwareVersionProxy : ModelPropertyChange<IProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveFirmwareVersionProxy(IProgramEntries modelElement) : 
                    base(modelElement, "ActiveFirmwareVersion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActiveFirmwareVersion;
                }
                set
                {
                    this.ModelElement.ActiveFirmwareVersion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveFirmwareSignature property
        /// </summary>
        private sealed class ActiveFirmwareSignatureProxy : ModelPropertyChange<IProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveFirmwareSignatureProxy(IProgramEntries modelElement) : 
                    base(modelElement, "ActiveFirmwareSignature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActiveFirmwareSignature;
                }
                set
                {
                    this.ModelElement.ActiveFirmwareSignature = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the BillingPeriodValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/BillingPeriodValues")]
    public partial class BillingPeriodValues : Data, IBillingPeriodValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BillingPeriodCounter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _billingPeriodCounter;
        
        private static Lazy<ITypedElement> _billingPeriodCounterAttribute = new Lazy<ITypedElement>(RetrieveBillingPeriodCounterAttribute);
        
        /// <summary>
        /// The backing field for the NumberAvailableBillingPeriods property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _numberAvailableBillingPeriods;
        
        private static Lazy<ITypedElement> _numberAvailableBillingPeriodsAttribute = new Lazy<ITypedElement>(RetrieveNumberAvailableBillingPeriodsAttribute);
        
        /// <summary>
        /// The backing field for the TimestampRecentBillingPeriod property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timestampRecentBillingPeriod;
        
        private static Lazy<ITypedElement> _timestampRecentBillingPeriodAttribute = new Lazy<ITypedElement>(RetrieveTimestampRecentBillingPeriodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The BillingPeriodCounter property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> BillingPeriodCounter
        {
            get
            {
                return this._billingPeriodCounter;
            }
            set
            {
                if ((this._billingPeriodCounter != value))
                {
                    Nullable<int> old = this._billingPeriodCounter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodCounterChanging(e);
                    this.OnPropertyChanging("BillingPeriodCounter", e, _billingPeriodCounterAttribute);
                    this._billingPeriodCounter = value;
                    this.OnBillingPeriodCounterChanged(e);
                    this.OnPropertyChanged("BillingPeriodCounter", e, _billingPeriodCounterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NumberAvailableBillingPeriods property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> NumberAvailableBillingPeriods
        {
            get
            {
                return this._numberAvailableBillingPeriods;
            }
            set
            {
                if ((this._numberAvailableBillingPeriods != value))
                {
                    Nullable<int> old = this._numberAvailableBillingPeriods;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberAvailableBillingPeriodsChanging(e);
                    this.OnPropertyChanging("NumberAvailableBillingPeriods", e, _numberAvailableBillingPeriodsAttribute);
                    this._numberAvailableBillingPeriods = value;
                    this.OnNumberAvailableBillingPeriodsChanged(e);
                    this.OnPropertyChanged("NumberAvailableBillingPeriods", e, _numberAvailableBillingPeriodsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TimestampRecentBillingPeriod property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        public string TimestampRecentBillingPeriod
        {
            get
            {
                return this._timestampRecentBillingPeriod;
            }
            set
            {
                if ((this._timestampRecentBillingPeriod != value))
                {
                    string old = this._timestampRecentBillingPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimestampRecentBillingPeriodChanging(e);
                    this.OnPropertyChanging("TimestampRecentBillingPeriod", e, _timestampRecentBillingPeriodAttribute);
                    this._timestampRecentBillingPeriod = value;
                    this.OnTimestampRecentBillingPeriodChanged(e);
                    this.OnPropertyChanged("TimestampRecentBillingPeriod", e, _timestampRecentBillingPeriodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/BillingPeriodValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the BillingPeriodCounter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodCounter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanging;
        
        /// <summary>
        /// Gets fired when the NumberAvailableBillingPeriods property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanged;
        
        /// <summary>
        /// Gets fired before the NumberAvailableBillingPeriods property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanging;
        
        /// <summary>
        /// Gets fired when the TimestampRecentBillingPeriod property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimestampRecentBillingPeriod property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanging;
        
        private static ITypedElement RetrieveBillingPeriodCounterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BillingPeriodValues.ClassInstance)).Resolve("BillingPeriodCounter")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodCounterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodCounterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodCounterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodCounterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodCounterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodCounterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberAvailableBillingPeriodsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BillingPeriodValues.ClassInstance)).Resolve("NumberAvailableBillingPeriods")));
        }
        
        /// <summary>
        /// Raises the NumberAvailableBillingPeriodsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberAvailableBillingPeriodsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberAvailableBillingPeriodsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberAvailableBillingPeriodsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberAvailableBillingPeriodsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberAvailableBillingPeriodsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimestampRecentBillingPeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BillingPeriodValues.ClassInstance)).Resolve("TimestampRecentBillingPeriod")));
        }
        
        /// <summary>
        /// Raises the TimestampRecentBillingPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampRecentBillingPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimestampRecentBillingPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimestampRecentBillingPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimestampRecentBillingPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimestampRecentBillingPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BILLINGPERIODCOUNTER"))
            {
                return this.BillingPeriodCounter;
            }
            if ((attribute == "NUMBERAVAILABLEBILLINGPERIODS"))
            {
                return this.NumberAvailableBillingPeriods;
            }
            if ((attribute == "TIMESTAMPRECENTBILLINGPERIOD"))
            {
                return this.TimestampRecentBillingPeriod;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BILLINGPERIODCOUNTER"))
            {
                this.BillingPeriodCounter = ((int)(value));
                return;
            }
            if ((feature == "NUMBERAVAILABLEBILLINGPERIODS"))
            {
                this.NumberAvailableBillingPeriods = ((int)(value));
                return;
            }
            if ((feature == "TIMESTAMPRECENTBILLINGPERIOD"))
            {
                this.TimestampRecentBillingPeriod = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BILLINGPERIODCOUNTER"))
            {
                return Observable.Box(new BillingPeriodCounterProxy(this));
            }
            if ((attribute == "NUMBERAVAILABLEBILLINGPERIODS"))
            {
                return Observable.Box(new NumberAvailableBillingPeriodsProxy(this));
            }
            if ((attribute == "TIMESTAMPRECENTBILLINGPERIOD"))
            {
                return new TimestampRecentBillingPeriodProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/BillingPeriodValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodCounter property
        /// </summary>
        private sealed class BillingPeriodCounterProxy : ModelPropertyChange<IBillingPeriodValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodCounterProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "BillingPeriodCounter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodCounter;
                }
                set
                {
                    this.ModelElement.BillingPeriodCounter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberAvailableBillingPeriods property
        /// </summary>
        private sealed class NumberAvailableBillingPeriodsProxy : ModelPropertyChange<IBillingPeriodValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberAvailableBillingPeriodsProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "NumberAvailableBillingPeriods")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberAvailableBillingPeriods;
                }
                set
                {
                    this.ModelElement.NumberAvailableBillingPeriods = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimestampRecentBillingPeriod property
        /// </summary>
        private sealed class TimestampRecentBillingPeriodProxy : ModelPropertyChange<IBillingPeriodValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimestampRecentBillingPeriodProxy(IBillingPeriodValues modelElement) : 
                    base(modelElement, "TimestampRecentBillingPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimestampRecentBillingPeriod;
                }
                set
                {
                    this.ModelElement.TimestampRecentBillingPeriod = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the TimeEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TimeEntries")]
    public partial class TimeEntries : Data, ITimeEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LocalTime property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _localTime;
        
        private static Lazy<ITypedElement> _localTimeAttribute = new Lazy<ITypedElement>(RetrieveLocalTimeAttribute);
        
        /// <summary>
        /// The backing field for the LocalDate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _localDate;
        
        private static Lazy<ITypedElement> _localDateAttribute = new Lazy<ITypedElement>(RetrieveLocalDateAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The LocalTime property
        /// </summary>
        [CategoryAttribute("TimeEntries")]
        [XmlAttributeAttribute(true)]
        public string LocalTime
        {
            get
            {
                return this._localTime;
            }
            set
            {
                if ((this._localTime != value))
                {
                    string old = this._localTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalTimeChanging(e);
                    this.OnPropertyChanging("LocalTime", e, _localTimeAttribute);
                    this._localTime = value;
                    this.OnLocalTimeChanged(e);
                    this.OnPropertyChanged("LocalTime", e, _localTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LocalDate property
        /// </summary>
        [CategoryAttribute("TimeEntries")]
        [XmlAttributeAttribute(true)]
        public string LocalDate
        {
            get
            {
                return this._localDate;
            }
            set
            {
                if ((this._localDate != value))
                {
                    string old = this._localDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalDateChanging(e);
                    this.OnPropertyChanging("LocalDate", e, _localDateAttribute);
                    this._localDate = value;
                    this.OnLocalDateChanged(e);
                    this.OnPropertyChanged("LocalDate", e, _localDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TimeEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the LocalTime property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocalTimeChanged;
        
        /// <summary>
        /// Gets fired before the LocalTime property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocalTimeChanging;
        
        /// <summary>
        /// Gets fired when the LocalDate property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocalDateChanged;
        
        /// <summary>
        /// Gets fired before the LocalDate property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocalDateChanging;
        
        private static ITypedElement RetrieveLocalTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TimeEntries.ClassInstance)).Resolve("LocalTime")));
        }
        
        /// <summary>
        /// Raises the LocalTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocalTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocalTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TimeEntries.ClassInstance)).Resolve("LocalDate")));
        }
        
        /// <summary>
        /// Raises the LocalDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalDateChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocalDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalDateChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocalDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOCALTIME"))
            {
                return this.LocalTime;
            }
            if ((attribute == "LOCALDATE"))
            {
                return this.LocalDate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCALTIME"))
            {
                this.LocalTime = ((string)(value));
                return;
            }
            if ((feature == "LOCALDATE"))
            {
                this.LocalDate = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LOCALTIME"))
            {
                return new LocalTimeProxy(this);
            }
            if ((attribute == "LOCALDATE"))
            {
                return new LocalDateProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TimeEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LocalTime property
        /// </summary>
        private sealed class LocalTimeProxy : ModelPropertyChange<ITimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalTimeProxy(ITimeEntries modelElement) : 
                    base(modelElement, "LocalTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalTime;
                }
                set
                {
                    this.ModelElement.LocalTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LocalDate property
        /// </summary>
        private sealed class LocalDateProxy : ModelPropertyChange<ITimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalDateProxy(ITimeEntries modelElement) : 
                    base(modelElement, "LocalDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalDate;
                }
                set
                {
                    this.ModelElement.LocalDate = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ClockObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ClockObject")]
    public partial class ClockObject : Clock, IClockObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time;
        
        private static Lazy<ITypedElement> _timeAttribute = new Lazy<ITypedElement>(RetrieveTimeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Time property
        /// </summary>
        [CategoryAttribute("ClockObject")]
        [XmlAttributeAttribute(true)]
        public string Time
        {
            get
            {
                return this._time;
            }
            set
            {
                if ((this._time != value))
                {
                    string old = this._time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeChanging(e);
                    this.OnPropertyChanging("Time", e, _timeAttribute);
                    this._time = value;
                    this.OnTimeChanged(e);
                    this.OnPropertyChanged("Time", e, _timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ClockObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeChanged;
        
        /// <summary>
        /// Gets fired before the Time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeChanging;
        
        private static ITypedElement RetrieveTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ClockObject.ClassInstance)).Resolve("Time")));
        }
        
        /// <summary>
        /// Raises the TimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIME"))
            {
                return this.Time;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIME"))
            {
                this.Time = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TIME"))
            {
                return new TimeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ClockObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time property
        /// </summary>
        private sealed class TimeProxy : ModelPropertyChange<IClockObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeProxy(IClockObject modelElement) : 
                    base(modelElement, "Time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time;
                }
                set
                {
                    this.ModelElement.Time = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the UNIXClock class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/UNIXClock")]
    public partial class UNIXClock : Data, IUNIXClock, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("UNIXClock")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/UNIXClock")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.UNIXClock.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/UNIXClock")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IUNIXClock, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IUNIXClock modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ModemConfigurationObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ModemConfigurationObject")]
    public partial class ModemConfigurationObject : Modemconfiguration, IModemConfigurationObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ModemConfigurationObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ModemConfigurationObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the AutoConnectObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AutoConnectObject")]
    public partial class AutoConnectObject : Auto_connect, IAutoConnectObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Connection property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _connection;
        
        private static Lazy<ITypedElement> _connectionAttribute = new Lazy<ITypedElement>(RetrieveConnectionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Connection property
        /// </summary>
        [CategoryAttribute("AutoConnectObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Connection
        {
            get
            {
                return this._connection;
            }
            set
            {
                if ((this._connection != value))
                {
                    Nullable<bool> old = this._connection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectionChanging(e);
                    this.OnPropertyChanging("Connection", e, _connectionAttribute);
                    this._connection = value;
                    this.OnConnectionChanged(e);
                    this.OnPropertyChanged("Connection", e, _connectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AutoConnectObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Connection property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ConnectionChanged;
        
        /// <summary>
        /// Gets fired before the Connection property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ConnectionChanging;
        
        private static ITypedElement RetrieveConnectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.AutoConnectObject.ClassInstance)).Resolve("Connection")));
        }
        
        /// <summary>
        /// Raises the ConnectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ConnectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ConnectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONNECTION"))
            {
                return this.Connection;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONNECTION"))
            {
                this.Connection = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONNECTION"))
            {
                return Observable.Box(new ConnectionProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AutoConnectObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Connection property
        /// </summary>
        private sealed class ConnectionProxy : ModelPropertyChange<IAutoConnectObject, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectionProxy(IAutoConnectObject modelElement) : 
                    base(modelElement, "Connection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Connection;
                }
                set
                {
                    this.ModelElement.Connection = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the AutoAnswerObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AutoAnswerObject")]
    public partial class AutoAnswerObject : Auto_answer, IAutoAnswerObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Answer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _answer;
        
        private static Lazy<ITypedElement> _answerAttribute = new Lazy<ITypedElement>(RetrieveAnswerAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Answer property
        /// </summary>
        [CategoryAttribute("AutoAnswerObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    Nullable<bool> old = this._answer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnswerChanging(e);
                    this.OnPropertyChanging("Answer", e, _answerAttribute);
                    this._answer = value;
                    this.OnAnswerChanged(e);
                    this.OnPropertyChanged("Answer", e, _answerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AutoAnswerObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Answer property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AnswerChanged;
        
        /// <summary>
        /// Gets fired before the Answer property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AnswerChanging;
        
        private static ITypedElement RetrieveAnswerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.AutoAnswerObject.ClassInstance)).Resolve("Answer")));
        }
        
        /// <summary>
        /// Raises the AnswerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AnswerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AnswerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ANSWER"))
            {
                return this.Answer;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ANSWER"))
            {
                this.Answer = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ANSWER"))
            {
                return Observable.Box(new AnswerProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AutoAnswerObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Answer property
        /// </summary>
        private sealed class AnswerProxy : ModelPropertyChange<IAutoAnswerObject, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnswerProxy(IAutoAnswerObject modelElement) : 
                    base(modelElement, "Answer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Answer;
                }
                set
                {
                    this.ModelElement.Answer = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ScriptTable class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ScriptTable")]
    public partial class ScriptTable : Scripttable, IScriptTable, IModelElement
    {
        
        private static Lazy<ITypedElement> _globalMeterResetReference = new Lazy<ITypedElement>(RetrieveGlobalMeterResetReference);
        
        /// <summary>
        /// The backing field for the GlobalMeterReset property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IGlobalMeterReset _globalMeterReset;
        
        private static Lazy<ITypedElement> _mDIResetReference = new Lazy<ITypedElement>(RetrieveMDIResetReference);
        
        /// <summary>
        /// The backing field for the MDIReset property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMDIReset _mDIReset;
        
        private static Lazy<ITypedElement> _tarifficationReference = new Lazy<ITypedElement>(RetrieveTarifficationReference);
        
        /// <summary>
        /// The backing field for the Tariffication property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITariffication _tariffication;
        
        private static Lazy<ITypedElement> _acitvateTestReference = new Lazy<ITypedElement>(RetrieveAcitvateTestReference);
        
        /// <summary>
        /// The backing field for the AcitvateTest property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IActivateTestMode _acitvateTest;
        
        private static Lazy<ITypedElement> _activateNormalReference = new Lazy<ITypedElement>(RetrieveActivateNormalReference);
        
        /// <summary>
        /// The backing field for the ActivateNormal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IActivateNormalMode _activateNormal;
        
        private static Lazy<ITypedElement> _setOutputReference = new Lazy<ITypedElement>(RetrieveSetOutputReference);
        
        /// <summary>
        /// The backing field for the SetOutput property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISetOutputSignal _setOutput;
        
        private static Lazy<ITypedElement> _switchOpticalReference = new Lazy<ITypedElement>(RetrieveSwitchOpticalReference);
        
        /// <summary>
        /// The backing field for the SwitchOptical property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISwitchOpticalTestOutput _switchOptical;
        
        private static Lazy<ITypedElement> _powerQualityReference = new Lazy<ITypedElement>(RetrievePowerQualityReference);
        
        /// <summary>
        /// The backing field for the PowerQuality property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPowerQualityMeasurementManagement _powerQuality;
        
        private static Lazy<ITypedElement> _disconnectReference = new Lazy<ITypedElement>(RetrieveDisconnectReference);
        
        /// <summary>
        /// The backing field for the Disconnect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IDisconnectControl _disconnect;
        
        private static Lazy<ITypedElement> _imageReference = new Lazy<ITypedElement>(RetrieveImageReference);
        
        /// <summary>
        /// The backing field for the Image property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IImageActivation _image;
        
        private static Lazy<ITypedElement> _pushReference = new Lazy<ITypedElement>(RetrievePushReference);
        
        /// <summary>
        /// The backing field for the Push property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPush _push;
        
        private static Lazy<ITypedElement> _broadcastReference = new Lazy<ITypedElement>(RetrieveBroadcastReference);
        
        /// <summary>
        /// The backing field for the Broadcast property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBroadcast _broadcast;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The globalMeterReset property
        /// </summary>
        [DisplayNameAttribute("globalMeterReset")]
        [CategoryAttribute("ScriptTable")]
        [XmlElementNameAttribute("globalMeterReset")]
        [XmlAttributeAttribute(true)]
        public IGlobalMeterReset GlobalMeterReset
        {
            get
            {
                return this._globalMeterReset;
            }
            set
            {
                if ((this._globalMeterReset != value))
                {
                    IGlobalMeterReset old = this._globalMeterReset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGlobalMeterResetChanging(e);
                    this.OnPropertyChanging("GlobalMeterReset", e, _globalMeterResetReference);
                    this._globalMeterReset = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGlobalMeterReset;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGlobalMeterReset;
                    }
                    this.OnGlobalMeterResetChanged(e);
                    this.OnPropertyChanged("GlobalMeterReset", e, _globalMeterResetReference);
                }
            }
        }
        
        /// <summary>
        /// The MDIReset property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IMDIReset MDIReset
        {
            get
            {
                return this._mDIReset;
            }
            set
            {
                if ((this._mDIReset != value))
                {
                    IMDIReset old = this._mDIReset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMDIResetChanging(e);
                    this.OnPropertyChanging("MDIReset", e, _mDIResetReference);
                    this._mDIReset = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMDIReset;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMDIReset;
                    }
                    this.OnMDIResetChanged(e);
                    this.OnPropertyChanged("MDIReset", e, _mDIResetReference);
                }
            }
        }
        
        /// <summary>
        /// The Tariffication property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public ITariffication Tariffication
        {
            get
            {
                return this._tariffication;
            }
            set
            {
                if ((this._tariffication != value))
                {
                    ITariffication old = this._tariffication;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTarifficationChanging(e);
                    this.OnPropertyChanging("Tariffication", e, _tarifficationReference);
                    this._tariffication = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTariffication;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTariffication;
                    }
                    this.OnTarifficationChanged(e);
                    this.OnPropertyChanged("Tariffication", e, _tarifficationReference);
                }
            }
        }
        
        /// <summary>
        /// The AcitvateTest property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IActivateTestMode AcitvateTest
        {
            get
            {
                return this._acitvateTest;
            }
            set
            {
                if ((this._acitvateTest != value))
                {
                    IActivateTestMode old = this._acitvateTest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAcitvateTestChanging(e);
                    this.OnPropertyChanging("AcitvateTest", e, _acitvateTestReference);
                    this._acitvateTest = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAcitvateTest;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAcitvateTest;
                    }
                    this.OnAcitvateTestChanged(e);
                    this.OnPropertyChanged("AcitvateTest", e, _acitvateTestReference);
                }
            }
        }
        
        /// <summary>
        /// The ActivateNormal property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IActivateNormalMode ActivateNormal
        {
            get
            {
                return this._activateNormal;
            }
            set
            {
                if ((this._activateNormal != value))
                {
                    IActivateNormalMode old = this._activateNormal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivateNormalChanging(e);
                    this.OnPropertyChanging("ActivateNormal", e, _activateNormalReference);
                    this._activateNormal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetActivateNormal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetActivateNormal;
                    }
                    this.OnActivateNormalChanged(e);
                    this.OnPropertyChanged("ActivateNormal", e, _activateNormalReference);
                }
            }
        }
        
        /// <summary>
        /// The SetOutput property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public ISetOutputSignal SetOutput
        {
            get
            {
                return this._setOutput;
            }
            set
            {
                if ((this._setOutput != value))
                {
                    ISetOutputSignal old = this._setOutput;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetOutputChanging(e);
                    this.OnPropertyChanging("SetOutput", e, _setOutputReference);
                    this._setOutput = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetOutput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetOutput;
                    }
                    this.OnSetOutputChanged(e);
                    this.OnPropertyChanged("SetOutput", e, _setOutputReference);
                }
            }
        }
        
        /// <summary>
        /// The SwitchOptical property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public ISwitchOpticalTestOutput SwitchOptical
        {
            get
            {
                return this._switchOptical;
            }
            set
            {
                if ((this._switchOptical != value))
                {
                    ISwitchOpticalTestOutput old = this._switchOptical;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOpticalChanging(e);
                    this.OnPropertyChanging("SwitchOptical", e, _switchOpticalReference);
                    this._switchOptical = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwitchOptical;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwitchOptical;
                    }
                    this.OnSwitchOpticalChanged(e);
                    this.OnPropertyChanged("SwitchOptical", e, _switchOpticalReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerQuality property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IPowerQualityMeasurementManagement PowerQuality
        {
            get
            {
                return this._powerQuality;
            }
            set
            {
                if ((this._powerQuality != value))
                {
                    IPowerQualityMeasurementManagement old = this._powerQuality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerQualityChanging(e);
                    this.OnPropertyChanging("PowerQuality", e, _powerQualityReference);
                    this._powerQuality = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPowerQuality;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPowerQuality;
                    }
                    this.OnPowerQualityChanged(e);
                    this.OnPropertyChanged("PowerQuality", e, _powerQualityReference);
                }
            }
        }
        
        /// <summary>
        /// The Disconnect property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IDisconnectControl Disconnect
        {
            get
            {
                return this._disconnect;
            }
            set
            {
                if ((this._disconnect != value))
                {
                    IDisconnectControl old = this._disconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectChanging(e);
                    this.OnPropertyChanging("Disconnect", e, _disconnectReference);
                    this._disconnect = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDisconnect;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDisconnect;
                    }
                    this.OnDisconnectChanged(e);
                    this.OnPropertyChanged("Disconnect", e, _disconnectReference);
                }
            }
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IImageActivation Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    IImageActivation old = this._image;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImageChanging(e);
                    this.OnPropertyChanging("Image", e, _imageReference);
                    this._image = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImage;
                    }
                    this.OnImageChanged(e);
                    this.OnPropertyChanged("Image", e, _imageReference);
                }
            }
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IPush Push
        {
            get
            {
                return this._push;
            }
            set
            {
                if ((this._push != value))
                {
                    IPush old = this._push;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPushChanging(e);
                    this.OnPropertyChanging("Push", e, _pushReference);
                    this._push = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPush;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPush;
                    }
                    this.OnPushChanged(e);
                    this.OnPropertyChanged("Push", e, _pushReference);
                }
            }
        }
        
        /// <summary>
        /// The Broadcast property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        public IBroadcast Broadcast
        {
            get
            {
                return this._broadcast;
            }
            set
            {
                if ((this._broadcast != value))
                {
                    IBroadcast old = this._broadcast;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBroadcastChanging(e);
                    this.OnPropertyChanging("Broadcast", e, _broadcastReference);
                    this._broadcast = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBroadcast;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBroadcast;
                    }
                    this.OnBroadcastChanged(e);
                    this.OnPropertyChanged("Broadcast", e, _broadcastReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ScriptTableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ScriptTable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GlobalMeterReset property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GlobalMeterResetChanging;
        
        /// <summary>
        /// Gets fired when the GlobalMeterReset property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GlobalMeterResetChanged;
        
        /// <summary>
        /// Gets fired before the MDIReset property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MDIResetChanging;
        
        /// <summary>
        /// Gets fired when the MDIReset property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MDIResetChanged;
        
        /// <summary>
        /// Gets fired before the Tariffication property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TarifficationChanging;
        
        /// <summary>
        /// Gets fired when the Tariffication property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TarifficationChanged;
        
        /// <summary>
        /// Gets fired before the AcitvateTest property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AcitvateTestChanging;
        
        /// <summary>
        /// Gets fired when the AcitvateTest property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AcitvateTestChanged;
        
        /// <summary>
        /// Gets fired before the ActivateNormal property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivateNormalChanging;
        
        /// <summary>
        /// Gets fired when the ActivateNormal property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivateNormalChanged;
        
        /// <summary>
        /// Gets fired before the SetOutput property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SetOutputChanging;
        
        /// <summary>
        /// Gets fired when the SetOutput property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SetOutputChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOptical property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SwitchOpticalChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOptical property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SwitchOpticalChanged;
        
        /// <summary>
        /// Gets fired before the PowerQuality property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerQualityChanging;
        
        /// <summary>
        /// Gets fired when the PowerQuality property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerQualityChanged;
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PushChanged;
        
        /// <summary>
        /// Gets fired before the Broadcast property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BroadcastChanging;
        
        /// <summary>
        /// Gets fired when the Broadcast property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BroadcastChanged;
        
        private static ITypedElement RetrieveGlobalMeterResetReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("globalMeterReset")));
        }
        
        /// <summary>
        /// Raises the GlobalMeterResetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlobalMeterResetChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GlobalMeterResetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GlobalMeterResetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlobalMeterResetChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GlobalMeterResetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GlobalMeterReset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGlobalMeterReset(object sender, EventArgs eventArgs)
        {
            if ((sender == this.GlobalMeterReset))
            {
                this.GlobalMeterReset = null;
            }
        }
        
        private static ITypedElement RetrieveMDIResetReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("MDIReset")));
        }
        
        /// <summary>
        /// Raises the MDIResetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMDIResetChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MDIResetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MDIResetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMDIResetChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MDIResetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MDIReset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMDIReset(object sender, EventArgs eventArgs)
        {
            if ((sender == this.MDIReset))
            {
                this.MDIReset = null;
            }
        }
        
        private static ITypedElement RetrieveTarifficationReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("Tariffication")));
        }
        
        /// <summary>
        /// Raises the TarifficationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTarifficationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TarifficationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TarifficationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTarifficationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TarifficationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tariffication property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTariffication(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Tariffication))
            {
                this.Tariffication = null;
            }
        }
        
        private static ITypedElement RetrieveAcitvateTestReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("AcitvateTest")));
        }
        
        /// <summary>
        /// Raises the AcitvateTestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcitvateTestChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AcitvateTestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AcitvateTestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcitvateTestChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AcitvateTestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AcitvateTest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAcitvateTest(object sender, EventArgs eventArgs)
        {
            if ((sender == this.AcitvateTest))
            {
                this.AcitvateTest = null;
            }
        }
        
        private static ITypedElement RetrieveActivateNormalReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("ActivateNormal")));
        }
        
        /// <summary>
        /// Raises the ActivateNormalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivateNormalChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivateNormalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivateNormalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivateNormalChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivateNormalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ActivateNormal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActivateNormal(object sender, EventArgs eventArgs)
        {
            if ((sender == this.ActivateNormal))
            {
                this.ActivateNormal = null;
            }
        }
        
        private static ITypedElement RetrieveSetOutputReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("SetOutput")));
        }
        
        /// <summary>
        /// Raises the SetOutputChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetOutputChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SetOutputChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetOutputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetOutputChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SetOutputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetOutput property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetOutput(object sender, EventArgs eventArgs)
        {
            if ((sender == this.SetOutput))
            {
                this.SetOutput = null;
            }
        }
        
        private static ITypedElement RetrieveSwitchOpticalReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("SwitchOptical")));
        }
        
        /// <summary>
        /// Raises the SwitchOpticalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOpticalChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SwitchOpticalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOpticalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOpticalChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SwitchOpticalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwitchOptical property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwitchOptical(object sender, EventArgs eventArgs)
        {
            if ((sender == this.SwitchOptical))
            {
                this.SwitchOptical = null;
            }
        }
        
        private static ITypedElement RetrievePowerQualityReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("PowerQuality")));
        }
        
        /// <summary>
        /// Raises the PowerQualityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerQualityChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerQualityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerQualityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerQualityChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerQualityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerQuality property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerQuality(object sender, EventArgs eventArgs)
        {
            if ((sender == this.PowerQuality))
            {
                this.PowerQuality = null;
            }
        }
        
        private static ITypedElement RetrieveDisconnectReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("Disconnect")));
        }
        
        /// <summary>
        /// Raises the DisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Disconnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDisconnect(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Disconnect))
            {
                this.Disconnect = null;
            }
        }
        
        private static ITypedElement RetrieveImageReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("Image")));
        }
        
        /// <summary>
        /// Raises the ImageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ImageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ImageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Image property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImage(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Image))
            {
                this.Image = null;
            }
        }
        
        private static ITypedElement RetrievePushReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("Push")));
        }
        
        /// <summary>
        /// Raises the PushChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PushChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PushChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PushChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Push property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPush(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Push))
            {
                this.Push = null;
            }
        }
        
        private static ITypedElement RetrieveBroadcastReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ScriptTable.ClassInstance)).Resolve("Broadcast")));
        }
        
        /// <summary>
        /// Raises the BroadcastChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBroadcastChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BroadcastChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BroadcastChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBroadcastChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BroadcastChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Broadcast property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBroadcast(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Broadcast))
            {
                this.Broadcast = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "GLOBALMETERRESET"))
            {
                return this.GlobalMeterReset;
            }
            if ((reference == "MDIRESET"))
            {
                return this.MDIReset;
            }
            if ((reference == "TARIFFICATION"))
            {
                return this.Tariffication;
            }
            if ((reference == "ACITVATETEST"))
            {
                return this.AcitvateTest;
            }
            if ((reference == "ACTIVATENORMAL"))
            {
                return this.ActivateNormal;
            }
            if ((reference == "SETOUTPUT"))
            {
                return this.SetOutput;
            }
            if ((reference == "SWITCHOPTICAL"))
            {
                return this.SwitchOptical;
            }
            if ((reference == "POWERQUALITY"))
            {
                return this.PowerQuality;
            }
            if ((reference == "DISCONNECT"))
            {
                return this.Disconnect;
            }
            if ((reference == "IMAGE"))
            {
                return this.Image;
            }
            if ((reference == "PUSH"))
            {
                return this.Push;
            }
            if ((reference == "BROADCAST"))
            {
                return this.Broadcast;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GLOBALMETERRESET"))
            {
                this.GlobalMeterReset = ((IGlobalMeterReset)(value));
                return;
            }
            if ((feature == "MDIRESET"))
            {
                this.MDIReset = ((IMDIReset)(value));
                return;
            }
            if ((feature == "TARIFFICATION"))
            {
                this.Tariffication = ((ITariffication)(value));
                return;
            }
            if ((feature == "ACITVATETEST"))
            {
                this.AcitvateTest = ((IActivateTestMode)(value));
                return;
            }
            if ((feature == "ACTIVATENORMAL"))
            {
                this.ActivateNormal = ((IActivateNormalMode)(value));
                return;
            }
            if ((feature == "SETOUTPUT"))
            {
                this.SetOutput = ((ISetOutputSignal)(value));
                return;
            }
            if ((feature == "SWITCHOPTICAL"))
            {
                this.SwitchOptical = ((ISwitchOpticalTestOutput)(value));
                return;
            }
            if ((feature == "POWERQUALITY"))
            {
                this.PowerQuality = ((IPowerQualityMeasurementManagement)(value));
                return;
            }
            if ((feature == "DISCONNECT"))
            {
                this.Disconnect = ((IDisconnectControl)(value));
                return;
            }
            if ((feature == "IMAGE"))
            {
                this.Image = ((IImageActivation)(value));
                return;
            }
            if ((feature == "PUSH"))
            {
                this.Push = ((IPush)(value));
                return;
            }
            if ((feature == "BROADCAST"))
            {
                this.Broadcast = ((IBroadcast)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GLOBALMETERRESET"))
            {
                return new GlobalMeterResetProxy(this);
            }
            if ((reference == "MDIRESET"))
            {
                return new MDIResetProxy(this);
            }
            if ((reference == "TARIFFICATION"))
            {
                return new TarifficationProxy(this);
            }
            if ((reference == "ACITVATETEST"))
            {
                return new AcitvateTestProxy(this);
            }
            if ((reference == "ACTIVATENORMAL"))
            {
                return new ActivateNormalProxy(this);
            }
            if ((reference == "SETOUTPUT"))
            {
                return new SetOutputProxy(this);
            }
            if ((reference == "SWITCHOPTICAL"))
            {
                return new SwitchOpticalProxy(this);
            }
            if ((reference == "POWERQUALITY"))
            {
                return new PowerQualityProxy(this);
            }
            if ((reference == "DISCONNECT"))
            {
                return new DisconnectProxy(this);
            }
            if ((reference == "IMAGE"))
            {
                return new ImageProxy(this);
            }
            if ((reference == "PUSH"))
            {
                return new PushProxy(this);
            }
            if ((reference == "BROADCAST"))
            {
                return new BroadcastProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ScriptTable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ScriptTable class
        /// </summary>
        public class ScriptTableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ScriptTable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ScriptTableReferencedElementsCollection(ScriptTable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GlobalMeterReset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MDIReset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffication != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AcitvateTest != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ActivateNormal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetOutput != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwitchOptical != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerQuality != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Disconnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Image != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Push != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Broadcast != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.GlobalMeterResetChanged += this.PropagateValueChanges;
                this._parent.MDIResetChanged += this.PropagateValueChanges;
                this._parent.TarifficationChanged += this.PropagateValueChanges;
                this._parent.AcitvateTestChanged += this.PropagateValueChanges;
                this._parent.ActivateNormalChanged += this.PropagateValueChanges;
                this._parent.SetOutputChanged += this.PropagateValueChanges;
                this._parent.SwitchOpticalChanged += this.PropagateValueChanges;
                this._parent.PowerQualityChanged += this.PropagateValueChanges;
                this._parent.DisconnectChanged += this.PropagateValueChanges;
                this._parent.ImageChanged += this.PropagateValueChanges;
                this._parent.PushChanged += this.PropagateValueChanges;
                this._parent.BroadcastChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.GlobalMeterResetChanged -= this.PropagateValueChanges;
                this._parent.MDIResetChanged -= this.PropagateValueChanges;
                this._parent.TarifficationChanged -= this.PropagateValueChanges;
                this._parent.AcitvateTestChanged -= this.PropagateValueChanges;
                this._parent.ActivateNormalChanged -= this.PropagateValueChanges;
                this._parent.SetOutputChanged -= this.PropagateValueChanges;
                this._parent.SwitchOpticalChanged -= this.PropagateValueChanges;
                this._parent.PowerQualityChanged -= this.PropagateValueChanges;
                this._parent.DisconnectChanged -= this.PropagateValueChanges;
                this._parent.ImageChanged -= this.PropagateValueChanges;
                this._parent.PushChanged -= this.PropagateValueChanges;
                this._parent.BroadcastChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GlobalMeterReset == null))
                {
                    IGlobalMeterReset globalMeterResetCasted = item.As<IGlobalMeterReset>();
                    if ((globalMeterResetCasted != null))
                    {
                        this._parent.GlobalMeterReset = globalMeterResetCasted;
                        return;
                    }
                }
                if ((this._parent.MDIReset == null))
                {
                    IMDIReset mDIResetCasted = item.As<IMDIReset>();
                    if ((mDIResetCasted != null))
                    {
                        this._parent.MDIReset = mDIResetCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffication == null))
                {
                    ITariffication tarifficationCasted = item.As<ITariffication>();
                    if ((tarifficationCasted != null))
                    {
                        this._parent.Tariffication = tarifficationCasted;
                        return;
                    }
                }
                if ((this._parent.AcitvateTest == null))
                {
                    IActivateTestMode acitvateTestCasted = item.As<IActivateTestMode>();
                    if ((acitvateTestCasted != null))
                    {
                        this._parent.AcitvateTest = acitvateTestCasted;
                        return;
                    }
                }
                if ((this._parent.ActivateNormal == null))
                {
                    IActivateNormalMode activateNormalCasted = item.As<IActivateNormalMode>();
                    if ((activateNormalCasted != null))
                    {
                        this._parent.ActivateNormal = activateNormalCasted;
                        return;
                    }
                }
                if ((this._parent.SetOutput == null))
                {
                    ISetOutputSignal setOutputCasted = item.As<ISetOutputSignal>();
                    if ((setOutputCasted != null))
                    {
                        this._parent.SetOutput = setOutputCasted;
                        return;
                    }
                }
                if ((this._parent.SwitchOptical == null))
                {
                    ISwitchOpticalTestOutput switchOpticalCasted = item.As<ISwitchOpticalTestOutput>();
                    if ((switchOpticalCasted != null))
                    {
                        this._parent.SwitchOptical = switchOpticalCasted;
                        return;
                    }
                }
                if ((this._parent.PowerQuality == null))
                {
                    IPowerQualityMeasurementManagement powerQualityCasted = item.As<IPowerQualityMeasurementManagement>();
                    if ((powerQualityCasted != null))
                    {
                        this._parent.PowerQuality = powerQualityCasted;
                        return;
                    }
                }
                if ((this._parent.Disconnect == null))
                {
                    IDisconnectControl disconnectCasted = item.As<IDisconnectControl>();
                    if ((disconnectCasted != null))
                    {
                        this._parent.Disconnect = disconnectCasted;
                        return;
                    }
                }
                if ((this._parent.Image == null))
                {
                    IImageActivation imageCasted = item.As<IImageActivation>();
                    if ((imageCasted != null))
                    {
                        this._parent.Image = imageCasted;
                        return;
                    }
                }
                if ((this._parent.Push == null))
                {
                    IPush pushCasted = item.As<IPush>();
                    if ((pushCasted != null))
                    {
                        this._parent.Push = pushCasted;
                        return;
                    }
                }
                if ((this._parent.Broadcast == null))
                {
                    IBroadcast broadcastCasted = item.As<IBroadcast>();
                    if ((broadcastCasted != null))
                    {
                        this._parent.Broadcast = broadcastCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GlobalMeterReset = null;
                this._parent.MDIReset = null;
                this._parent.Tariffication = null;
                this._parent.AcitvateTest = null;
                this._parent.ActivateNormal = null;
                this._parent.SetOutput = null;
                this._parent.SwitchOptical = null;
                this._parent.PowerQuality = null;
                this._parent.Disconnect = null;
                this._parent.Image = null;
                this._parent.Push = null;
                this._parent.Broadcast = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GlobalMeterReset))
                {
                    return true;
                }
                if ((item == this._parent.MDIReset))
                {
                    return true;
                }
                if ((item == this._parent.Tariffication))
                {
                    return true;
                }
                if ((item == this._parent.AcitvateTest))
                {
                    return true;
                }
                if ((item == this._parent.ActivateNormal))
                {
                    return true;
                }
                if ((item == this._parent.SetOutput))
                {
                    return true;
                }
                if ((item == this._parent.SwitchOptical))
                {
                    return true;
                }
                if ((item == this._parent.PowerQuality))
                {
                    return true;
                }
                if ((item == this._parent.Disconnect))
                {
                    return true;
                }
                if ((item == this._parent.Image))
                {
                    return true;
                }
                if ((item == this._parent.Push))
                {
                    return true;
                }
                if ((item == this._parent.Broadcast))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GlobalMeterReset != null))
                {
                    array[arrayIndex] = this._parent.GlobalMeterReset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MDIReset != null))
                {
                    array[arrayIndex] = this._parent.MDIReset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffication != null))
                {
                    array[arrayIndex] = this._parent.Tariffication;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AcitvateTest != null))
                {
                    array[arrayIndex] = this._parent.AcitvateTest;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ActivateNormal != null))
                {
                    array[arrayIndex] = this._parent.ActivateNormal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetOutput != null))
                {
                    array[arrayIndex] = this._parent.SetOutput;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwitchOptical != null))
                {
                    array[arrayIndex] = this._parent.SwitchOptical;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerQuality != null))
                {
                    array[arrayIndex] = this._parent.PowerQuality;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Disconnect != null))
                {
                    array[arrayIndex] = this._parent.Disconnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Image != null))
                {
                    array[arrayIndex] = this._parent.Image;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Push != null))
                {
                    array[arrayIndex] = this._parent.Push;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Broadcast != null))
                {
                    array[arrayIndex] = this._parent.Broadcast;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GlobalMeterReset == item))
                {
                    this._parent.GlobalMeterReset = null;
                    return true;
                }
                if ((this._parent.MDIReset == item))
                {
                    this._parent.MDIReset = null;
                    return true;
                }
                if ((this._parent.Tariffication == item))
                {
                    this._parent.Tariffication = null;
                    return true;
                }
                if ((this._parent.AcitvateTest == item))
                {
                    this._parent.AcitvateTest = null;
                    return true;
                }
                if ((this._parent.ActivateNormal == item))
                {
                    this._parent.ActivateNormal = null;
                    return true;
                }
                if ((this._parent.SetOutput == item))
                {
                    this._parent.SetOutput = null;
                    return true;
                }
                if ((this._parent.SwitchOptical == item))
                {
                    this._parent.SwitchOptical = null;
                    return true;
                }
                if ((this._parent.PowerQuality == item))
                {
                    this._parent.PowerQuality = null;
                    return true;
                }
                if ((this._parent.Disconnect == item))
                {
                    this._parent.Disconnect = null;
                    return true;
                }
                if ((this._parent.Image == item))
                {
                    this._parent.Image = null;
                    return true;
                }
                if ((this._parent.Push == item))
                {
                    this._parent.Push = null;
                    return true;
                }
                if ((this._parent.Broadcast == item))
                {
                    this._parent.Broadcast = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GlobalMeterReset).Concat(this._parent.MDIReset).Concat(this._parent.Tariffication).Concat(this._parent.AcitvateTest).Concat(this._parent.ActivateNormal).Concat(this._parent.SetOutput).Concat(this._parent.SwitchOptical).Concat(this._parent.PowerQuality).Concat(this._parent.Disconnect).Concat(this._parent.Image).Concat(this._parent.Push).Concat(this._parent.Broadcast).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the globalMeterReset property
        /// </summary>
        private sealed class GlobalMeterResetProxy : ModelPropertyChange<IScriptTable, IGlobalMeterReset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GlobalMeterResetProxy(IScriptTable modelElement) : 
                    base(modelElement, "globalMeterReset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGlobalMeterReset Value
            {
                get
                {
                    return this.ModelElement.GlobalMeterReset;
                }
                set
                {
                    this.ModelElement.GlobalMeterReset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MDIReset property
        /// </summary>
        private sealed class MDIResetProxy : ModelPropertyChange<IScriptTable, IMDIReset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MDIResetProxy(IScriptTable modelElement) : 
                    base(modelElement, "MDIReset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMDIReset Value
            {
                get
                {
                    return this.ModelElement.MDIReset;
                }
                set
                {
                    this.ModelElement.MDIReset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tariffication property
        /// </summary>
        private sealed class TarifficationProxy : ModelPropertyChange<IScriptTable, ITariffication>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TarifficationProxy(IScriptTable modelElement) : 
                    base(modelElement, "Tariffication")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITariffication Value
            {
                get
                {
                    return this.ModelElement.Tariffication;
                }
                set
                {
                    this.ModelElement.Tariffication = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AcitvateTest property
        /// </summary>
        private sealed class AcitvateTestProxy : ModelPropertyChange<IScriptTable, IActivateTestMode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AcitvateTestProxy(IScriptTable modelElement) : 
                    base(modelElement, "AcitvateTest")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivateTestMode Value
            {
                get
                {
                    return this.ModelElement.AcitvateTest;
                }
                set
                {
                    this.ModelElement.AcitvateTest = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivateNormal property
        /// </summary>
        private sealed class ActivateNormalProxy : ModelPropertyChange<IScriptTable, IActivateNormalMode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivateNormalProxy(IScriptTable modelElement) : 
                    base(modelElement, "ActivateNormal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivateNormalMode Value
            {
                get
                {
                    return this.ModelElement.ActivateNormal;
                }
                set
                {
                    this.ModelElement.ActivateNormal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetOutput property
        /// </summary>
        private sealed class SetOutputProxy : ModelPropertyChange<IScriptTable, ISetOutputSignal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetOutputProxy(IScriptTable modelElement) : 
                    base(modelElement, "SetOutput")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISetOutputSignal Value
            {
                get
                {
                    return this.ModelElement.SetOutput;
                }
                set
                {
                    this.ModelElement.SetOutput = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwitchOptical property
        /// </summary>
        private sealed class SwitchOpticalProxy : ModelPropertyChange<IScriptTable, ISwitchOpticalTestOutput>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOpticalProxy(IScriptTable modelElement) : 
                    base(modelElement, "SwitchOptical")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISwitchOpticalTestOutput Value
            {
                get
                {
                    return this.ModelElement.SwitchOptical;
                }
                set
                {
                    this.ModelElement.SwitchOptical = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerQuality property
        /// </summary>
        private sealed class PowerQualityProxy : ModelPropertyChange<IScriptTable, IPowerQualityMeasurementManagement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerQualityProxy(IScriptTable modelElement) : 
                    base(modelElement, "PowerQuality")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerQualityMeasurementManagement Value
            {
                get
                {
                    return this.ModelElement.PowerQuality;
                }
                set
                {
                    this.ModelElement.PowerQuality = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Disconnect property
        /// </summary>
        private sealed class DisconnectProxy : ModelPropertyChange<IScriptTable, IDisconnectControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectProxy(IScriptTable modelElement) : 
                    base(modelElement, "Disconnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDisconnectControl Value
            {
                get
                {
                    return this.ModelElement.Disconnect;
                }
                set
                {
                    this.ModelElement.Disconnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Image property
        /// </summary>
        private sealed class ImageProxy : ModelPropertyChange<IScriptTable, IImageActivation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImageProxy(IScriptTable modelElement) : 
                    base(modelElement, "Image")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImageActivation Value
            {
                get
                {
                    return this.ModelElement.Image;
                }
                set
                {
                    this.ModelElement.Image = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Push property
        /// </summary>
        private sealed class PushProxy : ModelPropertyChange<IScriptTable, IPush>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PushProxy(IScriptTable modelElement) : 
                    base(modelElement, "Push")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPush Value
            {
                get
                {
                    return this.ModelElement.Push;
                }
                set
                {
                    this.ModelElement.Push = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Broadcast property
        /// </summary>
        private sealed class BroadcastProxy : ModelPropertyChange<IScriptTable, IBroadcast>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BroadcastProxy(IScriptTable modelElement) : 
                    base(modelElement, "Broadcast")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBroadcast Value
            {
                get
                {
                    return this.ModelElement.Broadcast;
                }
                set
                {
                    this.ModelElement.Broadcast = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the GlobalMeterReset class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GlobalMeterReset")]
    public partial class GlobalMeterReset : Scripttable, IGlobalMeterReset, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GlobalMeterReset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GlobalMeterReset")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the MDIReset class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MDIReset")]
    public partial class MDIReset : Scripttable, IMDIReset, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MDIReset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MDIReset")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Tariffication class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Tariffication")]
    public partial class Tariffication : Scripttable, ITariffication, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Tariffication")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Tariffication")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ActivateTestMode class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivateTestMode")]
    public partial class ActivateTestMode : Scripttable, IActivateTestMode, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivateTestMode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivateTestMode")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ActivateNormalMode class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivateNormalMode")]
    public partial class ActivateNormalMode : Scripttable, IActivateNormalMode, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivateNormalMode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivateNormalMode")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SetOutputSignal class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SetOutputSignal")]
    public partial class SetOutputSignal : Scripttable, ISetOutputSignal, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SetOutputSignal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SetOutputSignal")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SwitchOpticalTestOutput class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SwitchOpticalTestOutput")]
    public partial class SwitchOpticalTestOutput : Scripttable, ISwitchOpticalTestOutput, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SwitchOpticalTestOutput")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SwitchOpticalTestOutput")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PowerQualityMeasurementManagement class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PowerQualityMeasurementManagement")]
    public partial class PowerQualityMeasurementManagement : Scripttable, IPowerQualityMeasurementManagement, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PowerQualityMeasurementManagement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PowerQualityMeasurementManagement")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DisconnectControl class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControl")]
    public partial class DisconnectControl : Scripttable, IDisconnectControl, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControl")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ImageActivation class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageActivation")]
    public partial class ImageActivation : Scripttable, IImageActivation, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageActivation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageActivation")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Push class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Push")]
    public partial class Push : Scripttable, IPush, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Push")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Push")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Broadcast class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Broadcast")]
    public partial class Broadcast : Scripttable, IBroadcast, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Broadcast")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Broadcast")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SpecialDays class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SpecialDays")]
    public partial class SpecialDays : Specialdaystable, ISpecialDays, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SpecialDays")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SpecialDays")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ScheduleObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ScheduleObject")]
    public partial class ScheduleObject : Schedule, IScheduleObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ScheduleObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ScheduleObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ActivityCalendarObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivityCalendarObject")]
    public partial class ActivityCalendarObject : Activitycalendar, IActivityCalendarObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivityCalendarObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ActivityCalendarObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the RegisterActivationObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/RegisterActivationObject")]
    public partial class RegisterActivationObject : RegisterActivation, IRegisterActivationObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/RegisterActivationObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/RegisterActivationObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SingleActionScheduleObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SingleActionScheduleObject")]
    public partial class SingleActionScheduleObject : Singleactionschedule, ISingleActionScheduleObject, IModelElement
    {
        
        private static Lazy<ITypedElement> _disconnectReference = new Lazy<ITypedElement>(RetrieveDisconnectReference);
        
        /// <summary>
        /// The backing field for the Disconnect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IDisconnectControlSchedule _disconnect;
        
        private static Lazy<ITypedElement> _billingPeriodEndReference = new Lazy<ITypedElement>(RetrieveBillingPeriodEndReference);
        
        /// <summary>
        /// The backing field for the BillingPeriodEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IEndOfBillingPeriodSchedule _billingPeriodEnd;
        
        private static Lazy<ITypedElement> _imageReference = new Lazy<ITypedElement>(RetrieveImageReference);
        
        /// <summary>
        /// The backing field for the Image property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IImageActivationSchedule _image;
        
        private static Lazy<ITypedElement> _outputReference = new Lazy<ITypedElement>(RetrieveOutputReference);
        
        /// <summary>
        /// The backing field for the Output property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOutputControlSchedule _output;
        
        private static Lazy<ITypedElement> _pushReference = new Lazy<ITypedElement>(RetrievePushReference);
        
        /// <summary>
        /// The backing field for the Push property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPushSchedule _push;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The disconnect property
        /// </summary>
        [DisplayNameAttribute("disconnect")]
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlElementNameAttribute("disconnect")]
        [XmlAttributeAttribute(true)]
        public IDisconnectControlSchedule Disconnect
        {
            get
            {
                return this._disconnect;
            }
            set
            {
                if ((this._disconnect != value))
                {
                    IDisconnectControlSchedule old = this._disconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectChanging(e);
                    this.OnPropertyChanging("Disconnect", e, _disconnectReference);
                    this._disconnect = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDisconnect;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDisconnect;
                    }
                    this.OnDisconnectChanged(e);
                    this.OnPropertyChanged("Disconnect", e, _disconnectReference);
                }
            }
        }
        
        /// <summary>
        /// The BillingPeriodEnd property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        public IEndOfBillingPeriodSchedule BillingPeriodEnd
        {
            get
            {
                return this._billingPeriodEnd;
            }
            set
            {
                if ((this._billingPeriodEnd != value))
                {
                    IEndOfBillingPeriodSchedule old = this._billingPeriodEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodEndChanging(e);
                    this.OnPropertyChanging("BillingPeriodEnd", e, _billingPeriodEndReference);
                    this._billingPeriodEnd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBillingPeriodEnd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBillingPeriodEnd;
                    }
                    this.OnBillingPeriodEndChanged(e);
                    this.OnPropertyChanged("BillingPeriodEnd", e, _billingPeriodEndReference);
                }
            }
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        public IImageActivationSchedule Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    IImageActivationSchedule old = this._image;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImageChanging(e);
                    this.OnPropertyChanging("Image", e, _imageReference);
                    this._image = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImage;
                    }
                    this.OnImageChanged(e);
                    this.OnPropertyChanged("Image", e, _imageReference);
                }
            }
        }
        
        /// <summary>
        /// The Output property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        public IOutputControlSchedule Output
        {
            get
            {
                return this._output;
            }
            set
            {
                if ((this._output != value))
                {
                    IOutputControlSchedule old = this._output;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputChanging(e);
                    this.OnPropertyChanging("Output", e, _outputReference);
                    this._output = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOutput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOutput;
                    }
                    this.OnOutputChanged(e);
                    this.OnPropertyChanged("Output", e, _outputReference);
                }
            }
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        public IPushSchedule Push
        {
            get
            {
                return this._push;
            }
            set
            {
                if ((this._push != value))
                {
                    IPushSchedule old = this._push;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPushChanging(e);
                    this.OnPropertyChanging("Push", e, _pushReference);
                    this._push = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPush;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPush;
                    }
                    this.OnPushChanged(e);
                    this.OnPropertyChanged("Push", e, _pushReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SingleActionScheduleObjectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SingleActionScheduleObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodEnd property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodEndChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodEnd property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingPeriodEndChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Output property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputChanging;
        
        /// <summary>
        /// Gets fired when the Output property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PushChanged;
        
        private static ITypedElement RetrieveDisconnectReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.SingleActionScheduleObject.ClassInstance)).Resolve("disconnect")));
        }
        
        /// <summary>
        /// Raises the DisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Disconnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDisconnect(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Disconnect))
            {
                this.Disconnect = null;
            }
        }
        
        private static ITypedElement RetrieveBillingPeriodEndReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.SingleActionScheduleObject.ClassInstance)).Resolve("BillingPeriodEnd")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodEndChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodEndChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillingPeriodEnd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillingPeriodEnd(object sender, EventArgs eventArgs)
        {
            if ((sender == this.BillingPeriodEnd))
            {
                this.BillingPeriodEnd = null;
            }
        }
        
        private static ITypedElement RetrieveImageReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.SingleActionScheduleObject.ClassInstance)).Resolve("Image")));
        }
        
        /// <summary>
        /// Raises the ImageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ImageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ImageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Image property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImage(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Image))
            {
                this.Image = null;
            }
        }
        
        private static ITypedElement RetrieveOutputReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.SingleActionScheduleObject.ClassInstance)).Resolve("Output")));
        }
        
        /// <summary>
        /// Raises the OutputChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Output property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutput(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Output))
            {
                this.Output = null;
            }
        }
        
        private static ITypedElement RetrievePushReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.SingleActionScheduleObject.ClassInstance)).Resolve("Push")));
        }
        
        /// <summary>
        /// Raises the PushChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PushChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PushChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PushChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Push property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPush(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Push))
            {
                this.Push = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DISCONNECT"))
            {
                return this.Disconnect;
            }
            if ((reference == "BILLINGPERIODEND"))
            {
                return this.BillingPeriodEnd;
            }
            if ((reference == "IMAGE"))
            {
                return this.Image;
            }
            if ((reference == "OUTPUT"))
            {
                return this.Output;
            }
            if ((reference == "PUSH"))
            {
                return this.Push;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DISCONNECT"))
            {
                this.Disconnect = ((IDisconnectControlSchedule)(value));
                return;
            }
            if ((feature == "BILLINGPERIODEND"))
            {
                this.BillingPeriodEnd = ((IEndOfBillingPeriodSchedule)(value));
                return;
            }
            if ((feature == "IMAGE"))
            {
                this.Image = ((IImageActivationSchedule)(value));
                return;
            }
            if ((feature == "OUTPUT"))
            {
                this.Output = ((IOutputControlSchedule)(value));
                return;
            }
            if ((feature == "PUSH"))
            {
                this.Push = ((IPushSchedule)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DISCONNECT"))
            {
                return new DisconnectProxy(this);
            }
            if ((reference == "BILLINGPERIODEND"))
            {
                return new BillingPeriodEndProxy(this);
            }
            if ((reference == "IMAGE"))
            {
                return new ImageProxy(this);
            }
            if ((reference == "OUTPUT"))
            {
                return new OutputProxy(this);
            }
            if ((reference == "PUSH"))
            {
                return new PushProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SingleActionScheduleObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SingleActionScheduleObject class
        /// </summary>
        public class SingleActionScheduleObjectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SingleActionScheduleObject _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SingleActionScheduleObjectReferencedElementsCollection(SingleActionScheduleObject parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Disconnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodEnd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Image != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Output != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Push != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.DisconnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodEndChanged += this.PropagateValueChanges;
                this._parent.ImageChanged += this.PropagateValueChanges;
                this._parent.OutputChanged += this.PropagateValueChanges;
                this._parent.PushChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.DisconnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodEndChanged -= this.PropagateValueChanges;
                this._parent.ImageChanged -= this.PropagateValueChanges;
                this._parent.OutputChanged -= this.PropagateValueChanges;
                this._parent.PushChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Disconnect == null))
                {
                    IDisconnectControlSchedule disconnectCasted = item.As<IDisconnectControlSchedule>();
                    if ((disconnectCasted != null))
                    {
                        this._parent.Disconnect = disconnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodEnd == null))
                {
                    IEndOfBillingPeriodSchedule billingPeriodEndCasted = item.As<IEndOfBillingPeriodSchedule>();
                    if ((billingPeriodEndCasted != null))
                    {
                        this._parent.BillingPeriodEnd = billingPeriodEndCasted;
                        return;
                    }
                }
                if ((this._parent.Image == null))
                {
                    IImageActivationSchedule imageCasted = item.As<IImageActivationSchedule>();
                    if ((imageCasted != null))
                    {
                        this._parent.Image = imageCasted;
                        return;
                    }
                }
                if ((this._parent.Output == null))
                {
                    IOutputControlSchedule outputCasted = item.As<IOutputControlSchedule>();
                    if ((outputCasted != null))
                    {
                        this._parent.Output = outputCasted;
                        return;
                    }
                }
                if ((this._parent.Push == null))
                {
                    IPushSchedule pushCasted = item.As<IPushSchedule>();
                    if ((pushCasted != null))
                    {
                        this._parent.Push = pushCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Disconnect = null;
                this._parent.BillingPeriodEnd = null;
                this._parent.Image = null;
                this._parent.Output = null;
                this._parent.Push = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Disconnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodEnd))
                {
                    return true;
                }
                if ((item == this._parent.Image))
                {
                    return true;
                }
                if ((item == this._parent.Output))
                {
                    return true;
                }
                if ((item == this._parent.Push))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Disconnect != null))
                {
                    array[arrayIndex] = this._parent.Disconnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodEnd != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodEnd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Image != null))
                {
                    array[arrayIndex] = this._parent.Image;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Output != null))
                {
                    array[arrayIndex] = this._parent.Output;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Push != null))
                {
                    array[arrayIndex] = this._parent.Push;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Disconnect == item))
                {
                    this._parent.Disconnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodEnd == item))
                {
                    this._parent.BillingPeriodEnd = null;
                    return true;
                }
                if ((this._parent.Image == item))
                {
                    this._parent.Image = null;
                    return true;
                }
                if ((this._parent.Output == item))
                {
                    this._parent.Output = null;
                    return true;
                }
                if ((this._parent.Push == item))
                {
                    this._parent.Push = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Disconnect).Concat(this._parent.BillingPeriodEnd).Concat(this._parent.Image).Concat(this._parent.Output).Concat(this._parent.Push).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the disconnect property
        /// </summary>
        private sealed class DisconnectProxy : ModelPropertyChange<ISingleActionScheduleObject, IDisconnectControlSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "disconnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDisconnectControlSchedule Value
            {
                get
                {
                    return this.ModelElement.Disconnect;
                }
                set
                {
                    this.ModelElement.Disconnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodEnd property
        /// </summary>
        private sealed class BillingPeriodEndProxy : ModelPropertyChange<ISingleActionScheduleObject, IEndOfBillingPeriodSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodEndProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "BillingPeriodEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndOfBillingPeriodSchedule Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodEnd;
                }
                set
                {
                    this.ModelElement.BillingPeriodEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Image property
        /// </summary>
        private sealed class ImageProxy : ModelPropertyChange<ISingleActionScheduleObject, IImageActivationSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImageProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Image")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImageActivationSchedule Value
            {
                get
                {
                    return this.ModelElement.Image;
                }
                set
                {
                    this.ModelElement.Image = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Output property
        /// </summary>
        private sealed class OutputProxy : ModelPropertyChange<ISingleActionScheduleObject, IOutputControlSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Output")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputControlSchedule Value
            {
                get
                {
                    return this.ModelElement.Output;
                }
                set
                {
                    this.ModelElement.Output = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Push property
        /// </summary>
        private sealed class PushProxy : ModelPropertyChange<ISingleActionScheduleObject, IPushSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PushProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Push")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPushSchedule Value
            {
                get
                {
                    return this.ModelElement.Push;
                }
                set
                {
                    this.ModelElement.Push = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the DisconnectControlSchedule class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControlSchedule")]
    public partial class DisconnectControlSchedule : Singleactionschedule, IDisconnectControlSchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControlSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControlSchedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the EndOfBillingPeriodSchedule class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EndOfBillingPeriodSchedule")]
    public partial class EndOfBillingPeriodSchedule : Singleactionschedule, IEndOfBillingPeriodSchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EndOfBillingPeriodSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EndOfBillingPeriodSchedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ImageActivationSchedule class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageActivationSchedule")]
    public partial class ImageActivationSchedule : Singleactionschedule, IImageActivationSchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageActivationSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageActivationSchedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the OutputControlSchedule class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OutputControlSchedule")]
    public partial class OutputControlSchedule : Singleactionschedule, IOutputControlSchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OutputControlSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OutputControlSchedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PushSchedule class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PushSchedule")]
    public partial class PushSchedule : Singleactionschedule, IPushSchedule, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PushSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PushSchedule")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the RegisterMonitorObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/RegisterMonitorObject")]
    public partial class RegisterMonitorObject : Registermonitor, IRegisterMonitorObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/RegisterMonitorObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/RegisterMonitorObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the AlarmMonitor class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmMonitor")]
    public partial class AlarmMonitor : Registermonitor, IAlarmMonitor, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmMonitor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmMonitor")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ParameterMonitorObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ParameterMonitorObject")]
    public partial class ParameterMonitorObject : Parametermonitor, IParameterMonitorObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ParameterMonitorObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ParameterMonitorObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the LimiterObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/LimiterObject")]
    public partial class LimiterObject : Limiter, ILimiterObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/LimiterObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/LimiterObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the AccountObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AccountObject")]
    public partial class AccountObject : Account, IAccountObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AccountObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AccountObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the CreditObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CreditObject")]
    public partial class CreditObject : Credit, ICreditObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CreditObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CreditObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ChargeObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ChargeObject")]
    public partial class ChargeObject : Charge, IChargeObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ChargeObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ChargeObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the TokenGatewayObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TokenGatewayObject")]
    public partial class TokenGatewayObject : Tokengateway, ITokenGatewayObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TokenGatewayObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TokenGatewayObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the MaxCreditLimit class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MaxCreditLimit")]
    public partial class MaxCreditLimit : Data, IMaxCreditLimit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MaxCreditLimit")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    Nullable<double> old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MaxCreditLimit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MaxCreditLimit.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return Observable.Box(new ValueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MaxCreditLimit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IMaxCreditLimit, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IMaxCreditLimit modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MaxVendLimit class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MaxVendLimit")]
    public partial class MaxVendLimit : Data, IMaxVendLimit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MaxVendLimit")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    Nullable<double> old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MaxVendLimit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MaxVendLimit.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return Observable.Box(new ValueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MaxVendLimit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IMaxVendLimit, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IMaxVendLimit modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the IECOpticalPortSetup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECOpticalPortSetup")]
    public partial class IECOpticalPortSetup : IEC_local_port_setup, IIECOpticalPortSetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECOpticalPortSetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECOpticalPortSetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IECElectricalPortSetup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECElectricalPortSetup")]
    public partial class IECElectricalPortSetup : IEC_local_port_setup, IIECElectricalPortSetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECElectricalPortSetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECElectricalPortSetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the StandardReadout class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StandardReadout")]
    public partial class StandardReadout : Profilegeneric, IStandardReadout, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GeneralLocalPortReadout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _generalLocalPortReadout;
        
        private static Lazy<ITypedElement> _generalLocalPortReadoutAttribute = new Lazy<ITypedElement>(RetrieveGeneralLocalPortReadoutAttribute);
        
        /// <summary>
        /// The backing field for the GeneralDisplayReadout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _generalDisplayReadout;
        
        private static Lazy<ITypedElement> _generalDisplayReadoutAttribute = new Lazy<ITypedElement>(RetrieveGeneralDisplayReadoutAttribute);
        
        /// <summary>
        /// The backing field for the AlternateDisplayReadout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _alternateDisplayReadout;
        
        private static Lazy<ITypedElement> _alternateDisplayReadoutAttribute = new Lazy<ITypedElement>(RetrieveAlternateDisplayReadoutAttribute);
        
        /// <summary>
        /// The backing field for the ServiceDisplayReadout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _serviceDisplayReadout;
        
        private static Lazy<ITypedElement> _serviceDisplayReadoutAttribute = new Lazy<ITypedElement>(RetrieveServiceDisplayReadoutAttribute);
        
        /// <summary>
        /// The backing field for the ListConfigMeterData property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _listConfigMeterData;
        
        private static Lazy<ITypedElement> _listConfigMeterDataAttribute = new Lazy<ITypedElement>(RetrieveListConfigMeterDataAttribute);
        
        /// <summary>
        /// The backing field for the AdditionalReadout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _additionalReadout;
        
        private static Lazy<ITypedElement> _additionalReadoutAttribute = new Lazy<ITypedElement>(RetrieveAdditionalReadoutAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The GeneralLocalPortReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string GeneralLocalPortReadout
        {
            get
            {
                return this._generalLocalPortReadout;
            }
            set
            {
                if ((this._generalLocalPortReadout != value))
                {
                    string old = this._generalLocalPortReadout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneralLocalPortReadoutChanging(e);
                    this.OnPropertyChanging("GeneralLocalPortReadout", e, _generalLocalPortReadoutAttribute);
                    this._generalLocalPortReadout = value;
                    this.OnGeneralLocalPortReadoutChanged(e);
                    this.OnPropertyChanged("GeneralLocalPortReadout", e, _generalLocalPortReadoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GeneralDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string GeneralDisplayReadout
        {
            get
            {
                return this._generalDisplayReadout;
            }
            set
            {
                if ((this._generalDisplayReadout != value))
                {
                    string old = this._generalDisplayReadout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneralDisplayReadoutChanging(e);
                    this.OnPropertyChanging("GeneralDisplayReadout", e, _generalDisplayReadoutAttribute);
                    this._generalDisplayReadout = value;
                    this.OnGeneralDisplayReadoutChanged(e);
                    this.OnPropertyChanged("GeneralDisplayReadout", e, _generalDisplayReadoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AlternateDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string AlternateDisplayReadout
        {
            get
            {
                return this._alternateDisplayReadout;
            }
            set
            {
                if ((this._alternateDisplayReadout != value))
                {
                    string old = this._alternateDisplayReadout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlternateDisplayReadoutChanging(e);
                    this.OnPropertyChanging("AlternateDisplayReadout", e, _alternateDisplayReadoutAttribute);
                    this._alternateDisplayReadout = value;
                    this.OnAlternateDisplayReadoutChanged(e);
                    this.OnPropertyChanged("AlternateDisplayReadout", e, _alternateDisplayReadoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string ServiceDisplayReadout
        {
            get
            {
                return this._serviceDisplayReadout;
            }
            set
            {
                if ((this._serviceDisplayReadout != value))
                {
                    string old = this._serviceDisplayReadout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceDisplayReadoutChanging(e);
                    this.OnPropertyChanging("ServiceDisplayReadout", e, _serviceDisplayReadoutAttribute);
                    this._serviceDisplayReadout = value;
                    this.OnServiceDisplayReadoutChanged(e);
                    this.OnPropertyChanged("ServiceDisplayReadout", e, _serviceDisplayReadoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ListConfigMeterData property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string ListConfigMeterData
        {
            get
            {
                return this._listConfigMeterData;
            }
            set
            {
                if ((this._listConfigMeterData != value))
                {
                    string old = this._listConfigMeterData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnListConfigMeterDataChanging(e);
                    this.OnPropertyChanging("ListConfigMeterData", e, _listConfigMeterDataAttribute);
                    this._listConfigMeterData = value;
                    this.OnListConfigMeterDataChanged(e);
                    this.OnPropertyChanged("ListConfigMeterData", e, _listConfigMeterDataAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AdditionalReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        public string AdditionalReadout
        {
            get
            {
                return this._additionalReadout;
            }
            set
            {
                if ((this._additionalReadout != value))
                {
                    string old = this._additionalReadout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAdditionalReadoutChanging(e);
                    this.OnPropertyChanging("AdditionalReadout", e, _additionalReadoutAttribute);
                    this._additionalReadout = value;
                    this.OnAdditionalReadoutChanged(e);
                    this.OnPropertyChanged("AdditionalReadout", e, _additionalReadoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StandardReadout")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the GeneralLocalPortReadout property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GeneralLocalPortReadoutChanged;
        
        /// <summary>
        /// Gets fired before the GeneralLocalPortReadout property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GeneralLocalPortReadoutChanging;
        
        /// <summary>
        /// Gets fired when the GeneralDisplayReadout property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GeneralDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the GeneralDisplayReadout property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GeneralDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the AlternateDisplayReadout property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AlternateDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the AlternateDisplayReadout property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AlternateDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDisplayReadout property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ServiceDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDisplayReadout property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ServiceDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the ListConfigMeterData property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ListConfigMeterDataChanged;
        
        /// <summary>
        /// Gets fired before the ListConfigMeterData property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ListConfigMeterDataChanging;
        
        /// <summary>
        /// Gets fired when the AdditionalReadout property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AdditionalReadoutChanged;
        
        /// <summary>
        /// Gets fired before the AdditionalReadout property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AdditionalReadoutChanging;
        
        private static ITypedElement RetrieveGeneralLocalPortReadoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("GeneralLocalPortReadout")));
        }
        
        /// <summary>
        /// Raises the GeneralLocalPortReadoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralLocalPortReadoutChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GeneralLocalPortReadoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneralLocalPortReadoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralLocalPortReadoutChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GeneralLocalPortReadoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGeneralDisplayReadoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("GeneralDisplayReadout")));
        }
        
        /// <summary>
        /// Raises the GeneralDisplayReadoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralDisplayReadoutChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GeneralDisplayReadoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneralDisplayReadoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralDisplayReadoutChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GeneralDisplayReadoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlternateDisplayReadoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("AlternateDisplayReadout")));
        }
        
        /// <summary>
        /// Raises the AlternateDisplayReadoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlternateDisplayReadoutChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AlternateDisplayReadoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AlternateDisplayReadoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlternateDisplayReadoutChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AlternateDisplayReadoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceDisplayReadoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("ServiceDisplayReadout")));
        }
        
        /// <summary>
        /// Raises the ServiceDisplayReadoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDisplayReadoutChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ServiceDisplayReadoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDisplayReadoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDisplayReadoutChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ServiceDisplayReadoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveListConfigMeterDataAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("ListConfigMeterData")));
        }
        
        /// <summary>
        /// Raises the ListConfigMeterDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnListConfigMeterDataChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ListConfigMeterDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ListConfigMeterDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnListConfigMeterDataChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ListConfigMeterDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAdditionalReadoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.StandardReadout.ClassInstance)).Resolve("AdditionalReadout")));
        }
        
        /// <summary>
        /// Raises the AdditionalReadoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdditionalReadoutChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AdditionalReadoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AdditionalReadoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdditionalReadoutChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AdditionalReadoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GENERALLOCALPORTREADOUT"))
            {
                return this.GeneralLocalPortReadout;
            }
            if ((attribute == "GENERALDISPLAYREADOUT"))
            {
                return this.GeneralDisplayReadout;
            }
            if ((attribute == "ALTERNATEDISPLAYREADOUT"))
            {
                return this.AlternateDisplayReadout;
            }
            if ((attribute == "SERVICEDISPLAYREADOUT"))
            {
                return this.ServiceDisplayReadout;
            }
            if ((attribute == "LISTCONFIGMETERDATA"))
            {
                return this.ListConfigMeterData;
            }
            if ((attribute == "ADDITIONALREADOUT"))
            {
                return this.AdditionalReadout;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERALLOCALPORTREADOUT"))
            {
                this.GeneralLocalPortReadout = ((string)(value));
                return;
            }
            if ((feature == "GENERALDISPLAYREADOUT"))
            {
                this.GeneralDisplayReadout = ((string)(value));
                return;
            }
            if ((feature == "ALTERNATEDISPLAYREADOUT"))
            {
                this.AlternateDisplayReadout = ((string)(value));
                return;
            }
            if ((feature == "SERVICEDISPLAYREADOUT"))
            {
                this.ServiceDisplayReadout = ((string)(value));
                return;
            }
            if ((feature == "LISTCONFIGMETERDATA"))
            {
                this.ListConfigMeterData = ((string)(value));
                return;
            }
            if ((feature == "ADDITIONALREADOUT"))
            {
                this.AdditionalReadout = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GENERALLOCALPORTREADOUT"))
            {
                return new GeneralLocalPortReadoutProxy(this);
            }
            if ((attribute == "GENERALDISPLAYREADOUT"))
            {
                return new GeneralDisplayReadoutProxy(this);
            }
            if ((attribute == "ALTERNATEDISPLAYREADOUT"))
            {
                return new AlternateDisplayReadoutProxy(this);
            }
            if ((attribute == "SERVICEDISPLAYREADOUT"))
            {
                return new ServiceDisplayReadoutProxy(this);
            }
            if ((attribute == "LISTCONFIGMETERDATA"))
            {
                return new ListConfigMeterDataProxy(this);
            }
            if ((attribute == "ADDITIONALREADOUT"))
            {
                return new AdditionalReadoutProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StandardReadout")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GeneralLocalPortReadout property
        /// </summary>
        private sealed class GeneralLocalPortReadoutProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneralLocalPortReadoutProxy(IStandardReadout modelElement) : 
                    base(modelElement, "GeneralLocalPortReadout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GeneralLocalPortReadout;
                }
                set
                {
                    this.ModelElement.GeneralLocalPortReadout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GeneralDisplayReadout property
        /// </summary>
        private sealed class GeneralDisplayReadoutProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneralDisplayReadoutProxy(IStandardReadout modelElement) : 
                    base(modelElement, "GeneralDisplayReadout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GeneralDisplayReadout;
                }
                set
                {
                    this.ModelElement.GeneralDisplayReadout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AlternateDisplayReadout property
        /// </summary>
        private sealed class AlternateDisplayReadoutProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AlternateDisplayReadoutProxy(IStandardReadout modelElement) : 
                    base(modelElement, "AlternateDisplayReadout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AlternateDisplayReadout;
                }
                set
                {
                    this.ModelElement.AlternateDisplayReadout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceDisplayReadout property
        /// </summary>
        private sealed class ServiceDisplayReadoutProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceDisplayReadoutProxy(IStandardReadout modelElement) : 
                    base(modelElement, "ServiceDisplayReadout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ServiceDisplayReadout;
                }
                set
                {
                    this.ModelElement.ServiceDisplayReadout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ListConfigMeterData property
        /// </summary>
        private sealed class ListConfigMeterDataProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ListConfigMeterDataProxy(IStandardReadout modelElement) : 
                    base(modelElement, "ListConfigMeterData")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ListConfigMeterData;
                }
                set
                {
                    this.ModelElement.ListConfigMeterData = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AdditionalReadout property
        /// </summary>
        private sealed class AdditionalReadoutProxy : ModelPropertyChange<IStandardReadout, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AdditionalReadoutProxy(IStandardReadout modelElement) : 
                    base(modelElement, "AdditionalReadout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AdditionalReadout;
                }
                set
                {
                    this.ModelElement.AdditionalReadout = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the StandardReadoutParam class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StandardReadoutParam")]
    public partial class StandardReadoutParam : Data, IStandardReadoutParam, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StandardReadoutParam")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StandardReadoutParam")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IECHDLCSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECHDLCSetupObject")]
    public partial class IECHDLCSetupObject : IEC_HDLC_setup, IIECHDLCSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECHDLCSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECHDLCSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IECTwistedPairSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairSetupObject")]
    public partial class IECTwistedPairSetupObject : IEC_twisted_pair_setup, IIECTwistedPairSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IECTwistedPairMACAddressSetup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairMACAddressSetup")]
    public partial class IECTwistedPairMACAddressSetup : MACaddresssetup, IIECTwistedPairMACAddressSetup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairMACAddressSetup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairMACAddressSetup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IECTwistedPairFatalErrorRegister class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairFatalErrorRegister")]
    public partial class IECTwistedPairFatalErrorRegister : Data, IIECTwistedPairFatalErrorRegister, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairFatalErrorRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IECTwistedPairFatalErrorRegister")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC62056_3_1ShortReadout class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC62056_3_1ShortReadout")]
    public partial class IEC62056_3_1ShortReadout : Profilegeneric, IIEC62056_3_1ShortReadout, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC62056_3_1ShortReadout")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC62056_3_1ShortReadout")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC62056_3_1LongReadout class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC62056_3_1LongReadout")]
    public partial class IEC62056_3_1LongReadout : Profilegeneric, IIEC62056_3_1LongReadout, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC62056_3_1LongReadout")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC62056_3_1LongReadout")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC_62056_3_1AlternateReadoutProfile class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC_62056_3_1AlternateReadoutProfile")]
    public partial class IEC_62056_3_1AlternateReadoutProfile : Profilegeneric, IIEC_62056_3_1AlternateReadoutProfile, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC_62056_3_1AlternateReadoutProfile")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC_62056_3_1AlternateReadoutProfile")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusSlavePortSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusSlavePortSetupObject")]
    public partial class M_BusSlavePortSetupObject : M_Bus_slave_port_setup, IM_BusSlavePortSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusSlavePortSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusSlavePortSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusClientObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusClientObject")]
    public partial class M_BusClientObject : M_Bus_client, IM_BusClientObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusClientObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusClientObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusValue class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusValue")]
    public partial class M_BusValue : ExtendedRegister, IM_BusValue, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusValue")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusValue")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusProfileGeneric class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusProfileGeneric")]
    public partial class M_BusProfileGeneric : Profilegeneric, IM_BusProfileGeneric, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusProfileGeneric")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusProfileGeneric")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusDisconnectControl class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusDisconnectControl")]
    public partial class M_BusDisconnectControl : TemporaryGeneratedCode.COSEM.InterfaceClasses.DisconnectControl, IM_BusDisconnectControl, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusDisconnectControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusDisconnectControl")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusControlLog class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusControlLog")]
    public partial class M_BusControlLog : Profilegeneric, IM_BusControlLog, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusControlLog")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusControlLog")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusMasterPortSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusMasterPortSetupObject")]
    public partial class M_BusMasterPortSetupObject : M_Bus_master_port_setup, IM_BusMasterPortSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusMasterPortSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusMasterPortSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the WirelessModeQChannelObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/WirelessModeQChannelObject")]
    public partial class WirelessModeQChannelObject : Wireless_Mode_Q_Channel, IWirelessModeQChannelObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/WirelessModeQChannelObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/WirelessModeQChannelObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DLMS_COSEMServerM_BusPortSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DLMS_COSEMServerM_BusPortSetupObject")]
    public partial class DLMS_COSEMServerM_BusPortSetupObject : DLMS_COSEM_Server_M_Bus_port_setup, IDLMS_COSEMServerM_BusPortSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DLMS_COSEMServerM_BusPortSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DLMS_COSEMServerM_BusPortSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the M_BusDiagnosticObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusDiagnosticObject")]
    public partial class M_BusDiagnosticObject : M_Bus_diagnostic, IM_BusDiagnosticObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusDiagnosticObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/M_BusDiagnosticObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the TCP_UDPSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TCP_UDPSetupObject")]
    public partial class TCP_UDPSetupObject : TCP_UDPsetup, ITCP_UDPSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TCP_UDPSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TCP_UDPSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IPv4SetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IPv4SetupObject")]
    public partial class IPv4SetupObject : IPv4setup, IIPv4SetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IPv4SetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IPv4SetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the MACAddressSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MACAddressSetupObject")]
    public partial class MACAddressSetupObject : MACaddresssetup, IMACAddressSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MACAddressSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MACAddressSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PPPSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PPPSetupObject")]
    public partial class PPPSetupObject : PPPsetup, IPPPSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PPPSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PPPSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GPRSModemSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GPRSModemSetupObject")]
    public partial class GPRSModemSetupObject : GPRS_modem_setup, IGPRSModemSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GPRSModemSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GPRSModemSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SMTPSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SMTPSetupObject")]
    public partial class SMTPSetupObject : SMTPsetup, ISMTPSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SMTPSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SMTPSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GSMDiagnosticObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GSMDiagnosticObject")]
    public partial class GSMDiagnosticObject : GSM_Diagnostic, IGSMDiagnosticObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GSMDiagnosticObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GSMDiagnosticObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IPv6SetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IPv6SetupObject")]
    public partial class IPv6SetupObject : IPv6setup, IIPv6SetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IPv6SetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IPv6SetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PushSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PushSetupObject")]
    public partial class PushSetupObject : Pushsetup, IPushSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PushSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PushSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKPhy_MACSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKPhy_MACSetupObject")]
    public partial class S_FSKPhy_MACSetupObject : S_FSK_PHY_MACsetup, IS_FSKPhy_MACSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKPhy_MACSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKPhy_MACSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKActiveInitiatorObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKActiveInitiatorObject")]
    public partial class S_FSKActiveInitiatorObject : S_FSKActiveinitiator, IS_FSKActiveInitiatorObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKActiveInitiatorObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKActiveInitiatorObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKMACSynchronizationTimeouts class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKMACSynchronizationTimeouts")]
    public partial class S_FSKMACSynchronizationTimeouts : S_FSKMACsynctimeouts, IS_FSKMACSynchronizationTimeouts, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKMACSynchronizationTimeouts")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKMACSynchronizationTimeouts")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKMACCountersObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKMACCountersObject")]
    public partial class S_FSKMACCountersObject : S_FSKMACcounters, IS_FSKMACCountersObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKMACCountersObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKMACCountersObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IEC61334_4_32LLCSetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC61334_4_32LLCSetupObject")]
    public partial class IEC61334_4_32LLCSetupObject : IEC61334_4_32LLCsetup, IIEC61334_4_32LLCSetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC61334_4_32LLCSetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IEC61334_4_32LLCSetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the S_FSKReportingSystemListObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKReportingSystemListObject")]
    public partial class S_FSKReportingSystemListObject : S_FSKReportingsystemlist, IS_FSKReportingSystemListObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKReportingSystemListObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/S_FSKReportingSystemListObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ISO_IEC8802_2LLCType1SetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType1SetupObject")]
    public partial class ISO_IEC8802_2LLCType1SetupObject : IEC_8802_2_LLC_Type_1, IISO_IEC8802_2LLCType1SetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType1SetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType1SetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ISO_IEC8802_2LLCType2Setup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType2Setup")]
    public partial class ISO_IEC8802_2LLCType2Setup : IEC_8802_2_LLC_G3_NB, IISO_IEC8802_2LLCType2Setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType2Setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType2Setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ISO_IEC8802_2LLCType3Setup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType3Setup")]
    public partial class ISO_IEC8802_2LLCType3Setup : IEC8802_2LLCType3, IISO_IEC8802_2LLCType3Setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType3Setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType3Setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the t61334_4_32LLCSSCSsetupobject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/t61334_4_32LLCSSCSsetupobject")]
    [XmlElementNameAttribute("t61334_4_32LLCSSCSsetupobject")]
    public partial class T61334_4_32LLCSSCSsetupobject : T61334_32_LLC_SSCS_setup, IT61334_4_32LLCSSCSsetupobject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/t61334_4_32LLCSSCSsetupobject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/t61334_4_32LLCSSCSsetupobject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_Physical_layer_counters_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Physical_layer_counters_object")]
    public partial class PRIME_NB_OFDM_PLC_Physical_layer_counters_object : PRIME_NB_OFDM_PLC_Phy_layer_counters, IPRIME_NB_OFDM_PLC_Physical_layer_counters_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Physical_layer_counters_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Physical_layer_counters_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_setup_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_setup_object")]
    public partial class PRIME_NB_OFDM_PLC_MAC_setup_object : PRIME_NB_OFDM_PLC_MACsetup, IPRIME_NB_OFDM_PLC_MAC_setup_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_setup_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_setup_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_functional_parameters_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_functional_parameters_object")]
    public partial class PRIME_NB_OFDM_PLC_MAC_functional_parameters_object : PRIME_NB_OFDM_PLC_MAC_functionalparams, IPRIME_NB_OFDM_PLC_MAC_functional_parameters_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_functional_parameters_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_functional_parameters_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_counters_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_counters_object")]
    public partial class PRIME_NB_OFDM_PLC_MAC_counters_object : PRIME_NB_OFDM_PLC_MAC_counters, IPRIME_NB_OFDM_PLC_MAC_counters_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_counters_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_counters_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_network_administration_data_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_network_administration_data_object" +
        "")]
    public partial class PRIME_NB_OFDM_PLC_MAC_network_administration_data_object : PRIME_NB_OFDM_PLC_MACnetworkadmindata, IPRIME_NB_OFDM_PLC_MAC_network_administration_data_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_network_administration_data_object" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_network_administration_data_object" +
                        "")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_MAC_address_setup class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_address_setup")]
    public partial class PRIME_NB_OFDM_PLC_MAC_address_setup : MACaddresssetup, IPRIME_NB_OFDM_PLC_MAC_address_setup, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_address_setup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_address_setup")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PRIME_NB_OFDM_PLC_Application_identification_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Application_identification_object")]
    public partial class PRIME_NB_OFDM_PLC_Application_identification_object : PRIME_NB_OFDM_PLC_Application_identification, IPRIME_NB_OFDM_PLC_Application_identification_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Application_identification_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Application_identification_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_MAC_layer_counters_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_MAC_layer_counters_object")]
    public partial class G3_PLC_MAC_layer_counters_object : G3_PLC_MAC_layer_counters, IG3_PLC_MAC_layer_counters_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_MAC_layer_counters_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_MAC_layer_counters_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_MAC_setup_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_MAC_setup_object")]
    public partial class G3_PLC_MAC_setup_object : G3_PLC_MAC_setup, IG3_PLC_MAC_setup_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_MAC_setup_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_MAC_setup_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the G3_PLC_6LoWPAN_adaptation_layer_setup_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_6LoWPAN_adaptation_layer_setup_object")]
    public partial class G3_PLC_6LoWPAN_adaptation_layer_setup_object : G3_PLC_6LoWPAN, IG3_PLC_6LoWPAN_adaptation_layer_setup_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_6LoWPAN_adaptation_layer_setup_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/G3_PLC_6LoWPAN_adaptation_layer_setup_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_startup_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_startup_object")]
    public partial class ZigBee_SAS_startup_object : ZigBee_SAS_startup, IZigBee_SAS_startup_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_startup_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_startup_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_join_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_join_object")]
    public partial class ZigBee_SAS_join_object : ZigBee_SAS_join, IZigBee_SAS_join_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_join_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_join_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_SAS_APS_fragmentation_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_APS_fragmentation_object")]
    public partial class ZigBee_SAS_APS_fragmentation_object : ZigBee_SAS_APS_fragmentation, IZigBee_SAS_APS_fragmentation_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_APS_fragmentation_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_SAS_APS_fragmentation_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_network_control_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_network_control_object")]
    public partial class ZigBee_network_control_object : ZigBeenetworkcontrol, IZigBee_network_control_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_network_control_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_network_control_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ZigBee_tunnel_setup_object class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_tunnel_setup_object")]
    public partial class ZigBee_tunnel_setup_object : ZigBeetunnelsetup, IZigBee_tunnel_setup_object, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_tunnel_setup_object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ZigBee_tunnel_setup_object")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the CurrentAssociation class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CurrentAssociation")]
    public partial class CurrentAssociation : AssociationLN, ICurrentAssociation, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CurrentAssociation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CurrentAssociation")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SAPAssignmentCurrent class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SAPAssignmentCurrent")]
    public partial class SAPAssignmentCurrent : SAPAssignment, ISAPAssignmentCurrent, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SAPAssignmentCurrent")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SAPAssignmentCurrent")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the SecuritySetupObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SecuritySetupObject")]
    public partial class SecuritySetupObject : Securitysetup, ISecuritySetupObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SecuritySetupObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/SecuritySetupObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InvocationCounter class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InvocationCounter")]
    public partial class InvocationCounter : Data, IInvocationCounter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("InvocationCounter")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    Nullable<int> old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InvocationCounter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InvocationCounter.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return Observable.Box(new ValueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InvocationCounter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IInvocationCounter, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IInvocationCounter modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the DataProtectionObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DataProtectionObject")]
    public partial class DataProtectionObject : Dataprotection, IDataProtectionObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DataProtectionObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DataProtectionObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ImageTransferObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageTransferObject")]
    public partial class ImageTransferObject : Imagetransfer, IImageTransferObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageTransferObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ImageTransferObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the UtilitiesTableObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/UtilitiesTableObject")]
    public partial class UtilitiesTableObject : Utilitytables, IUtilitiesTableObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Standard property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _standard;
        
        private static Lazy<ITypedElement> _standardAttribute = new Lazy<ITypedElement>(RetrieveStandardAttribute);
        
        /// <summary>
        /// The backing field for the Manufacturer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _manufacturer;
        
        private static Lazy<ITypedElement> _manufacturerAttribute = new Lazy<ITypedElement>(RetrieveManufacturerAttribute);
        
        /// <summary>
        /// The backing field for the StdPending property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _stdPending;
        
        private static Lazy<ITypedElement> _stdPendingAttribute = new Lazy<ITypedElement>(RetrieveStdPendingAttribute);
        
        /// <summary>
        /// The backing field for the MfgPending property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _mfgPending;
        
        private static Lazy<ITypedElement> _mfgPendingAttribute = new Lazy<ITypedElement>(RetrieveMfgPendingAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Standard property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        public string Standard
        {
            get
            {
                return this._standard;
            }
            set
            {
                if ((this._standard != value))
                {
                    string old = this._standard;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStandardChanging(e);
                    this.OnPropertyChanging("Standard", e, _standardAttribute);
                    this._standard = value;
                    this.OnStandardChanged(e);
                    this.OnPropertyChanged("Standard", e, _standardAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Manufacturer property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        public string Manufacturer
        {
            get
            {
                return this._manufacturer;
            }
            set
            {
                if ((this._manufacturer != value))
                {
                    string old = this._manufacturer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManufacturerChanging(e);
                    this.OnPropertyChanging("Manufacturer", e, _manufacturerAttribute);
                    this._manufacturer = value;
                    this.OnManufacturerChanged(e);
                    this.OnPropertyChanged("Manufacturer", e, _manufacturerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StdPending property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        public string StdPending
        {
            get
            {
                return this._stdPending;
            }
            set
            {
                if ((this._stdPending != value))
                {
                    string old = this._stdPending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStdPendingChanging(e);
                    this.OnPropertyChanging("StdPending", e, _stdPendingAttribute);
                    this._stdPending = value;
                    this.OnStdPendingChanged(e);
                    this.OnPropertyChanged("StdPending", e, _stdPendingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MfgPending property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        public string MfgPending
        {
            get
            {
                return this._mfgPending;
            }
            set
            {
                if ((this._mfgPending != value))
                {
                    string old = this._mfgPending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMfgPendingChanging(e);
                    this.OnPropertyChanging("MfgPending", e, _mfgPendingAttribute);
                    this._mfgPending = value;
                    this.OnMfgPendingChanged(e);
                    this.OnPropertyChanged("MfgPending", e, _mfgPendingAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/UtilitiesTableObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Standard property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StandardChanged;
        
        /// <summary>
        /// Gets fired before the Standard property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StandardChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ManufacturerChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ManufacturerChanging;
        
        /// <summary>
        /// Gets fired when the StdPending property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StdPendingChanged;
        
        /// <summary>
        /// Gets fired before the StdPending property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StdPendingChanging;
        
        /// <summary>
        /// Gets fired when the MfgPending property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MfgPendingChanged;
        
        /// <summary>
        /// Gets fired before the MfgPending property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MfgPendingChanging;
        
        private static ITypedElement RetrieveStandardAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.UtilitiesTableObject.ClassInstance)).Resolve("Standard")));
        }
        
        /// <summary>
        /// Raises the StandardChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStandardChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StandardChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StandardChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStandardChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StandardChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManufacturerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.UtilitiesTableObject.ClassInstance)).Resolve("Manufacturer")));
        }
        
        /// <summary>
        /// Raises the ManufacturerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ManufacturerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManufacturerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ManufacturerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStdPendingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.UtilitiesTableObject.ClassInstance)).Resolve("StdPending")));
        }
        
        /// <summary>
        /// Raises the StdPendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStdPendingChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StdPendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StdPendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStdPendingChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StdPendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMfgPendingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.UtilitiesTableObject.ClassInstance)).Resolve("MfgPending")));
        }
        
        /// <summary>
        /// Raises the MfgPendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMfgPendingChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MfgPendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MfgPendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMfgPendingChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MfgPendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STANDARD"))
            {
                return this.Standard;
            }
            if ((attribute == "MANUFACTURER"))
            {
                return this.Manufacturer;
            }
            if ((attribute == "STDPENDING"))
            {
                return this.StdPending;
            }
            if ((attribute == "MFGPENDING"))
            {
                return this.MfgPending;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STANDARD"))
            {
                this.Standard = ((string)(value));
                return;
            }
            if ((feature == "MANUFACTURER"))
            {
                this.Manufacturer = ((string)(value));
                return;
            }
            if ((feature == "STDPENDING"))
            {
                this.StdPending = ((string)(value));
                return;
            }
            if ((feature == "MFGPENDING"))
            {
                this.MfgPending = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STANDARD"))
            {
                return new StandardProxy(this);
            }
            if ((attribute == "MANUFACTURER"))
            {
                return new ManufacturerProxy(this);
            }
            if ((attribute == "STDPENDING"))
            {
                return new StdPendingProxy(this);
            }
            if ((attribute == "MFGPENDING"))
            {
                return new MfgPendingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/UtilitiesTableObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Standard property
        /// </summary>
        private sealed class StandardProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StandardProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "Standard")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Standard;
                }
                set
                {
                    this.ModelElement.Standard = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Manufacturer property
        /// </summary>
        private sealed class ManufacturerProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManufacturerProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "Manufacturer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Manufacturer;
                }
                set
                {
                    this.ModelElement.Manufacturer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StdPending property
        /// </summary>
        private sealed class StdPendingProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StdPendingProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "StdPending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StdPending;
                }
                set
                {
                    this.ModelElement.StdPending = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MfgPending property
        /// </summary>
        private sealed class MfgPendingProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MfgPendingProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "MfgPending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MfgPending;
                }
                set
                {
                    this.ModelElement.MfgPending = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the CompactDataObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CompactDataObject")]
    public partial class CompactDataObject : Compactdata, ICompactDataObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CompactDataObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CompactDataObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DeviceID class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DeviceID")]
    public partial class DeviceID : Data, IDeviceID, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("DeviceID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DeviceID")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.DeviceID.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DeviceID")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IDeviceID, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IDeviceID modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MeteringPointID class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeteringPointID")]
    public partial class MeteringPointID : Data, IMeteringPointID, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MeteringPointID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeteringPointID")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeteringPointID.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeteringPointID")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IMeteringPointID, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IMeteringPointID modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ParameterChangesObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ParameterChangesObject")]
    public partial class ParameterChangesObject : Data, IParameterChangesObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NumberConfigProgramChanges property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _numberConfigProgramChanges;
        
        private static Lazy<ITypedElement> _numberConfigProgramChangesAttribute = new Lazy<ITypedElement>(RetrieveNumberConfigProgramChangesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastConfigChange property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastConfigChange;
        
        private static Lazy<ITypedElement> _dateLastConfigChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastConfigChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastSwitchChange property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastSwitchChange;
        
        private static Lazy<ITypedElement> _dateLastSwitchChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastSwitchChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastRippleControlChange property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastRippleControlChange;
        
        private static Lazy<ITypedElement> _dateLastRippleControlChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastRippleControlChangeAttribute);
        
        /// <summary>
        /// The backing field for the StatusSecuritySwitches property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _statusSecuritySwitches;
        
        private static Lazy<ITypedElement> _statusSecuritySwitchesAttribute = new Lazy<ITypedElement>(RetrieveStatusSecuritySwitchesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastCalibration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastCalibration;
        
        private static Lazy<ITypedElement> _dateLastCalibrationAttribute = new Lazy<ITypedElement>(RetrieveDateLastCalibrationAttribute);
        
        /// <summary>
        /// The backing field for the DateNextConfig property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateNextConfig;
        
        private static Lazy<ITypedElement> _dateNextConfigAttribute = new Lazy<ITypedElement>(RetrieveDateNextConfigAttribute);
        
        /// <summary>
        /// The backing field for the DateActivationPassivCalendar property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateActivationPassivCalendar;
        
        private static Lazy<ITypedElement> _dateActivationPassivCalendarAttribute = new Lazy<ITypedElement>(RetrieveDateActivationPassivCalendarAttribute);
        
        /// <summary>
        /// The backing field for the NumberProtectedConfigChanges property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _numberProtectedConfigChanges;
        
        private static Lazy<ITypedElement> _numberProtectedConfigChangesAttribute = new Lazy<ITypedElement>(RetrieveNumberProtectedConfigChangesAttribute);
        
        /// <summary>
        /// The backing field for the DateLastProtectedConfigChange property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastProtectedConfigChange;
        
        private static Lazy<ITypedElement> _dateLastProtectedConfigChangeAttribute = new Lazy<ITypedElement>(RetrieveDateLastProtectedConfigChangeAttribute);
        
        /// <summary>
        /// The backing field for the DateLastClockSynch property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastClockSynch;
        
        private static Lazy<ITypedElement> _dateLastClockSynchAttribute = new Lazy<ITypedElement>(RetrieveDateLastClockSynchAttribute);
        
        /// <summary>
        /// The backing field for the DateLastFirmwareActivation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<DateTime> _dateLastFirmwareActivation;
        
        private static Lazy<ITypedElement> _dateLastFirmwareActivationAttribute = new Lazy<ITypedElement>(RetrieveDateLastFirmwareActivationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The NumberConfigProgramChanges property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> NumberConfigProgramChanges
        {
            get
            {
                return this._numberConfigProgramChanges;
            }
            set
            {
                if ((this._numberConfigProgramChanges != value))
                {
                    Nullable<int> old = this._numberConfigProgramChanges;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberConfigProgramChangesChanging(e);
                    this.OnPropertyChanging("NumberConfigProgramChanges", e, _numberConfigProgramChangesAttribute);
                    this._numberConfigProgramChanges = value;
                    this.OnNumberConfigProgramChangesChanged(e);
                    this.OnPropertyChanged("NumberConfigProgramChanges", e, _numberConfigProgramChangesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastConfigChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastConfigChange
        {
            get
            {
                return this._dateLastConfigChange;
            }
            set
            {
                if ((this._dateLastConfigChange != value))
                {
                    Nullable<DateTime> old = this._dateLastConfigChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastConfigChangeChanging(e);
                    this.OnPropertyChanging("DateLastConfigChange", e, _dateLastConfigChangeAttribute);
                    this._dateLastConfigChange = value;
                    this.OnDateLastConfigChangeChanged(e);
                    this.OnPropertyChanged("DateLastConfigChange", e, _dateLastConfigChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastSwitchChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastSwitchChange
        {
            get
            {
                return this._dateLastSwitchChange;
            }
            set
            {
                if ((this._dateLastSwitchChange != value))
                {
                    Nullable<DateTime> old = this._dateLastSwitchChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastSwitchChangeChanging(e);
                    this.OnPropertyChanging("DateLastSwitchChange", e, _dateLastSwitchChangeAttribute);
                    this._dateLastSwitchChange = value;
                    this.OnDateLastSwitchChangeChanged(e);
                    this.OnPropertyChanged("DateLastSwitchChange", e, _dateLastSwitchChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastRippleControlChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastRippleControlChange
        {
            get
            {
                return this._dateLastRippleControlChange;
            }
            set
            {
                if ((this._dateLastRippleControlChange != value))
                {
                    Nullable<DateTime> old = this._dateLastRippleControlChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastRippleControlChangeChanging(e);
                    this.OnPropertyChanging("DateLastRippleControlChange", e, _dateLastRippleControlChangeAttribute);
                    this._dateLastRippleControlChange = value;
                    this.OnDateLastRippleControlChangeChanged(e);
                    this.OnPropertyChanged("DateLastRippleControlChange", e, _dateLastRippleControlChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StatusSecuritySwitches property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public string StatusSecuritySwitches
        {
            get
            {
                return this._statusSecuritySwitches;
            }
            set
            {
                if ((this._statusSecuritySwitches != value))
                {
                    string old = this._statusSecuritySwitches;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusSecuritySwitchesChanging(e);
                    this.OnPropertyChanging("StatusSecuritySwitches", e, _statusSecuritySwitchesAttribute);
                    this._statusSecuritySwitches = value;
                    this.OnStatusSecuritySwitchesChanged(e);
                    this.OnPropertyChanged("StatusSecuritySwitches", e, _statusSecuritySwitchesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastCalibration property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastCalibration
        {
            get
            {
                return this._dateLastCalibration;
            }
            set
            {
                if ((this._dateLastCalibration != value))
                {
                    Nullable<DateTime> old = this._dateLastCalibration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastCalibrationChanging(e);
                    this.OnPropertyChanging("DateLastCalibration", e, _dateLastCalibrationAttribute);
                    this._dateLastCalibration = value;
                    this.OnDateLastCalibrationChanged(e);
                    this.OnPropertyChanged("DateLastCalibration", e, _dateLastCalibrationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateNextConfig property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateNextConfig
        {
            get
            {
                return this._dateNextConfig;
            }
            set
            {
                if ((this._dateNextConfig != value))
                {
                    Nullable<DateTime> old = this._dateNextConfig;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateNextConfigChanging(e);
                    this.OnPropertyChanging("DateNextConfig", e, _dateNextConfigAttribute);
                    this._dateNextConfig = value;
                    this.OnDateNextConfigChanged(e);
                    this.OnPropertyChanged("DateNextConfig", e, _dateNextConfigAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateActivationPassivCalendar property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateActivationPassivCalendar
        {
            get
            {
                return this._dateActivationPassivCalendar;
            }
            set
            {
                if ((this._dateActivationPassivCalendar != value))
                {
                    Nullable<DateTime> old = this._dateActivationPassivCalendar;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateActivationPassivCalendarChanging(e);
                    this.OnPropertyChanging("DateActivationPassivCalendar", e, _dateActivationPassivCalendarAttribute);
                    this._dateActivationPassivCalendar = value;
                    this.OnDateActivationPassivCalendarChanged(e);
                    this.OnPropertyChanged("DateActivationPassivCalendar", e, _dateActivationPassivCalendarAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NumberProtectedConfigChanges property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> NumberProtectedConfigChanges
        {
            get
            {
                return this._numberProtectedConfigChanges;
            }
            set
            {
                if ((this._numberProtectedConfigChanges != value))
                {
                    Nullable<int> old = this._numberProtectedConfigChanges;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberProtectedConfigChangesChanging(e);
                    this.OnPropertyChanging("NumberProtectedConfigChanges", e, _numberProtectedConfigChangesAttribute);
                    this._numberProtectedConfigChanges = value;
                    this.OnNumberProtectedConfigChangesChanged(e);
                    this.OnPropertyChanged("NumberProtectedConfigChanges", e, _numberProtectedConfigChangesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastProtectedConfigChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastProtectedConfigChange
        {
            get
            {
                return this._dateLastProtectedConfigChange;
            }
            set
            {
                if ((this._dateLastProtectedConfigChange != value))
                {
                    Nullable<DateTime> old = this._dateLastProtectedConfigChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastProtectedConfigChangeChanging(e);
                    this.OnPropertyChanging("DateLastProtectedConfigChange", e, _dateLastProtectedConfigChangeAttribute);
                    this._dateLastProtectedConfigChange = value;
                    this.OnDateLastProtectedConfigChangeChanged(e);
                    this.OnPropertyChanged("DateLastProtectedConfigChange", e, _dateLastProtectedConfigChangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastClockSynch property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastClockSynch
        {
            get
            {
                return this._dateLastClockSynch;
            }
            set
            {
                if ((this._dateLastClockSynch != value))
                {
                    Nullable<DateTime> old = this._dateLastClockSynch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastClockSynchChanging(e);
                    this.OnPropertyChanging("DateLastClockSynch", e, _dateLastClockSynchAttribute);
                    this._dateLastClockSynch = value;
                    this.OnDateLastClockSynchChanged(e);
                    this.OnPropertyChanged("DateLastClockSynch", e, _dateLastClockSynchAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DateLastFirmwareActivation property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<DateTime> DateLastFirmwareActivation
        {
            get
            {
                return this._dateLastFirmwareActivation;
            }
            set
            {
                if ((this._dateLastFirmwareActivation != value))
                {
                    Nullable<DateTime> old = this._dateLastFirmwareActivation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateLastFirmwareActivationChanging(e);
                    this.OnPropertyChanging("DateLastFirmwareActivation", e, _dateLastFirmwareActivationAttribute);
                    this._dateLastFirmwareActivation = value;
                    this.OnDateLastFirmwareActivationChanged(e);
                    this.OnPropertyChanged("DateLastFirmwareActivation", e, _dateLastFirmwareActivationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ParameterChangesObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the NumberConfigProgramChanges property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanged;
        
        /// <summary>
        /// Gets fired before the NumberConfigProgramChanges property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastConfigChange property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastConfigChange property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastSwitchChange property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastSwitchChange property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastRippleControlChange property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastRippleControlChange property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanging;
        
        /// <summary>
        /// Gets fired when the StatusSecuritySwitches property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanged;
        
        /// <summary>
        /// Gets fired before the StatusSecuritySwitches property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastCalibration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastCalibrationChanged;
        
        /// <summary>
        /// Gets fired before the DateLastCalibration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastCalibrationChanging;
        
        /// <summary>
        /// Gets fired when the DateNextConfig property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateNextConfigChanged;
        
        /// <summary>
        /// Gets fired before the DateNextConfig property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateNextConfigChanging;
        
        /// <summary>
        /// Gets fired when the DateActivationPassivCalendar property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanged;
        
        /// <summary>
        /// Gets fired before the DateActivationPassivCalendar property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanging;
        
        /// <summary>
        /// Gets fired when the NumberProtectedConfigChanges property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanged;
        
        /// <summary>
        /// Gets fired before the NumberProtectedConfigChanges property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastProtectedConfigChange property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastProtectedConfigChange property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastClockSynch property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastClockSynchChanged;
        
        /// <summary>
        /// Gets fired before the DateLastClockSynch property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastClockSynchChanging;
        
        /// <summary>
        /// Gets fired when the DateLastFirmwareActivation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanged;
        
        /// <summary>
        /// Gets fired before the DateLastFirmwareActivation property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanging;
        
        private static ITypedElement RetrieveNumberConfigProgramChangesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("NumberConfigProgramChanges")));
        }
        
        /// <summary>
        /// Raises the NumberConfigProgramChangesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberConfigProgramChangesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberConfigProgramChangesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberConfigProgramChangesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberConfigProgramChangesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberConfigProgramChangesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastConfigChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastConfigChange")));
        }
        
        /// <summary>
        /// Raises the DateLastConfigChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastConfigChangeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastConfigChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastConfigChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastConfigChangeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastConfigChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastSwitchChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastSwitchChange")));
        }
        
        /// <summary>
        /// Raises the DateLastSwitchChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastSwitchChangeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastSwitchChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastSwitchChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastSwitchChangeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastSwitchChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastRippleControlChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastRippleControlChange")));
        }
        
        /// <summary>
        /// Raises the DateLastRippleControlChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastRippleControlChangeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastRippleControlChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastRippleControlChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastRippleControlChangeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastRippleControlChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusSecuritySwitchesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("StatusSecuritySwitches")));
        }
        
        /// <summary>
        /// Raises the StatusSecuritySwitchesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusSecuritySwitchesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StatusSecuritySwitchesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusSecuritySwitchesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusSecuritySwitchesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.StatusSecuritySwitchesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastCalibrationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastCalibration")));
        }
        
        /// <summary>
        /// Raises the DateLastCalibrationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastCalibrationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastCalibrationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastCalibrationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastCalibrationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastCalibrationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateNextConfigAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateNextConfig")));
        }
        
        /// <summary>
        /// Raises the DateNextConfigChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateNextConfigChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateNextConfigChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateNextConfigChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateNextConfigChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateNextConfigChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateActivationPassivCalendarAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateActivationPassivCalendar")));
        }
        
        /// <summary>
        /// Raises the DateActivationPassivCalendarChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateActivationPassivCalendarChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateActivationPassivCalendarChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateActivationPassivCalendarChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateActivationPassivCalendarChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateActivationPassivCalendarChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberProtectedConfigChangesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("NumberProtectedConfigChanges")));
        }
        
        /// <summary>
        /// Raises the NumberProtectedConfigChangesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberProtectedConfigChangesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberProtectedConfigChangesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberProtectedConfigChangesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberProtectedConfigChangesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberProtectedConfigChangesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastProtectedConfigChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastProtectedConfigChange")));
        }
        
        /// <summary>
        /// Raises the DateLastProtectedConfigChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastProtectedConfigChangeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastProtectedConfigChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastProtectedConfigChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastProtectedConfigChangeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastProtectedConfigChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastClockSynchAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastClockSynch")));
        }
        
        /// <summary>
        /// Raises the DateLastClockSynchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastClockSynchChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastClockSynchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastClockSynchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastClockSynchChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastClockSynchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateLastFirmwareActivationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ParameterChangesObject.ClassInstance)).Resolve("DateLastFirmwareActivation")));
        }
        
        /// <summary>
        /// Raises the DateLastFirmwareActivationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastFirmwareActivationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastFirmwareActivationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateLastFirmwareActivationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateLastFirmwareActivationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateLastFirmwareActivationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NUMBERCONFIGPROGRAMCHANGES"))
            {
                return this.NumberConfigProgramChanges;
            }
            if ((attribute == "DATELASTCONFIGCHANGE"))
            {
                return this.DateLastConfigChange;
            }
            if ((attribute == "DATELASTSWITCHCHANGE"))
            {
                return this.DateLastSwitchChange;
            }
            if ((attribute == "DATELASTRIPPLECONTROLCHANGE"))
            {
                return this.DateLastRippleControlChange;
            }
            if ((attribute == "STATUSSECURITYSWITCHES"))
            {
                return this.StatusSecuritySwitches;
            }
            if ((attribute == "DATELASTCALIBRATION"))
            {
                return this.DateLastCalibration;
            }
            if ((attribute == "DATENEXTCONFIG"))
            {
                return this.DateNextConfig;
            }
            if ((attribute == "DATEACTIVATIONPASSIVCALENDAR"))
            {
                return this.DateActivationPassivCalendar;
            }
            if ((attribute == "NUMBERPROTECTEDCONFIGCHANGES"))
            {
                return this.NumberProtectedConfigChanges;
            }
            if ((attribute == "DATELASTPROTECTEDCONFIGCHANGE"))
            {
                return this.DateLastProtectedConfigChange;
            }
            if ((attribute == "DATELASTCLOCKSYNCH"))
            {
                return this.DateLastClockSynch;
            }
            if ((attribute == "DATELASTFIRMWAREACTIVATION"))
            {
                return this.DateLastFirmwareActivation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NUMBERCONFIGPROGRAMCHANGES"))
            {
                this.NumberConfigProgramChanges = ((int)(value));
                return;
            }
            if ((feature == "DATELASTCONFIGCHANGE"))
            {
                this.DateLastConfigChange = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATELASTSWITCHCHANGE"))
            {
                this.DateLastSwitchChange = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATELASTRIPPLECONTROLCHANGE"))
            {
                this.DateLastRippleControlChange = ((System.DateTime)(value));
                return;
            }
            if ((feature == "STATUSSECURITYSWITCHES"))
            {
                this.StatusSecuritySwitches = ((string)(value));
                return;
            }
            if ((feature == "DATELASTCALIBRATION"))
            {
                this.DateLastCalibration = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATENEXTCONFIG"))
            {
                this.DateNextConfig = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATEACTIVATIONPASSIVCALENDAR"))
            {
                this.DateActivationPassivCalendar = ((System.DateTime)(value));
                return;
            }
            if ((feature == "NUMBERPROTECTEDCONFIGCHANGES"))
            {
                this.NumberProtectedConfigChanges = ((int)(value));
                return;
            }
            if ((feature == "DATELASTPROTECTEDCONFIGCHANGE"))
            {
                this.DateLastProtectedConfigChange = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATELASTCLOCKSYNCH"))
            {
                this.DateLastClockSynch = ((System.DateTime)(value));
                return;
            }
            if ((feature == "DATELASTFIRMWAREACTIVATION"))
            {
                this.DateLastFirmwareActivation = ((System.DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NUMBERCONFIGPROGRAMCHANGES"))
            {
                return Observable.Box(new NumberConfigProgramChangesProxy(this));
            }
            if ((attribute == "DATELASTCONFIGCHANGE"))
            {
                return Observable.Box(new DateLastConfigChangeProxy(this));
            }
            if ((attribute == "DATELASTSWITCHCHANGE"))
            {
                return Observable.Box(new DateLastSwitchChangeProxy(this));
            }
            if ((attribute == "DATELASTRIPPLECONTROLCHANGE"))
            {
                return Observable.Box(new DateLastRippleControlChangeProxy(this));
            }
            if ((attribute == "STATUSSECURITYSWITCHES"))
            {
                return new StatusSecuritySwitchesProxy(this);
            }
            if ((attribute == "DATELASTCALIBRATION"))
            {
                return Observable.Box(new DateLastCalibrationProxy(this));
            }
            if ((attribute == "DATENEXTCONFIG"))
            {
                return Observable.Box(new DateNextConfigProxy(this));
            }
            if ((attribute == "DATEACTIVATIONPASSIVCALENDAR"))
            {
                return Observable.Box(new DateActivationPassivCalendarProxy(this));
            }
            if ((attribute == "NUMBERPROTECTEDCONFIGCHANGES"))
            {
                return Observable.Box(new NumberProtectedConfigChangesProxy(this));
            }
            if ((attribute == "DATELASTPROTECTEDCONFIGCHANGE"))
            {
                return Observable.Box(new DateLastProtectedConfigChangeProxy(this));
            }
            if ((attribute == "DATELASTCLOCKSYNCH"))
            {
                return Observable.Box(new DateLastClockSynchProxy(this));
            }
            if ((attribute == "DATELASTFIRMWAREACTIVATION"))
            {
                return Observable.Box(new DateLastFirmwareActivationProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ParameterChangesObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberConfigProgramChanges property
        /// </summary>
        private sealed class NumberConfigProgramChangesProxy : ModelPropertyChange<IParameterChangesObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberConfigProgramChangesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "NumberConfigProgramChanges")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberConfigProgramChanges;
                }
                set
                {
                    this.ModelElement.NumberConfigProgramChanges = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastConfigChange property
        /// </summary>
        private sealed class DateLastConfigChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastConfigChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastConfigChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastConfigChange;
                }
                set
                {
                    this.ModelElement.DateLastConfigChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastSwitchChange property
        /// </summary>
        private sealed class DateLastSwitchChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastSwitchChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastSwitchChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastSwitchChange;
                }
                set
                {
                    this.ModelElement.DateLastSwitchChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastRippleControlChange property
        /// </summary>
        private sealed class DateLastRippleControlChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastRippleControlChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastRippleControlChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastRippleControlChange;
                }
                set
                {
                    this.ModelElement.DateLastRippleControlChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StatusSecuritySwitches property
        /// </summary>
        private sealed class StatusSecuritySwitchesProxy : ModelPropertyChange<IParameterChangesObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusSecuritySwitchesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "StatusSecuritySwitches")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StatusSecuritySwitches;
                }
                set
                {
                    this.ModelElement.StatusSecuritySwitches = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastCalibration property
        /// </summary>
        private sealed class DateLastCalibrationProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastCalibrationProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastCalibration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastCalibration;
                }
                set
                {
                    this.ModelElement.DateLastCalibration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateNextConfig property
        /// </summary>
        private sealed class DateNextConfigProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateNextConfigProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateNextConfig")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateNextConfig;
                }
                set
                {
                    this.ModelElement.DateNextConfig = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateActivationPassivCalendar property
        /// </summary>
        private sealed class DateActivationPassivCalendarProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateActivationPassivCalendarProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateActivationPassivCalendar")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateActivationPassivCalendar;
                }
                set
                {
                    this.ModelElement.DateActivationPassivCalendar = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumberProtectedConfigChanges property
        /// </summary>
        private sealed class NumberProtectedConfigChangesProxy : ModelPropertyChange<IParameterChangesObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberProtectedConfigChangesProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "NumberProtectedConfigChanges")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumberProtectedConfigChanges;
                }
                set
                {
                    this.ModelElement.NumberProtectedConfigChanges = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastProtectedConfigChange property
        /// </summary>
        private sealed class DateLastProtectedConfigChangeProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastProtectedConfigChangeProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastProtectedConfigChange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastProtectedConfigChange;
                }
                set
                {
                    this.ModelElement.DateLastProtectedConfigChange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastClockSynch property
        /// </summary>
        private sealed class DateLastClockSynchProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastClockSynchProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastClockSynch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastClockSynch;
                }
                set
                {
                    this.ModelElement.DateLastClockSynch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DateLastFirmwareActivation property
        /// </summary>
        private sealed class DateLastFirmwareActivationProxy : ModelPropertyChange<IParameterChangesObject, Nullable<System.DateTime>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateLastFirmwareActivationProxy(IParameterChangesObject modelElement) : 
                    base(modelElement, "DateLastFirmwareActivation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<System.DateTime> Value
            {
                get
                {
                    return this.ModelElement.DateLastFirmwareActivation;
                }
                set
                {
                    this.ModelElement.DateLastFirmwareActivation = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the I_O_control_signal_objects_contentsmanufacturerspecific class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmanufacturerspecific")]
    public partial class I_O_control_signal_objects_contentsmanufacturerspecific : Data, II_O_control_signal_objects_contentsmanufacturerspecific, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("I_O_control_signal_objects_contentsmanufacturerspecific")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmanufacturerspecific")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.I_O_control_signal_objects_contentsmanufacturerspecific.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmanufacturerspecific")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<II_O_control_signal_objects_contentsmanufacturerspecific, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(II_O_control_signal_objects_contentsmanufacturerspecific modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the I_O_control_signal_objects_contentsmappedtoareferencetable class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmappedtoareferencetab" +
        "le")]
    public partial class I_O_control_signal_objects_contentsmappedtoareferencetable : Statusmapping, II_O_control_signal_objects_contentsmappedtoareferencetable, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmappedtoareferencetab" +
                            "le")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmappedtoareferencetab" +
                        "le")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the I_O_control_signal_objects_global class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_global")]
    public partial class I_O_control_signal_objects_global : Profilegeneric, II_O_control_signal_objects_global, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_global")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/I_O_control_signal_objects_global")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Disconnectcontrolobject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Disconnectcontrolobject")]
    public partial class Disconnectcontrolobject : TemporaryGeneratedCode.COSEM.InterfaceClasses.DisconnectControl, IDisconnectcontrolobject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Disconnectcontrolobject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Disconnectcontrolobject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GeneralpurposeArbitrator class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GeneralpurposeArbitrator")]
    public partial class GeneralpurposeArbitrator : Arbitrator, IGeneralpurposeArbitrator, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GeneralpurposeArbitrator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GeneralpurposeArbitrator")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IOControlSignalsManufacturer class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsManufacturer")]
    public partial class IOControlSignalsManufacturer : Data, IIOControlSignalsManufacturer, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("IOControlSignalsManufacturer")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsManufacturer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.IOControlSignalsManufacturer.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsManufacturer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IIOControlSignalsManufacturer, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IIOControlSignalsManufacturer modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the IOControlSignalsMapped class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsMapped")]
    public partial class IOControlSignalsMapped : Statusmapping, IIOControlSignalsMapped, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsMapped")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsMapped")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IOControlSignalsGlobal class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsGlobal")]
    public partial class IOControlSignalsGlobal : Profilegeneric, IIOControlSignalsGlobal, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsGlobal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/IOControlSignalsGlobal")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the DisconnectControlObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControlObject")]
    public partial class DisconnectControlObject : TemporaryGeneratedCode.COSEM.InterfaceClasses.DisconnectControl, IDisconnectControlObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControlObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/DisconnectControlObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the GeneralPurposeArbitrator class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GeneralPurposeArbitrator")]
    public partial class GeneralPurposeArbitrator : Arbitrator, IGeneralPurposeArbitrator, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GeneralPurposeArbitrator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/GeneralPurposeArbitrator")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalControlManu class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlManu")]
    public partial class InternalControlManu : Data, IInternalControlManu, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("InternalControlManu")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlManu")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InternalControlManu.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlManu")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IInternalControlManu, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IInternalControlManu modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalControlMapped class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlMapped")]
    public partial class InternalControlMapped : Statusmapping, IInternalControlMapped, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlMapped")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlMapped")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalControlGlobal class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlGlobal")]
    public partial class InternalControlGlobal : Profilegeneric, IInternalControlGlobal, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlGlobal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalControlGlobal")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalOperatingStatusManu class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusManu")]
    public partial class InternalOperatingStatusManu : Data, IInternalOperatingStatusManu, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusManu")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusManu")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalOperatingStatusMapped class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusMapped")]
    public partial class InternalOperatingStatusMapped : Statusmapping, IInternalOperatingStatusMapped, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusMapped")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusMapped")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the InternalOperatingStatusGlobal class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusGlobal")]
    public partial class InternalOperatingStatusGlobal : Registertable, IInternalOperatingStatusGlobal, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusGlobal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InternalOperatingStatusGlobal")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the StatusRegisterManu class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegisterManu")]
    public partial class StatusRegisterManu : Data, IStatusRegisterManu, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegisterManu")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegisterManu")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the StatusRegisterMapped class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegisterMapped")]
    public partial class StatusRegisterMapped : Statusmapping, IStatusRegisterMapped, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegisterMapped")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegisterMapped")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ErrorRegisterObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorRegisterObject")]
    public partial class ErrorRegisterObject : Data, IErrorRegisterObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ErrorRegisterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorRegisterObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ErrorRegisterObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorRegisterObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IErrorRegisterObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IErrorRegisterObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ErrorProfileObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorProfileObject")]
    public partial class ErrorProfileObject : Profilegeneric, IErrorProfileObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorProfileObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorProfileObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ErrorTableObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorTableObject")]
    public partial class ErrorTableObject : Registertable, IErrorTableObject, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorTableObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ErrorTableObject")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the AlarmRegisterObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmRegisterObject")]
    public partial class AlarmRegisterObject : Data, IAlarmRegisterObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmRegisterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmRegisterObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.AlarmRegisterObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmRegisterObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAlarmRegisterObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAlarmRegisterObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the AlarmFilterObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmFilterObject")]
    public partial class AlarmFilterObject : Data, IAlarmFilterObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmFilterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmFilterObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.AlarmFilterObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmFilterObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAlarmFilterObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAlarmFilterObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the AlarmDescriptorObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmDescriptorObject")]
    public partial class AlarmDescriptorObject : Data, IAlarmDescriptorObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmDescriptorObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmDescriptorObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.AlarmDescriptorObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/AlarmDescriptorObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAlarmDescriptorObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAlarmDescriptorObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the EventLog class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventLog")]
    public partial class EventLog : Profilegeneric, IEventLog, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventLog")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventLog")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityID class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityID")]
    public partial class ElectricityID : Data, IElectricityID, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ElectricityID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityID")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityID.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityID")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IElectricityID, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IElectricityID modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityProgramEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityProgramEntries")]
    public partial class ElectricityProgramEntries : Data, IElectricityProgramEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Activefirmwareidentifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _activefirmwareidentifier;
        
        private static Lazy<ITypedElement> _activefirmwareidentifierAttribute = new Lazy<ITypedElement>(RetrieveActivefirmwareidentifierAttribute);
        
        /// <summary>
        /// The backing field for the Parameterrecordnumber property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _parameterrecordnumber;
        
        private static Lazy<ITypedElement> _parameterrecordnumberAttribute = new Lazy<ITypedElement>(RetrieveParameterrecordnumberAttribute);
        
        /// <summary>
        /// The backing field for the Timeswitchprogramnumber property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _timeswitchprogramnumber;
        
        private static Lazy<ITypedElement> _timeswitchprogramnumberAttribute = new Lazy<ITypedElement>(RetrieveTimeswitchprogramnumberAttribute);
        
        /// <summary>
        /// The backing field for the RCRprogramnumber property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _rCRprogramnumber;
        
        private static Lazy<ITypedElement> _rCRprogramnumberAttribute = new Lazy<ITypedElement>(RetrieveRCRprogramnumberAttribute);
        
        /// <summary>
        /// The backing field for the MeterconnectiondiagramID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _meterconnectiondiagramID;
        
        private static Lazy<ITypedElement> _meterconnectiondiagramIDAttribute = new Lazy<ITypedElement>(RetrieveMeterconnectiondiagramIDAttribute);
        
        /// <summary>
        /// The backing field for the Passivecalendarname property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _passivecalendarname;
        
        private static Lazy<ITypedElement> _passivecalendarnameAttribute = new Lazy<ITypedElement>(RetrievePassivecalendarnameAttribute);
        
        /// <summary>
        /// The backing field for the Activefirmwaresignature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _activefirmwaresignature;
        
        private static Lazy<ITypedElement> _activefirmwaresignatureAttribute = new Lazy<ITypedElement>(RetrieveActivefirmwaresignatureAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Activefirmwareidentifier property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string Activefirmwareidentifier
        {
            get
            {
                return this._activefirmwareidentifier;
            }
            set
            {
                if ((this._activefirmwareidentifier != value))
                {
                    string old = this._activefirmwareidentifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivefirmwareidentifierChanging(e);
                    this.OnPropertyChanging("Activefirmwareidentifier", e, _activefirmwareidentifierAttribute);
                    this._activefirmwareidentifier = value;
                    this.OnActivefirmwareidentifierChanged(e);
                    this.OnPropertyChanged("Activefirmwareidentifier", e, _activefirmwareidentifierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Parameterrecordnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Parameterrecordnumber
        {
            get
            {
                return this._parameterrecordnumber;
            }
            set
            {
                if ((this._parameterrecordnumber != value))
                {
                    Nullable<int> old = this._parameterrecordnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParameterrecordnumberChanging(e);
                    this.OnPropertyChanging("Parameterrecordnumber", e, _parameterrecordnumberAttribute);
                    this._parameterrecordnumber = value;
                    this.OnParameterrecordnumberChanged(e);
                    this.OnPropertyChanged("Parameterrecordnumber", e, _parameterrecordnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Timeswitchprogramnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Timeswitchprogramnumber
        {
            get
            {
                return this._timeswitchprogramnumber;
            }
            set
            {
                if ((this._timeswitchprogramnumber != value))
                {
                    Nullable<int> old = this._timeswitchprogramnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeswitchprogramnumberChanging(e);
                    this.OnPropertyChanging("Timeswitchprogramnumber", e, _timeswitchprogramnumberAttribute);
                    this._timeswitchprogramnumber = value;
                    this.OnTimeswitchprogramnumberChanged(e);
                    this.OnPropertyChanged("Timeswitchprogramnumber", e, _timeswitchprogramnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RCRprogramnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> RCRprogramnumber
        {
            get
            {
                return this._rCRprogramnumber;
            }
            set
            {
                if ((this._rCRprogramnumber != value))
                {
                    Nullable<int> old = this._rCRprogramnumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRCRprogramnumberChanging(e);
                    this.OnPropertyChanging("RCRprogramnumber", e, _rCRprogramnumberAttribute);
                    this._rCRprogramnumber = value;
                    this.OnRCRprogramnumberChanged(e);
                    this.OnPropertyChanged("RCRprogramnumber", e, _rCRprogramnumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeterconnectiondiagramID property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string MeterconnectiondiagramID
        {
            get
            {
                return this._meterconnectiondiagramID;
            }
            set
            {
                if ((this._meterconnectiondiagramID != value))
                {
                    string old = this._meterconnectiondiagramID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterconnectiondiagramIDChanging(e);
                    this.OnPropertyChanging("MeterconnectiondiagramID", e, _meterconnectiondiagramIDAttribute);
                    this._meterconnectiondiagramID = value;
                    this.OnMeterconnectiondiagramIDChanged(e);
                    this.OnPropertyChanged("MeterconnectiondiagramID", e, _meterconnectiondiagramIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Passivecalendarname property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string Passivecalendarname
        {
            get
            {
                return this._passivecalendarname;
            }
            set
            {
                if ((this._passivecalendarname != value))
                {
                    string old = this._passivecalendarname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassivecalendarnameChanging(e);
                    this.OnPropertyChanging("Passivecalendarname", e, _passivecalendarnameAttribute);
                    this._passivecalendarname = value;
                    this.OnPassivecalendarnameChanged(e);
                    this.OnPropertyChanged("Passivecalendarname", e, _passivecalendarnameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Activefirmwaresignature property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        public string Activefirmwaresignature
        {
            get
            {
                return this._activefirmwaresignature;
            }
            set
            {
                if ((this._activefirmwaresignature != value))
                {
                    string old = this._activefirmwaresignature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivefirmwaresignatureChanging(e);
                    this.OnPropertyChanging("Activefirmwaresignature", e, _activefirmwaresignatureAttribute);
                    this._activefirmwaresignature = value;
                    this.OnActivefirmwaresignatureChanged(e);
                    this.OnPropertyChanged("Activefirmwaresignature", e, _activefirmwaresignatureAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityProgramEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Activefirmwareidentifier property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanged;
        
        /// <summary>
        /// Gets fired before the Activefirmwareidentifier property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanging;
        
        /// <summary>
        /// Gets fired when the Parameterrecordnumber property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanged;
        
        /// <summary>
        /// Gets fired before the Parameterrecordnumber property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanging;
        
        /// <summary>
        /// Gets fired when the Timeswitchprogramnumber property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the Timeswitchprogramnumber property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the RCRprogramnumber property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RCRprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the RCRprogramnumber property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RCRprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the MeterconnectiondiagramID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanged;
        
        /// <summary>
        /// Gets fired before the MeterconnectiondiagramID property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanging;
        
        /// <summary>
        /// Gets fired when the Passivecalendarname property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PassivecalendarnameChanged;
        
        /// <summary>
        /// Gets fired before the Passivecalendarname property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PassivecalendarnameChanging;
        
        /// <summary>
        /// Gets fired when the Activefirmwaresignature property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanged;
        
        /// <summary>
        /// Gets fired before the Activefirmwaresignature property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanging;
        
        private static ITypedElement RetrieveActivefirmwareidentifierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("Activefirmwareidentifier")));
        }
        
        /// <summary>
        /// Raises the ActivefirmwareidentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwareidentifierChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwareidentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivefirmwareidentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwareidentifierChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwareidentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveParameterrecordnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("Parameterrecordnumber")));
        }
        
        /// <summary>
        /// Raises the ParameterrecordnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParameterrecordnumberChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ParameterrecordnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParameterrecordnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParameterrecordnumberChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ParameterrecordnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeswitchprogramnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("Timeswitchprogramnumber")));
        }
        
        /// <summary>
        /// Raises the TimeswitchprogramnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeswitchprogramnumberChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeswitchprogramnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeswitchprogramnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeswitchprogramnumberChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeswitchprogramnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRCRprogramnumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("RCRprogramnumber")));
        }
        
        /// <summary>
        /// Raises the RCRprogramnumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRCRprogramnumberChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RCRprogramnumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RCRprogramnumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRCRprogramnumberChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RCRprogramnumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeterconnectiondiagramIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("MeterconnectiondiagramID")));
        }
        
        /// <summary>
        /// Raises the MeterconnectiondiagramIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterconnectiondiagramIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeterconnectiondiagramIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterconnectiondiagramIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterconnectiondiagramIDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MeterconnectiondiagramIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePassivecalendarnameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("Passivecalendarname")));
        }
        
        /// <summary>
        /// Raises the PassivecalendarnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassivecalendarnameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PassivecalendarnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PassivecalendarnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassivecalendarnameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PassivecalendarnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivefirmwaresignatureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityProgramEntries.ClassInstance)).Resolve("Activefirmwaresignature")));
        }
        
        /// <summary>
        /// Raises the ActivefirmwaresignatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwaresignatureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwaresignatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivefirmwaresignatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivefirmwaresignatureChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivefirmwaresignatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                return this.Activefirmwareidentifier;
            }
            if ((attribute == "PARAMETERRECORDNUMBER"))
            {
                return this.Parameterrecordnumber;
            }
            if ((attribute == "TIMESWITCHPROGRAMNUMBER"))
            {
                return this.Timeswitchprogramnumber;
            }
            if ((attribute == "RCRPROGRAMNUMBER"))
            {
                return this.RCRprogramnumber;
            }
            if ((attribute == "METERCONNECTIONDIAGRAMID"))
            {
                return this.MeterconnectiondiagramID;
            }
            if ((attribute == "PASSIVECALENDARNAME"))
            {
                return this.Passivecalendarname;
            }
            if ((attribute == "ACTIVEFIRMWARESIGNATURE"))
            {
                return this.Activefirmwaresignature;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                this.Activefirmwareidentifier = ((string)(value));
                return;
            }
            if ((feature == "PARAMETERRECORDNUMBER"))
            {
                this.Parameterrecordnumber = ((int)(value));
                return;
            }
            if ((feature == "TIMESWITCHPROGRAMNUMBER"))
            {
                this.Timeswitchprogramnumber = ((int)(value));
                return;
            }
            if ((feature == "RCRPROGRAMNUMBER"))
            {
                this.RCRprogramnumber = ((int)(value));
                return;
            }
            if ((feature == "METERCONNECTIONDIAGRAMID"))
            {
                this.MeterconnectiondiagramID = ((string)(value));
                return;
            }
            if ((feature == "PASSIVECALENDARNAME"))
            {
                this.Passivecalendarname = ((string)(value));
                return;
            }
            if ((feature == "ACTIVEFIRMWARESIGNATURE"))
            {
                this.Activefirmwaresignature = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVEFIRMWAREIDENTIFIER"))
            {
                return new ActivefirmwareidentifierProxy(this);
            }
            if ((attribute == "PARAMETERRECORDNUMBER"))
            {
                return Observable.Box(new ParameterrecordnumberProxy(this));
            }
            if ((attribute == "TIMESWITCHPROGRAMNUMBER"))
            {
                return Observable.Box(new TimeswitchprogramnumberProxy(this));
            }
            if ((attribute == "RCRPROGRAMNUMBER"))
            {
                return Observable.Box(new RCRprogramnumberProxy(this));
            }
            if ((attribute == "METERCONNECTIONDIAGRAMID"))
            {
                return new MeterconnectiondiagramIDProxy(this);
            }
            if ((attribute == "PASSIVECALENDARNAME"))
            {
                return new PassivecalendarnameProxy(this);
            }
            if ((attribute == "ACTIVEFIRMWARESIGNATURE"))
            {
                return new ActivefirmwaresignatureProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityProgramEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activefirmwareidentifier property
        /// </summary>
        private sealed class ActivefirmwareidentifierProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivefirmwareidentifierProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Activefirmwareidentifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Activefirmwareidentifier;
                }
                set
                {
                    this.ModelElement.Activefirmwareidentifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Parameterrecordnumber property
        /// </summary>
        private sealed class ParameterrecordnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParameterrecordnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Parameterrecordnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Parameterrecordnumber;
                }
                set
                {
                    this.ModelElement.Parameterrecordnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Timeswitchprogramnumber property
        /// </summary>
        private sealed class TimeswitchprogramnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeswitchprogramnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Timeswitchprogramnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Timeswitchprogramnumber;
                }
                set
                {
                    this.ModelElement.Timeswitchprogramnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RCRprogramnumber property
        /// </summary>
        private sealed class RCRprogramnumberProxy : ModelPropertyChange<IElectricityProgramEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RCRprogramnumberProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "RCRprogramnumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.RCRprogramnumber;
                }
                set
                {
                    this.ModelElement.RCRprogramnumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterconnectiondiagramID property
        /// </summary>
        private sealed class MeterconnectiondiagramIDProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterconnectiondiagramIDProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "MeterconnectiondiagramID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MeterconnectiondiagramID;
                }
                set
                {
                    this.ModelElement.MeterconnectiondiagramID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Passivecalendarname property
        /// </summary>
        private sealed class PassivecalendarnameProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PassivecalendarnameProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Passivecalendarname")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Passivecalendarname;
                }
                set
                {
                    this.ModelElement.Passivecalendarname = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activefirmwaresignature property
        /// </summary>
        private sealed class ActivefirmwaresignatureProxy : ModelPropertyChange<IElectricityProgramEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivefirmwaresignatureProxy(IElectricityProgramEntries modelElement) : 
                    base(modelElement, "Activefirmwaresignature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Activefirmwaresignature;
                }
                set
                {
                    this.ModelElement.Activefirmwaresignature = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the OutputPulseValues_constants class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OutputPulseValues_constants")]
    public partial class OutputPulseValues_constants : Data, IOutputPulseValues_constants, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveenergymetrologicalLED property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activeenergymetrologicalLED;
        
        private static Lazy<ITypedElement> _activeenergymetrologicalLEDAttribute = new Lazy<ITypedElement>(RetrieveActiveenergymetrologicalLEDAttribute);
        
        /// <summary>
        /// The backing field for the ReactiveenergymetrologicalLED property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactiveenergymetrologicalLED;
        
        private static Lazy<ITypedElement> _reactiveenergymetrologicalLEDAttribute = new Lazy<ITypedElement>(RetrieveReactiveenergymetrologicalLEDAttribute);
        
        /// <summary>
        /// The backing field for the ApparentenergymetrologicalLED property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentenergymetrologicalLED;
        
        private static Lazy<ITypedElement> _apparentenergymetrologicalLEDAttribute = new Lazy<ITypedElement>(RetrieveApparentenergymetrologicalLEDAttribute);
        
        /// <summary>
        /// The backing field for the Activeenergyoutputpulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activeenergyoutputpulse;
        
        private static Lazy<ITypedElement> _activeenergyoutputpulseAttribute = new Lazy<ITypedElement>(RetrieveActiveenergyoutputpulseAttribute);
        
        /// <summary>
        /// The backing field for the Reactiveenergyoutputpulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactiveenergyoutputpulse;
        
        private static Lazy<ITypedElement> _reactiveenergyoutputpulseAttribute = new Lazy<ITypedElement>(RetrieveReactiveenergyoutputpulseAttribute);
        
        /// <summary>
        /// The backing field for the Apparentenergyoutputpulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentenergyoutputpulse;
        
        private static Lazy<ITypedElement> _apparentenergyoutputpulseAttribute = new Lazy<ITypedElement>(RetrieveApparentenergyoutputpulseAttribute);
        
        /// <summary>
        /// The backing field for the Volt_squaredhoursmetrologicalLED property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _volt_squaredhoursmetrologicalLED;
        
        private static Lazy<ITypedElement> _volt_squaredhoursmetrologicalLEDAttribute = new Lazy<ITypedElement>(RetrieveVolt_squaredhoursmetrologicalLEDAttribute);
        
        /// <summary>
        /// The backing field for the Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ampere_squaredhoursmetrologicalLED;
        
        private static Lazy<ITypedElement> _ampere_squaredhoursmetrologicalLEDAttribute = new Lazy<ITypedElement>(RetrieveAmpere_squaredhoursmetrologicalLEDAttribute);
        
        /// <summary>
        /// The backing field for the Volt_squaredhoursoutputpulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _volt_squaredhoursoutputpulse;
        
        private static Lazy<ITypedElement> _volt_squaredhoursoutputpulseAttribute = new Lazy<ITypedElement>(RetrieveVolt_squaredhoursoutputpulseAttribute);
        
        /// <summary>
        /// The backing field for the Ampere_squaredhoursoutputpulse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ampere_squaredhoursoutputpulse;
        
        private static Lazy<ITypedElement> _ampere_squaredhoursoutputpulseAttribute = new Lazy<ITypedElement>(RetrieveAmpere_squaredhoursoutputpulseAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActiveenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActiveenergymetrologicalLED
        {
            get
            {
                return this._activeenergymetrologicalLED;
            }
            set
            {
                if ((this._activeenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._activeenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ActiveenergymetrologicalLED", e, _activeenergymetrologicalLEDAttribute);
                    this._activeenergymetrologicalLED = value;
                    this.OnActiveenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ActiveenergymetrologicalLED", e, _activeenergymetrologicalLEDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactiveenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactiveenergymetrologicalLED
        {
            get
            {
                return this._reactiveenergymetrologicalLED;
            }
            set
            {
                if ((this._reactiveenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._reactiveenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactiveenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ReactiveenergymetrologicalLED", e, _reactiveenergymetrologicalLEDAttribute);
                    this._reactiveenergymetrologicalLED = value;
                    this.OnReactiveenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ReactiveenergymetrologicalLED", e, _reactiveenergymetrologicalLEDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentenergymetrologicalLED
        {
            get
            {
                return this._apparentenergymetrologicalLED;
            }
            set
            {
                if ((this._apparentenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._apparentenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ApparentenergymetrologicalLED", e, _apparentenergymetrologicalLEDAttribute);
                    this._apparentenergymetrologicalLED = value;
                    this.OnApparentenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ApparentenergymetrologicalLED", e, _apparentenergymetrologicalLEDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Activeenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Activeenergyoutputpulse
        {
            get
            {
                return this._activeenergyoutputpulse;
            }
            set
            {
                if ((this._activeenergyoutputpulse != value))
                {
                    Nullable<double> old = this._activeenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Activeenergyoutputpulse", e, _activeenergyoutputpulseAttribute);
                    this._activeenergyoutputpulse = value;
                    this.OnActiveenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Activeenergyoutputpulse", e, _activeenergyoutputpulseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactiveenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactiveenergyoutputpulse
        {
            get
            {
                return this._reactiveenergyoutputpulse;
            }
            set
            {
                if ((this._reactiveenergyoutputpulse != value))
                {
                    Nullable<double> old = this._reactiveenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactiveenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Reactiveenergyoutputpulse", e, _reactiveenergyoutputpulseAttribute);
                    this._reactiveenergyoutputpulse = value;
                    this.OnReactiveenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Reactiveenergyoutputpulse", e, _reactiveenergyoutputpulseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Apparentenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Apparentenergyoutputpulse
        {
            get
            {
                return this._apparentenergyoutputpulse;
            }
            set
            {
                if ((this._apparentenergyoutputpulse != value))
                {
                    Nullable<double> old = this._apparentenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Apparentenergyoutputpulse", e, _apparentenergyoutputpulseAttribute);
                    this._apparentenergyoutputpulse = value;
                    this.OnApparentenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Apparentenergyoutputpulse", e, _apparentenergyoutputpulseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredhoursmetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Volt_squaredhoursmetrologicalLED
        {
            get
            {
                return this._volt_squaredhoursmetrologicalLED;
            }
            set
            {
                if ((this._volt_squaredhoursmetrologicalLED != value))
                {
                    Nullable<double> old = this._volt_squaredhoursmetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredhoursmetrologicalLEDChanging(e);
                    this.OnPropertyChanging("Volt_squaredhoursmetrologicalLED", e, _volt_squaredhoursmetrologicalLEDAttribute);
                    this._volt_squaredhoursmetrologicalLED = value;
                    this.OnVolt_squaredhoursmetrologicalLEDChanged(e);
                    this.OnPropertyChanged("Volt_squaredhoursmetrologicalLED", e, _volt_squaredhoursmetrologicalLEDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ampere_squaredhoursmetrologicalLED
        {
            get
            {
                return this._ampere_squaredhoursmetrologicalLED;
            }
            set
            {
                if ((this._ampere_squaredhoursmetrologicalLED != value))
                {
                    Nullable<double> old = this._ampere_squaredhoursmetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredhoursmetrologicalLEDChanging(e);
                    this.OnPropertyChanging("Ampere_squaredhoursmetrologicalLED", e, _ampere_squaredhoursmetrologicalLEDAttribute);
                    this._ampere_squaredhoursmetrologicalLED = value;
                    this.OnAmpere_squaredhoursmetrologicalLEDChanged(e);
                    this.OnPropertyChanged("Ampere_squaredhoursmetrologicalLED", e, _ampere_squaredhoursmetrologicalLEDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredhoursoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Volt_squaredhoursoutputpulse
        {
            get
            {
                return this._volt_squaredhoursoutputpulse;
            }
            set
            {
                if ((this._volt_squaredhoursoutputpulse != value))
                {
                    Nullable<double> old = this._volt_squaredhoursoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredhoursoutputpulseChanging(e);
                    this.OnPropertyChanging("Volt_squaredhoursoutputpulse", e, _volt_squaredhoursoutputpulseAttribute);
                    this._volt_squaredhoursoutputpulse = value;
                    this.OnVolt_squaredhoursoutputpulseChanged(e);
                    this.OnPropertyChanged("Volt_squaredhoursoutputpulse", e, _volt_squaredhoursoutputpulseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredhoursoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ampere_squaredhoursoutputpulse
        {
            get
            {
                return this._ampere_squaredhoursoutputpulse;
            }
            set
            {
                if ((this._ampere_squaredhoursoutputpulse != value))
                {
                    Nullable<double> old = this._ampere_squaredhoursoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredhoursoutputpulseChanging(e);
                    this.OnPropertyChanging("Ampere_squaredhoursoutputpulse", e, _ampere_squaredhoursoutputpulseAttribute);
                    this._ampere_squaredhoursoutputpulse = value;
                    this.OnAmpere_squaredhoursoutputpulseChanged(e);
                    this.OnPropertyChanged("Ampere_squaredhoursoutputpulse", e, _ampere_squaredhoursoutputpulseAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OutputPulseValues_constants")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ActiveenergymetrologicalLED property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ActiveenergymetrologicalLED property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveenergymetrologicalLED property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveenergymetrologicalLED property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ApparentenergymetrologicalLED property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ApparentenergymetrologicalLED property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Activeenergyoutputpulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Activeenergyoutputpulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Reactiveenergyoutputpulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Reactiveenergyoutputpulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Apparentenergyoutputpulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Apparentenergyoutputpulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursoutputpulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursoutputpulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursoutputpulse property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursoutputpulse property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanging;
        
        private static ITypedElement RetrieveActiveenergymetrologicalLEDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("ActiveenergymetrologicalLED")));
        }
        
        /// <summary>
        /// Raises the ActiveenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactiveenergymetrologicalLEDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("ReactiveenergymetrologicalLED")));
        }
        
        /// <summary>
        /// Raises the ReactiveenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentenergymetrologicalLEDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("ApparentenergymetrologicalLED")));
        }
        
        /// <summary>
        /// Raises the ApparentenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActiveenergyoutputpulseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Activeenergyoutputpulse")));
        }
        
        /// <summary>
        /// Raises the ActiveenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactiveenergyoutputpulseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Reactiveenergyoutputpulse")));
        }
        
        /// <summary>
        /// Raises the ReactiveenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentenergyoutputpulseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Apparentenergyoutputpulse")));
        }
        
        /// <summary>
        /// Raises the ApparentenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVolt_squaredhoursmetrologicalLEDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Volt_squaredhoursmetrologicalLED")));
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursmetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursmetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursmetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursmetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursmetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursmetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmpere_squaredhoursmetrologicalLEDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Ampere_squaredhoursmetrologicalLED")));
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursmetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursmetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursmetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursmetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursmetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursmetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVolt_squaredhoursoutputpulseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Volt_squaredhoursoutputpulse")));
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmpere_squaredhoursoutputpulseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OutputPulseValues_constants.ClassInstance)).Resolve("Ampere_squaredhoursoutputpulse")));
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEENERGYMETROLOGICALLED"))
            {
                return this.ActiveenergymetrologicalLED;
            }
            if ((attribute == "REACTIVEENERGYMETROLOGICALLED"))
            {
                return this.ReactiveenergymetrologicalLED;
            }
            if ((attribute == "APPARENTENERGYMETROLOGICALLED"))
            {
                return this.ApparentenergymetrologicalLED;
            }
            if ((attribute == "ACTIVEENERGYOUTPUTPULSE"))
            {
                return this.Activeenergyoutputpulse;
            }
            if ((attribute == "REACTIVEENERGYOUTPUTPULSE"))
            {
                return this.Reactiveenergyoutputpulse;
            }
            if ((attribute == "APPARENTENERGYOUTPUTPULSE"))
            {
                return this.Apparentenergyoutputpulse;
            }
            if ((attribute == "VOLT_SQUAREDHOURSMETROLOGICALLED"))
            {
                return this.Volt_squaredhoursmetrologicalLED;
            }
            if ((attribute == "AMPERE_SQUAREDHOURSMETROLOGICALLED"))
            {
                return this.Ampere_squaredhoursmetrologicalLED;
            }
            if ((attribute == "VOLT_SQUAREDHOURSOUTPUTPULSE"))
            {
                return this.Volt_squaredhoursoutputpulse;
            }
            if ((attribute == "AMPERE_SQUAREDHOURSOUTPUTPULSE"))
            {
                return this.Ampere_squaredhoursoutputpulse;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEENERGYMETROLOGICALLED"))
            {
                this.ActiveenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEENERGYMETROLOGICALLED"))
            {
                this.ReactiveenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "APPARENTENERGYMETROLOGICALLED"))
            {
                this.ApparentenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEENERGYOUTPUTPULSE"))
            {
                this.Activeenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEENERGYOUTPUTPULSE"))
            {
                this.Reactiveenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "APPARENTENERGYOUTPUTPULSE"))
            {
                this.Apparentenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURSMETROLOGICALLED"))
            {
                this.Volt_squaredhoursmetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURSMETROLOGICALLED"))
            {
                this.Ampere_squaredhoursmetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURSOUTPUTPULSE"))
            {
                this.Volt_squaredhoursoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURSOUTPUTPULSE"))
            {
                this.Ampere_squaredhoursoutputpulse = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVEENERGYMETROLOGICALLED"))
            {
                return Observable.Box(new ActiveenergymetrologicalLEDProxy(this));
            }
            if ((attribute == "REACTIVEENERGYMETROLOGICALLED"))
            {
                return Observable.Box(new ReactiveenergymetrologicalLEDProxy(this));
            }
            if ((attribute == "APPARENTENERGYMETROLOGICALLED"))
            {
                return Observable.Box(new ApparentenergymetrologicalLEDProxy(this));
            }
            if ((attribute == "ACTIVEENERGYOUTPUTPULSE"))
            {
                return Observable.Box(new ActiveenergyoutputpulseProxy(this));
            }
            if ((attribute == "REACTIVEENERGYOUTPUTPULSE"))
            {
                return Observable.Box(new ReactiveenergyoutputpulseProxy(this));
            }
            if ((attribute == "APPARENTENERGYOUTPUTPULSE"))
            {
                return Observable.Box(new ApparentenergyoutputpulseProxy(this));
            }
            if ((attribute == "VOLT_SQUAREDHOURSMETROLOGICALLED"))
            {
                return Observable.Box(new Volt_squaredhoursmetrologicalLEDProxy(this));
            }
            if ((attribute == "AMPERE_SQUAREDHOURSMETROLOGICALLED"))
            {
                return Observable.Box(new Ampere_squaredhoursmetrologicalLEDProxy(this));
            }
            if ((attribute == "VOLT_SQUAREDHOURSOUTPUTPULSE"))
            {
                return Observable.Box(new Volt_squaredhoursoutputpulseProxy(this));
            }
            if ((attribute == "AMPERE_SQUAREDHOURSOUTPUTPULSE"))
            {
                return Observable.Box(new Ampere_squaredhoursoutputpulseProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OutputPulseValues_constants")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveenergymetrologicalLED property
        /// </summary>
        private sealed class ActiveenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "ActiveenergymetrologicalLED")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActiveenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ActiveenergymetrologicalLED = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactiveenergymetrologicalLED property
        /// </summary>
        private sealed class ReactiveenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactiveenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "ReactiveenergymetrologicalLED")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactiveenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ReactiveenergymetrologicalLED = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentenergymetrologicalLED property
        /// </summary>
        private sealed class ApparentenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "ApparentenergymetrologicalLED")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ApparentenergymetrologicalLED = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activeenergyoutputpulse property
        /// </summary>
        private sealed class ActiveenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Activeenergyoutputpulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Activeenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Activeenergyoutputpulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactiveenergyoutputpulse property
        /// </summary>
        private sealed class ReactiveenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactiveenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Reactiveenergyoutputpulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactiveenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Reactiveenergyoutputpulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparentenergyoutputpulse property
        /// </summary>
        private sealed class ApparentenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Apparentenergyoutputpulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparentenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Apparentenergyoutputpulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredhoursmetrologicalLED property
        /// </summary>
        private sealed class Volt_squaredhoursmetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredhoursmetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Volt_squaredhoursmetrologicalLED")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredhoursmetrologicalLED;
                }
                set
                {
                    this.ModelElement.Volt_squaredhoursmetrologicalLED = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        private sealed class Ampere_squaredhoursmetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredhoursmetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Ampere_squaredhoursmetrologicalLED")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredhoursmetrologicalLED;
                }
                set
                {
                    this.ModelElement.Ampere_squaredhoursmetrologicalLED = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredhoursoutputpulse property
        /// </summary>
        private sealed class Volt_squaredhoursoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredhoursoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Volt_squaredhoursoutputpulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredhoursoutputpulse;
                }
                set
                {
                    this.ModelElement.Volt_squaredhoursoutputpulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredhoursoutputpulse property
        /// </summary>
        private sealed class Ampere_squaredhoursoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredhoursoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement, "Ampere_squaredhoursoutputpulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredhoursoutputpulse;
                }
                set
                {
                    this.ModelElement.Ampere_squaredhoursoutputpulse = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ReadingFactorAndCT_VTratio class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ReadingFactorAndCT_VTratio")]
    public partial class ReadingFactorAndCT_VTratio : Data, IReadingFactorAndCT_VTratio, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Readingfactorforpower property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _readingfactorforpower;
        
        private static Lazy<ITypedElement> _readingfactorforpowerAttribute = new Lazy<ITypedElement>(RetrieveReadingfactorforpowerAttribute);
        
        /// <summary>
        /// The backing field for the Readingfactorforenergy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _readingfactorforenergy;
        
        private static Lazy<ITypedElement> _readingfactorforenergyAttribute = new Lazy<ITypedElement>(RetrieveReadingfactorforenergyAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_currentzähler property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _transformerratio_currentzähler;
        
        private static Lazy<ITypedElement> _transformerratio_currentzählerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_currentzählerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_voltagezähler property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _transformerratio_voltagezähler;
        
        private static Lazy<ITypedElement> _transformerratio_voltagezählerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_voltagezählerAttribute);
        
        /// <summary>
        /// The backing field for the Overalltransformerratiozähler property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _overalltransformerratiozähler;
        
        private static Lazy<ITypedElement> _overalltransformerratiozählerAttribute = new Lazy<ITypedElement>(RetrieveOveralltransformerratiozählerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_currentnenner property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _transformerratio_currentnenner;
        
        private static Lazy<ITypedElement> _transformerratio_currentnennerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_currentnennerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_voltagenenner property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _transformerratio_voltagenenner;
        
        private static Lazy<ITypedElement> _transformerratio_voltagenennerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_voltagenennerAttribute);
        
        /// <summary>
        /// The backing field for the Overalltransformer_rationenner property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _overalltransformer_rationenner;
        
        private static Lazy<ITypedElement> _overalltransformer_rationennerAttribute = new Lazy<ITypedElement>(RetrieveOveralltransformer_rationennerAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Readingfactorforpower property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Readingfactorforpower
        {
            get
            {
                return this._readingfactorforpower;
            }
            set
            {
                if ((this._readingfactorforpower != value))
                {
                    Nullable<double> old = this._readingfactorforpower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingfactorforpowerChanging(e);
                    this.OnPropertyChanging("Readingfactorforpower", e, _readingfactorforpowerAttribute);
                    this._readingfactorforpower = value;
                    this.OnReadingfactorforpowerChanged(e);
                    this.OnPropertyChanged("Readingfactorforpower", e, _readingfactorforpowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Readingfactorforenergy property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Readingfactorforenergy
        {
            get
            {
                return this._readingfactorforenergy;
            }
            set
            {
                if ((this._readingfactorforenergy != value))
                {
                    Nullable<double> old = this._readingfactorforenergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingfactorforenergyChanging(e);
                    this.OnPropertyChanging("Readingfactorforenergy", e, _readingfactorforenergyAttribute);
                    this._readingfactorforenergy = value;
                    this.OnReadingfactorforenergyChanged(e);
                    this.OnPropertyChanged("Readingfactorforenergy", e, _readingfactorforenergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_currentzähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Transformerratio_currentzähler
        {
            get
            {
                return this._transformerratio_currentzähler;
            }
            set
            {
                if ((this._transformerratio_currentzähler != value))
                {
                    Nullable<int> old = this._transformerratio_currentzähler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_currentzählerChanging(e);
                    this.OnPropertyChanging("Transformerratio_currentzähler", e, _transformerratio_currentzählerAttribute);
                    this._transformerratio_currentzähler = value;
                    this.OnTransformerratio_currentzählerChanged(e);
                    this.OnPropertyChanged("Transformerratio_currentzähler", e, _transformerratio_currentzählerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_voltagezähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Transformerratio_voltagezähler
        {
            get
            {
                return this._transformerratio_voltagezähler;
            }
            set
            {
                if ((this._transformerratio_voltagezähler != value))
                {
                    Nullable<int> old = this._transformerratio_voltagezähler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_voltagezählerChanging(e);
                    this.OnPropertyChanging("Transformerratio_voltagezähler", e, _transformerratio_voltagezählerAttribute);
                    this._transformerratio_voltagezähler = value;
                    this.OnTransformerratio_voltagezählerChanged(e);
                    this.OnPropertyChanged("Transformerratio_voltagezähler", e, _transformerratio_voltagezählerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Overalltransformerratiozähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Overalltransformerratiozähler
        {
            get
            {
                return this._overalltransformerratiozähler;
            }
            set
            {
                if ((this._overalltransformerratiozähler != value))
                {
                    Nullable<int> old = this._overalltransformerratiozähler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOveralltransformerratiozählerChanging(e);
                    this.OnPropertyChanging("Overalltransformerratiozähler", e, _overalltransformerratiozählerAttribute);
                    this._overalltransformerratiozähler = value;
                    this.OnOveralltransformerratiozählerChanged(e);
                    this.OnPropertyChanged("Overalltransformerratiozähler", e, _overalltransformerratiozählerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_currentnenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Transformerratio_currentnenner
        {
            get
            {
                return this._transformerratio_currentnenner;
            }
            set
            {
                if ((this._transformerratio_currentnenner != value))
                {
                    Nullable<int> old = this._transformerratio_currentnenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_currentnennerChanging(e);
                    this.OnPropertyChanging("Transformerratio_currentnenner", e, _transformerratio_currentnennerAttribute);
                    this._transformerratio_currentnenner = value;
                    this.OnTransformerratio_currentnennerChanged(e);
                    this.OnPropertyChanged("Transformerratio_currentnenner", e, _transformerratio_currentnennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_voltagenenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Transformerratio_voltagenenner
        {
            get
            {
                return this._transformerratio_voltagenenner;
            }
            set
            {
                if ((this._transformerratio_voltagenenner != value))
                {
                    Nullable<int> old = this._transformerratio_voltagenenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_voltagenennerChanging(e);
                    this.OnPropertyChanging("Transformerratio_voltagenenner", e, _transformerratio_voltagenennerAttribute);
                    this._transformerratio_voltagenenner = value;
                    this.OnTransformerratio_voltagenennerChanged(e);
                    this.OnPropertyChanged("Transformerratio_voltagenenner", e, _transformerratio_voltagenennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Overalltransformer_rationenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Overalltransformer_rationenner
        {
            get
            {
                return this._overalltransformer_rationenner;
            }
            set
            {
                if ((this._overalltransformer_rationenner != value))
                {
                    Nullable<int> old = this._overalltransformer_rationenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOveralltransformer_rationennerChanging(e);
                    this.OnPropertyChanging("Overalltransformer_rationenner", e, _overalltransformer_rationennerAttribute);
                    this._overalltransformer_rationenner = value;
                    this.OnOveralltransformer_rationennerChanged(e);
                    this.OnPropertyChanged("Overalltransformer_rationenner", e, _overalltransformer_rationennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ReadingFactorAndCT_VTratio")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Readingfactorforpower property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanged;
        
        /// <summary>
        /// Gets fired before the Readingfactorforpower property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanging;
        
        /// <summary>
        /// Gets fired when the Readingfactorforenergy property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanged;
        
        /// <summary>
        /// Gets fired before the Readingfactorforenergy property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentzähler property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_currentzählerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentzähler property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_currentzählerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagezähler property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_voltagezählerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagezähler property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_voltagezählerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformerratiozähler property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OveralltransformerratiozählerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformerratiozähler property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OveralltransformerratiozählerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentnenner property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentnenner property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagenenner property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagenenner property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformer_rationenner property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformer_rationenner property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanging;
        
        private static ITypedElement RetrieveReadingfactorforpowerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Readingfactorforpower")));
        }
        
        /// <summary>
        /// Raises the ReadingfactorforpowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforpowerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforpowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingfactorforpowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforpowerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforpowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReadingfactorforenergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Readingfactorforenergy")));
        }
        
        /// <summary>
        /// Raises the ReadingfactorforenergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforenergyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforenergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingfactorforenergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforenergyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforenergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_currentzählerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_currentzähler")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentzählerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentzählerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentzählerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentzählerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentzählerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentzählerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_voltagezählerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_voltagezähler")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagezählerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagezählerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagezählerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagezählerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagezählerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagezählerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOveralltransformerratiozählerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Overalltransformerratiozähler")));
        }
        
        /// <summary>
        /// Raises the OveralltransformerratiozählerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformerratiozählerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OveralltransformerratiozählerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OveralltransformerratiozählerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformerratiozählerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OveralltransformerratiozählerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_currentnennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_currentnenner")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentnennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentnennerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentnennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentnennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentnennerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentnennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_voltagenennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_voltagenenner")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagenennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagenennerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagenennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagenennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagenennerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagenennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOveralltransformer_rationennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Overalltransformer_rationenner")));
        }
        
        /// <summary>
        /// Raises the Overalltransformer_rationennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformer_rationennerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Overalltransformer_rationennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Overalltransformer_rationennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformer_rationennerChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Overalltransformer_rationennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "READINGFACTORFORPOWER"))
            {
                return this.Readingfactorforpower;
            }
            if ((attribute == "READINGFACTORFORENERGY"))
            {
                return this.Readingfactorforenergy;
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTZÄHLER"))
            {
                return this.Transformerratio_currentzähler;
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGEZÄHLER"))
            {
                return this.Transformerratio_voltagezähler;
            }
            if ((attribute == "OVERALLTRANSFORMERRATIOZÄHLER"))
            {
                return this.Overalltransformerratiozähler;
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTNENNER"))
            {
                return this.Transformerratio_currentnenner;
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGENENNER"))
            {
                return this.Transformerratio_voltagenenner;
            }
            if ((attribute == "OVERALLTRANSFORMER_RATIONENNER"))
            {
                return this.Overalltransformer_rationenner;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "READINGFACTORFORPOWER"))
            {
                this.Readingfactorforpower = ((double)(value));
                return;
            }
            if ((feature == "READINGFACTORFORENERGY"))
            {
                this.Readingfactorforenergy = ((double)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_CURRENTZÄHLER"))
            {
                this.Transformerratio_currentzähler = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_VOLTAGEZÄHLER"))
            {
                this.Transformerratio_voltagezähler = ((int)(value));
                return;
            }
            if ((feature == "OVERALLTRANSFORMERRATIOZÄHLER"))
            {
                this.Overalltransformerratiozähler = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_CURRENTNENNER"))
            {
                this.Transformerratio_currentnenner = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_VOLTAGENENNER"))
            {
                this.Transformerratio_voltagenenner = ((int)(value));
                return;
            }
            if ((feature == "OVERALLTRANSFORMER_RATIONENNER"))
            {
                this.Overalltransformer_rationenner = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "READINGFACTORFORPOWER"))
            {
                return Observable.Box(new ReadingfactorforpowerProxy(this));
            }
            if ((attribute == "READINGFACTORFORENERGY"))
            {
                return Observable.Box(new ReadingfactorforenergyProxy(this));
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTZÄHLER"))
            {
                return Observable.Box(new Transformerratio_currentzählerProxy(this));
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGEZÄHLER"))
            {
                return Observable.Box(new Transformerratio_voltagezählerProxy(this));
            }
            if ((attribute == "OVERALLTRANSFORMERRATIOZÄHLER"))
            {
                return Observable.Box(new OveralltransformerratiozählerProxy(this));
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTNENNER"))
            {
                return Observable.Box(new Transformerratio_currentnennerProxy(this));
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGENENNER"))
            {
                return Observable.Box(new Transformerratio_voltagenennerProxy(this));
            }
            if ((attribute == "OVERALLTRANSFORMER_RATIONENNER"))
            {
                return Observable.Box(new Overalltransformer_rationennerProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ReadingFactorAndCT_VTratio")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Readingfactorforpower property
        /// </summary>
        private sealed class ReadingfactorforpowerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingfactorforpowerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Readingfactorforpower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Readingfactorforpower;
                }
                set
                {
                    this.ModelElement.Readingfactorforpower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Readingfactorforenergy property
        /// </summary>
        private sealed class ReadingfactorforenergyProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingfactorforenergyProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Readingfactorforenergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Readingfactorforenergy;
                }
                set
                {
                    this.ModelElement.Readingfactorforenergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_currentzähler property
        /// </summary>
        private sealed class Transformerratio_currentzählerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_currentzählerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_currentzähler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_currentzähler;
                }
                set
                {
                    this.ModelElement.Transformerratio_currentzähler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_voltagezähler property
        /// </summary>
        private sealed class Transformerratio_voltagezählerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_voltagezählerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_voltagezähler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_voltagezähler;
                }
                set
                {
                    this.ModelElement.Transformerratio_voltagezähler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Overalltransformerratiozähler property
        /// </summary>
        private sealed class OveralltransformerratiozählerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OveralltransformerratiozählerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Overalltransformerratiozähler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Overalltransformerratiozähler;
                }
                set
                {
                    this.ModelElement.Overalltransformerratiozähler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_currentnenner property
        /// </summary>
        private sealed class Transformerratio_currentnennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_currentnennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_currentnenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_currentnenner;
                }
                set
                {
                    this.ModelElement.Transformerratio_currentnenner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_voltagenenner property
        /// </summary>
        private sealed class Transformerratio_voltagenennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_voltagenennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_voltagenenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_voltagenenner;
                }
                set
                {
                    this.ModelElement.Transformerratio_voltagenenner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Overalltransformer_rationenner property
        /// </summary>
        private sealed class Overalltransformer_rationennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Overalltransformer_rationennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Overalltransformer_rationenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Overalltransformer_rationenner;
                }
                set
                {
                    this.ModelElement.Overalltransformer_rationenner = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityNominalValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityNominalValues")]
    public partial class ElectricityNominalValues : Data, IElectricityNominalValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Voltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _voltage;
        
        private static Lazy<ITypedElement> _voltageAttribute = new Lazy<ITypedElement>(RetrieveVoltageAttribute);
        
        /// <summary>
        /// The backing field for the Nominalcurrent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _nominalcurrent;
        
        private static Lazy<ITypedElement> _nominalcurrentAttribute = new Lazy<ITypedElement>(RetrieveNominalcurrentAttribute);
        
        /// <summary>
        /// The backing field for the Frequency property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _frequency;
        
        private static Lazy<ITypedElement> _frequencyAttribute = new Lazy<ITypedElement>(RetrieveFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the Maximumcurrent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _maximumcurrent;
        
        private static Lazy<ITypedElement> _maximumcurrentAttribute = new Lazy<ITypedElement>(RetrieveMaximumcurrentAttribute);
        
        /// <summary>
        /// The backing field for the Reference_voltage_for_power_quality_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reference_voltage_for_power_quality_measurement;
        
        private static Lazy<ITypedElement> _reference_voltage_for_power_quality_measurementAttribute = new Lazy<ITypedElement>(RetrieveReference_voltage_for_power_quality_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Reference_voltage_for_aux_power_supply property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reference_voltage_for_aux_power_supply;
        
        private static Lazy<ITypedElement> _reference_voltage_for_aux_power_supplyAttribute = new Lazy<ITypedElement>(RetrieveReference_voltage_for_aux_power_supplyAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Voltage property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Voltage
        {
            get
            {
                return this._voltage;
            }
            set
            {
                if ((this._voltage != value))
                {
                    Nullable<double> old = this._voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageChanging(e);
                    this.OnPropertyChanging("Voltage", e, _voltageAttribute);
                    this._voltage = value;
                    this.OnVoltageChanged(e);
                    this.OnPropertyChanged("Voltage", e, _voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Nominalcurrent property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Nominalcurrent
        {
            get
            {
                return this._nominalcurrent;
            }
            set
            {
                if ((this._nominalcurrent != value))
                {
                    Nullable<double> old = this._nominalcurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalcurrentChanging(e);
                    this.OnPropertyChanging("Nominalcurrent", e, _nominalcurrentAttribute);
                    this._nominalcurrent = value;
                    this.OnNominalcurrentChanged(e);
                    this.OnPropertyChanged("Nominalcurrent", e, _nominalcurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Frequency property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    Nullable<double> old = this._frequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyChanging(e);
                    this.OnPropertyChanging("Frequency", e, _frequencyAttribute);
                    this._frequency = value;
                    this.OnFrequencyChanged(e);
                    this.OnPropertyChanged("Frequency", e, _frequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Maximumcurrent property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Maximumcurrent
        {
            get
            {
                return this._maximumcurrent;
            }
            set
            {
                if ((this._maximumcurrent != value))
                {
                    Nullable<double> old = this._maximumcurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumcurrentChanging(e);
                    this.OnPropertyChanging("Maximumcurrent", e, _maximumcurrentAttribute);
                    this._maximumcurrent = value;
                    this.OnMaximumcurrentChanged(e);
                    this.OnPropertyChanged("Maximumcurrent", e, _maximumcurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reference_voltage_for_power_quality_measurement property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reference_voltage_for_power_quality_measurement
        {
            get
            {
                return this._reference_voltage_for_power_quality_measurement;
            }
            set
            {
                if ((this._reference_voltage_for_power_quality_measurement != value))
                {
                    Nullable<double> old = this._reference_voltage_for_power_quality_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReference_voltage_for_power_quality_measurementChanging(e);
                    this.OnPropertyChanging("Reference_voltage_for_power_quality_measurement", e, _reference_voltage_for_power_quality_measurementAttribute);
                    this._reference_voltage_for_power_quality_measurement = value;
                    this.OnReference_voltage_for_power_quality_measurementChanged(e);
                    this.OnPropertyChanged("Reference_voltage_for_power_quality_measurement", e, _reference_voltage_for_power_quality_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reference_voltage_for_aux_power_supply property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reference_voltage_for_aux_power_supply
        {
            get
            {
                return this._reference_voltage_for_aux_power_supply;
            }
            set
            {
                if ((this._reference_voltage_for_aux_power_supply != value))
                {
                    Nullable<double> old = this._reference_voltage_for_aux_power_supply;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReference_voltage_for_aux_power_supplyChanging(e);
                    this.OnPropertyChanging("Reference_voltage_for_aux_power_supply", e, _reference_voltage_for_aux_power_supplyAttribute);
                    this._reference_voltage_for_aux_power_supply = value;
                    this.OnReference_voltage_for_aux_power_supplyChanged(e);
                    this.OnPropertyChanged("Reference_voltage_for_aux_power_supply", e, _reference_voltage_for_aux_power_supplyAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityNominalValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Voltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageChanged;
        
        /// <summary>
        /// Gets fired before the Voltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageChanging;
        
        /// <summary>
        /// Gets fired when the Nominalcurrent property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalcurrentChanged;
        
        /// <summary>
        /// Gets fired before the Nominalcurrent property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NominalcurrentChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Maximumcurrent property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MaximumcurrentChanged;
        
        /// <summary>
        /// Gets fired before the Maximumcurrent property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MaximumcurrentChanging;
        
        /// <summary>
        /// Gets fired when the Reference_voltage_for_power_quality_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reference_voltage_for_power_quality_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Reference_voltage_for_power_quality_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reference_voltage_for_power_quality_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Reference_voltage_for_aux_power_supply property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reference_voltage_for_aux_power_supplyChanged;
        
        /// <summary>
        /// Gets fired before the Reference_voltage_for_aux_power_supply property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reference_voltage_for_aux_power_supplyChanging;
        
        private static ITypedElement RetrieveVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Voltage")));
        }
        
        /// <summary>
        /// Raises the VoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNominalcurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Nominalcurrent")));
        }
        
        /// <summary>
        /// Raises the NominalcurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalcurrentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalcurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalcurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalcurrentChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NominalcurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Frequency")));
        }
        
        /// <summary>
        /// Raises the FrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximumcurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Maximumcurrent")));
        }
        
        /// <summary>
        /// Raises the MaximumcurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumcurrentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MaximumcurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumcurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumcurrentChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MaximumcurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReference_voltage_for_power_quality_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Reference_voltage_for_power_quality_measurement")));
        }
        
        /// <summary>
        /// Raises the Reference_voltage_for_power_quality_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReference_voltage_for_power_quality_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reference_voltage_for_power_quality_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reference_voltage_for_power_quality_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReference_voltage_for_power_quality_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reference_voltage_for_power_quality_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReference_voltage_for_aux_power_supplyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityNominalValues.ClassInstance)).Resolve("Reference_voltage_for_aux_power_supply")));
        }
        
        /// <summary>
        /// Raises the Reference_voltage_for_aux_power_supplyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReference_voltage_for_aux_power_supplyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reference_voltage_for_aux_power_supplyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reference_voltage_for_aux_power_supplyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReference_voltage_for_aux_power_supplyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reference_voltage_for_aux_power_supplyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VOLTAGE"))
            {
                return this.Voltage;
            }
            if ((attribute == "NOMINALCURRENT"))
            {
                return this.Nominalcurrent;
            }
            if ((attribute == "FREQUENCY"))
            {
                return this.Frequency;
            }
            if ((attribute == "MAXIMUMCURRENT"))
            {
                return this.Maximumcurrent;
            }
            if ((attribute == "REFERENCE_VOLTAGE_FOR_POWER_QUALITY_MEASUREMENT"))
            {
                return this.Reference_voltage_for_power_quality_measurement;
            }
            if ((attribute == "REFERENCE_VOLTAGE_FOR_AUX_POWER_SUPPLY"))
            {
                return this.Reference_voltage_for_aux_power_supply;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VOLTAGE"))
            {
                this.Voltage = ((double)(value));
                return;
            }
            if ((feature == "NOMINALCURRENT"))
            {
                this.Nominalcurrent = ((double)(value));
                return;
            }
            if ((feature == "FREQUENCY"))
            {
                this.Frequency = ((double)(value));
                return;
            }
            if ((feature == "MAXIMUMCURRENT"))
            {
                this.Maximumcurrent = ((double)(value));
                return;
            }
            if ((feature == "REFERENCE_VOLTAGE_FOR_POWER_QUALITY_MEASUREMENT"))
            {
                this.Reference_voltage_for_power_quality_measurement = ((double)(value));
                return;
            }
            if ((feature == "REFERENCE_VOLTAGE_FOR_AUX_POWER_SUPPLY"))
            {
                this.Reference_voltage_for_aux_power_supply = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VOLTAGE"))
            {
                return Observable.Box(new VoltageProxy(this));
            }
            if ((attribute == "NOMINALCURRENT"))
            {
                return Observable.Box(new NominalcurrentProxy(this));
            }
            if ((attribute == "FREQUENCY"))
            {
                return Observable.Box(new FrequencyProxy(this));
            }
            if ((attribute == "MAXIMUMCURRENT"))
            {
                return Observable.Box(new MaximumcurrentProxy(this));
            }
            if ((attribute == "REFERENCE_VOLTAGE_FOR_POWER_QUALITY_MEASUREMENT"))
            {
                return Observable.Box(new Reference_voltage_for_power_quality_measurementProxy(this));
            }
            if ((attribute == "REFERENCE_VOLTAGE_FOR_AUX_POWER_SUPPLY"))
            {
                return Observable.Box(new Reference_voltage_for_aux_power_supplyProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityNominalValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Voltage property
        /// </summary>
        private sealed class VoltageProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Voltage;
                }
                set
                {
                    this.ModelElement.Voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Nominalcurrent property
        /// </summary>
        private sealed class NominalcurrentProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalcurrentProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Nominalcurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Nominalcurrent;
                }
                set
                {
                    this.ModelElement.Nominalcurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Frequency property
        /// </summary>
        private sealed class FrequencyProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Frequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Frequency;
                }
                set
                {
                    this.ModelElement.Frequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Maximumcurrent property
        /// </summary>
        private sealed class MaximumcurrentProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumcurrentProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Maximumcurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Maximumcurrent;
                }
                set
                {
                    this.ModelElement.Maximumcurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reference_voltage_for_power_quality_measurement property
        /// </summary>
        private sealed class Reference_voltage_for_power_quality_measurementProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reference_voltage_for_power_quality_measurementProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Reference_voltage_for_power_quality_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reference_voltage_for_power_quality_measurement;
                }
                set
                {
                    this.ModelElement.Reference_voltage_for_power_quality_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reference_voltage_for_aux_power_supply property
        /// </summary>
        private sealed class Reference_voltage_for_aux_power_supplyProxy : ModelPropertyChange<IElectricityNominalValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reference_voltage_for_aux_power_supplyProxy(IElectricityNominalValues modelElement) : 
                    base(modelElement, "Reference_voltage_for_aux_power_supply")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reference_voltage_for_aux_power_supply;
                }
                set
                {
                    this.ModelElement.Reference_voltage_for_aux_power_supply = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the InputPulseValuesOrConstants class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InputPulseValuesOrConstants")]
    public partial class InputPulseValuesOrConstants : Data, IInputPulseValuesOrConstants, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveEnergy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activeEnergy;
        
        private static Lazy<ITypedElement> _activeEnergyAttribute = new Lazy<ITypedElement>(RetrieveActiveEnergyAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_energy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_energy;
        
        private static Lazy<ITypedElement> _reactive_energyAttribute = new Lazy<ITypedElement>(RetrieveReactive_energyAttribute);
        
        /// <summary>
        /// The backing field for the Apparent_energy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparent_energy;
        
        private static Lazy<ITypedElement> _apparent_energyAttribute = new Lazy<ITypedElement>(RetrieveApparent_energyAttribute);
        
        /// <summary>
        /// The backing field for the Volt_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _volt_squared_hours;
        
        private static Lazy<ITypedElement> _volt_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveVolt_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the Ampere_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ampere_squared_hours;
        
        private static Lazy<ITypedElement> _ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveAmpere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the Unitless_quantities property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _unitless_quantities;
        
        private static Lazy<ITypedElement> _unitless_quantitiesAttribute = new Lazy<ITypedElement>(RetrieveUnitless_quantitiesAttribute);
        
        /// <summary>
        /// The backing field for the Active_energy_export property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_energy_export;
        
        private static Lazy<ITypedElement> _active_energy_exportAttribute = new Lazy<ITypedElement>(RetrieveActive_energy_exportAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_energy_export property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_energy_export;
        
        private static Lazy<ITypedElement> _reactive_energy_exportAttribute = new Lazy<ITypedElement>(RetrieveReactive_energy_exportAttribute);
        
        /// <summary>
        /// The backing field for the Apparent_energy_export property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparent_energy_export;
        
        private static Lazy<ITypedElement> _apparent_energy_exportAttribute = new Lazy<ITypedElement>(RetrieveApparent_energy_exportAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActiveEnergy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActiveEnergy
        {
            get
            {
                return this._activeEnergy;
            }
            set
            {
                if ((this._activeEnergy != value))
                {
                    Nullable<double> old = this._activeEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveEnergyChanging(e);
                    this.OnPropertyChanging("ActiveEnergy", e, _activeEnergyAttribute);
                    this._activeEnergy = value;
                    this.OnActiveEnergyChanged(e);
                    this.OnPropertyChanged("ActiveEnergy", e, _activeEnergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_energy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_energy
        {
            get
            {
                return this._reactive_energy;
            }
            set
            {
                if ((this._reactive_energy != value))
                {
                    Nullable<double> old = this._reactive_energy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_energyChanging(e);
                    this.OnPropertyChanging("Reactive_energy", e, _reactive_energyAttribute);
                    this._reactive_energy = value;
                    this.OnReactive_energyChanged(e);
                    this.OnPropertyChanged("Reactive_energy", e, _reactive_energyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Apparent_energy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Apparent_energy
        {
            get
            {
                return this._apparent_energy;
            }
            set
            {
                if ((this._apparent_energy != value))
                {
                    Nullable<double> old = this._apparent_energy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparent_energyChanging(e);
                    this.OnPropertyChanging("Apparent_energy", e, _apparent_energyAttribute);
                    this._apparent_energy = value;
                    this.OnApparent_energyChanged(e);
                    this.OnPropertyChanged("Apparent_energy", e, _apparent_energyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Volt_squared_hours
        {
            get
            {
                return this._volt_squared_hours;
            }
            set
            {
                if ((this._volt_squared_hours != value))
                {
                    Nullable<double> old = this._volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squared_hoursChanging(e);
                    this.OnPropertyChanging("Volt_squared_hours", e, _volt_squared_hoursAttribute);
                    this._volt_squared_hours = value;
                    this.OnVolt_squared_hoursChanged(e);
                    this.OnPropertyChanged("Volt_squared_hours", e, _volt_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ampere_squared_hours
        {
            get
            {
                return this._ampere_squared_hours;
            }
            set
            {
                if ((this._ampere_squared_hours != value))
                {
                    Nullable<double> old = this._ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squared_hoursChanging(e);
                    this.OnPropertyChanging("Ampere_squared_hours", e, _ampere_squared_hoursAttribute);
                    this._ampere_squared_hours = value;
                    this.OnAmpere_squared_hoursChanged(e);
                    this.OnPropertyChanged("Ampere_squared_hours", e, _ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Unitless_quantities property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Unitless_quantities
        {
            get
            {
                return this._unitless_quantities;
            }
            set
            {
                if ((this._unitless_quantities != value))
                {
                    Nullable<double> old = this._unitless_quantities;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitless_quantitiesChanging(e);
                    this.OnPropertyChanging("Unitless_quantities", e, _unitless_quantitiesAttribute);
                    this._unitless_quantities = value;
                    this.OnUnitless_quantitiesChanged(e);
                    this.OnPropertyChanged("Unitless_quantities", e, _unitless_quantitiesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_energy_export
        {
            get
            {
                return this._active_energy_export;
            }
            set
            {
                if ((this._active_energy_export != value))
                {
                    Nullable<double> old = this._active_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_energy_exportChanging(e);
                    this.OnPropertyChanging("Active_energy_export", e, _active_energy_exportAttribute);
                    this._active_energy_export = value;
                    this.OnActive_energy_exportChanged(e);
                    this.OnPropertyChanged("Active_energy_export", e, _active_energy_exportAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_energy_export
        {
            get
            {
                return this._reactive_energy_export;
            }
            set
            {
                if ((this._reactive_energy_export != value))
                {
                    Nullable<double> old = this._reactive_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_energy_exportChanging(e);
                    this.OnPropertyChanging("Reactive_energy_export", e, _reactive_energy_exportAttribute);
                    this._reactive_energy_export = value;
                    this.OnReactive_energy_exportChanged(e);
                    this.OnPropertyChanged("Reactive_energy_export", e, _reactive_energy_exportAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Apparent_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Apparent_energy_export
        {
            get
            {
                return this._apparent_energy_export;
            }
            set
            {
                if ((this._apparent_energy_export != value))
                {
                    Nullable<double> old = this._apparent_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparent_energy_exportChanging(e);
                    this.OnPropertyChanging("Apparent_energy_export", e, _apparent_energy_exportAttribute);
                    this._apparent_energy_export = value;
                    this.OnApparent_energy_exportChanged(e);
                    this.OnPropertyChanged("Apparent_energy_export", e, _apparent_energy_exportAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InputPulseValuesOrConstants")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ActiveEnergy property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveEnergyChanged;
        
        /// <summary>
        /// Gets fired before the ActiveEnergy property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActiveEnergyChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_energyChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_energyChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Apparent_energyChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Apparent_energyChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Unitless_quantities property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanged;
        
        /// <summary>
        /// Gets fired before the Unitless_quantities property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanging;
        
        /// <summary>
        /// Gets fired when the Active_energy_export property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Active_energy_export property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy_export property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy_export property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy_export property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy_export property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanging;
        
        private static ITypedElement RetrieveActiveEnergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("ActiveEnergy")));
        }
        
        /// <summary>
        /// Raises the ActiveEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActiveEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_energyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Reactive_energy")));
        }
        
        /// <summary>
        /// Raises the Reactive_energyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_energyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_energyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparent_energyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Apparent_energy")));
        }
        
        /// <summary>
        /// Raises the Apparent_energyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Apparent_energyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Apparent_energyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVolt_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Volt_squared_hours")));
        }
        
        /// <summary>
        /// Raises the Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmpere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnitless_quantitiesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Unitless_quantities")));
        }
        
        /// <summary>
        /// Raises the Unitless_quantitiesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitless_quantitiesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Unitless_quantitiesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Unitless_quantitiesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitless_quantitiesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Unitless_quantitiesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_energy_exportAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Active_energy_export")));
        }
        
        /// <summary>
        /// Raises the Active_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_energy_exportAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Reactive_energy_export")));
        }
        
        /// <summary>
        /// Raises the Reactive_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparent_energy_exportAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.InputPulseValuesOrConstants.ClassInstance)).Resolve("Apparent_energy_export")));
        }
        
        /// <summary>
        /// Raises the Apparent_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Apparent_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Apparent_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEENERGY"))
            {
                return this.ActiveEnergy;
            }
            if ((attribute == "REACTIVE_ENERGY"))
            {
                return this.Reactive_energy;
            }
            if ((attribute == "APPARENT_ENERGY"))
            {
                return this.Apparent_energy;
            }
            if ((attribute == "VOLT_SQUARED_HOURS"))
            {
                return this.Volt_squared_hours;
            }
            if ((attribute == "AMPERE_SQUARED_HOURS"))
            {
                return this.Ampere_squared_hours;
            }
            if ((attribute == "UNITLESS_QUANTITIES"))
            {
                return this.Unitless_quantities;
            }
            if ((attribute == "ACTIVE_ENERGY_EXPORT"))
            {
                return this.Active_energy_export;
            }
            if ((attribute == "REACTIVE_ENERGY_EXPORT"))
            {
                return this.Reactive_energy_export;
            }
            if ((attribute == "APPARENT_ENERGY_EXPORT"))
            {
                return this.Apparent_energy_export;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEENERGY"))
            {
                this.ActiveEnergy = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_ENERGY"))
            {
                this.Reactive_energy = ((double)(value));
                return;
            }
            if ((feature == "APPARENT_ENERGY"))
            {
                this.Apparent_energy = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUARED_HOURS"))
            {
                this.Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUARED_HOURS"))
            {
                this.Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "UNITLESS_QUANTITIES"))
            {
                this.Unitless_quantities = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_ENERGY_EXPORT"))
            {
                this.Active_energy_export = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_ENERGY_EXPORT"))
            {
                this.Reactive_energy_export = ((double)(value));
                return;
            }
            if ((feature == "APPARENT_ENERGY_EXPORT"))
            {
                this.Apparent_energy_export = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVEENERGY"))
            {
                return Observable.Box(new ActiveEnergyProxy(this));
            }
            if ((attribute == "REACTIVE_ENERGY"))
            {
                return Observable.Box(new Reactive_energyProxy(this));
            }
            if ((attribute == "APPARENT_ENERGY"))
            {
                return Observable.Box(new Apparent_energyProxy(this));
            }
            if ((attribute == "VOLT_SQUARED_HOURS"))
            {
                return Observable.Box(new Volt_squared_hoursProxy(this));
            }
            if ((attribute == "AMPERE_SQUARED_HOURS"))
            {
                return Observable.Box(new Ampere_squared_hoursProxy(this));
            }
            if ((attribute == "UNITLESS_QUANTITIES"))
            {
                return Observable.Box(new Unitless_quantitiesProxy(this));
            }
            if ((attribute == "ACTIVE_ENERGY_EXPORT"))
            {
                return Observable.Box(new Active_energy_exportProxy(this));
            }
            if ((attribute == "REACTIVE_ENERGY_EXPORT"))
            {
                return Observable.Box(new Reactive_energy_exportProxy(this));
            }
            if ((attribute == "APPARENT_ENERGY_EXPORT"))
            {
                return Observable.Box(new Apparent_energy_exportProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/InputPulseValuesOrConstants")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveEnergy property
        /// </summary>
        private sealed class ActiveEnergyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveEnergyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "ActiveEnergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActiveEnergy;
                }
                set
                {
                    this.ModelElement.ActiveEnergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_energy property
        /// </summary>
        private sealed class Reactive_energyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_energyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Reactive_energy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_energy;
                }
                set
                {
                    this.ModelElement.Reactive_energy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparent_energy property
        /// </summary>
        private sealed class Apparent_energyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Apparent_energyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Apparent_energy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparent_energy;
                }
                set
                {
                    this.ModelElement.Apparent_energy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squared_hours property
        /// </summary>
        private sealed class Volt_squared_hoursProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squared_hoursProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Volt_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.Volt_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squared_hours property
        /// </summary>
        private sealed class Ampere_squared_hoursProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squared_hoursProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Unitless_quantities property
        /// </summary>
        private sealed class Unitless_quantitiesProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Unitless_quantitiesProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Unitless_quantities")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Unitless_quantities;
                }
                set
                {
                    this.ModelElement.Unitless_quantities = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_energy_export property
        /// </summary>
        private sealed class Active_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Active_energy_export")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_energy_export;
                }
                set
                {
                    this.ModelElement.Active_energy_export = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_energy_export property
        /// </summary>
        private sealed class Reactive_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Reactive_energy_export")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_energy_export;
                }
                set
                {
                    this.ModelElement.Reactive_energy_export = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparent_energy_export property
        /// </summary>
        private sealed class Apparent_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Apparent_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement, "Apparent_energy_export")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparent_energy_export;
                }
                set
                {
                    this.ModelElement.Apparent_energy_export = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MeasurementPeriod_recordingInterval_billingPeriodDuration class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementPeriod_recordingInterval_billingPeriodDuratio" +
        "n")]
    public partial class MeasurementPeriod_recordingInterval_billingPeriodDuration : Data, IMeasurementPeriod_recordingInterval_billingPeriodDuration, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _measurement_period_1_for_averaging_scheme_1;
        
        private static Lazy<ITypedElement> _measurement_period_1_for_averaging_scheme_1Attribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_1_for_averaging_scheme_1Attribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _measurement_period_2_for_averagingscheme_2;
        
        private static Lazy<ITypedElement> _measurement_period_2_for_averagingscheme_2Attribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_2_for_averagingscheme_2Attribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_3_for_instantaneous_value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _measurement_period_3_for_instantaneous_value;
        
        private static Lazy<ITypedElement> _measurement_period_3_for_instantaneous_valueAttribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_3_for_instantaneous_valueAttribute);
        
        /// <summary>
        /// The backing field for the Measurement_period_4_for_test_value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _measurement_period_4_for_test_value;
        
        private static Lazy<ITypedElement> _measurement_period_4_for_test_valueAttribute = new Lazy<ITypedElement>(RetrieveMeasurement_period_4_for_test_valueAttribute);
        
        /// <summary>
        /// The backing field for the Recording_interval_1_for_loadprofile property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _recording_interval_1_for_loadprofile;
        
        private static Lazy<ITypedElement> _recording_interval_1_for_loadprofileAttribute = new Lazy<ITypedElement>(RetrieveRecording_interval_1_for_loadprofileAttribute);
        
        /// <summary>
        /// The backing field for the Recording_interval_2_for_loadprofile property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _recording_interval_2_for_loadprofile;
        
        private static Lazy<ITypedElement> _recording_interval_2_for_loadprofileAttribute = new Lazy<ITypedElement>(RetrieveRecording_interval_2_for_loadprofileAttribute);
        
        /// <summary>
        /// The backing field for the Billingperiod property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _billingperiod;
        
        private static Lazy<ITypedElement> _billingperiodAttribute = new Lazy<ITypedElement>(RetrieveBillingperiodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Measurement_period_1_for_averaging_scheme_1
        {
            get
            {
                return this._measurement_period_1_for_averaging_scheme_1;
            }
            set
            {
                if ((this._measurement_period_1_for_averaging_scheme_1 != value))
                {
                    string old = this._measurement_period_1_for_averaging_scheme_1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_1_for_averaging_scheme_1Changing(e);
                    this.OnPropertyChanging("Measurement_period_1_for_averaging_scheme_1", e, _measurement_period_1_for_averaging_scheme_1Attribute);
                    this._measurement_period_1_for_averaging_scheme_1 = value;
                    this.OnMeasurement_period_1_for_averaging_scheme_1Changed(e);
                    this.OnPropertyChanged("Measurement_period_1_for_averaging_scheme_1", e, _measurement_period_1_for_averaging_scheme_1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Measurement_period_2_for_averagingscheme_2
        {
            get
            {
                return this._measurement_period_2_for_averagingscheme_2;
            }
            set
            {
                if ((this._measurement_period_2_for_averagingscheme_2 != value))
                {
                    string old = this._measurement_period_2_for_averagingscheme_2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_2_for_averagingscheme_2Changing(e);
                    this.OnPropertyChanging("Measurement_period_2_for_averagingscheme_2", e, _measurement_period_2_for_averagingscheme_2Attribute);
                    this._measurement_period_2_for_averagingscheme_2 = value;
                    this.OnMeasurement_period_2_for_averagingscheme_2Changed(e);
                    this.OnPropertyChanged("Measurement_period_2_for_averagingscheme_2", e, _measurement_period_2_for_averagingscheme_2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_3_for_instantaneous_value property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Measurement_period_3_for_instantaneous_value
        {
            get
            {
                return this._measurement_period_3_for_instantaneous_value;
            }
            set
            {
                if ((this._measurement_period_3_for_instantaneous_value != value))
                {
                    string old = this._measurement_period_3_for_instantaneous_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_3_for_instantaneous_valueChanging(e);
                    this.OnPropertyChanging("Measurement_period_3_for_instantaneous_value", e, _measurement_period_3_for_instantaneous_valueAttribute);
                    this._measurement_period_3_for_instantaneous_value = value;
                    this.OnMeasurement_period_3_for_instantaneous_valueChanged(e);
                    this.OnPropertyChanged("Measurement_period_3_for_instantaneous_value", e, _measurement_period_3_for_instantaneous_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Measurement_period_4_for_test_value property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Measurement_period_4_for_test_value
        {
            get
            {
                return this._measurement_period_4_for_test_value;
            }
            set
            {
                if ((this._measurement_period_4_for_test_value != value))
                {
                    string old = this._measurement_period_4_for_test_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurement_period_4_for_test_valueChanging(e);
                    this.OnPropertyChanging("Measurement_period_4_for_test_value", e, _measurement_period_4_for_test_valueAttribute);
                    this._measurement_period_4_for_test_value = value;
                    this.OnMeasurement_period_4_for_test_valueChanged(e);
                    this.OnPropertyChanged("Measurement_period_4_for_test_value", e, _measurement_period_4_for_test_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Recording_interval_1_for_loadprofile property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Recording_interval_1_for_loadprofile
        {
            get
            {
                return this._recording_interval_1_for_loadprofile;
            }
            set
            {
                if ((this._recording_interval_1_for_loadprofile != value))
                {
                    string old = this._recording_interval_1_for_loadprofile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecording_interval_1_for_loadprofileChanging(e);
                    this.OnPropertyChanging("Recording_interval_1_for_loadprofile", e, _recording_interval_1_for_loadprofileAttribute);
                    this._recording_interval_1_for_loadprofile = value;
                    this.OnRecording_interval_1_for_loadprofileChanged(e);
                    this.OnPropertyChanged("Recording_interval_1_for_loadprofile", e, _recording_interval_1_for_loadprofileAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Recording_interval_2_for_loadprofile property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Recording_interval_2_for_loadprofile
        {
            get
            {
                return this._recording_interval_2_for_loadprofile;
            }
            set
            {
                if ((this._recording_interval_2_for_loadprofile != value))
                {
                    string old = this._recording_interval_2_for_loadprofile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecording_interval_2_for_loadprofileChanging(e);
                    this.OnPropertyChanging("Recording_interval_2_for_loadprofile", e, _recording_interval_2_for_loadprofileAttribute);
                    this._recording_interval_2_for_loadprofile = value;
                    this.OnRecording_interval_2_for_loadprofileChanged(e);
                    this.OnPropertyChanged("Recording_interval_2_for_loadprofile", e, _recording_interval_2_for_loadprofileAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Billingperiod property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        public string Billingperiod
        {
            get
            {
                return this._billingperiod;
            }
            set
            {
                if ((this._billingperiod != value))
                {
                    string old = this._billingperiod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingperiodChanging(e);
                    this.OnPropertyChanging("Billingperiod", e, _billingperiodAttribute);
                    this._billingperiod = value;
                    this.OnBillingperiodChanged(e);
                    this.OnPropertyChanged("Billingperiod", e, _billingperiodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementPeriod_recordingInterval_billingPeriodDuratio" +
                            "n")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Measurement_period_1_for_averaging_scheme_1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_1_for_averaging_scheme_1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_2_for_averagingscheme_2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_2_for_averagingscheme_2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_3_for_instantaneous_value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Measurement_period_3_for_instantaneous_value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Measurement_period_4_for_test_value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanged;
        
        /// <summary>
        /// Gets fired before the Measurement_period_4_for_test_value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_1_for_loadprofile property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_1_for_loadprofile property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_2_for_loadprofile property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_2_for_loadprofile property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Billingperiod property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingperiodChanged;
        
        /// <summary>
        /// Gets fired before the Billingperiod property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> BillingperiodChanging;
        
        private static ITypedElement RetrieveMeasurement_period_1_for_averaging_scheme_1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_1_for_averaging_scheme_1")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_1_for_averaging_scheme_1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_1_for_averaging_scheme_1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_1_for_averaging_scheme_1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_1_for_averaging_scheme_1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_1_for_averaging_scheme_1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_1_for_averaging_scheme_1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_2_for_averagingscheme_2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_2_for_averagingscheme_2")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_2_for_averagingscheme_2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_2_for_averagingscheme_2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_2_for_averagingscheme_2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_2_for_averagingscheme_2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_2_for_averagingscheme_2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_2_for_averagingscheme_2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_3_for_instantaneous_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_3_for_instantaneous_value")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_3_for_instantaneous_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_3_for_instantaneous_valueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_3_for_instantaneous_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_3_for_instantaneous_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_3_for_instantaneous_valueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_3_for_instantaneous_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurement_period_4_for_test_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Measurement_period_4_for_test_value")));
        }
        
        /// <summary>
        /// Raises the Measurement_period_4_for_test_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_4_for_test_valueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_4_for_test_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Measurement_period_4_for_test_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurement_period_4_for_test_valueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Measurement_period_4_for_test_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecording_interval_1_for_loadprofileAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Recording_interval_1_for_loadprofile")));
        }
        
        /// <summary>
        /// Raises the Recording_interval_1_for_loadprofileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_1_for_loadprofileChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_1_for_loadprofileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Recording_interval_1_for_loadprofileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_1_for_loadprofileChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_1_for_loadprofileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecording_interval_2_for_loadprofileAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Recording_interval_2_for_loadprofile")));
        }
        
        /// <summary>
        /// Raises the Recording_interval_2_for_loadprofileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_2_for_loadprofileChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_2_for_loadprofileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Recording_interval_2_for_loadprofileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecording_interval_2_for_loadprofileChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Recording_interval_2_for_loadprofileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillingperiodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementPeriod_recordingInterval_billingPeriodDuration.ClassInstance)).Resolve("Billingperiod")));
        }
        
        /// <summary>
        /// Raises the BillingperiodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingperiodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingperiodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingperiodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingperiodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.BillingperiodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MEASUREMENT_PERIOD_1_FOR_AVERAGING_SCHEME_1"))
            {
                return this.Measurement_period_1_for_averaging_scheme_1;
            }
            if ((attribute == "MEASUREMENT_PERIOD_2_FOR_AVERAGINGSCHEME_2"))
            {
                return this.Measurement_period_2_for_averagingscheme_2;
            }
            if ((attribute == "MEASUREMENT_PERIOD_3_FOR_INSTANTANEOUS_VALUE"))
            {
                return this.Measurement_period_3_for_instantaneous_value;
            }
            if ((attribute == "MEASUREMENT_PERIOD_4_FOR_TEST_VALUE"))
            {
                return this.Measurement_period_4_for_test_value;
            }
            if ((attribute == "RECORDING_INTERVAL_1_FOR_LOADPROFILE"))
            {
                return this.Recording_interval_1_for_loadprofile;
            }
            if ((attribute == "RECORDING_INTERVAL_2_FOR_LOADPROFILE"))
            {
                return this.Recording_interval_2_for_loadprofile;
            }
            if ((attribute == "BILLINGPERIOD"))
            {
                return this.Billingperiod;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MEASUREMENT_PERIOD_1_FOR_AVERAGING_SCHEME_1"))
            {
                this.Measurement_period_1_for_averaging_scheme_1 = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_2_FOR_AVERAGINGSCHEME_2"))
            {
                this.Measurement_period_2_for_averagingscheme_2 = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_3_FOR_INSTANTANEOUS_VALUE"))
            {
                this.Measurement_period_3_for_instantaneous_value = ((string)(value));
                return;
            }
            if ((feature == "MEASUREMENT_PERIOD_4_FOR_TEST_VALUE"))
            {
                this.Measurement_period_4_for_test_value = ((string)(value));
                return;
            }
            if ((feature == "RECORDING_INTERVAL_1_FOR_LOADPROFILE"))
            {
                this.Recording_interval_1_for_loadprofile = ((string)(value));
                return;
            }
            if ((feature == "RECORDING_INTERVAL_2_FOR_LOADPROFILE"))
            {
                this.Recording_interval_2_for_loadprofile = ((string)(value));
                return;
            }
            if ((feature == "BILLINGPERIOD"))
            {
                this.Billingperiod = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MEASUREMENT_PERIOD_1_FOR_AVERAGING_SCHEME_1"))
            {
                return new Measurement_period_1_for_averaging_scheme_1Proxy(this);
            }
            if ((attribute == "MEASUREMENT_PERIOD_2_FOR_AVERAGINGSCHEME_2"))
            {
                return new Measurement_period_2_for_averagingscheme_2Proxy(this);
            }
            if ((attribute == "MEASUREMENT_PERIOD_3_FOR_INSTANTANEOUS_VALUE"))
            {
                return new Measurement_period_3_for_instantaneous_valueProxy(this);
            }
            if ((attribute == "MEASUREMENT_PERIOD_4_FOR_TEST_VALUE"))
            {
                return new Measurement_period_4_for_test_valueProxy(this);
            }
            if ((attribute == "RECORDING_INTERVAL_1_FOR_LOADPROFILE"))
            {
                return new Recording_interval_1_for_loadprofileProxy(this);
            }
            if ((attribute == "RECORDING_INTERVAL_2_FOR_LOADPROFILE"))
            {
                return new Recording_interval_2_for_loadprofileProxy(this);
            }
            if ((attribute == "BILLINGPERIOD"))
            {
                return new BillingperiodProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementPeriod_recordingInterval_billingPeriodDuratio" +
                        "n")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        private sealed class Measurement_period_1_for_averaging_scheme_1Proxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_1_for_averaging_scheme_1Proxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_1_for_averaging_scheme_1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_1_for_averaging_scheme_1;
                }
                set
                {
                    this.ModelElement.Measurement_period_1_for_averaging_scheme_1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        private sealed class Measurement_period_2_for_averagingscheme_2Proxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_2_for_averagingscheme_2Proxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_2_for_averagingscheme_2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_2_for_averagingscheme_2;
                }
                set
                {
                    this.ModelElement.Measurement_period_2_for_averagingscheme_2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_3_for_instantaneous_value property
        /// </summary>
        private sealed class Measurement_period_3_for_instantaneous_valueProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_3_for_instantaneous_valueProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_3_for_instantaneous_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_3_for_instantaneous_value;
                }
                set
                {
                    this.ModelElement.Measurement_period_3_for_instantaneous_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement_period_4_for_test_value property
        /// </summary>
        private sealed class Measurement_period_4_for_test_valueProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Measurement_period_4_for_test_valueProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Measurement_period_4_for_test_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Measurement_period_4_for_test_value;
                }
                set
                {
                    this.ModelElement.Measurement_period_4_for_test_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Recording_interval_1_for_loadprofile property
        /// </summary>
        private sealed class Recording_interval_1_for_loadprofileProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Recording_interval_1_for_loadprofileProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Recording_interval_1_for_loadprofile")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Recording_interval_1_for_loadprofile;
                }
                set
                {
                    this.ModelElement.Recording_interval_1_for_loadprofile = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Recording_interval_2_for_loadprofile property
        /// </summary>
        private sealed class Recording_interval_2_for_loadprofileProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Recording_interval_2_for_loadprofileProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Recording_interval_2_for_loadprofile")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Recording_interval_2_for_loadprofile;
                }
                set
                {
                    this.ModelElement.Recording_interval_2_for_loadprofile = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billingperiod property
        /// </summary>
        private sealed class BillingperiodProxy : ModelPropertyChange<IMeasurementPeriod_recordingInterval_billingPeriodDuration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingperiodProxy(IMeasurementPeriod_recordingInterval_billingPeriodDuration modelElement) : 
                    base(modelElement, "Billingperiod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Billingperiod;
                }
                set
                {
                    this.ModelElement.Billingperiod = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityTimeEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityTimeEntries")]
    public partial class ElectricityTimeEntries : Data, IElectricityTimeEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Time_expired_since_last_end_of_billing_period property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time_expired_since_last_end_of_billing_period;
        
        private static Lazy<ITypedElement> _time_expired_since_last_end_of_billing_periodAttribute = new Lazy<ITypedElement>(RetrieveTime_expired_since_last_end_of_billing_periodAttribute);
        
        /// <summary>
        /// The backing field for the Localtime property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _localtime;
        
        private static Lazy<ITypedElement> _localtimeAttribute = new Lazy<ITypedElement>(RetrieveLocaltimeAttribute);
        
        /// <summary>
        /// The backing field for the Localdate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _localdate;
        
        private static Lazy<ITypedElement> _localdateAttribute = new Lazy<ITypedElement>(RetrieveLocaldateAttribute);
        
        /// <summary>
        /// The backing field for the Weekday property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _weekday;
        
        private static Lazy<ITypedElement> _weekdayAttribute = new Lazy<ITypedElement>(RetrieveWeekdayAttribute);
        
        /// <summary>
        /// The backing field for the Timeoflastreset property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeoflastreset;
        
        private static Lazy<ITypedElement> _timeoflastresetAttribute = new Lazy<ITypedElement>(RetrieveTimeoflastresetAttribute);
        
        /// <summary>
        /// The backing field for the Dateoflastreset property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _dateoflastreset;
        
        private static Lazy<ITypedElement> _dateoflastresetAttribute = new Lazy<ITypedElement>(RetrieveDateoflastresetAttribute);
        
        /// <summary>
        /// The backing field for the Outputpulseduration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _outputpulseduration;
        
        private static Lazy<ITypedElement> _outputpulsedurationAttribute = new Lazy<ITypedElement>(RetrieveOutputpulsedurationAttribute);
        
        /// <summary>
        /// The backing field for the Clocksynchronizationwindow property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _clocksynchronizationwindow;
        
        private static Lazy<ITypedElement> _clocksynchronizationwindowAttribute = new Lazy<ITypedElement>(RetrieveClocksynchronizationwindowAttribute);
        
        /// <summary>
        /// The backing field for the Clock_synchronization_method property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _clock_synchronization_method;
        
        private static Lazy<ITypedElement> _clock_synchronization_methodAttribute = new Lazy<ITypedElement>(RetrieveClock_synchronization_methodAttribute);
        
        /// <summary>
        /// The backing field for the Clock_time_shift_limit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _clock_time_shift_limit;
        
        private static Lazy<ITypedElement> _clock_time_shift_limitAttribute = new Lazy<ITypedElement>(RetrieveClock_time_shift_limitAttribute);
        
        /// <summary>
        /// The backing field for the Billing_period_reset_lockout_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _billing_period_reset_lockout_time;
        
        private static Lazy<ITypedElement> _billing_period_reset_lockout_timeAttribute = new Lazy<ITypedElement>(RetrieveBilling_period_reset_lockout_timeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Time_expired_since_last_end_of_billing_period property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Time_expired_since_last_end_of_billing_period
        {
            get
            {
                return this._time_expired_since_last_end_of_billing_period;
            }
            set
            {
                if ((this._time_expired_since_last_end_of_billing_period != value))
                {
                    string old = this._time_expired_since_last_end_of_billing_period;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_expired_since_last_end_of_billing_periodChanging(e);
                    this.OnPropertyChanging("Time_expired_since_last_end_of_billing_period", e, _time_expired_since_last_end_of_billing_periodAttribute);
                    this._time_expired_since_last_end_of_billing_period = value;
                    this.OnTime_expired_since_last_end_of_billing_periodChanged(e);
                    this.OnPropertyChanged("Time_expired_since_last_end_of_billing_period", e, _time_expired_since_last_end_of_billing_periodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Localtime property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Localtime
        {
            get
            {
                return this._localtime;
            }
            set
            {
                if ((this._localtime != value))
                {
                    string old = this._localtime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocaltimeChanging(e);
                    this.OnPropertyChanging("Localtime", e, _localtimeAttribute);
                    this._localtime = value;
                    this.OnLocaltimeChanged(e);
                    this.OnPropertyChanged("Localtime", e, _localtimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Localdate property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Localdate
        {
            get
            {
                return this._localdate;
            }
            set
            {
                if ((this._localdate != value))
                {
                    string old = this._localdate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocaldateChanging(e);
                    this.OnPropertyChanging("Localdate", e, _localdateAttribute);
                    this._localdate = value;
                    this.OnLocaldateChanged(e);
                    this.OnPropertyChanged("Localdate", e, _localdateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Weekday property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Weekday
        {
            get
            {
                return this._weekday;
            }
            set
            {
                if ((this._weekday != value))
                {
                    string old = this._weekday;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeekdayChanging(e);
                    this.OnPropertyChanging("Weekday", e, _weekdayAttribute);
                    this._weekday = value;
                    this.OnWeekdayChanged(e);
                    this.OnPropertyChanged("Weekday", e, _weekdayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Timeoflastreset property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Timeoflastreset
        {
            get
            {
                return this._timeoflastreset;
            }
            set
            {
                if ((this._timeoflastreset != value))
                {
                    string old = this._timeoflastreset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeoflastresetChanging(e);
                    this.OnPropertyChanging("Timeoflastreset", e, _timeoflastresetAttribute);
                    this._timeoflastreset = value;
                    this.OnTimeoflastresetChanged(e);
                    this.OnPropertyChanged("Timeoflastreset", e, _timeoflastresetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Dateoflastreset property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Dateoflastreset
        {
            get
            {
                return this._dateoflastreset;
            }
            set
            {
                if ((this._dateoflastreset != value))
                {
                    string old = this._dateoflastreset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateoflastresetChanging(e);
                    this.OnPropertyChanging("Dateoflastreset", e, _dateoflastresetAttribute);
                    this._dateoflastreset = value;
                    this.OnDateoflastresetChanged(e);
                    this.OnPropertyChanged("Dateoflastreset", e, _dateoflastresetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Outputpulseduration property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Outputpulseduration
        {
            get
            {
                return this._outputpulseduration;
            }
            set
            {
                if ((this._outputpulseduration != value))
                {
                    string old = this._outputpulseduration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputpulsedurationChanging(e);
                    this.OnPropertyChanging("Outputpulseduration", e, _outputpulsedurationAttribute);
                    this._outputpulseduration = value;
                    this.OnOutputpulsedurationChanged(e);
                    this.OnPropertyChanged("Outputpulseduration", e, _outputpulsedurationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Clocksynchronizationwindow property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Clocksynchronizationwindow
        {
            get
            {
                return this._clocksynchronizationwindow;
            }
            set
            {
                if ((this._clocksynchronizationwindow != value))
                {
                    string old = this._clocksynchronizationwindow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClocksynchronizationwindowChanging(e);
                    this.OnPropertyChanging("Clocksynchronizationwindow", e, _clocksynchronizationwindowAttribute);
                    this._clocksynchronizationwindow = value;
                    this.OnClocksynchronizationwindowChanged(e);
                    this.OnPropertyChanged("Clocksynchronizationwindow", e, _clocksynchronizationwindowAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Clock_synchronization_method property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Clock_synchronization_method
        {
            get
            {
                return this._clock_synchronization_method;
            }
            set
            {
                if ((this._clock_synchronization_method != value))
                {
                    string old = this._clock_synchronization_method;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClock_synchronization_methodChanging(e);
                    this.OnPropertyChanging("Clock_synchronization_method", e, _clock_synchronization_methodAttribute);
                    this._clock_synchronization_method = value;
                    this.OnClock_synchronization_methodChanged(e);
                    this.OnPropertyChanged("Clock_synchronization_method", e, _clock_synchronization_methodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Clock_time_shift_limit property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Clock_time_shift_limit
        {
            get
            {
                return this._clock_time_shift_limit;
            }
            set
            {
                if ((this._clock_time_shift_limit != value))
                {
                    string old = this._clock_time_shift_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClock_time_shift_limitChanging(e);
                    this.OnPropertyChanging("Clock_time_shift_limit", e, _clock_time_shift_limitAttribute);
                    this._clock_time_shift_limit = value;
                    this.OnClock_time_shift_limitChanged(e);
                    this.OnPropertyChanged("Clock_time_shift_limit", e, _clock_time_shift_limitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Billing_period_reset_lockout_time property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        public string Billing_period_reset_lockout_time
        {
            get
            {
                return this._billing_period_reset_lockout_time;
            }
            set
            {
                if ((this._billing_period_reset_lockout_time != value))
                {
                    string old = this._billing_period_reset_lockout_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilling_period_reset_lockout_timeChanging(e);
                    this.OnPropertyChanging("Billing_period_reset_lockout_time", e, _billing_period_reset_lockout_timeAttribute);
                    this._billing_period_reset_lockout_time = value;
                    this.OnBilling_period_reset_lockout_timeChanged(e);
                    this.OnPropertyChanged("Billing_period_reset_lockout_time", e, _billing_period_reset_lockout_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityTimeEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Time_expired_since_last_end_of_billing_period property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanged;
        
        /// <summary>
        /// Gets fired before the Time_expired_since_last_end_of_billing_period property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanging;
        
        /// <summary>
        /// Gets fired when the Localtime property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocaltimeChanged;
        
        /// <summary>
        /// Gets fired before the Localtime property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocaltimeChanging;
        
        /// <summary>
        /// Gets fired when the Localdate property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocaldateChanged;
        
        /// <summary>
        /// Gets fired before the Localdate property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LocaldateChanging;
        
        /// <summary>
        /// Gets fired when the Weekday property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> WeekdayChanged;
        
        /// <summary>
        /// Gets fired before the Weekday property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> WeekdayChanging;
        
        /// <summary>
        /// Gets fired when the Timeoflastreset property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Timeoflastreset property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Dateoflastreset property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Dateoflastreset property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DateoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Outputpulseduration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputpulsedurationChanged;
        
        /// <summary>
        /// Gets fired before the Outputpulseduration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OutputpulsedurationChanging;
        
        /// <summary>
        /// Gets fired when the Clocksynchronizationwindow property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanged;
        
        /// <summary>
        /// Gets fired before the Clocksynchronizationwindow property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanging;
        
        /// <summary>
        /// Gets fired when the Clock_synchronization_method property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanged;
        
        /// <summary>
        /// Gets fired before the Clock_synchronization_method property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanging;
        
        /// <summary>
        /// Gets fired when the Clock_time_shift_limit property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanged;
        
        /// <summary>
        /// Gets fired before the Clock_time_shift_limit property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanging;
        
        /// <summary>
        /// Gets fired when the Billing_period_reset_lockout_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanged;
        
        /// <summary>
        /// Gets fired before the Billing_period_reset_lockout_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanging;
        
        private static ITypedElement RetrieveTime_expired_since_last_end_of_billing_periodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Time_expired_since_last_end_of_billing_period")));
        }
        
        /// <summary>
        /// Raises the Time_expired_since_last_end_of_billing_periodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_expired_since_last_end_of_billing_periodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_expired_since_last_end_of_billing_periodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_expired_since_last_end_of_billing_periodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_expired_since_last_end_of_billing_periodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_expired_since_last_end_of_billing_periodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocaltimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Localtime")));
        }
        
        /// <summary>
        /// Raises the LocaltimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaltimeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocaltimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaltimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaltimeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocaltimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocaldateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Localdate")));
        }
        
        /// <summary>
        /// Raises the LocaldateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaldateChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocaldateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaldateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaldateChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LocaldateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWeekdayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Weekday")));
        }
        
        /// <summary>
        /// Raises the WeekdayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeekdayChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.WeekdayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeekdayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeekdayChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.WeekdayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeoflastresetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Timeoflastreset")));
        }
        
        /// <summary>
        /// Raises the TimeoflastresetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoflastresetChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeoflastresetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoflastresetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoflastresetChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeoflastresetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateoflastresetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Dateoflastreset")));
        }
        
        /// <summary>
        /// Raises the DateoflastresetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateoflastresetChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateoflastresetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateoflastresetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateoflastresetChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DateoflastresetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutputpulsedurationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Outputpulseduration")));
        }
        
        /// <summary>
        /// Raises the OutputpulsedurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputpulsedurationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputpulsedurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputpulsedurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputpulsedurationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OutputpulsedurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveClocksynchronizationwindowAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Clocksynchronizationwindow")));
        }
        
        /// <summary>
        /// Raises the ClocksynchronizationwindowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClocksynchronizationwindowChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ClocksynchronizationwindowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClocksynchronizationwindowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClocksynchronizationwindowChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ClocksynchronizationwindowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveClock_synchronization_methodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Clock_synchronization_method")));
        }
        
        /// <summary>
        /// Raises the Clock_synchronization_methodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_synchronization_methodChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Clock_synchronization_methodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_synchronization_methodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_synchronization_methodChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Clock_synchronization_methodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveClock_time_shift_limitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Clock_time_shift_limit")));
        }
        
        /// <summary>
        /// Raises the Clock_time_shift_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_time_shift_limitChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Clock_time_shift_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_time_shift_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_time_shift_limitChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Clock_time_shift_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBilling_period_reset_lockout_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityTimeEntries.ClassInstance)).Resolve("Billing_period_reset_lockout_time")));
        }
        
        /// <summary>
        /// Raises the Billing_period_reset_lockout_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_reset_lockout_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Billing_period_reset_lockout_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Billing_period_reset_lockout_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_reset_lockout_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Billing_period_reset_lockout_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIME_EXPIRED_SINCE_LAST_END_OF_BILLING_PERIOD"))
            {
                return this.Time_expired_since_last_end_of_billing_period;
            }
            if ((attribute == "LOCALTIME"))
            {
                return this.Localtime;
            }
            if ((attribute == "LOCALDATE"))
            {
                return this.Localdate;
            }
            if ((attribute == "WEEKDAY"))
            {
                return this.Weekday;
            }
            if ((attribute == "TIMEOFLASTRESET"))
            {
                return this.Timeoflastreset;
            }
            if ((attribute == "DATEOFLASTRESET"))
            {
                return this.Dateoflastreset;
            }
            if ((attribute == "OUTPUTPULSEDURATION"))
            {
                return this.Outputpulseduration;
            }
            if ((attribute == "CLOCKSYNCHRONIZATIONWINDOW"))
            {
                return this.Clocksynchronizationwindow;
            }
            if ((attribute == "CLOCK_SYNCHRONIZATION_METHOD"))
            {
                return this.Clock_synchronization_method;
            }
            if ((attribute == "CLOCK_TIME_SHIFT_LIMIT"))
            {
                return this.Clock_time_shift_limit;
            }
            if ((attribute == "BILLING_PERIOD_RESET_LOCKOUT_TIME"))
            {
                return this.Billing_period_reset_lockout_time;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIME_EXPIRED_SINCE_LAST_END_OF_BILLING_PERIOD"))
            {
                this.Time_expired_since_last_end_of_billing_period = ((string)(value));
                return;
            }
            if ((feature == "LOCALTIME"))
            {
                this.Localtime = ((string)(value));
                return;
            }
            if ((feature == "LOCALDATE"))
            {
                this.Localdate = ((string)(value));
                return;
            }
            if ((feature == "WEEKDAY"))
            {
                this.Weekday = ((string)(value));
                return;
            }
            if ((feature == "TIMEOFLASTRESET"))
            {
                this.Timeoflastreset = ((string)(value));
                return;
            }
            if ((feature == "DATEOFLASTRESET"))
            {
                this.Dateoflastreset = ((string)(value));
                return;
            }
            if ((feature == "OUTPUTPULSEDURATION"))
            {
                this.Outputpulseduration = ((string)(value));
                return;
            }
            if ((feature == "CLOCKSYNCHRONIZATIONWINDOW"))
            {
                this.Clocksynchronizationwindow = ((string)(value));
                return;
            }
            if ((feature == "CLOCK_SYNCHRONIZATION_METHOD"))
            {
                this.Clock_synchronization_method = ((string)(value));
                return;
            }
            if ((feature == "CLOCK_TIME_SHIFT_LIMIT"))
            {
                this.Clock_time_shift_limit = ((string)(value));
                return;
            }
            if ((feature == "BILLING_PERIOD_RESET_LOCKOUT_TIME"))
            {
                this.Billing_period_reset_lockout_time = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TIME_EXPIRED_SINCE_LAST_END_OF_BILLING_PERIOD"))
            {
                return new Time_expired_since_last_end_of_billing_periodProxy(this);
            }
            if ((attribute == "LOCALTIME"))
            {
                return new LocaltimeProxy(this);
            }
            if ((attribute == "LOCALDATE"))
            {
                return new LocaldateProxy(this);
            }
            if ((attribute == "WEEKDAY"))
            {
                return new WeekdayProxy(this);
            }
            if ((attribute == "TIMEOFLASTRESET"))
            {
                return new TimeoflastresetProxy(this);
            }
            if ((attribute == "DATEOFLASTRESET"))
            {
                return new DateoflastresetProxy(this);
            }
            if ((attribute == "OUTPUTPULSEDURATION"))
            {
                return new OutputpulsedurationProxy(this);
            }
            if ((attribute == "CLOCKSYNCHRONIZATIONWINDOW"))
            {
                return new ClocksynchronizationwindowProxy(this);
            }
            if ((attribute == "CLOCK_SYNCHRONIZATION_METHOD"))
            {
                return new Clock_synchronization_methodProxy(this);
            }
            if ((attribute == "CLOCK_TIME_SHIFT_LIMIT"))
            {
                return new Clock_time_shift_limitProxy(this);
            }
            if ((attribute == "BILLING_PERIOD_RESET_LOCKOUT_TIME"))
            {
                return new Billing_period_reset_lockout_timeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityTimeEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_expired_since_last_end_of_billing_period property
        /// </summary>
        private sealed class Time_expired_since_last_end_of_billing_periodProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_expired_since_last_end_of_billing_periodProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Time_expired_since_last_end_of_billing_period")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_expired_since_last_end_of_billing_period;
                }
                set
                {
                    this.ModelElement.Time_expired_since_last_end_of_billing_period = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Localtime property
        /// </summary>
        private sealed class LocaltimeProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocaltimeProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Localtime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Localtime;
                }
                set
                {
                    this.ModelElement.Localtime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Localdate property
        /// </summary>
        private sealed class LocaldateProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocaldateProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Localdate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Localdate;
                }
                set
                {
                    this.ModelElement.Localdate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Weekday property
        /// </summary>
        private sealed class WeekdayProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeekdayProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Weekday")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Weekday;
                }
                set
                {
                    this.ModelElement.Weekday = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Timeoflastreset property
        /// </summary>
        private sealed class TimeoflastresetProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeoflastresetProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Timeoflastreset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Timeoflastreset;
                }
                set
                {
                    this.ModelElement.Timeoflastreset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Dateoflastreset property
        /// </summary>
        private sealed class DateoflastresetProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateoflastresetProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Dateoflastreset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dateoflastreset;
                }
                set
                {
                    this.ModelElement.Dateoflastreset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Outputpulseduration property
        /// </summary>
        private sealed class OutputpulsedurationProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputpulsedurationProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Outputpulseduration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Outputpulseduration;
                }
                set
                {
                    this.ModelElement.Outputpulseduration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clocksynchronizationwindow property
        /// </summary>
        private sealed class ClocksynchronizationwindowProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClocksynchronizationwindowProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Clocksynchronizationwindow")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clocksynchronizationwindow;
                }
                set
                {
                    this.ModelElement.Clocksynchronizationwindow = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clock_synchronization_method property
        /// </summary>
        private sealed class Clock_synchronization_methodProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Clock_synchronization_methodProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Clock_synchronization_method")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clock_synchronization_method;
                }
                set
                {
                    this.ModelElement.Clock_synchronization_method = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clock_time_shift_limit property
        /// </summary>
        private sealed class Clock_time_shift_limitProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Clock_time_shift_limitProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Clock_time_shift_limit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clock_time_shift_limit;
                }
                set
                {
                    this.ModelElement.Clock_time_shift_limit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billing_period_reset_lockout_time property
        /// </summary>
        private sealed class Billing_period_reset_lockout_timeProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Billing_period_reset_lockout_timeProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement, "Billing_period_reset_lockout_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Billing_period_reset_lockout_time;
                }
                set
                {
                    this.ModelElement.Billing_period_reset_lockout_time = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Coefficients class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Coefficients")]
    public partial class Coefficients : Data, ICoefficients, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Transformer_magnetic_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _transformer_magnetic_losses;
        
        private static Lazy<ITypedElement> _transformer_magnetic_lossesAttribute = new Lazy<ITypedElement>(RetrieveTransformer_magnetic_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Transformer_iron_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _transformer_iron_losses;
        
        private static Lazy<ITypedElement> _transformer_iron_lossesAttribute = new Lazy<ITypedElement>(RetrieveTransformer_iron_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Line_resistance_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _line_resistance_losses;
        
        private static Lazy<ITypedElement> _line_resistance_lossesAttribute = new Lazy<ITypedElement>(RetrieveLine_resistance_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Line_reactance_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _line_reactance_losses;
        
        private static Lazy<ITypedElement> _line_reactance_lossesAttribute = new Lazy<ITypedElement>(RetrieveLine_reactance_lossesAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Transformer_magnetic_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Transformer_magnetic_losses
        {
            get
            {
                return this._transformer_magnetic_losses;
            }
            set
            {
                if ((this._transformer_magnetic_losses != value))
                {
                    Nullable<double> old = this._transformer_magnetic_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformer_magnetic_lossesChanging(e);
                    this.OnPropertyChanging("Transformer_magnetic_losses", e, _transformer_magnetic_lossesAttribute);
                    this._transformer_magnetic_losses = value;
                    this.OnTransformer_magnetic_lossesChanged(e);
                    this.OnPropertyChanged("Transformer_magnetic_losses", e, _transformer_magnetic_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformer_iron_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Transformer_iron_losses
        {
            get
            {
                return this._transformer_iron_losses;
            }
            set
            {
                if ((this._transformer_iron_losses != value))
                {
                    Nullable<double> old = this._transformer_iron_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformer_iron_lossesChanging(e);
                    this.OnPropertyChanging("Transformer_iron_losses", e, _transformer_iron_lossesAttribute);
                    this._transformer_iron_losses = value;
                    this.OnTransformer_iron_lossesChanged(e);
                    this.OnPropertyChanged("Transformer_iron_losses", e, _transformer_iron_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Line_resistance_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Line_resistance_losses
        {
            get
            {
                return this._line_resistance_losses;
            }
            set
            {
                if ((this._line_resistance_losses != value))
                {
                    Nullable<double> old = this._line_resistance_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLine_resistance_lossesChanging(e);
                    this.OnPropertyChanging("Line_resistance_losses", e, _line_resistance_lossesAttribute);
                    this._line_resistance_losses = value;
                    this.OnLine_resistance_lossesChanged(e);
                    this.OnPropertyChanged("Line_resistance_losses", e, _line_resistance_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Line_reactance_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Line_reactance_losses
        {
            get
            {
                return this._line_reactance_losses;
            }
            set
            {
                if ((this._line_reactance_losses != value))
                {
                    Nullable<double> old = this._line_reactance_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLine_reactance_lossesChanging(e);
                    this.OnPropertyChanging("Line_reactance_losses", e, _line_reactance_lossesAttribute);
                    this._line_reactance_losses = value;
                    this.OnLine_reactance_lossesChanged(e);
                    this.OnPropertyChanged("Line_reactance_losses", e, _line_reactance_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Coefficients")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Transformer_magnetic_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformer_magnetic_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Transformer_magnetic_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformer_magnetic_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Transformer_iron_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformer_iron_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Transformer_iron_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Transformer_iron_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Line_resistance_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Line_resistance_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Line_resistance_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Line_resistance_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Line_reactance_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Line_reactance_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Line_reactance_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Line_reactance_lossesChanging;
        
        private static ITypedElement RetrieveTransformer_magnetic_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.Coefficients.ClassInstance)).Resolve("Transformer_magnetic_losses")));
        }
        
        /// <summary>
        /// Raises the Transformer_magnetic_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformer_magnetic_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformer_magnetic_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformer_magnetic_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformer_magnetic_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformer_magnetic_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformer_iron_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.Coefficients.ClassInstance)).Resolve("Transformer_iron_losses")));
        }
        
        /// <summary>
        /// Raises the Transformer_iron_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformer_iron_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformer_iron_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformer_iron_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformer_iron_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Transformer_iron_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLine_resistance_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.Coefficients.ClassInstance)).Resolve("Line_resistance_losses")));
        }
        
        /// <summary>
        /// Raises the Line_resistance_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLine_resistance_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Line_resistance_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Line_resistance_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLine_resistance_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Line_resistance_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLine_reactance_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.Coefficients.ClassInstance)).Resolve("Line_reactance_losses")));
        }
        
        /// <summary>
        /// Raises the Line_reactance_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLine_reactance_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Line_reactance_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Line_reactance_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLine_reactance_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Line_reactance_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TRANSFORMER_MAGNETIC_LOSSES"))
            {
                return this.Transformer_magnetic_losses;
            }
            if ((attribute == "TRANSFORMER_IRON_LOSSES"))
            {
                return this.Transformer_iron_losses;
            }
            if ((attribute == "LINE_RESISTANCE_LOSSES"))
            {
                return this.Line_resistance_losses;
            }
            if ((attribute == "LINE_REACTANCE_LOSSES"))
            {
                return this.Line_reactance_losses;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMER_MAGNETIC_LOSSES"))
            {
                this.Transformer_magnetic_losses = ((double)(value));
                return;
            }
            if ((feature == "TRANSFORMER_IRON_LOSSES"))
            {
                this.Transformer_iron_losses = ((double)(value));
                return;
            }
            if ((feature == "LINE_RESISTANCE_LOSSES"))
            {
                this.Line_resistance_losses = ((double)(value));
                return;
            }
            if ((feature == "LINE_REACTANCE_LOSSES"))
            {
                this.Line_reactance_losses = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TRANSFORMER_MAGNETIC_LOSSES"))
            {
                return Observable.Box(new Transformer_magnetic_lossesProxy(this));
            }
            if ((attribute == "TRANSFORMER_IRON_LOSSES"))
            {
                return Observable.Box(new Transformer_iron_lossesProxy(this));
            }
            if ((attribute == "LINE_RESISTANCE_LOSSES"))
            {
                return Observable.Box(new Line_resistance_lossesProxy(this));
            }
            if ((attribute == "LINE_REACTANCE_LOSSES"))
            {
                return Observable.Box(new Line_reactance_lossesProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/Coefficients")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformer_magnetic_losses property
        /// </summary>
        private sealed class Transformer_magnetic_lossesProxy : ModelPropertyChange<ICoefficients, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformer_magnetic_lossesProxy(ICoefficients modelElement) : 
                    base(modelElement, "Transformer_magnetic_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Transformer_magnetic_losses;
                }
                set
                {
                    this.ModelElement.Transformer_magnetic_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformer_iron_losses property
        /// </summary>
        private sealed class Transformer_iron_lossesProxy : ModelPropertyChange<ICoefficients, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformer_iron_lossesProxy(ICoefficients modelElement) : 
                    base(modelElement, "Transformer_iron_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Transformer_iron_losses;
                }
                set
                {
                    this.ModelElement.Transformer_iron_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Line_resistance_losses property
        /// </summary>
        private sealed class Line_resistance_lossesProxy : ModelPropertyChange<ICoefficients, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Line_resistance_lossesProxy(ICoefficients modelElement) : 
                    base(modelElement, "Line_resistance_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Line_resistance_losses;
                }
                set
                {
                    this.ModelElement.Line_resistance_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Line_reactance_losses property
        /// </summary>
        private sealed class Line_reactance_lossesProxy : ModelPropertyChange<ICoefficients, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Line_reactance_lossesProxy(ICoefficients modelElement) : 
                    base(modelElement, "Line_reactance_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Line_reactance_losses;
                }
                set
                {
                    this.ModelElement.Line_reactance_losses = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MeasurementMethods class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementMethods")]
    public partial class MeasurementMethods : Data, IMeasurementMethods, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Algorithm_for_active_power_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_active_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_active_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_active_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_active_energy_management property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_active_energy_management;
        
        private static Lazy<ITypedElement> _algorithm_for_active_energy_managementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_active_energy_managementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_reactive_power_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_reactive_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_reactive_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_reactive_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_reactive_energy_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_reactive_energy_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_reactive_energy_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_reactive_energy_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_apparent_power_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_apparent_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_apparent_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_apparent_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_apparent_energy_measurement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_apparent_energy_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_apparent_energy_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_apparent_energy_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_power_factor_calculation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _algorithm_for_power_factor_calculation;
        
        private static Lazy<ITypedElement> _algorithm_for_power_factor_calculationAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_power_factor_calculationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Algorithm_for_active_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_active_power_measurement
        {
            get
            {
                return this._algorithm_for_active_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_active_power_measurement != value))
                {
                    string old = this._algorithm_for_active_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_active_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_active_power_measurement", e, _algorithm_for_active_power_measurementAttribute);
                    this._algorithm_for_active_power_measurement = value;
                    this.OnAlgorithm_for_active_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_active_power_measurement", e, _algorithm_for_active_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_active_energy_management property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_active_energy_management
        {
            get
            {
                return this._algorithm_for_active_energy_management;
            }
            set
            {
                if ((this._algorithm_for_active_energy_management != value))
                {
                    string old = this._algorithm_for_active_energy_management;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_active_energy_managementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_active_energy_management", e, _algorithm_for_active_energy_managementAttribute);
                    this._algorithm_for_active_energy_management = value;
                    this.OnAlgorithm_for_active_energy_managementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_active_energy_management", e, _algorithm_for_active_energy_managementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_reactive_power_measurement
        {
            get
            {
                return this._algorithm_for_reactive_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_reactive_power_measurement != value))
                {
                    string old = this._algorithm_for_reactive_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_reactive_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_reactive_power_measurement", e, _algorithm_for_reactive_power_measurementAttribute);
                    this._algorithm_for_reactive_power_measurement = value;
                    this.OnAlgorithm_for_reactive_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_reactive_power_measurement", e, _algorithm_for_reactive_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_energy_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_reactive_energy_measurement
        {
            get
            {
                return this._algorithm_for_reactive_energy_measurement;
            }
            set
            {
                if ((this._algorithm_for_reactive_energy_measurement != value))
                {
                    string old = this._algorithm_for_reactive_energy_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_reactive_energy_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_reactive_energy_measurement", e, _algorithm_for_reactive_energy_measurementAttribute);
                    this._algorithm_for_reactive_energy_measurement = value;
                    this.OnAlgorithm_for_reactive_energy_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_reactive_energy_measurement", e, _algorithm_for_reactive_energy_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_apparent_power_measurement
        {
            get
            {
                return this._algorithm_for_apparent_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_apparent_power_measurement != value))
                {
                    string old = this._algorithm_for_apparent_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_apparent_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_apparent_power_measurement", e, _algorithm_for_apparent_power_measurementAttribute);
                    this._algorithm_for_apparent_power_measurement = value;
                    this.OnAlgorithm_for_apparent_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_apparent_power_measurement", e, _algorithm_for_apparent_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_energy_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_apparent_energy_measurement
        {
            get
            {
                return this._algorithm_for_apparent_energy_measurement;
            }
            set
            {
                if ((this._algorithm_for_apparent_energy_measurement != value))
                {
                    string old = this._algorithm_for_apparent_energy_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_apparent_energy_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_apparent_energy_measurement", e, _algorithm_for_apparent_energy_measurementAttribute);
                    this._algorithm_for_apparent_energy_measurement = value;
                    this.OnAlgorithm_for_apparent_energy_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_apparent_energy_measurement", e, _algorithm_for_apparent_energy_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_power_factor_calculation property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        public string Algorithm_for_power_factor_calculation
        {
            get
            {
                return this._algorithm_for_power_factor_calculation;
            }
            set
            {
                if ((this._algorithm_for_power_factor_calculation != value))
                {
                    string old = this._algorithm_for_power_factor_calculation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_power_factor_calculationChanging(e);
                    this.OnPropertyChanging("Algorithm_for_power_factor_calculation", e, _algorithm_for_power_factor_calculationAttribute);
                    this._algorithm_for_power_factor_calculation = value;
                    this.OnAlgorithm_for_power_factor_calculationChanged(e);
                    this.OnPropertyChanged("Algorithm_for_power_factor_calculation", e, _algorithm_for_power_factor_calculationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementMethods")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_power_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_power_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_energy_management property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_energy_management property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_power_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_power_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_energy_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_energy_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_power_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_power_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_energy_measurement property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_energy_measurement property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_power_factor_calculation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_power_factor_calculation property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanging;
        
        private static ITypedElement RetrieveAlgorithm_for_active_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_active_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_active_energy_managementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_active_energy_management")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_energy_managementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_energy_managementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_energy_managementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_energy_managementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_energy_managementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_energy_managementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_reactive_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_reactive_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_reactive_energy_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_reactive_energy_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_energy_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_energy_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_energy_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_energy_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_energy_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_energy_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_apparent_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_apparent_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_apparent_energy_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_apparent_energy_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_energy_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_energy_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_energy_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_energy_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_energy_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_energy_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_power_factor_calculationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_power_factor_calculation")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_power_factor_calculationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_power_factor_calculationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_power_factor_calculationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_power_factor_calculationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_power_factor_calculationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_power_factor_calculationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ALGORITHM_FOR_ACTIVE_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_active_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_ACTIVE_ENERGY_MANAGEMENT"))
            {
                return this.Algorithm_for_active_energy_management;
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_reactive_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_ENERGY_MEASUREMENT"))
            {
                return this.Algorithm_for_reactive_energy_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_apparent_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_ENERGY_MEASUREMENT"))
            {
                return this.Algorithm_for_apparent_energy_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_POWER_FACTOR_CALCULATION"))
            {
                return this.Algorithm_for_power_factor_calculation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ALGORITHM_FOR_ACTIVE_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_active_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_ACTIVE_ENERGY_MANAGEMENT"))
            {
                this.Algorithm_for_active_energy_management = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_REACTIVE_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_reactive_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_REACTIVE_ENERGY_MEASUREMENT"))
            {
                this.Algorithm_for_reactive_energy_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_APPARENT_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_apparent_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_APPARENT_ENERGY_MEASUREMENT"))
            {
                this.Algorithm_for_apparent_energy_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_POWER_FACTOR_CALCULATION"))
            {
                this.Algorithm_for_power_factor_calculation = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ALGORITHM_FOR_ACTIVE_POWER_MEASUREMENT"))
            {
                return new Algorithm_for_active_power_measurementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_ACTIVE_ENERGY_MANAGEMENT"))
            {
                return new Algorithm_for_active_energy_managementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_POWER_MEASUREMENT"))
            {
                return new Algorithm_for_reactive_power_measurementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_ENERGY_MEASUREMENT"))
            {
                return new Algorithm_for_reactive_energy_measurementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_POWER_MEASUREMENT"))
            {
                return new Algorithm_for_apparent_power_measurementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_ENERGY_MEASUREMENT"))
            {
                return new Algorithm_for_apparent_energy_measurementProxy(this);
            }
            if ((attribute == "ALGORITHM_FOR_POWER_FACTOR_CALCULATION"))
            {
                return new Algorithm_for_power_factor_calculationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementMethods")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_active_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_active_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_active_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_active_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_active_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_active_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_active_energy_management property
        /// </summary>
        private sealed class Algorithm_for_active_energy_managementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_active_energy_managementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_active_energy_management")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_active_energy_management;
                }
                set
                {
                    this.ModelElement.Algorithm_for_active_energy_management = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_reactive_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_reactive_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_reactive_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_reactive_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_reactive_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_reactive_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_reactive_energy_measurement property
        /// </summary>
        private sealed class Algorithm_for_reactive_energy_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_reactive_energy_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_reactive_energy_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_reactive_energy_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_reactive_energy_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_apparent_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_apparent_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_apparent_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_apparent_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_apparent_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_apparent_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_apparent_energy_measurement property
        /// </summary>
        private sealed class Algorithm_for_apparent_energy_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_apparent_energy_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_apparent_energy_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_apparent_energy_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_apparent_energy_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_power_factor_calculation property
        /// </summary>
        private sealed class Algorithm_for_power_factor_calculationProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_power_factor_calculationProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_power_factor_calculation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_power_factor_calculation;
                }
                set
                {
                    this.ModelElement.Algorithm_for_power_factor_calculation = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityMeteringPointID class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityMeteringPointID")]
    public partial class ElectricityMeteringPointID : Data, IElectricityMeteringPointID, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ElectricityMeteringPointID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityMeteringPointID")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityMeteringPointID.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityMeteringPointID")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IElectricityMeteringPointID, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IElectricityMeteringPointID modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityRelatedStatusData class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityRelatedStatusData")]
    public partial class ElectricityRelatedStatusData : Data, IElectricityRelatedStatusData, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Status_information_missing_voltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status_information_missing_voltage;
        
        private static Lazy<ITypedElement> _status_information_missing_voltageAttribute = new Lazy<ITypedElement>(RetrieveStatus_information_missing_voltageAttribute);
        
        /// <summary>
        /// The backing field for the Status_information_missing_current property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status_information_missing_current;
        
        private static Lazy<ITypedElement> _status_information_missing_currentAttribute = new Lazy<ITypedElement>(RetrieveStatus_information_missing_currentAttribute);
        
        /// <summary>
        /// The backing field for the Status_information_current_without_voltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status_information_current_without_voltage;
        
        private static Lazy<ITypedElement> _status_information_current_without_voltageAttribute = new Lazy<ITypedElement>(RetrieveStatus_information_current_without_voltageAttribute);
        
        /// <summary>
        /// The backing field for the Status_information_auxiliary_power_supply property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status_information_auxiliary_power_supply;
        
        private static Lazy<ITypedElement> _status_information_auxiliary_power_supplyAttribute = new Lazy<ITypedElement>(RetrieveStatus_information_auxiliary_power_supplyAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Status_information_missing_voltage property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        public string Status_information_missing_voltage
        {
            get
            {
                return this._status_information_missing_voltage;
            }
            set
            {
                if ((this._status_information_missing_voltage != value))
                {
                    string old = this._status_information_missing_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatus_information_missing_voltageChanging(e);
                    this.OnPropertyChanging("Status_information_missing_voltage", e, _status_information_missing_voltageAttribute);
                    this._status_information_missing_voltage = value;
                    this.OnStatus_information_missing_voltageChanged(e);
                    this.OnPropertyChanged("Status_information_missing_voltage", e, _status_information_missing_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Status_information_missing_current property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        public string Status_information_missing_current
        {
            get
            {
                return this._status_information_missing_current;
            }
            set
            {
                if ((this._status_information_missing_current != value))
                {
                    string old = this._status_information_missing_current;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatus_information_missing_currentChanging(e);
                    this.OnPropertyChanging("Status_information_missing_current", e, _status_information_missing_currentAttribute);
                    this._status_information_missing_current = value;
                    this.OnStatus_information_missing_currentChanged(e);
                    this.OnPropertyChanged("Status_information_missing_current", e, _status_information_missing_currentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Status_information_current_without_voltage property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        public string Status_information_current_without_voltage
        {
            get
            {
                return this._status_information_current_without_voltage;
            }
            set
            {
                if ((this._status_information_current_without_voltage != value))
                {
                    string old = this._status_information_current_without_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatus_information_current_without_voltageChanging(e);
                    this.OnPropertyChanging("Status_information_current_without_voltage", e, _status_information_current_without_voltageAttribute);
                    this._status_information_current_without_voltage = value;
                    this.OnStatus_information_current_without_voltageChanged(e);
                    this.OnPropertyChanged("Status_information_current_without_voltage", e, _status_information_current_without_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Status_information_auxiliary_power_supply property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        public string Status_information_auxiliary_power_supply
        {
            get
            {
                return this._status_information_auxiliary_power_supply;
            }
            set
            {
                if ((this._status_information_auxiliary_power_supply != value))
                {
                    string old = this._status_information_auxiliary_power_supply;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatus_information_auxiliary_power_supplyChanging(e);
                    this.OnPropertyChanging("Status_information_auxiliary_power_supply", e, _status_information_auxiliary_power_supplyAttribute);
                    this._status_information_auxiliary_power_supply = value;
                    this.OnStatus_information_auxiliary_power_supplyChanged(e);
                    this.OnPropertyChanged("Status_information_auxiliary_power_supply", e, _status_information_auxiliary_power_supplyAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityRelatedStatusData")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Status_information_missing_voltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_missing_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_missing_voltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_missing_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_missing_current property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_missing_currentChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_missing_current property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_missing_currentChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_current_without_voltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_current_without_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_current_without_voltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_current_without_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_auxiliary_power_supply property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_auxiliary_power_supplyChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_auxiliary_power_supply property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Status_information_auxiliary_power_supplyChanging;
        
        private static ITypedElement RetrieveStatus_information_missing_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityRelatedStatusData.ClassInstance)).Resolve("Status_information_missing_voltage")));
        }
        
        /// <summary>
        /// Raises the Status_information_missing_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_missing_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_missing_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Status_information_missing_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_missing_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_missing_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatus_information_missing_currentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityRelatedStatusData.ClassInstance)).Resolve("Status_information_missing_current")));
        }
        
        /// <summary>
        /// Raises the Status_information_missing_currentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_missing_currentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_missing_currentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Status_information_missing_currentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_missing_currentChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_missing_currentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatus_information_current_without_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityRelatedStatusData.ClassInstance)).Resolve("Status_information_current_without_voltage")));
        }
        
        /// <summary>
        /// Raises the Status_information_current_without_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_current_without_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_current_without_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Status_information_current_without_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_current_without_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_current_without_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatus_information_auxiliary_power_supplyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityRelatedStatusData.ClassInstance)).Resolve("Status_information_auxiliary_power_supply")));
        }
        
        /// <summary>
        /// Raises the Status_information_auxiliary_power_supplyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_auxiliary_power_supplyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_auxiliary_power_supplyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Status_information_auxiliary_power_supplyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatus_information_auxiliary_power_supplyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Status_information_auxiliary_power_supplyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATUS_INFORMATION_MISSING_VOLTAGE"))
            {
                return this.Status_information_missing_voltage;
            }
            if ((attribute == "STATUS_INFORMATION_MISSING_CURRENT"))
            {
                return this.Status_information_missing_current;
            }
            if ((attribute == "STATUS_INFORMATION_CURRENT_WITHOUT_VOLTAGE"))
            {
                return this.Status_information_current_without_voltage;
            }
            if ((attribute == "STATUS_INFORMATION_AUXILIARY_POWER_SUPPLY"))
            {
                return this.Status_information_auxiliary_power_supply;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS_INFORMATION_MISSING_VOLTAGE"))
            {
                this.Status_information_missing_voltage = ((string)(value));
                return;
            }
            if ((feature == "STATUS_INFORMATION_MISSING_CURRENT"))
            {
                this.Status_information_missing_current = ((string)(value));
                return;
            }
            if ((feature == "STATUS_INFORMATION_CURRENT_WITHOUT_VOLTAGE"))
            {
                this.Status_information_current_without_voltage = ((string)(value));
                return;
            }
            if ((feature == "STATUS_INFORMATION_AUXILIARY_POWER_SUPPLY"))
            {
                this.Status_information_auxiliary_power_supply = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STATUS_INFORMATION_MISSING_VOLTAGE"))
            {
                return new Status_information_missing_voltageProxy(this);
            }
            if ((attribute == "STATUS_INFORMATION_MISSING_CURRENT"))
            {
                return new Status_information_missing_currentProxy(this);
            }
            if ((attribute == "STATUS_INFORMATION_CURRENT_WITHOUT_VOLTAGE"))
            {
                return new Status_information_current_without_voltageProxy(this);
            }
            if ((attribute == "STATUS_INFORMATION_AUXILIARY_POWER_SUPPLY"))
            {
                return new Status_information_auxiliary_power_supplyProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityRelatedStatusData")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Status_information_missing_voltage property
        /// </summary>
        private sealed class Status_information_missing_voltageProxy : ModelPropertyChange<IElectricityRelatedStatusData, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Status_information_missing_voltageProxy(IElectricityRelatedStatusData modelElement) : 
                    base(modelElement, "Status_information_missing_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status_information_missing_voltage;
                }
                set
                {
                    this.ModelElement.Status_information_missing_voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Status_information_missing_current property
        /// </summary>
        private sealed class Status_information_missing_currentProxy : ModelPropertyChange<IElectricityRelatedStatusData, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Status_information_missing_currentProxy(IElectricityRelatedStatusData modelElement) : 
                    base(modelElement, "Status_information_missing_current")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status_information_missing_current;
                }
                set
                {
                    this.ModelElement.Status_information_missing_current = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Status_information_current_without_voltage property
        /// </summary>
        private sealed class Status_information_current_without_voltageProxy : ModelPropertyChange<IElectricityRelatedStatusData, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Status_information_current_without_voltageProxy(IElectricityRelatedStatusData modelElement) : 
                    base(modelElement, "Status_information_current_without_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status_information_current_without_voltage;
                }
                set
                {
                    this.ModelElement.Status_information_current_without_voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Status_information_auxiliary_power_supply property
        /// </summary>
        private sealed class Status_information_auxiliary_power_supplyProxy : ModelPropertyChange<IElectricityRelatedStatusData, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Status_information_auxiliary_power_supplyProxy(IElectricityRelatedStatusData modelElement) : 
                    base(modelElement, "Status_information_auxiliary_power_supply")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status_information_auxiliary_power_supply;
                }
                set
                {
                    this.ModelElement.Status_information_auxiliary_power_supply = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityRelatedStatusDataMapped class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityRelatedStatusDataMapped")]
    public partial class ElectricityRelatedStatusDataMapped : Statusmapping, IElectricityRelatedStatusDataMapped, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityRelatedStatusDataMapped")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityRelatedStatusDataMapped")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the BatteryEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/BatteryEntries")]
    public partial class BatteryEntries : Data, IBatteryEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Battery_use_time_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _battery_use_time_counter;
        
        private static Lazy<ITypedElement> _battery_use_time_counterAttribute = new Lazy<ITypedElement>(RetrieveBattery_use_time_counterAttribute);
        
        /// <summary>
        /// The backing field for the Battery_charge_display property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _battery_charge_display;
        
        private static Lazy<ITypedElement> _battery_charge_displayAttribute = new Lazy<ITypedElement>(RetrieveBattery_charge_displayAttribute);
        
        /// <summary>
        /// The backing field for the Date_of_next_battery_change property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _date_of_next_battery_change;
        
        private static Lazy<ITypedElement> _date_of_next_battery_changeAttribute = new Lazy<ITypedElement>(RetrieveDate_of_next_battery_changeAttribute);
        
        /// <summary>
        /// The backing field for the Battery_voltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _battery_voltage;
        
        private static Lazy<ITypedElement> _battery_voltageAttribute = new Lazy<ITypedElement>(RetrieveBattery_voltageAttribute);
        
        /// <summary>
        /// The backing field for the Battery_initial_capacity property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _battery_initial_capacity;
        
        private static Lazy<ITypedElement> _battery_initial_capacityAttribute = new Lazy<ITypedElement>(RetrieveBattery_initial_capacityAttribute);
        
        /// <summary>
        /// The backing field for the Battery_installation_date_and_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _battery_installation_date_and_time;
        
        private static Lazy<ITypedElement> _battery_installation_date_and_timeAttribute = new Lazy<ITypedElement>(RetrieveBattery_installation_date_and_timeAttribute);
        
        /// <summary>
        /// The backing field for the Battery_estimated_remaining_use_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _battery_estimated_remaining_use_time;
        
        private static Lazy<ITypedElement> _battery_estimated_remaining_use_timeAttribute = new Lazy<ITypedElement>(RetrieveBattery_estimated_remaining_use_timeAttribute);
        
        /// <summary>
        /// The backing field for the Aux_supply_use_time_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _aux_supply_use_time_counter;
        
        private static Lazy<ITypedElement> _aux_supply_use_time_counterAttribute = new Lazy<ITypedElement>(RetrieveAux_supply_use_time_counterAttribute);
        
        /// <summary>
        /// The backing field for the Aux_voltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _aux_voltage;
        
        private static Lazy<ITypedElement> _aux_voltageAttribute = new Lazy<ITypedElement>(RetrieveAux_voltageAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Battery_use_time_counter property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Battery_use_time_counter
        {
            get
            {
                return this._battery_use_time_counter;
            }
            set
            {
                if ((this._battery_use_time_counter != value))
                {
                    Nullable<int> old = this._battery_use_time_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_use_time_counterChanging(e);
                    this.OnPropertyChanging("Battery_use_time_counter", e, _battery_use_time_counterAttribute);
                    this._battery_use_time_counter = value;
                    this.OnBattery_use_time_counterChanged(e);
                    this.OnPropertyChanged("Battery_use_time_counter", e, _battery_use_time_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_charge_display property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public string Battery_charge_display
        {
            get
            {
                return this._battery_charge_display;
            }
            set
            {
                if ((this._battery_charge_display != value))
                {
                    string old = this._battery_charge_display;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_charge_displayChanging(e);
                    this.OnPropertyChanging("Battery_charge_display", e, _battery_charge_displayAttribute);
                    this._battery_charge_display = value;
                    this.OnBattery_charge_displayChanged(e);
                    this.OnPropertyChanged("Battery_charge_display", e, _battery_charge_displayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Date_of_next_battery_change property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public string Date_of_next_battery_change
        {
            get
            {
                return this._date_of_next_battery_change;
            }
            set
            {
                if ((this._date_of_next_battery_change != value))
                {
                    string old = this._date_of_next_battery_change;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDate_of_next_battery_changeChanging(e);
                    this.OnPropertyChanging("Date_of_next_battery_change", e, _date_of_next_battery_changeAttribute);
                    this._date_of_next_battery_change = value;
                    this.OnDate_of_next_battery_changeChanged(e);
                    this.OnPropertyChanged("Date_of_next_battery_change", e, _date_of_next_battery_changeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_voltage property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Battery_voltage
        {
            get
            {
                return this._battery_voltage;
            }
            set
            {
                if ((this._battery_voltage != value))
                {
                    Nullable<double> old = this._battery_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_voltageChanging(e);
                    this.OnPropertyChanging("Battery_voltage", e, _battery_voltageAttribute);
                    this._battery_voltage = value;
                    this.OnBattery_voltageChanged(e);
                    this.OnPropertyChanged("Battery_voltage", e, _battery_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_initial_capacity property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Battery_initial_capacity
        {
            get
            {
                return this._battery_initial_capacity;
            }
            set
            {
                if ((this._battery_initial_capacity != value))
                {
                    Nullable<double> old = this._battery_initial_capacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_initial_capacityChanging(e);
                    this.OnPropertyChanging("Battery_initial_capacity", e, _battery_initial_capacityAttribute);
                    this._battery_initial_capacity = value;
                    this.OnBattery_initial_capacityChanged(e);
                    this.OnPropertyChanged("Battery_initial_capacity", e, _battery_initial_capacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_installation_date_and_time property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public string Battery_installation_date_and_time
        {
            get
            {
                return this._battery_installation_date_and_time;
            }
            set
            {
                if ((this._battery_installation_date_and_time != value))
                {
                    string old = this._battery_installation_date_and_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_installation_date_and_timeChanging(e);
                    this.OnPropertyChanging("Battery_installation_date_and_time", e, _battery_installation_date_and_timeAttribute);
                    this._battery_installation_date_and_time = value;
                    this.OnBattery_installation_date_and_timeChanged(e);
                    this.OnPropertyChanged("Battery_installation_date_and_time", e, _battery_installation_date_and_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_estimated_remaining_use_time property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public string Battery_estimated_remaining_use_time
        {
            get
            {
                return this._battery_estimated_remaining_use_time;
            }
            set
            {
                if ((this._battery_estimated_remaining_use_time != value))
                {
                    string old = this._battery_estimated_remaining_use_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_estimated_remaining_use_timeChanging(e);
                    this.OnPropertyChanging("Battery_estimated_remaining_use_time", e, _battery_estimated_remaining_use_timeAttribute);
                    this._battery_estimated_remaining_use_time = value;
                    this.OnBattery_estimated_remaining_use_timeChanged(e);
                    this.OnPropertyChanged("Battery_estimated_remaining_use_time", e, _battery_estimated_remaining_use_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Aux_supply_use_time_counter property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Aux_supply_use_time_counter
        {
            get
            {
                return this._aux_supply_use_time_counter;
            }
            set
            {
                if ((this._aux_supply_use_time_counter != value))
                {
                    Nullable<int> old = this._aux_supply_use_time_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAux_supply_use_time_counterChanging(e);
                    this.OnPropertyChanging("Aux_supply_use_time_counter", e, _aux_supply_use_time_counterAttribute);
                    this._aux_supply_use_time_counter = value;
                    this.OnAux_supply_use_time_counterChanged(e);
                    this.OnPropertyChanged("Aux_supply_use_time_counter", e, _aux_supply_use_time_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Aux_voltage property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Aux_voltage
        {
            get
            {
                return this._aux_voltage;
            }
            set
            {
                if ((this._aux_voltage != value))
                {
                    Nullable<double> old = this._aux_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAux_voltageChanging(e);
                    this.OnPropertyChanging("Aux_voltage", e, _aux_voltageAttribute);
                    this._aux_voltage = value;
                    this.OnAux_voltageChanged(e);
                    this.OnPropertyChanged("Aux_voltage", e, _aux_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/BatteryEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Battery_use_time_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Battery_use_time_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Battery_charge_display property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_charge_displayChanged;
        
        /// <summary>
        /// Gets fired before the Battery_charge_display property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_charge_displayChanging;
        
        /// <summary>
        /// Gets fired when the Date_of_next_battery_change property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanged;
        
        /// <summary>
        /// Gets fired before the Date_of_next_battery_change property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_voltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Battery_voltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Battery_initial_capacity property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanged;
        
        /// <summary>
        /// Gets fired before the Battery_initial_capacity property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanging;
        
        /// <summary>
        /// Gets fired when the Battery_installation_date_and_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_installation_date_and_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_estimated_remaining_use_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_estimated_remaining_use_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanging;
        
        /// <summary>
        /// Gets fired when the Aux_supply_use_time_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Aux_supply_use_time_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Aux_voltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Aux_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Aux_voltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Aux_voltageChanging;
        
        private static ITypedElement RetrieveBattery_use_time_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_use_time_counter")));
        }
        
        /// <summary>
        /// Raises the Battery_use_time_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_use_time_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_use_time_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_use_time_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_use_time_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_use_time_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_charge_displayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_charge_display")));
        }
        
        /// <summary>
        /// Raises the Battery_charge_displayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_charge_displayChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_charge_displayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_charge_displayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_charge_displayChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_charge_displayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDate_of_next_battery_changeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Date_of_next_battery_change")));
        }
        
        /// <summary>
        /// Raises the Date_of_next_battery_changeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDate_of_next_battery_changeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Date_of_next_battery_changeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Date_of_next_battery_changeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDate_of_next_battery_changeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Date_of_next_battery_changeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_voltage")));
        }
        
        /// <summary>
        /// Raises the Battery_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_initial_capacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_initial_capacity")));
        }
        
        /// <summary>
        /// Raises the Battery_initial_capacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_initial_capacityChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_initial_capacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_initial_capacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_initial_capacityChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_initial_capacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_installation_date_and_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_installation_date_and_time")));
        }
        
        /// <summary>
        /// Raises the Battery_installation_date_and_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_installation_date_and_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_installation_date_and_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_installation_date_and_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_installation_date_and_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_installation_date_and_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_estimated_remaining_use_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Battery_estimated_remaining_use_time")));
        }
        
        /// <summary>
        /// Raises the Battery_estimated_remaining_use_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_estimated_remaining_use_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_estimated_remaining_use_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_estimated_remaining_use_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_estimated_remaining_use_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Battery_estimated_remaining_use_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAux_supply_use_time_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Aux_supply_use_time_counter")));
        }
        
        /// <summary>
        /// Raises the Aux_supply_use_time_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_supply_use_time_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Aux_supply_use_time_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Aux_supply_use_time_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_supply_use_time_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Aux_supply_use_time_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAux_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.BatteryEntries.ClassInstance)).Resolve("Aux_voltage")));
        }
        
        /// <summary>
        /// Raises the Aux_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Aux_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Aux_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Aux_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BATTERY_USE_TIME_COUNTER"))
            {
                return this.Battery_use_time_counter;
            }
            if ((attribute == "BATTERY_CHARGE_DISPLAY"))
            {
                return this.Battery_charge_display;
            }
            if ((attribute == "DATE_OF_NEXT_BATTERY_CHANGE"))
            {
                return this.Date_of_next_battery_change;
            }
            if ((attribute == "BATTERY_VOLTAGE"))
            {
                return this.Battery_voltage;
            }
            if ((attribute == "BATTERY_INITIAL_CAPACITY"))
            {
                return this.Battery_initial_capacity;
            }
            if ((attribute == "BATTERY_INSTALLATION_DATE_AND_TIME"))
            {
                return this.Battery_installation_date_and_time;
            }
            if ((attribute == "BATTERY_ESTIMATED_REMAINING_USE_TIME"))
            {
                return this.Battery_estimated_remaining_use_time;
            }
            if ((attribute == "AUX_SUPPLY_USE_TIME_COUNTER"))
            {
                return this.Aux_supply_use_time_counter;
            }
            if ((attribute == "AUX_VOLTAGE"))
            {
                return this.Aux_voltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BATTERY_USE_TIME_COUNTER"))
            {
                this.Battery_use_time_counter = ((int)(value));
                return;
            }
            if ((feature == "BATTERY_CHARGE_DISPLAY"))
            {
                this.Battery_charge_display = ((string)(value));
                return;
            }
            if ((feature == "DATE_OF_NEXT_BATTERY_CHANGE"))
            {
                this.Date_of_next_battery_change = ((string)(value));
                return;
            }
            if ((feature == "BATTERY_VOLTAGE"))
            {
                this.Battery_voltage = ((double)(value));
                return;
            }
            if ((feature == "BATTERY_INITIAL_CAPACITY"))
            {
                this.Battery_initial_capacity = ((double)(value));
                return;
            }
            if ((feature == "BATTERY_INSTALLATION_DATE_AND_TIME"))
            {
                this.Battery_installation_date_and_time = ((string)(value));
                return;
            }
            if ((feature == "BATTERY_ESTIMATED_REMAINING_USE_TIME"))
            {
                this.Battery_estimated_remaining_use_time = ((string)(value));
                return;
            }
            if ((feature == "AUX_SUPPLY_USE_TIME_COUNTER"))
            {
                this.Aux_supply_use_time_counter = ((int)(value));
                return;
            }
            if ((feature == "AUX_VOLTAGE"))
            {
                this.Aux_voltage = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BATTERY_USE_TIME_COUNTER"))
            {
                return Observable.Box(new Battery_use_time_counterProxy(this));
            }
            if ((attribute == "BATTERY_CHARGE_DISPLAY"))
            {
                return new Battery_charge_displayProxy(this);
            }
            if ((attribute == "DATE_OF_NEXT_BATTERY_CHANGE"))
            {
                return new Date_of_next_battery_changeProxy(this);
            }
            if ((attribute == "BATTERY_VOLTAGE"))
            {
                return Observable.Box(new Battery_voltageProxy(this));
            }
            if ((attribute == "BATTERY_INITIAL_CAPACITY"))
            {
                return Observable.Box(new Battery_initial_capacityProxy(this));
            }
            if ((attribute == "BATTERY_INSTALLATION_DATE_AND_TIME"))
            {
                return new Battery_installation_date_and_timeProxy(this);
            }
            if ((attribute == "BATTERY_ESTIMATED_REMAINING_USE_TIME"))
            {
                return new Battery_estimated_remaining_use_timeProxy(this);
            }
            if ((attribute == "AUX_SUPPLY_USE_TIME_COUNTER"))
            {
                return Observable.Box(new Aux_supply_use_time_counterProxy(this));
            }
            if ((attribute == "AUX_VOLTAGE"))
            {
                return Observable.Box(new Aux_voltageProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/BatteryEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_use_time_counter property
        /// </summary>
        private sealed class Battery_use_time_counterProxy : ModelPropertyChange<IBatteryEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_use_time_counterProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_use_time_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Battery_use_time_counter;
                }
                set
                {
                    this.ModelElement.Battery_use_time_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_charge_display property
        /// </summary>
        private sealed class Battery_charge_displayProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_charge_displayProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_charge_display")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_charge_display;
                }
                set
                {
                    this.ModelElement.Battery_charge_display = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Date_of_next_battery_change property
        /// </summary>
        private sealed class Date_of_next_battery_changeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Date_of_next_battery_changeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Date_of_next_battery_change")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Date_of_next_battery_change;
                }
                set
                {
                    this.ModelElement.Date_of_next_battery_change = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_voltage property
        /// </summary>
        private sealed class Battery_voltageProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_voltageProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Battery_voltage;
                }
                set
                {
                    this.ModelElement.Battery_voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_initial_capacity property
        /// </summary>
        private sealed class Battery_initial_capacityProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_initial_capacityProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_initial_capacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Battery_initial_capacity;
                }
                set
                {
                    this.ModelElement.Battery_initial_capacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_installation_date_and_time property
        /// </summary>
        private sealed class Battery_installation_date_and_timeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_installation_date_and_timeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_installation_date_and_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_installation_date_and_time;
                }
                set
                {
                    this.ModelElement.Battery_installation_date_and_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_estimated_remaining_use_time property
        /// </summary>
        private sealed class Battery_estimated_remaining_use_timeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_estimated_remaining_use_timeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_estimated_remaining_use_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_estimated_remaining_use_time;
                }
                set
                {
                    this.ModelElement.Battery_estimated_remaining_use_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Aux_supply_use_time_counter property
        /// </summary>
        private sealed class Aux_supply_use_time_counterProxy : ModelPropertyChange<IBatteryEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Aux_supply_use_time_counterProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Aux_supply_use_time_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Aux_supply_use_time_counter;
                }
                set
                {
                    this.ModelElement.Aux_supply_use_time_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Aux_voltage property
        /// </summary>
        private sealed class Aux_voltageProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Aux_voltageProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Aux_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Aux_voltage;
                }
                set
                {
                    this.ModelElement.Aux_voltage = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PowerFailureMonitoring class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PowerFailureMonitoring")]
    public partial class PowerFailureMonitoring : Data, IPowerFailureMonitoring, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FailuresAllPhases property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _failuresAllPhases;
        
        private static Lazy<ITypedElement> _failuresAllPhasesAttribute = new Lazy<ITypedElement>(RetrieveFailuresAllPhasesAttribute);
        
        /// <summary>
        /// The backing field for the FailuresL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _failuresL1;
        
        private static Lazy<ITypedElement> _failuresL1Attribute = new Lazy<ITypedElement>(RetrieveFailuresL1Attribute);
        
        /// <summary>
        /// The backing field for the FailuresL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _failuresL2;
        
        private static Lazy<ITypedElement> _failuresL2Attribute = new Lazy<ITypedElement>(RetrieveFailuresL2Attribute);
        
        /// <summary>
        /// The backing field for the FailuresL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _failuresL3;
        
        private static Lazy<ITypedElement> _failuresL3Attribute = new Lazy<ITypedElement>(RetrieveFailuresL3Attribute);
        
        /// <summary>
        /// The backing field for the FailuresAny property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _failuresAny;
        
        private static Lazy<ITypedElement> _failuresAnyAttribute = new Lazy<ITypedElement>(RetrieveFailuresAnyAttribute);
        
        /// <summary>
        /// The backing field for the Auxiliarysupply property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _auxiliarysupply;
        
        private static Lazy<ITypedElement> _auxiliarysupplyAttribute = new Lazy<ITypedElement>(RetrieveAuxiliarysupplyAttribute);
        
        /// <summary>
        /// The backing field for the LongFailsAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _longFailsAll;
        
        private static Lazy<ITypedElement> _longFailsAllAttribute = new Lazy<ITypedElement>(RetrieveLongFailsAllAttribute);
        
        /// <summary>
        /// The backing field for the LongFailsL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _longFailsL1;
        
        private static Lazy<ITypedElement> _longFailsL1Attribute = new Lazy<ITypedElement>(RetrieveLongFailsL1Attribute);
        
        /// <summary>
        /// The backing field for the LongFailsL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _longFailsL2;
        
        private static Lazy<ITypedElement> _longFailsL2Attribute = new Lazy<ITypedElement>(RetrieveLongFailsL2Attribute);
        
        /// <summary>
        /// The backing field for the LongFailsL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _longFailsL3;
        
        private static Lazy<ITypedElement> _longFailsL3Attribute = new Lazy<ITypedElement>(RetrieveLongFailsL3Attribute);
        
        /// <summary>
        /// The backing field for the LongFailsAny property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _longFailsAny;
        
        private static Lazy<ITypedElement> _longFailsAnyAttribute = new Lazy<ITypedElement>(RetrieveLongFailsAnyAttribute);
        
        /// <summary>
        /// The backing field for the TimeAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeAll;
        
        private static Lazy<ITypedElement> _timeAllAttribute = new Lazy<ITypedElement>(RetrieveTimeAllAttribute);
        
        /// <summary>
        /// The backing field for the TimeL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeL1;
        
        private static Lazy<ITypedElement> _timeL1Attribute = new Lazy<ITypedElement>(RetrieveTimeL1Attribute);
        
        /// <summary>
        /// The backing field for the TimeL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeL2;
        
        private static Lazy<ITypedElement> _timeL2Attribute = new Lazy<ITypedElement>(RetrieveTimeL2Attribute);
        
        /// <summary>
        /// The backing field for the TimeL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeL3;
        
        private static Lazy<ITypedElement> _timeL3Attribute = new Lazy<ITypedElement>(RetrieveTimeL3Attribute);
        
        /// <summary>
        /// The backing field for the TimeAny property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeAny;
        
        private static Lazy<ITypedElement> _timeAnyAttribute = new Lazy<ITypedElement>(RetrieveTimeAnyAttribute);
        
        /// <summary>
        /// The backing field for the DurationAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _durationAll;
        
        private static Lazy<ITypedElement> _durationAllAttribute = new Lazy<ITypedElement>(RetrieveDurationAllAttribute);
        
        /// <summary>
        /// The backing field for the DurationL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _durationL1;
        
        private static Lazy<ITypedElement> _durationL1Attribute = new Lazy<ITypedElement>(RetrieveDurationL1Attribute);
        
        /// <summary>
        /// The backing field for the DurationL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _durationL2;
        
        private static Lazy<ITypedElement> _durationL2Attribute = new Lazy<ITypedElement>(RetrieveDurationL2Attribute);
        
        /// <summary>
        /// The backing field for the DurationL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _durationL3;
        
        private static Lazy<ITypedElement> _durationL3Attribute = new Lazy<ITypedElement>(RetrieveDurationL3Attribute);
        
        /// <summary>
        /// The backing field for the DurationAny property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _durationAny;
        
        private static Lazy<ITypedElement> _durationAnyAttribute = new Lazy<ITypedElement>(RetrieveDurationAnyAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_long_powerfailure property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _time_threshold_long_powerfailure;
        
        private static Lazy<ITypedElement> _time_threshold_long_powerfailureAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_long_powerfailureAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The FailuresAllPhases property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> FailuresAllPhases
        {
            get
            {
                return this._failuresAllPhases;
            }
            set
            {
                if ((this._failuresAllPhases != value))
                {
                    Nullable<int> old = this._failuresAllPhases;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresAllPhasesChanging(e);
                    this.OnPropertyChanging("FailuresAllPhases", e, _failuresAllPhasesAttribute);
                    this._failuresAllPhases = value;
                    this.OnFailuresAllPhasesChanged(e);
                    this.OnPropertyChanged("FailuresAllPhases", e, _failuresAllPhasesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> FailuresL1
        {
            get
            {
                return this._failuresL1;
            }
            set
            {
                if ((this._failuresL1 != value))
                {
                    Nullable<int> old = this._failuresL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL1Changing(e);
                    this.OnPropertyChanging("FailuresL1", e, _failuresL1Attribute);
                    this._failuresL1 = value;
                    this.OnFailuresL1Changed(e);
                    this.OnPropertyChanged("FailuresL1", e, _failuresL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> FailuresL2
        {
            get
            {
                return this._failuresL2;
            }
            set
            {
                if ((this._failuresL2 != value))
                {
                    Nullable<int> old = this._failuresL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL2Changing(e);
                    this.OnPropertyChanging("FailuresL2", e, _failuresL2Attribute);
                    this._failuresL2 = value;
                    this.OnFailuresL2Changed(e);
                    this.OnPropertyChanged("FailuresL2", e, _failuresL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> FailuresL3
        {
            get
            {
                return this._failuresL3;
            }
            set
            {
                if ((this._failuresL3 != value))
                {
                    Nullable<int> old = this._failuresL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL3Changing(e);
                    this.OnPropertyChanging("FailuresL3", e, _failuresL3Attribute);
                    this._failuresL3 = value;
                    this.OnFailuresL3Changed(e);
                    this.OnPropertyChanged("FailuresL3", e, _failuresL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FailuresAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> FailuresAny
        {
            get
            {
                return this._failuresAny;
            }
            set
            {
                if ((this._failuresAny != value))
                {
                    Nullable<int> old = this._failuresAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresAnyChanging(e);
                    this.OnPropertyChanging("FailuresAny", e, _failuresAnyAttribute);
                    this._failuresAny = value;
                    this.OnFailuresAnyChanged(e);
                    this.OnPropertyChanged("FailuresAny", e, _failuresAnyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Auxiliarysupply property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string Auxiliarysupply
        {
            get
            {
                return this._auxiliarysupply;
            }
            set
            {
                if ((this._auxiliarysupply != value))
                {
                    string old = this._auxiliarysupply;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxiliarysupplyChanging(e);
                    this.OnPropertyChanging("Auxiliarysupply", e, _auxiliarysupplyAttribute);
                    this._auxiliarysupply = value;
                    this.OnAuxiliarysupplyChanged(e);
                    this.OnPropertyChanged("Auxiliarysupply", e, _auxiliarysupplyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LongFailsAll
        {
            get
            {
                return this._longFailsAll;
            }
            set
            {
                if ((this._longFailsAll != value))
                {
                    Nullable<int> old = this._longFailsAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsAllChanging(e);
                    this.OnPropertyChanging("LongFailsAll", e, _longFailsAllAttribute);
                    this._longFailsAll = value;
                    this.OnLongFailsAllChanged(e);
                    this.OnPropertyChanged("LongFailsAll", e, _longFailsAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LongFailsL1
        {
            get
            {
                return this._longFailsL1;
            }
            set
            {
                if ((this._longFailsL1 != value))
                {
                    Nullable<int> old = this._longFailsL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL1Changing(e);
                    this.OnPropertyChanging("LongFailsL1", e, _longFailsL1Attribute);
                    this._longFailsL1 = value;
                    this.OnLongFailsL1Changed(e);
                    this.OnPropertyChanged("LongFailsL1", e, _longFailsL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LongFailsL2
        {
            get
            {
                return this._longFailsL2;
            }
            set
            {
                if ((this._longFailsL2 != value))
                {
                    Nullable<int> old = this._longFailsL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL2Changing(e);
                    this.OnPropertyChanging("LongFailsL2", e, _longFailsL2Attribute);
                    this._longFailsL2 = value;
                    this.OnLongFailsL2Changed(e);
                    this.OnPropertyChanged("LongFailsL2", e, _longFailsL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LongFailsL3
        {
            get
            {
                return this._longFailsL3;
            }
            set
            {
                if ((this._longFailsL3 != value))
                {
                    Nullable<int> old = this._longFailsL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL3Changing(e);
                    this.OnPropertyChanging("LongFailsL3", e, _longFailsL3Attribute);
                    this._longFailsL3 = value;
                    this.OnLongFailsL3Changed(e);
                    this.OnPropertyChanged("LongFailsL3", e, _longFailsL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> LongFailsAny
        {
            get
            {
                return this._longFailsAny;
            }
            set
            {
                if ((this._longFailsAny != value))
                {
                    Nullable<int> old = this._longFailsAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsAnyChanging(e);
                    this.OnPropertyChanging("LongFailsAny", e, _longFailsAnyAttribute);
                    this._longFailsAny = value;
                    this.OnLongFailsAnyChanged(e);
                    this.OnPropertyChanged("LongFailsAny", e, _longFailsAnyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string TimeAll
        {
            get
            {
                return this._timeAll;
            }
            set
            {
                if ((this._timeAll != value))
                {
                    string old = this._timeAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeAllChanging(e);
                    this.OnPropertyChanging("TimeAll", e, _timeAllAttribute);
                    this._timeAll = value;
                    this.OnTimeAllChanged(e);
                    this.OnPropertyChanged("TimeAll", e, _timeAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string TimeL1
        {
            get
            {
                return this._timeL1;
            }
            set
            {
                if ((this._timeL1 != value))
                {
                    string old = this._timeL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL1Changing(e);
                    this.OnPropertyChanging("TimeL1", e, _timeL1Attribute);
                    this._timeL1 = value;
                    this.OnTimeL1Changed(e);
                    this.OnPropertyChanged("TimeL1", e, _timeL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string TimeL2
        {
            get
            {
                return this._timeL2;
            }
            set
            {
                if ((this._timeL2 != value))
                {
                    string old = this._timeL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL2Changing(e);
                    this.OnPropertyChanging("TimeL2", e, _timeL2Attribute);
                    this._timeL2 = value;
                    this.OnTimeL2Changed(e);
                    this.OnPropertyChanged("TimeL2", e, _timeL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string TimeL3
        {
            get
            {
                return this._timeL3;
            }
            set
            {
                if ((this._timeL3 != value))
                {
                    string old = this._timeL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL3Changing(e);
                    this.OnPropertyChanging("TimeL3", e, _timeL3Attribute);
                    this._timeL3 = value;
                    this.OnTimeL3Changed(e);
                    this.OnPropertyChanged("TimeL3", e, _timeL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public string TimeAny
        {
            get
            {
                return this._timeAny;
            }
            set
            {
                if ((this._timeAny != value))
                {
                    string old = this._timeAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeAnyChanging(e);
                    this.OnPropertyChanging("TimeAny", e, _timeAnyAttribute);
                    this._timeAny = value;
                    this.OnTimeAnyChanged(e);
                    this.OnPropertyChanged("TimeAny", e, _timeAnyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DurationAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> DurationAll
        {
            get
            {
                return this._durationAll;
            }
            set
            {
                if ((this._durationAll != value))
                {
                    Nullable<int> old = this._durationAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationAllChanging(e);
                    this.OnPropertyChanging("DurationAll", e, _durationAllAttribute);
                    this._durationAll = value;
                    this.OnDurationAllChanged(e);
                    this.OnPropertyChanged("DurationAll", e, _durationAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DurationL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> DurationL1
        {
            get
            {
                return this._durationL1;
            }
            set
            {
                if ((this._durationL1 != value))
                {
                    Nullable<int> old = this._durationL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL1Changing(e);
                    this.OnPropertyChanging("DurationL1", e, _durationL1Attribute);
                    this._durationL1 = value;
                    this.OnDurationL1Changed(e);
                    this.OnPropertyChanged("DurationL1", e, _durationL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The DurationL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> DurationL2
        {
            get
            {
                return this._durationL2;
            }
            set
            {
                if ((this._durationL2 != value))
                {
                    Nullable<int> old = this._durationL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL2Changing(e);
                    this.OnPropertyChanging("DurationL2", e, _durationL2Attribute);
                    this._durationL2 = value;
                    this.OnDurationL2Changed(e);
                    this.OnPropertyChanged("DurationL2", e, _durationL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The DurationL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> DurationL3
        {
            get
            {
                return this._durationL3;
            }
            set
            {
                if ((this._durationL3 != value))
                {
                    Nullable<int> old = this._durationL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL3Changing(e);
                    this.OnPropertyChanging("DurationL3", e, _durationL3Attribute);
                    this._durationL3 = value;
                    this.OnDurationL3Changed(e);
                    this.OnPropertyChanged("DurationL3", e, _durationL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The DurationAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> DurationAny
        {
            get
            {
                return this._durationAny;
            }
            set
            {
                if ((this._durationAny != value))
                {
                    Nullable<int> old = this._durationAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationAnyChanging(e);
                    this.OnPropertyChanging("DurationAny", e, _durationAnyAttribute);
                    this._durationAny = value;
                    this.OnDurationAnyChanged(e);
                    this.OnPropertyChanged("DurationAny", e, _durationAnyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_long_powerfailure property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Time_threshold_long_powerfailure
        {
            get
            {
                return this._time_threshold_long_powerfailure;
            }
            set
            {
                if ((this._time_threshold_long_powerfailure != value))
                {
                    Nullable<int> old = this._time_threshold_long_powerfailure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_long_powerfailureChanging(e);
                    this.OnPropertyChanging("Time_threshold_long_powerfailure", e, _time_threshold_long_powerfailureAttribute);
                    this._time_threshold_long_powerfailure = value;
                    this.OnTime_threshold_long_powerfailureChanged(e);
                    this.OnPropertyChanged("Time_threshold_long_powerfailure", e, _time_threshold_long_powerfailureAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PowerFailureMonitoring")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the FailuresAllPhases property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanged;
        
        /// <summary>
        /// Gets fired before the FailuresAllPhases property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanging;
        
        /// <summary>
        /// Gets fired when the FailuresL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL1Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL1Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL2Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL2Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL3Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresL3Changing;
        
        /// <summary>
        /// Gets fired when the FailuresAny property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresAnyChanged;
        
        /// <summary>
        /// Gets fired before the FailuresAny property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FailuresAnyChanging;
        
        /// <summary>
        /// Gets fired when the Auxiliarysupply property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanged;
        
        /// <summary>
        /// Gets fired before the Auxiliarysupply property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsAllChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsAllChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL1Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL1Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL2Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL2Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL3Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsL3Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsAny property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsAnyChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsAny property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LongFailsAnyChanging;
        
        /// <summary>
        /// Gets fired when the TimeAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeAllChanged;
        
        /// <summary>
        /// Gets fired before the TimeAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeAllChanging;
        
        /// <summary>
        /// Gets fired when the TimeL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL1Changed;
        
        /// <summary>
        /// Gets fired before the TimeL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL1Changing;
        
        /// <summary>
        /// Gets fired when the TimeL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL2Changed;
        
        /// <summary>
        /// Gets fired before the TimeL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL2Changing;
        
        /// <summary>
        /// Gets fired when the TimeL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL3Changed;
        
        /// <summary>
        /// Gets fired before the TimeL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeL3Changing;
        
        /// <summary>
        /// Gets fired when the TimeAny property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeAnyChanged;
        
        /// <summary>
        /// Gets fired before the TimeAny property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeAnyChanging;
        
        /// <summary>
        /// Gets fired when the DurationAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationAllChanged;
        
        /// <summary>
        /// Gets fired before the DurationAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationAllChanging;
        
        /// <summary>
        /// Gets fired when the DurationL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL1Changed;
        
        /// <summary>
        /// Gets fired before the DurationL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL1Changing;
        
        /// <summary>
        /// Gets fired when the DurationL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL2Changed;
        
        /// <summary>
        /// Gets fired before the DurationL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL2Changing;
        
        /// <summary>
        /// Gets fired when the DurationL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL3Changed;
        
        /// <summary>
        /// Gets fired before the DurationL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationL3Changing;
        
        /// <summary>
        /// Gets fired when the DurationAny property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationAnyChanged;
        
        /// <summary>
        /// Gets fired before the DurationAny property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DurationAnyChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_long_powerfailure property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_long_powerfailure property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanging;
        
        private static ITypedElement RetrieveFailuresAllPhasesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("FailuresAllPhases")));
        }
        
        /// <summary>
        /// Raises the FailuresAllPhasesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAllPhasesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresAllPhasesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresAllPhasesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAllPhasesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresAllPhasesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailuresL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("FailuresL1")));
        }
        
        /// <summary>
        /// Raises the FailuresL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailuresL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("FailuresL2")));
        }
        
        /// <summary>
        /// Raises the FailuresL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailuresL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("FailuresL3")));
        }
        
        /// <summary>
        /// Raises the FailuresL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailuresAnyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("FailuresAny")));
        }
        
        /// <summary>
        /// Raises the FailuresAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAnyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAnyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FailuresAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAuxiliarysupplyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("Auxiliarysupply")));
        }
        
        /// <summary>
        /// Raises the AuxiliarysupplyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliarysupplyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AuxiliarysupplyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxiliarysupplyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliarysupplyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AuxiliarysupplyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLongFailsAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("LongFailsAll")));
        }
        
        /// <summary>
        /// Raises the LongFailsAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLongFailsL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("LongFailsL1")));
        }
        
        /// <summary>
        /// Raises the LongFailsL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLongFailsL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("LongFailsL2")));
        }
        
        /// <summary>
        /// Raises the LongFailsL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLongFailsL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("LongFailsL3")));
        }
        
        /// <summary>
        /// Raises the LongFailsL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLongFailsAnyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("LongFailsAny")));
        }
        
        /// <summary>
        /// Raises the LongFailsAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAnyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAnyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LongFailsAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("TimeAll")));
        }
        
        /// <summary>
        /// Raises the TimeAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("TimeL1")));
        }
        
        /// <summary>
        /// Raises the TimeL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("TimeL2")));
        }
        
        /// <summary>
        /// Raises the TimeL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("TimeL3")));
        }
        
        /// <summary>
        /// Raises the TimeL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeAnyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("TimeAny")));
        }
        
        /// <summary>
        /// Raises the TimeAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAnyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAnyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("DurationAll")));
        }
        
        /// <summary>
        /// Raises the DurationAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("DurationL1")));
        }
        
        /// <summary>
        /// Raises the DurationL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("DurationL2")));
        }
        
        /// <summary>
        /// Raises the DurationL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("DurationL3")));
        }
        
        /// <summary>
        /// Raises the DurationL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationAnyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("DurationAny")));
        }
        
        /// <summary>
        /// Raises the DurationAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAnyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAnyChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DurationAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_long_powerfailureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.PowerFailureMonitoring.ClassInstance)).Resolve("Time_threshold_long_powerfailure")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_long_powerfailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_long_powerfailureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_long_powerfailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_long_powerfailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_long_powerfailureChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_long_powerfailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FAILURESALLPHASES"))
            {
                return this.FailuresAllPhases;
            }
            if ((attribute == "FAILURESL1"))
            {
                return this.FailuresL1;
            }
            if ((attribute == "FAILURESL2"))
            {
                return this.FailuresL2;
            }
            if ((attribute == "FAILURESL3"))
            {
                return this.FailuresL3;
            }
            if ((attribute == "FAILURESANY"))
            {
                return this.FailuresAny;
            }
            if ((attribute == "AUXILIARYSUPPLY"))
            {
                return this.Auxiliarysupply;
            }
            if ((attribute == "LONGFAILSALL"))
            {
                return this.LongFailsAll;
            }
            if ((attribute == "LONGFAILSL1"))
            {
                return this.LongFailsL1;
            }
            if ((attribute == "LONGFAILSL2"))
            {
                return this.LongFailsL2;
            }
            if ((attribute == "LONGFAILSL3"))
            {
                return this.LongFailsL3;
            }
            if ((attribute == "LONGFAILSANY"))
            {
                return this.LongFailsAny;
            }
            if ((attribute == "TIMEALL"))
            {
                return this.TimeAll;
            }
            if ((attribute == "TIMEL1"))
            {
                return this.TimeL1;
            }
            if ((attribute == "TIMEL2"))
            {
                return this.TimeL2;
            }
            if ((attribute == "TIMEL3"))
            {
                return this.TimeL3;
            }
            if ((attribute == "TIMEANY"))
            {
                return this.TimeAny;
            }
            if ((attribute == "DURATIONALL"))
            {
                return this.DurationAll;
            }
            if ((attribute == "DURATIONL1"))
            {
                return this.DurationL1;
            }
            if ((attribute == "DURATIONL2"))
            {
                return this.DurationL2;
            }
            if ((attribute == "DURATIONL3"))
            {
                return this.DurationL3;
            }
            if ((attribute == "DURATIONANY"))
            {
                return this.DurationAny;
            }
            if ((attribute == "TIME_THRESHOLD_LONG_POWERFAILURE"))
            {
                return this.Time_threshold_long_powerfailure;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FAILURESALLPHASES"))
            {
                this.FailuresAllPhases = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL1"))
            {
                this.FailuresL1 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL2"))
            {
                this.FailuresL2 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL3"))
            {
                this.FailuresL3 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESANY"))
            {
                this.FailuresAny = ((int)(value));
                return;
            }
            if ((feature == "AUXILIARYSUPPLY"))
            {
                this.Auxiliarysupply = ((string)(value));
                return;
            }
            if ((feature == "LONGFAILSALL"))
            {
                this.LongFailsAll = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL1"))
            {
                this.LongFailsL1 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL2"))
            {
                this.LongFailsL2 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL3"))
            {
                this.LongFailsL3 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSANY"))
            {
                this.LongFailsAny = ((int)(value));
                return;
            }
            if ((feature == "TIMEALL"))
            {
                this.TimeAll = ((string)(value));
                return;
            }
            if ((feature == "TIMEL1"))
            {
                this.TimeL1 = ((string)(value));
                return;
            }
            if ((feature == "TIMEL2"))
            {
                this.TimeL2 = ((string)(value));
                return;
            }
            if ((feature == "TIMEL3"))
            {
                this.TimeL3 = ((string)(value));
                return;
            }
            if ((feature == "TIMEANY"))
            {
                this.TimeAny = ((string)(value));
                return;
            }
            if ((feature == "DURATIONALL"))
            {
                this.DurationAll = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL1"))
            {
                this.DurationL1 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL2"))
            {
                this.DurationL2 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL3"))
            {
                this.DurationL3 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONANY"))
            {
                this.DurationAny = ((int)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_LONG_POWERFAILURE"))
            {
                this.Time_threshold_long_powerfailure = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FAILURESALLPHASES"))
            {
                return Observable.Box(new FailuresAllPhasesProxy(this));
            }
            if ((attribute == "FAILURESL1"))
            {
                return Observable.Box(new FailuresL1Proxy(this));
            }
            if ((attribute == "FAILURESL2"))
            {
                return Observable.Box(new FailuresL2Proxy(this));
            }
            if ((attribute == "FAILURESL3"))
            {
                return Observable.Box(new FailuresL3Proxy(this));
            }
            if ((attribute == "FAILURESANY"))
            {
                return Observable.Box(new FailuresAnyProxy(this));
            }
            if ((attribute == "AUXILIARYSUPPLY"))
            {
                return new AuxiliarysupplyProxy(this);
            }
            if ((attribute == "LONGFAILSALL"))
            {
                return Observable.Box(new LongFailsAllProxy(this));
            }
            if ((attribute == "LONGFAILSL1"))
            {
                return Observable.Box(new LongFailsL1Proxy(this));
            }
            if ((attribute == "LONGFAILSL2"))
            {
                return Observable.Box(new LongFailsL2Proxy(this));
            }
            if ((attribute == "LONGFAILSL3"))
            {
                return Observable.Box(new LongFailsL3Proxy(this));
            }
            if ((attribute == "LONGFAILSANY"))
            {
                return Observable.Box(new LongFailsAnyProxy(this));
            }
            if ((attribute == "TIMEALL"))
            {
                return new TimeAllProxy(this);
            }
            if ((attribute == "TIMEL1"))
            {
                return new TimeL1Proxy(this);
            }
            if ((attribute == "TIMEL2"))
            {
                return new TimeL2Proxy(this);
            }
            if ((attribute == "TIMEL3"))
            {
                return new TimeL3Proxy(this);
            }
            if ((attribute == "TIMEANY"))
            {
                return new TimeAnyProxy(this);
            }
            if ((attribute == "DURATIONALL"))
            {
                return Observable.Box(new DurationAllProxy(this));
            }
            if ((attribute == "DURATIONL1"))
            {
                return Observable.Box(new DurationL1Proxy(this));
            }
            if ((attribute == "DURATIONL2"))
            {
                return Observable.Box(new DurationL2Proxy(this));
            }
            if ((attribute == "DURATIONL3"))
            {
                return Observable.Box(new DurationL3Proxy(this));
            }
            if ((attribute == "DURATIONANY"))
            {
                return Observable.Box(new DurationAnyProxy(this));
            }
            if ((attribute == "TIME_THRESHOLD_LONG_POWERFAILURE"))
            {
                return Observable.Box(new Time_threshold_long_powerfailureProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/PowerFailureMonitoring")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresAllPhases property
        /// </summary>
        private sealed class FailuresAllPhasesProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresAllPhasesProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "FailuresAllPhases")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresAllPhases;
                }
                set
                {
                    this.ModelElement.FailuresAllPhases = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL1 property
        /// </summary>
        private sealed class FailuresL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "FailuresL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL1;
                }
                set
                {
                    this.ModelElement.FailuresL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL2 property
        /// </summary>
        private sealed class FailuresL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "FailuresL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL2;
                }
                set
                {
                    this.ModelElement.FailuresL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL3 property
        /// </summary>
        private sealed class FailuresL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "FailuresL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL3;
                }
                set
                {
                    this.ModelElement.FailuresL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresAny property
        /// </summary>
        private sealed class FailuresAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "FailuresAny")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresAny;
                }
                set
                {
                    this.ModelElement.FailuresAny = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Auxiliarysupply property
        /// </summary>
        private sealed class AuxiliarysupplyProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxiliarysupplyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "Auxiliarysupply")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Auxiliarysupply;
                }
                set
                {
                    this.ModelElement.Auxiliarysupply = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsAll property
        /// </summary>
        private sealed class LongFailsAllProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "LongFailsAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsAll;
                }
                set
                {
                    this.ModelElement.LongFailsAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL1 property
        /// </summary>
        private sealed class LongFailsL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "LongFailsL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL1;
                }
                set
                {
                    this.ModelElement.LongFailsL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL2 property
        /// </summary>
        private sealed class LongFailsL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "LongFailsL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL2;
                }
                set
                {
                    this.ModelElement.LongFailsL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL3 property
        /// </summary>
        private sealed class LongFailsL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "LongFailsL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL3;
                }
                set
                {
                    this.ModelElement.LongFailsL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsAny property
        /// </summary>
        private sealed class LongFailsAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "LongFailsAny")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsAny;
                }
                set
                {
                    this.ModelElement.LongFailsAny = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeAll property
        /// </summary>
        private sealed class TimeAllProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "TimeAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeAll;
                }
                set
                {
                    this.ModelElement.TimeAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL1 property
        /// </summary>
        private sealed class TimeL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "TimeL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL1;
                }
                set
                {
                    this.ModelElement.TimeL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL2 property
        /// </summary>
        private sealed class TimeL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "TimeL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL2;
                }
                set
                {
                    this.ModelElement.TimeL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL3 property
        /// </summary>
        private sealed class TimeL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "TimeL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL3;
                }
                set
                {
                    this.ModelElement.TimeL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeAny property
        /// </summary>
        private sealed class TimeAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "TimeAny")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeAny;
                }
                set
                {
                    this.ModelElement.TimeAny = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationAll property
        /// </summary>
        private sealed class DurationAllProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "DurationAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationAll;
                }
                set
                {
                    this.ModelElement.DurationAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL1 property
        /// </summary>
        private sealed class DurationL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "DurationL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL1;
                }
                set
                {
                    this.ModelElement.DurationL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL2 property
        /// </summary>
        private sealed class DurationL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "DurationL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL2;
                }
                set
                {
                    this.ModelElement.DurationL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL3 property
        /// </summary>
        private sealed class DurationL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "DurationL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL3;
                }
                set
                {
                    this.ModelElement.DurationL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationAny property
        /// </summary>
        private sealed class DurationAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "DurationAny")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationAny;
                }
                set
                {
                    this.ModelElement.DurationAny = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_long_powerfailure property
        /// </summary>
        private sealed class Time_threshold_long_powerfailureProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_long_powerfailureProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement, "Time_threshold_long_powerfailure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_long_powerfailure;
                }
                set
                {
                    this.ModelElement.Time_threshold_long_powerfailure = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the OperatingTime class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OperatingTime")]
    public partial class OperatingTime : Data, IOperatingTime, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Timeofoperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeofoperation;
        
        private static Lazy<ITypedElement> _timeofoperationAttribute = new Lazy<ITypedElement>(RetrieveTimeofoperationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Timeofoperation property
        /// </summary>
        [CategoryAttribute("OperatingTime")]
        [XmlAttributeAttribute(true)]
        public string Timeofoperation
        {
            get
            {
                return this._timeofoperation;
            }
            set
            {
                if ((this._timeofoperation != value))
                {
                    string old = this._timeofoperation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeofoperationChanging(e);
                    this.OnPropertyChanging("Timeofoperation", e, _timeofoperationAttribute);
                    this._timeofoperation = value;
                    this.OnTimeofoperationChanged(e);
                    this.OnPropertyChanged("Timeofoperation", e, _timeofoperationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OperatingTime")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Timeofoperation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeofoperationChanged;
        
        /// <summary>
        /// Gets fired before the Timeofoperation property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TimeofoperationChanging;
        
        private static ITypedElement RetrieveTimeofoperationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.OperatingTime.ClassInstance)).Resolve("Timeofoperation")));
        }
        
        /// <summary>
        /// Raises the TimeofoperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeofoperationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeofoperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeofoperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeofoperationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TimeofoperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIMEOFOPERATION"))
            {
                return this.Timeofoperation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIMEOFOPERATION"))
            {
                this.Timeofoperation = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TIMEOFOPERATION"))
            {
                return new TimeofoperationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/OperatingTime")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Timeofoperation property
        /// </summary>
        private sealed class TimeofoperationProxy : ModelPropertyChange<IOperatingTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeofoperationProxy(IOperatingTime modelElement) : 
                    base(modelElement, "Timeofoperation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Timeofoperation;
                }
                set
                {
                    this.ModelElement.Timeofoperation = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the EnvironmentRelatedParameters class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EnvironmentRelatedParameters")]
    public partial class EnvironmentRelatedParameters : Register, IEnvironmentRelatedParameters, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Ambient_temperature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ambient_temperature;
        
        private static Lazy<ITypedElement> _ambient_temperatureAttribute = new Lazy<ITypedElement>(RetrieveAmbient_temperatureAttribute);
        
        /// <summary>
        /// The backing field for the Ambient_pressure property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ambient_pressure;
        
        private static Lazy<ITypedElement> _ambient_pressureAttribute = new Lazy<ITypedElement>(RetrieveAmbient_pressureAttribute);
        
        /// <summary>
        /// The backing field for the Relative_humidity property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _relative_humidity;
        
        private static Lazy<ITypedElement> _relative_humidityAttribute = new Lazy<ITypedElement>(RetrieveRelative_humidityAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ambient_temperature property
        /// </summary>
        [DisplayNameAttribute("ambient_temperature")]
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlElementNameAttribute("ambient_temperature")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ambient_temperature
        {
            get
            {
                return this._ambient_temperature;
            }
            set
            {
                if ((this._ambient_temperature != value))
                {
                    Nullable<double> old = this._ambient_temperature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmbient_temperatureChanging(e);
                    this.OnPropertyChanging("Ambient_temperature", e, _ambient_temperatureAttribute);
                    this._ambient_temperature = value;
                    this.OnAmbient_temperatureChanged(e);
                    this.OnPropertyChanged("Ambient_temperature", e, _ambient_temperatureAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Ambient_pressure property
        /// </summary>
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ambient_pressure
        {
            get
            {
                return this._ambient_pressure;
            }
            set
            {
                if ((this._ambient_pressure != value))
                {
                    Nullable<double> old = this._ambient_pressure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmbient_pressureChanging(e);
                    this.OnPropertyChanging("Ambient_pressure", e, _ambient_pressureAttribute);
                    this._ambient_pressure = value;
                    this.OnAmbient_pressureChanged(e);
                    this.OnPropertyChanged("Ambient_pressure", e, _ambient_pressureAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Relative_humidity property
        /// </summary>
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Relative_humidity
        {
            get
            {
                return this._relative_humidity;
            }
            set
            {
                if ((this._relative_humidity != value))
                {
                    Nullable<double> old = this._relative_humidity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelative_humidityChanging(e);
                    this.OnPropertyChanging("Relative_humidity", e, _relative_humidityAttribute);
                    this._relative_humidity = value;
                    this.OnRelative_humidityChanged(e);
                    this.OnPropertyChanged("Relative_humidity", e, _relative_humidityAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EnvironmentRelatedParameters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Ambient_temperature property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ambient_temperatureChanged;
        
        /// <summary>
        /// Gets fired before the Ambient_temperature property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ambient_temperatureChanging;
        
        /// <summary>
        /// Gets fired when the Ambient_pressure property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ambient_pressureChanged;
        
        /// <summary>
        /// Gets fired before the Ambient_pressure property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ambient_pressureChanging;
        
        /// <summary>
        /// Gets fired when the Relative_humidity property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Relative_humidityChanged;
        
        /// <summary>
        /// Gets fired before the Relative_humidity property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Relative_humidityChanging;
        
        private static ITypedElement RetrieveAmbient_temperatureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.EnvironmentRelatedParameters.ClassInstance)).Resolve("ambient_temperature")));
        }
        
        /// <summary>
        /// Raises the Ambient_temperatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_temperatureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ambient_temperatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ambient_temperatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_temperatureChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ambient_temperatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmbient_pressureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.EnvironmentRelatedParameters.ClassInstance)).Resolve("Ambient_pressure")));
        }
        
        /// <summary>
        /// Raises the Ambient_pressureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_pressureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ambient_pressureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ambient_pressureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_pressureChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ambient_pressureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRelative_humidityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.EnvironmentRelatedParameters.ClassInstance)).Resolve("Relative_humidity")));
        }
        
        /// <summary>
        /// Raises the Relative_humidityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelative_humidityChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Relative_humidityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Relative_humidityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelative_humidityChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Relative_humidityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AMBIENT_TEMPERATURE"))
            {
                return this.Ambient_temperature;
            }
            if ((attribute == "AMBIENT_PRESSURE"))
            {
                return this.Ambient_pressure;
            }
            if ((attribute == "RELATIVE_HUMIDITY"))
            {
                return this.Relative_humidity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AMBIENT_TEMPERATURE"))
            {
                this.Ambient_temperature = ((double)(value));
                return;
            }
            if ((feature == "AMBIENT_PRESSURE"))
            {
                this.Ambient_pressure = ((double)(value));
                return;
            }
            if ((feature == "RELATIVE_HUMIDITY"))
            {
                this.Relative_humidity = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AMBIENT_TEMPERATURE"))
            {
                return Observable.Box(new Ambient_temperatureProxy(this));
            }
            if ((attribute == "AMBIENT_PRESSURE"))
            {
                return Observable.Box(new Ambient_pressureProxy(this));
            }
            if ((attribute == "RELATIVE_HUMIDITY"))
            {
                return Observable.Box(new Relative_humidityProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EnvironmentRelatedParameters")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ambient_temperature property
        /// </summary>
        private sealed class Ambient_temperatureProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ambient_temperatureProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement, "ambient_temperature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ambient_temperature;
                }
                set
                {
                    this.ModelElement.Ambient_temperature = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ambient_pressure property
        /// </summary>
        private sealed class Ambient_pressureProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ambient_pressureProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement, "Ambient_pressure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ambient_pressure;
                }
                set
                {
                    this.ModelElement.Ambient_pressure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Relative_humidity property
        /// </summary>
        private sealed class Relative_humidityProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Relative_humidityProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement, "Relative_humidity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Relative_humidity;
                }
                set
                {
                    this.ModelElement.Relative_humidity = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the StatusRegister class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegister")]
    public partial class StatusRegister : Register, IStatusRegister, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/StatusRegister")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the EventCode class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventCode")]
    public partial class EventCode : Data, IEventCode, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Event_code_object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _event_code_object;
        
        private static Lazy<ITypedElement> _event_code_objectAttribute = new Lazy<ITypedElement>(RetrieveEvent_code_objectAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The event_code_object property
        /// </summary>
        [DisplayNameAttribute("event_code_object")]
        [CategoryAttribute("EventCode")]
        [XmlElementNameAttribute("event_code_object")]
        [XmlAttributeAttribute(true)]
        public string Event_code_object
        {
            get
            {
                return this._event_code_object;
            }
            set
            {
                if ((this._event_code_object != value))
                {
                    string old = this._event_code_object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvent_code_objectChanging(e);
                    this.OnPropertyChanging("Event_code_object", e, _event_code_objectAttribute);
                    this._event_code_object = value;
                    this.OnEvent_code_objectChanged(e);
                    this.OnPropertyChanged("Event_code_object", e, _event_code_objectAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventCode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Event_code_object property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Event_code_objectChanged;
        
        /// <summary>
        /// Gets fired before the Event_code_object property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Event_code_objectChanging;
        
        private static ITypedElement RetrieveEvent_code_objectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.EventCode.ClassInstance)).Resolve("event_code_object")));
        }
        
        /// <summary>
        /// Raises the Event_code_objectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvent_code_objectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Event_code_objectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Event_code_objectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvent_code_objectChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Event_code_objectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EVENT_CODE_OBJECT"))
            {
                return this.Event_code_object;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EVENT_CODE_OBJECT"))
            {
                this.Event_code_object = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EVENT_CODE_OBJECT"))
            {
                return new Event_code_objectProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventCode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the event_code_object property
        /// </summary>
        private sealed class Event_code_objectProxy : ModelPropertyChange<IEventCode, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Event_code_objectProxy(IEventCode modelElement) : 
                    base(modelElement, "event_code_object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Event_code_object;
                }
                set
                {
                    this.ModelElement.Event_code_object = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the CommunicationPortLogParameters class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CommunicationPortLogParameters")]
    public partial class CommunicationPortLogParameters : Data, ICommunicationPortLogParameters, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Reserved property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _reserved;
        
        private static Lazy<ITypedElement> _reservedAttribute = new Lazy<ITypedElement>(RetrieveReservedAttribute);
        
        /// <summary>
        /// The backing field for the Number_connections property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _number_connections;
        
        private static Lazy<ITypedElement> _number_connectionsAttribute = new Lazy<ITypedElement>(RetrieveNumber_connectionsAttribute);
        
        /// <summary>
        /// The backing field for the Communication_port_parameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _communication_port_parameter;
        
        private static Lazy<ITypedElement> _communication_port_parameterAttribute = new Lazy<ITypedElement>(RetrieveCommunication_port_parameterAttribute);
        
        /// <summary>
        /// The backing field for the GSM_field_strength property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _gSM_field_strength;
        
        private static Lazy<ITypedElement> _gSM_field_strengthAttribute = new Lazy<ITypedElement>(RetrieveGSM_field_strengthAttribute);
        
        /// <summary>
        /// The backing field for the Communicationaddress property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _communicationaddress;
        
        private static Lazy<ITypedElement> _communicationaddressAttribute = new Lazy<ITypedElement>(RetrieveCommunicationaddressAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Reserved property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        public string Reserved
        {
            get
            {
                return this._reserved;
            }
            set
            {
                if ((this._reserved != value))
                {
                    string old = this._reserved;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReservedChanging(e);
                    this.OnPropertyChanging("Reserved", e, _reservedAttribute);
                    this._reserved = value;
                    this.OnReservedChanged(e);
                    this.OnPropertyChanged("Reserved", e, _reservedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Number_connections property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        public string Number_connections
        {
            get
            {
                return this._number_connections;
            }
            set
            {
                if ((this._number_connections != value))
                {
                    string old = this._number_connections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumber_connectionsChanging(e);
                    this.OnPropertyChanging("Number_connections", e, _number_connectionsAttribute);
                    this._number_connections = value;
                    this.OnNumber_connectionsChanged(e);
                    this.OnPropertyChanged("Number_connections", e, _number_connectionsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_port_parameter property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        public string Communication_port_parameter
        {
            get
            {
                return this._communication_port_parameter;
            }
            set
            {
                if ((this._communication_port_parameter != value))
                {
                    string old = this._communication_port_parameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_port_parameterChanging(e);
                    this.OnPropertyChanging("Communication_port_parameter", e, _communication_port_parameterAttribute);
                    this._communication_port_parameter = value;
                    this.OnCommunication_port_parameterChanged(e);
                    this.OnPropertyChanged("Communication_port_parameter", e, _communication_port_parameterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GSM_field_strength property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        public string GSM_field_strength
        {
            get
            {
                return this._gSM_field_strength;
            }
            set
            {
                if ((this._gSM_field_strength != value))
                {
                    string old = this._gSM_field_strength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGSM_field_strengthChanging(e);
                    this.OnPropertyChanging("GSM_field_strength", e, _gSM_field_strengthAttribute);
                    this._gSM_field_strength = value;
                    this.OnGSM_field_strengthChanged(e);
                    this.OnPropertyChanged("GSM_field_strength", e, _gSM_field_strengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communicationaddress property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        public string Communicationaddress
        {
            get
            {
                return this._communicationaddress;
            }
            set
            {
                if ((this._communicationaddress != value))
                {
                    string old = this._communicationaddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunicationaddressChanging(e);
                    this.OnPropertyChanging("Communicationaddress", e, _communicationaddressAttribute);
                    this._communicationaddress = value;
                    this.OnCommunicationaddressChanged(e);
                    this.OnPropertyChanged("Communicationaddress", e, _communicationaddressAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CommunicationPortLogParameters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Reserved property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReservedChanged;
        
        /// <summary>
        /// Gets fired before the Reserved property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReservedChanging;
        
        /// <summary>
        /// Gets fired when the Number_connections property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Number_connectionsChanged;
        
        /// <summary>
        /// Gets fired before the Number_connections property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Number_connectionsChanging;
        
        /// <summary>
        /// Gets fired when the Communication_port_parameter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_port_parameterChanged;
        
        /// <summary>
        /// Gets fired before the Communication_port_parameter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_port_parameterChanging;
        
        /// <summary>
        /// Gets fired when the GSM_field_strength property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GSM_field_strengthChanged;
        
        /// <summary>
        /// Gets fired before the GSM_field_strength property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> GSM_field_strengthChanging;
        
        /// <summary>
        /// Gets fired when the Communicationaddress property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CommunicationaddressChanged;
        
        /// <summary>
        /// Gets fired before the Communicationaddress property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CommunicationaddressChanging;
        
        private static ITypedElement RetrieveReservedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CommunicationPortLogParameters.ClassInstance)).Resolve("Reserved")));
        }
        
        /// <summary>
        /// Raises the ReservedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservedChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReservedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReservedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservedChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReservedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumber_connectionsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CommunicationPortLogParameters.ClassInstance)).Resolve("Number_connections")));
        }
        
        /// <summary>
        /// Raises the Number_connectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_connectionsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Number_connectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Number_connectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_connectionsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Number_connectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_port_parameterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CommunicationPortLogParameters.ClassInstance)).Resolve("Communication_port_parameter")));
        }
        
        /// <summary>
        /// Raises the Communication_port_parameterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_port_parameterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_port_parameterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_port_parameterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_port_parameterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_port_parameterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGSM_field_strengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CommunicationPortLogParameters.ClassInstance)).Resolve("GSM_field_strength")));
        }
        
        /// <summary>
        /// Raises the GSM_field_strengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGSM_field_strengthChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GSM_field_strengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GSM_field_strengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGSM_field_strengthChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.GSM_field_strengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunicationaddressAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CommunicationPortLogParameters.ClassInstance)).Resolve("Communicationaddress")));
        }
        
        /// <summary>
        /// Raises the CommunicationaddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationaddressChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CommunicationaddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommunicationaddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationaddressChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CommunicationaddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RESERVED"))
            {
                return this.Reserved;
            }
            if ((attribute == "NUMBER_CONNECTIONS"))
            {
                return this.Number_connections;
            }
            if ((attribute == "COMMUNICATION_PORT_PARAMETER"))
            {
                return this.Communication_port_parameter;
            }
            if ((attribute == "GSM_FIELD_STRENGTH"))
            {
                return this.GSM_field_strength;
            }
            if ((attribute == "COMMUNICATIONADDRESS"))
            {
                return this.Communicationaddress;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESERVED"))
            {
                this.Reserved = ((string)(value));
                return;
            }
            if ((feature == "NUMBER_CONNECTIONS"))
            {
                this.Number_connections = ((string)(value));
                return;
            }
            if ((feature == "COMMUNICATION_PORT_PARAMETER"))
            {
                this.Communication_port_parameter = ((string)(value));
                return;
            }
            if ((feature == "GSM_FIELD_STRENGTH"))
            {
                this.GSM_field_strength = ((string)(value));
                return;
            }
            if ((feature == "COMMUNICATIONADDRESS"))
            {
                this.Communicationaddress = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RESERVED"))
            {
                return new ReservedProxy(this);
            }
            if ((attribute == "NUMBER_CONNECTIONS"))
            {
                return new Number_connectionsProxy(this);
            }
            if ((attribute == "COMMUNICATION_PORT_PARAMETER"))
            {
                return new Communication_port_parameterProxy(this);
            }
            if ((attribute == "GSM_FIELD_STRENGTH"))
            {
                return new GSM_field_strengthProxy(this);
            }
            if ((attribute == "COMMUNICATIONADDRESS"))
            {
                return new CommunicationaddressProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CommunicationPortLogParameters")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reserved property
        /// </summary>
        private sealed class ReservedProxy : ModelPropertyChange<ICommunicationPortLogParameters, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReservedProxy(ICommunicationPortLogParameters modelElement) : 
                    base(modelElement, "Reserved")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Reserved;
                }
                set
                {
                    this.ModelElement.Reserved = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Number_connections property
        /// </summary>
        private sealed class Number_connectionsProxy : ModelPropertyChange<ICommunicationPortLogParameters, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Number_connectionsProxy(ICommunicationPortLogParameters modelElement) : 
                    base(modelElement, "Number_connections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Number_connections;
                }
                set
                {
                    this.ModelElement.Number_connections = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_port_parameter property
        /// </summary>
        private sealed class Communication_port_parameterProxy : ModelPropertyChange<ICommunicationPortLogParameters, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_port_parameterProxy(ICommunicationPortLogParameters modelElement) : 
                    base(modelElement, "Communication_port_parameter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Communication_port_parameter;
                }
                set
                {
                    this.ModelElement.Communication_port_parameter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GSM_field_strength property
        /// </summary>
        private sealed class GSM_field_strengthProxy : ModelPropertyChange<ICommunicationPortLogParameters, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GSM_field_strengthProxy(ICommunicationPortLogParameters modelElement) : 
                    base(modelElement, "GSM_field_strength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GSM_field_strength;
                }
                set
                {
                    this.ModelElement.GSM_field_strength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communicationaddress property
        /// </summary>
        private sealed class CommunicationaddressProxy : ModelPropertyChange<ICommunicationPortLogParameters, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommunicationaddressProxy(ICommunicationPortLogParameters modelElement) : 
                    base(modelElement, "Communicationaddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Communicationaddress;
                }
                set
                {
                    this.ModelElement.Communicationaddress = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ConsumerMessage class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ConsumerMessage")]
    public partial class ConsumerMessage : Data, IConsumerMessage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Consumer_message_via_local_consumer_information_port property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _consumer_message_via_local_consumer_information_port;
        
        private static Lazy<ITypedElement> _consumer_message_via_local_consumer_information_portAttribute = new Lazy<ITypedElement>(RetrieveConsumer_message_via_local_consumer_information_portAttribute);
        
        /// <summary>
        /// The backing field for the Consumer_message_via_meter_display property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _consumer_message_via_meter_display;
        
        private static Lazy<ITypedElement> _consumer_message_via_meter_displayAttribute = new Lazy<ITypedElement>(RetrieveConsumer_message_via_meter_displayAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Consumer_message_via_local_consumer_information_port property
        /// </summary>
        [CategoryAttribute("ConsumerMessage")]
        [XmlAttributeAttribute(true)]
        public string Consumer_message_via_local_consumer_information_port
        {
            get
            {
                return this._consumer_message_via_local_consumer_information_port;
            }
            set
            {
                if ((this._consumer_message_via_local_consumer_information_port != value))
                {
                    string old = this._consumer_message_via_local_consumer_information_port;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConsumer_message_via_local_consumer_information_portChanging(e);
                    this.OnPropertyChanging("Consumer_message_via_local_consumer_information_port", e, _consumer_message_via_local_consumer_information_portAttribute);
                    this._consumer_message_via_local_consumer_information_port = value;
                    this.OnConsumer_message_via_local_consumer_information_portChanged(e);
                    this.OnPropertyChanged("Consumer_message_via_local_consumer_information_port", e, _consumer_message_via_local_consumer_information_portAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Consumer_message_via_meter_display property
        /// </summary>
        [CategoryAttribute("ConsumerMessage")]
        [XmlAttributeAttribute(true)]
        public string Consumer_message_via_meter_display
        {
            get
            {
                return this._consumer_message_via_meter_display;
            }
            set
            {
                if ((this._consumer_message_via_meter_display != value))
                {
                    string old = this._consumer_message_via_meter_display;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConsumer_message_via_meter_displayChanging(e);
                    this.OnPropertyChanging("Consumer_message_via_meter_display", e, _consumer_message_via_meter_displayAttribute);
                    this._consumer_message_via_meter_display = value;
                    this.OnConsumer_message_via_meter_displayChanged(e);
                    this.OnPropertyChanged("Consumer_message_via_meter_display", e, _consumer_message_via_meter_displayAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ConsumerMessage")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Consumer_message_via_local_consumer_information_port property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Consumer_message_via_local_consumer_information_portChanged;
        
        /// <summary>
        /// Gets fired before the Consumer_message_via_local_consumer_information_port property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Consumer_message_via_local_consumer_information_portChanging;
        
        /// <summary>
        /// Gets fired when the Consumer_message_via_meter_display property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Consumer_message_via_meter_displayChanged;
        
        /// <summary>
        /// Gets fired before the Consumer_message_via_meter_display property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Consumer_message_via_meter_displayChanging;
        
        private static ITypedElement RetrieveConsumer_message_via_local_consumer_information_portAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ConsumerMessage.ClassInstance)).Resolve("Consumer_message_via_local_consumer_information_port")));
        }
        
        /// <summary>
        /// Raises the Consumer_message_via_local_consumer_information_portChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsumer_message_via_local_consumer_information_portChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Consumer_message_via_local_consumer_information_portChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Consumer_message_via_local_consumer_information_portChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsumer_message_via_local_consumer_information_portChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Consumer_message_via_local_consumer_information_portChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConsumer_message_via_meter_displayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ConsumerMessage.ClassInstance)).Resolve("Consumer_message_via_meter_display")));
        }
        
        /// <summary>
        /// Raises the Consumer_message_via_meter_displayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsumer_message_via_meter_displayChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Consumer_message_via_meter_displayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Consumer_message_via_meter_displayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConsumer_message_via_meter_displayChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Consumer_message_via_meter_displayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONSUMER_MESSAGE_VIA_LOCAL_CONSUMER_INFORMATION_PORT"))
            {
                return this.Consumer_message_via_local_consumer_information_port;
            }
            if ((attribute == "CONSUMER_MESSAGE_VIA_METER_DISPLAY"))
            {
                return this.Consumer_message_via_meter_display;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONSUMER_MESSAGE_VIA_LOCAL_CONSUMER_INFORMATION_PORT"))
            {
                this.Consumer_message_via_local_consumer_information_port = ((string)(value));
                return;
            }
            if ((feature == "CONSUMER_MESSAGE_VIA_METER_DISPLAY"))
            {
                this.Consumer_message_via_meter_display = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONSUMER_MESSAGE_VIA_LOCAL_CONSUMER_INFORMATION_PORT"))
            {
                return new Consumer_message_via_local_consumer_information_portProxy(this);
            }
            if ((attribute == "CONSUMER_MESSAGE_VIA_METER_DISPLAY"))
            {
                return new Consumer_message_via_meter_displayProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ConsumerMessage")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Consumer_message_via_local_consumer_information_port property
        /// </summary>
        private sealed class Consumer_message_via_local_consumer_information_portProxy : ModelPropertyChange<IConsumerMessage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Consumer_message_via_local_consumer_information_portProxy(IConsumerMessage modelElement) : 
                    base(modelElement, "Consumer_message_via_local_consumer_information_port")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Consumer_message_via_local_consumer_information_port;
                }
                set
                {
                    this.ModelElement.Consumer_message_via_local_consumer_information_port = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Consumer_message_via_meter_display property
        /// </summary>
        private sealed class Consumer_message_via_meter_displayProxy : ModelPropertyChange<IConsumerMessage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Consumer_message_via_meter_displayProxy(IConsumerMessage modelElement) : 
                    base(modelElement, "Consumer_message_via_meter_display")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Consumer_message_via_meter_display;
                }
                set
                {
                    this.ModelElement.Consumer_message_via_meter_display = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the CurrentlyActiveTariff class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CurrentlyActiveTariff")]
    public partial class CurrentlyActiveTariff : Data, ICurrentlyActiveTariff, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("CurrentlyActiveTariff")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CurrentlyActiveTariff")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.CurrentlyActiveTariff.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/CurrentlyActiveTariff")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<ICurrentlyActiveTariff, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(ICurrentlyActiveTariff modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the EventCounterObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventCounterObject")]
    public partial class EventCounterObject : Data, IEventCounterObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("EventCounterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    Nullable<int> old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventCounterObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.EventCounterObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return Observable.Box(new ValueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/EventCounterObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IEventCounterObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IEventCounterObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ProfileEntryDigitalSignatureObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ProfileEntryDigitalSignatureObject")]
    public partial class ProfileEntryDigitalSignatureObject : Data, IProfileEntryDigitalSignatureObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ProfileEntryDigitalSignatureObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ProfileEntryDigitalSignatureObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanging;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ProfileEntryDigitalSignatureObject.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ProfileEntryDigitalSignatureObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IProfileEntryDigitalSignatureObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IProfileEntryDigitalSignatureObject modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MeterTemperEventRelatedObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeterTemperEventRelatedObject")]
    public partial class MeterTemperEventRelatedObject : Data, IMeterTemperEventRelatedObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Meter_open_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _meter_open_event_counter;
        
        private static Lazy<ITypedElement> _meter_open_event_counterAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_timestamp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _meter_open_event_timestamp;
        
        private static Lazy<ITypedElement> _meter_open_event_timestampAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_timestampAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _meter_open_event_duration;
        
        private static Lazy<ITypedElement> _meter_open_event_durationAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Meter_open_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _meter_open_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _meter_open_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveMeter_open_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _terminal_cover_open_event_counter;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_counterAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _terminal_cover_open_event_time;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_timeAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _terminal_cover_open_event_duration;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_durationAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _terminal_cover_open_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _terminal_cover_open_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveTerminal_cover_open_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _tilt_event_counter;
        
        private static Lazy<ITypedElement> _tilt_event_counterAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _tilt_event_time;
        
        private static Lazy<ITypedElement> _tilt_event_timeAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _tilt_event_duration;
        
        private static Lazy<ITypedElement> _tilt_event_durationAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Tilt_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _tilt_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _tilt_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveTilt_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _strong_DC_magnetic_field_event_counter;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_counterAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _strong_DC_magnetic_field_event_time;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_timeAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _strong_DC_magnetic_field_event_duration;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_durationAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _strong_DC_magnetic_field_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _strong_DC_magnetic_field_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveStrong_DC_magnetic_field_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _supply_control_switch_event_counter;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_counterAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _supply_control_switch_event_time;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_timeAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _supply_control_switch_event_duration;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_durationAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Supply_control_switch_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _supply_control_switch_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _supply_control_switch_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveSupply_control_switch_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _metrology_tamper_event_counter;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_counterAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _metrology_tamper_event_time;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_timeAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _metrology_tamper_event_duration;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_durationAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Metrology_tamper_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _metrology_tamper_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _metrology_tamper_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveMetrology_tamper_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _communication_tamper_event_counter;
        
        private static Lazy<ITypedElement> _communication_tamper_event_counterAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_counterAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_time property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _communication_tamper_event_time;
        
        private static Lazy<ITypedElement> _communication_tamper_event_timeAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_timeAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _communication_tamper_event_duration;
        
        private static Lazy<ITypedElement> _communication_tamper_event_durationAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_durationAttribute);
        
        /// <summary>
        /// The backing field for the Communication_tamper_event_cumulative_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _communication_tamper_event_cumulative_duration;
        
        private static Lazy<ITypedElement> _communication_tamper_event_cumulative_durationAttribute = new Lazy<ITypedElement>(RetrieveCommunication_tamper_event_cumulative_durationAttribute);
        
        /// <summary>
        /// The backing field for the Manufacturer_specific property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _manufacturer_specific;
        
        private static Lazy<ITypedElement> _manufacturer_specificAttribute = new Lazy<ITypedElement>(RetrieveManufacturer_specificAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Meter_open_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Meter_open_event_counter
        {
            get
            {
                return this._meter_open_event_counter;
            }
            set
            {
                if ((this._meter_open_event_counter != value))
                {
                    Nullable<int> old = this._meter_open_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_counterChanging(e);
                    this.OnPropertyChanging("Meter_open_event_counter", e, _meter_open_event_counterAttribute);
                    this._meter_open_event_counter = value;
                    this.OnMeter_open_event_counterChanged(e);
                    this.OnPropertyChanged("Meter_open_event_counter", e, _meter_open_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_timestamp property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Meter_open_event_timestamp
        {
            get
            {
                return this._meter_open_event_timestamp;
            }
            set
            {
                if ((this._meter_open_event_timestamp != value))
                {
                    string old = this._meter_open_event_timestamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_timestampChanging(e);
                    this.OnPropertyChanging("Meter_open_event_timestamp", e, _meter_open_event_timestampAttribute);
                    this._meter_open_event_timestamp = value;
                    this.OnMeter_open_event_timestampChanged(e);
                    this.OnPropertyChanged("Meter_open_event_timestamp", e, _meter_open_event_timestampAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Meter_open_event_duration
        {
            get
            {
                return this._meter_open_event_duration;
            }
            set
            {
                if ((this._meter_open_event_duration != value))
                {
                    Nullable<int> old = this._meter_open_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_durationChanging(e);
                    this.OnPropertyChanging("Meter_open_event_duration", e, _meter_open_event_durationAttribute);
                    this._meter_open_event_duration = value;
                    this.OnMeter_open_event_durationChanged(e);
                    this.OnPropertyChanged("Meter_open_event_duration", e, _meter_open_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Meter_open_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Meter_open_event_cumulative_duration
        {
            get
            {
                return this._meter_open_event_cumulative_duration;
            }
            set
            {
                if ((this._meter_open_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._meter_open_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeter_open_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Meter_open_event_cumulative_duration", e, _meter_open_event_cumulative_durationAttribute);
                    this._meter_open_event_cumulative_duration = value;
                    this.OnMeter_open_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Meter_open_event_cumulative_duration", e, _meter_open_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Terminal_cover_open_event_counter
        {
            get
            {
                return this._terminal_cover_open_event_counter;
            }
            set
            {
                if ((this._terminal_cover_open_event_counter != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_counterChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_counter", e, _terminal_cover_open_event_counterAttribute);
                    this._terminal_cover_open_event_counter = value;
                    this.OnTerminal_cover_open_event_counterChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_counter", e, _terminal_cover_open_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Terminal_cover_open_event_time
        {
            get
            {
                return this._terminal_cover_open_event_time;
            }
            set
            {
                if ((this._terminal_cover_open_event_time != value))
                {
                    string old = this._terminal_cover_open_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_timeChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_time", e, _terminal_cover_open_event_timeAttribute);
                    this._terminal_cover_open_event_time = value;
                    this.OnTerminal_cover_open_event_timeChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_time", e, _terminal_cover_open_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Terminal_cover_open_event_duration
        {
            get
            {
                return this._terminal_cover_open_event_duration;
            }
            set
            {
                if ((this._terminal_cover_open_event_duration != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_durationChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_duration", e, _terminal_cover_open_event_durationAttribute);
                    this._terminal_cover_open_event_duration = value;
                    this.OnTerminal_cover_open_event_durationChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_duration", e, _terminal_cover_open_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Terminal_cover_open_event_cumulative_duration
        {
            get
            {
                return this._terminal_cover_open_event_cumulative_duration;
            }
            set
            {
                if ((this._terminal_cover_open_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._terminal_cover_open_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminal_cover_open_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Terminal_cover_open_event_cumulative_duration", e, _terminal_cover_open_event_cumulative_durationAttribute);
                    this._terminal_cover_open_event_cumulative_duration = value;
                    this.OnTerminal_cover_open_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Terminal_cover_open_event_cumulative_duration", e, _terminal_cover_open_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Tilt_event_counter
        {
            get
            {
                return this._tilt_event_counter;
            }
            set
            {
                if ((this._tilt_event_counter != value))
                {
                    Nullable<int> old = this._tilt_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_counterChanging(e);
                    this.OnPropertyChanging("Tilt_event_counter", e, _tilt_event_counterAttribute);
                    this._tilt_event_counter = value;
                    this.OnTilt_event_counterChanged(e);
                    this.OnPropertyChanged("Tilt_event_counter", e, _tilt_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Tilt_event_time
        {
            get
            {
                return this._tilt_event_time;
            }
            set
            {
                if ((this._tilt_event_time != value))
                {
                    string old = this._tilt_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_timeChanging(e);
                    this.OnPropertyChanging("Tilt_event_time", e, _tilt_event_timeAttribute);
                    this._tilt_event_time = value;
                    this.OnTilt_event_timeChanged(e);
                    this.OnPropertyChanged("Tilt_event_time", e, _tilt_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Tilt_event_duration
        {
            get
            {
                return this._tilt_event_duration;
            }
            set
            {
                if ((this._tilt_event_duration != value))
                {
                    Nullable<int> old = this._tilt_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_durationChanging(e);
                    this.OnPropertyChanging("Tilt_event_duration", e, _tilt_event_durationAttribute);
                    this._tilt_event_duration = value;
                    this.OnTilt_event_durationChanged(e);
                    this.OnPropertyChanged("Tilt_event_duration", e, _tilt_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tilt_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Tilt_event_cumulative_duration
        {
            get
            {
                return this._tilt_event_cumulative_duration;
            }
            set
            {
                if ((this._tilt_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._tilt_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTilt_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Tilt_event_cumulative_duration", e, _tilt_event_cumulative_durationAttribute);
                    this._tilt_event_cumulative_duration = value;
                    this.OnTilt_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Tilt_event_cumulative_duration", e, _tilt_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Strong_DC_magnetic_field_event_counter
        {
            get
            {
                return this._strong_DC_magnetic_field_event_counter;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_counter != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_counterChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_counter", e, _strong_DC_magnetic_field_event_counterAttribute);
                    this._strong_DC_magnetic_field_event_counter = value;
                    this.OnStrong_DC_magnetic_field_event_counterChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_counter", e, _strong_DC_magnetic_field_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Strong_DC_magnetic_field_event_time
        {
            get
            {
                return this._strong_DC_magnetic_field_event_time;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_time != value))
                {
                    string old = this._strong_DC_magnetic_field_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_timeChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_time", e, _strong_DC_magnetic_field_event_timeAttribute);
                    this._strong_DC_magnetic_field_event_time = value;
                    this.OnStrong_DC_magnetic_field_event_timeChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_time", e, _strong_DC_magnetic_field_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Strong_DC_magnetic_field_event_duration
        {
            get
            {
                return this._strong_DC_magnetic_field_event_duration;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_duration != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_durationChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_duration", e, _strong_DC_magnetic_field_event_durationAttribute);
                    this._strong_DC_magnetic_field_event_duration = value;
                    this.OnStrong_DC_magnetic_field_event_durationChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_duration", e, _strong_DC_magnetic_field_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Strong_DC_magnetic_field_event_cumulative_duration
        {
            get
            {
                return this._strong_DC_magnetic_field_event_cumulative_duration;
            }
            set
            {
                if ((this._strong_DC_magnetic_field_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._strong_DC_magnetic_field_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrong_DC_magnetic_field_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Strong_DC_magnetic_field_event_cumulative_duration", e, _strong_DC_magnetic_field_event_cumulative_durationAttribute);
                    this._strong_DC_magnetic_field_event_cumulative_duration = value;
                    this.OnStrong_DC_magnetic_field_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Strong_DC_magnetic_field_event_cumulative_duration", e, _strong_DC_magnetic_field_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Supply_control_switch_event_counter
        {
            get
            {
                return this._supply_control_switch_event_counter;
            }
            set
            {
                if ((this._supply_control_switch_event_counter != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_counterChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_counter", e, _supply_control_switch_event_counterAttribute);
                    this._supply_control_switch_event_counter = value;
                    this.OnSupply_control_switch_event_counterChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_counter", e, _supply_control_switch_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Supply_control_switch_event_time
        {
            get
            {
                return this._supply_control_switch_event_time;
            }
            set
            {
                if ((this._supply_control_switch_event_time != value))
                {
                    string old = this._supply_control_switch_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_timeChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_time", e, _supply_control_switch_event_timeAttribute);
                    this._supply_control_switch_event_time = value;
                    this.OnSupply_control_switch_event_timeChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_time", e, _supply_control_switch_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Supply_control_switch_event_duration
        {
            get
            {
                return this._supply_control_switch_event_duration;
            }
            set
            {
                if ((this._supply_control_switch_event_duration != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_durationChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_duration", e, _supply_control_switch_event_durationAttribute);
                    this._supply_control_switch_event_duration = value;
                    this.OnSupply_control_switch_event_durationChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_duration", e, _supply_control_switch_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Supply_control_switch_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Supply_control_switch_event_cumulative_duration
        {
            get
            {
                return this._supply_control_switch_event_cumulative_duration;
            }
            set
            {
                if ((this._supply_control_switch_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._supply_control_switch_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupply_control_switch_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Supply_control_switch_event_cumulative_duration", e, _supply_control_switch_event_cumulative_durationAttribute);
                    this._supply_control_switch_event_cumulative_duration = value;
                    this.OnSupply_control_switch_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Supply_control_switch_event_cumulative_duration", e, _supply_control_switch_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Metrology_tamper_event_counter
        {
            get
            {
                return this._metrology_tamper_event_counter;
            }
            set
            {
                if ((this._metrology_tamper_event_counter != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_counterChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_counter", e, _metrology_tamper_event_counterAttribute);
                    this._metrology_tamper_event_counter = value;
                    this.OnMetrology_tamper_event_counterChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_counter", e, _metrology_tamper_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Metrology_tamper_event_time
        {
            get
            {
                return this._metrology_tamper_event_time;
            }
            set
            {
                if ((this._metrology_tamper_event_time != value))
                {
                    string old = this._metrology_tamper_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_timeChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_time", e, _metrology_tamper_event_timeAttribute);
                    this._metrology_tamper_event_time = value;
                    this.OnMetrology_tamper_event_timeChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_time", e, _metrology_tamper_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Metrology_tamper_event_duration
        {
            get
            {
                return this._metrology_tamper_event_duration;
            }
            set
            {
                if ((this._metrology_tamper_event_duration != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_durationChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_duration", e, _metrology_tamper_event_durationAttribute);
                    this._metrology_tamper_event_duration = value;
                    this.OnMetrology_tamper_event_durationChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_duration", e, _metrology_tamper_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Metrology_tamper_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Metrology_tamper_event_cumulative_duration
        {
            get
            {
                return this._metrology_tamper_event_cumulative_duration;
            }
            set
            {
                if ((this._metrology_tamper_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._metrology_tamper_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrology_tamper_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Metrology_tamper_event_cumulative_duration", e, _metrology_tamper_event_cumulative_durationAttribute);
                    this._metrology_tamper_event_cumulative_duration = value;
                    this.OnMetrology_tamper_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Metrology_tamper_event_cumulative_duration", e, _metrology_tamper_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Communication_tamper_event_counter
        {
            get
            {
                return this._communication_tamper_event_counter;
            }
            set
            {
                if ((this._communication_tamper_event_counter != value))
                {
                    Nullable<int> old = this._communication_tamper_event_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_counterChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_counter", e, _communication_tamper_event_counterAttribute);
                    this._communication_tamper_event_counter = value;
                    this.OnCommunication_tamper_event_counterChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_counter", e, _communication_tamper_event_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Communication_tamper_event_time
        {
            get
            {
                return this._communication_tamper_event_time;
            }
            set
            {
                if ((this._communication_tamper_event_time != value))
                {
                    string old = this._communication_tamper_event_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_timeChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_time", e, _communication_tamper_event_timeAttribute);
                    this._communication_tamper_event_time = value;
                    this.OnCommunication_tamper_event_timeChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_time", e, _communication_tamper_event_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Communication_tamper_event_duration
        {
            get
            {
                return this._communication_tamper_event_duration;
            }
            set
            {
                if ((this._communication_tamper_event_duration != value))
                {
                    Nullable<int> old = this._communication_tamper_event_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_durationChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_duration", e, _communication_tamper_event_durationAttribute);
                    this._communication_tamper_event_duration = value;
                    this.OnCommunication_tamper_event_durationChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_duration", e, _communication_tamper_event_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Communication_tamper_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Communication_tamper_event_cumulative_duration
        {
            get
            {
                return this._communication_tamper_event_cumulative_duration;
            }
            set
            {
                if ((this._communication_tamper_event_cumulative_duration != value))
                {
                    Nullable<int> old = this._communication_tamper_event_cumulative_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunication_tamper_event_cumulative_durationChanging(e);
                    this.OnPropertyChanging("Communication_tamper_event_cumulative_duration", e, _communication_tamper_event_cumulative_durationAttribute);
                    this._communication_tamper_event_cumulative_duration = value;
                    this.OnCommunication_tamper_event_cumulative_durationChanged(e);
                    this.OnPropertyChanged("Communication_tamper_event_cumulative_duration", e, _communication_tamper_event_cumulative_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Manufacturer_specific property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        public string Manufacturer_specific
        {
            get
            {
                return this._manufacturer_specific;
            }
            set
            {
                if ((this._manufacturer_specific != value))
                {
                    string old = this._manufacturer_specific;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManufacturer_specificChanging(e);
                    this.OnPropertyChanging("Manufacturer_specific", e, _manufacturer_specificAttribute);
                    this._manufacturer_specific = value;
                    this.OnManufacturer_specificChanged(e);
                    this.OnPropertyChanged("Manufacturer_specific", e, _manufacturer_specificAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeterTemperEventRelatedObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Meter_open_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_timestamp property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_timestamp property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_time property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_time property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_cumulative_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_cumulative_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer_specific property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Manufacturer_specificChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer_specific property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Manufacturer_specificChanging;
        
        private static ITypedElement RetrieveMeter_open_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_counter")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_timestampAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_timestamp")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_timestampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_timestampChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_timestampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_timestampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_timestampChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_timestampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_duration")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeter_open_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Meter_open_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Meter_open_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Meter_open_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeter_open_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Meter_open_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_counter")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_time")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_duration")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminal_cover_open_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Terminal_cover_open_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Terminal_cover_open_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminal_cover_open_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Terminal_cover_open_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_counter")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_time")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_duration")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTilt_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Tilt_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Tilt_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Tilt_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTilt_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Tilt_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_counter")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_time")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_duration")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrong_DC_magnetic_field_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Strong_DC_magnetic_field_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Strong_DC_magnetic_field_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrong_DC_magnetic_field_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Strong_DC_magnetic_field_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_counter")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_time")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_duration")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupply_control_switch_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Supply_control_switch_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Supply_control_switch_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupply_control_switch_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Supply_control_switch_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_counter")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_time")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_duration")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrology_tamper_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Metrology_tamper_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Metrology_tamper_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrology_tamper_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Metrology_tamper_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_counter")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_time")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_timeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_timeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_duration")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommunication_tamper_event_cumulative_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Communication_tamper_event_cumulative_duration")));
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_cumulative_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_cumulative_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_cumulative_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Communication_tamper_event_cumulative_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunication_tamper_event_cumulative_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Communication_tamper_event_cumulative_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManufacturer_specificAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeterTemperEventRelatedObject.ClassInstance)).Resolve("Manufacturer_specific")));
        }
        
        /// <summary>
        /// Raises the Manufacturer_specificChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturer_specificChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Manufacturer_specificChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Manufacturer_specificChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturer_specificChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Manufacturer_specificChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "METER_OPEN_EVENT_COUNTER"))
            {
                return this.Meter_open_event_counter;
            }
            if ((attribute == "METER_OPEN_EVENT_TIMESTAMP"))
            {
                return this.Meter_open_event_timestamp;
            }
            if ((attribute == "METER_OPEN_EVENT_DURATION"))
            {
                return this.Meter_open_event_duration;
            }
            if ((attribute == "METER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Meter_open_event_cumulative_duration;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_COUNTER"))
            {
                return this.Terminal_cover_open_event_counter;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_TIME"))
            {
                return this.Terminal_cover_open_event_time;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_DURATION"))
            {
                return this.Terminal_cover_open_event_duration;
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Terminal_cover_open_event_cumulative_duration;
            }
            if ((attribute == "TILT_EVENT_COUNTER"))
            {
                return this.Tilt_event_counter;
            }
            if ((attribute == "TILT_EVENT_TIME"))
            {
                return this.Tilt_event_time;
            }
            if ((attribute == "TILT_EVENT_DURATION"))
            {
                return this.Tilt_event_duration;
            }
            if ((attribute == "TILT_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Tilt_event_cumulative_duration;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_COUNTER"))
            {
                return this.Strong_DC_magnetic_field_event_counter;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_TIME"))
            {
                return this.Strong_DC_magnetic_field_event_time;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_DURATION"))
            {
                return this.Strong_DC_magnetic_field_event_duration;
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Strong_DC_magnetic_field_event_cumulative_duration;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_COUNTER"))
            {
                return this.Supply_control_switch_event_counter;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_TIME"))
            {
                return this.Supply_control_switch_event_time;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_DURATION"))
            {
                return this.Supply_control_switch_event_duration;
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Supply_control_switch_event_cumulative_duration;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_COUNTER"))
            {
                return this.Metrology_tamper_event_counter;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_TIME"))
            {
                return this.Metrology_tamper_event_time;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_DURATION"))
            {
                return this.Metrology_tamper_event_duration;
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Metrology_tamper_event_cumulative_duration;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_COUNTER"))
            {
                return this.Communication_tamper_event_counter;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_TIME"))
            {
                return this.Communication_tamper_event_time;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_DURATION"))
            {
                return this.Communication_tamper_event_duration;
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return this.Communication_tamper_event_cumulative_duration;
            }
            if ((attribute == "MANUFACTURER_SPECIFIC"))
            {
                return this.Manufacturer_specific;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METER_OPEN_EVENT_COUNTER"))
            {
                this.Meter_open_event_counter = ((int)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_TIMESTAMP"))
            {
                this.Meter_open_event_timestamp = ((string)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_DURATION"))
            {
                this.Meter_open_event_duration = ((int)(value));
                return;
            }
            if ((feature == "METER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                this.Meter_open_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_COUNTER"))
            {
                this.Terminal_cover_open_event_counter = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_TIME"))
            {
                this.Terminal_cover_open_event_time = ((string)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_DURATION"))
            {
                this.Terminal_cover_open_event_duration = ((int)(value));
                return;
            }
            if ((feature == "TERMINAL_COVER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                this.Terminal_cover_open_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_COUNTER"))
            {
                this.Tilt_event_counter = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_TIME"))
            {
                this.Tilt_event_time = ((string)(value));
                return;
            }
            if ((feature == "TILT_EVENT_DURATION"))
            {
                this.Tilt_event_duration = ((int)(value));
                return;
            }
            if ((feature == "TILT_EVENT_CUMULATIVE_DURATION"))
            {
                this.Tilt_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_COUNTER"))
            {
                this.Strong_DC_magnetic_field_event_counter = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_TIME"))
            {
                this.Strong_DC_magnetic_field_event_time = ((string)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_DURATION"))
            {
                this.Strong_DC_magnetic_field_event_duration = ((int)(value));
                return;
            }
            if ((feature == "STRONG_DC_MAGNETIC_FIELD_EVENT_CUMULATIVE_DURATION"))
            {
                this.Strong_DC_magnetic_field_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_COUNTER"))
            {
                this.Supply_control_switch_event_counter = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_TIME"))
            {
                this.Supply_control_switch_event_time = ((string)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_DURATION"))
            {
                this.Supply_control_switch_event_duration = ((int)(value));
                return;
            }
            if ((feature == "SUPPLY_CONTROL_SWITCH_EVENT_CUMULATIVE_DURATION"))
            {
                this.Supply_control_switch_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_COUNTER"))
            {
                this.Metrology_tamper_event_counter = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_TIME"))
            {
                this.Metrology_tamper_event_time = ((string)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_DURATION"))
            {
                this.Metrology_tamper_event_duration = ((int)(value));
                return;
            }
            if ((feature == "METROLOGY_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                this.Metrology_tamper_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_COUNTER"))
            {
                this.Communication_tamper_event_counter = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_TIME"))
            {
                this.Communication_tamper_event_time = ((string)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_DURATION"))
            {
                this.Communication_tamper_event_duration = ((int)(value));
                return;
            }
            if ((feature == "COMMUNICATION_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                this.Communication_tamper_event_cumulative_duration = ((int)(value));
                return;
            }
            if ((feature == "MANUFACTURER_SPECIFIC"))
            {
                this.Manufacturer_specific = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "METER_OPEN_EVENT_COUNTER"))
            {
                return Observable.Box(new Meter_open_event_counterProxy(this));
            }
            if ((attribute == "METER_OPEN_EVENT_TIMESTAMP"))
            {
                return new Meter_open_event_timestampProxy(this);
            }
            if ((attribute == "METER_OPEN_EVENT_DURATION"))
            {
                return Observable.Box(new Meter_open_event_durationProxy(this));
            }
            if ((attribute == "METER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Meter_open_event_cumulative_durationProxy(this));
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_COUNTER"))
            {
                return Observable.Box(new Terminal_cover_open_event_counterProxy(this));
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_TIME"))
            {
                return new Terminal_cover_open_event_timeProxy(this);
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_DURATION"))
            {
                return Observable.Box(new Terminal_cover_open_event_durationProxy(this));
            }
            if ((attribute == "TERMINAL_COVER_OPEN_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Terminal_cover_open_event_cumulative_durationProxy(this));
            }
            if ((attribute == "TILT_EVENT_COUNTER"))
            {
                return Observable.Box(new Tilt_event_counterProxy(this));
            }
            if ((attribute == "TILT_EVENT_TIME"))
            {
                return new Tilt_event_timeProxy(this);
            }
            if ((attribute == "TILT_EVENT_DURATION"))
            {
                return Observable.Box(new Tilt_event_durationProxy(this));
            }
            if ((attribute == "TILT_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Tilt_event_cumulative_durationProxy(this));
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_COUNTER"))
            {
                return Observable.Box(new Strong_DC_magnetic_field_event_counterProxy(this));
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_TIME"))
            {
                return new Strong_DC_magnetic_field_event_timeProxy(this);
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_DURATION"))
            {
                return Observable.Box(new Strong_DC_magnetic_field_event_durationProxy(this));
            }
            if ((attribute == "STRONG_DC_MAGNETIC_FIELD_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Strong_DC_magnetic_field_event_cumulative_durationProxy(this));
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_COUNTER"))
            {
                return Observable.Box(new Supply_control_switch_event_counterProxy(this));
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_TIME"))
            {
                return new Supply_control_switch_event_timeProxy(this);
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_DURATION"))
            {
                return Observable.Box(new Supply_control_switch_event_durationProxy(this));
            }
            if ((attribute == "SUPPLY_CONTROL_SWITCH_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Supply_control_switch_event_cumulative_durationProxy(this));
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_COUNTER"))
            {
                return Observable.Box(new Metrology_tamper_event_counterProxy(this));
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_TIME"))
            {
                return new Metrology_tamper_event_timeProxy(this);
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_DURATION"))
            {
                return Observable.Box(new Metrology_tamper_event_durationProxy(this));
            }
            if ((attribute == "METROLOGY_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Metrology_tamper_event_cumulative_durationProxy(this));
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_COUNTER"))
            {
                return Observable.Box(new Communication_tamper_event_counterProxy(this));
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_TIME"))
            {
                return new Communication_tamper_event_timeProxy(this);
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_DURATION"))
            {
                return Observable.Box(new Communication_tamper_event_durationProxy(this));
            }
            if ((attribute == "COMMUNICATION_TAMPER_EVENT_CUMULATIVE_DURATION"))
            {
                return Observable.Box(new Communication_tamper_event_cumulative_durationProxy(this));
            }
            if ((attribute == "MANUFACTURER_SPECIFIC"))
            {
                return new Manufacturer_specificProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeterTemperEventRelatedObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_counter property
        /// </summary>
        private sealed class Meter_open_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_counter;
                }
                set
                {
                    this.ModelElement.Meter_open_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_timestamp property
        /// </summary>
        private sealed class Meter_open_event_timestampProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_timestampProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_timestamp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_timestamp;
                }
                set
                {
                    this.ModelElement.Meter_open_event_timestamp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_duration property
        /// </summary>
        private sealed class Meter_open_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_duration;
                }
                set
                {
                    this.ModelElement.Meter_open_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Meter_open_event_cumulative_duration property
        /// </summary>
        private sealed class Meter_open_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Meter_open_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Meter_open_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Meter_open_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Meter_open_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_counter property
        /// </summary>
        private sealed class Terminal_cover_open_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_counter;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_time property
        /// </summary>
        private sealed class Terminal_cover_open_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_time;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_duration property
        /// </summary>
        private sealed class Terminal_cover_open_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_duration;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        private sealed class Terminal_cover_open_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Terminal_cover_open_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Terminal_cover_open_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Terminal_cover_open_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Terminal_cover_open_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_counter property
        /// </summary>
        private sealed class Tilt_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_counter;
                }
                set
                {
                    this.ModelElement.Tilt_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_time property
        /// </summary>
        private sealed class Tilt_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_time;
                }
                set
                {
                    this.ModelElement.Tilt_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_duration property
        /// </summary>
        private sealed class Tilt_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_duration;
                }
                set
                {
                    this.ModelElement.Tilt_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tilt_event_cumulative_duration property
        /// </summary>
        private sealed class Tilt_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Tilt_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Tilt_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Tilt_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Tilt_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_counter property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_counter;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_time property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_time;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_duration property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_duration;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        private sealed class Strong_DC_magnetic_field_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Strong_DC_magnetic_field_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Strong_DC_magnetic_field_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Strong_DC_magnetic_field_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Strong_DC_magnetic_field_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_counter property
        /// </summary>
        private sealed class Supply_control_switch_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_counter;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_time property
        /// </summary>
        private sealed class Supply_control_switch_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_time;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_duration property
        /// </summary>
        private sealed class Supply_control_switch_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_duration;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Supply_control_switch_event_cumulative_duration property
        /// </summary>
        private sealed class Supply_control_switch_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Supply_control_switch_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Supply_control_switch_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Supply_control_switch_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Supply_control_switch_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_counter property
        /// </summary>
        private sealed class Metrology_tamper_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_counter;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_time property
        /// </summary>
        private sealed class Metrology_tamper_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_time;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_duration property
        /// </summary>
        private sealed class Metrology_tamper_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_duration;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Metrology_tamper_event_cumulative_duration property
        /// </summary>
        private sealed class Metrology_tamper_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Metrology_tamper_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Metrology_tamper_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Metrology_tamper_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Metrology_tamper_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_counter property
        /// </summary>
        private sealed class Communication_tamper_event_counterProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_counterProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_counter;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_time property
        /// </summary>
        private sealed class Communication_tamper_event_timeProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_timeProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_time;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_duration property
        /// </summary>
        private sealed class Communication_tamper_event_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_duration;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Communication_tamper_event_cumulative_duration property
        /// </summary>
        private sealed class Communication_tamper_event_cumulative_durationProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Communication_tamper_event_cumulative_durationProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Communication_tamper_event_cumulative_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Communication_tamper_event_cumulative_duration;
                }
                set
                {
                    this.ModelElement.Communication_tamper_event_cumulative_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Manufacturer_specific property
        /// </summary>
        private sealed class Manufacturer_specificProxy : ModelPropertyChange<IMeterTemperEventRelatedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Manufacturer_specificProxy(IMeterTemperEventRelatedObject modelElement) : 
                    base(modelElement, "Manufacturer_specific")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Manufacturer_specific;
                }
                set
                {
                    this.ModelElement.Manufacturer_specific = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityValues")]
    public partial class ElectricityValues : Data, IElectricityValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActivePowerpL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerpL1;
        
        private static Lazy<ITypedElement> _activePowerpL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerpL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerpall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerpall;
        
        private static Lazy<ITypedElement> _activePowerpallAttribute = new Lazy<ITypedElement>(RetrieveActivePowerpallAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerpL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerpL2;
        
        private static Lazy<ITypedElement> _activePowerpL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerpL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerpL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerpL3;
        
        private static Lazy<ITypedElement> _activePowerpL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerpL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowermL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowermL2;
        
        private static Lazy<ITypedElement> _activePowermL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowermL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowermL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowermL1;
        
        private static Lazy<ITypedElement> _activePowermL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowermL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowermL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowermL3;
        
        private static Lazy<ITypedElement> _activePowermL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowermL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowermall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowermall;
        
        private static Lazy<ITypedElement> _activePowermallAttribute = new Lazy<ITypedElement>(RetrieveActivePowermallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerpL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerpL1;
        
        private static Lazy<ITypedElement> _reactivePowerpL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerpL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerpL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerpL2;
        
        private static Lazy<ITypedElement> _reactivePowerpL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerpL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerpL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerpL3;
        
        private static Lazy<ITypedElement> _reactivePowerpL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerpL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerpall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerpall;
        
        private static Lazy<ITypedElement> _reactivePowerpallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowerpallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowermL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowermL1;
        
        private static Lazy<ITypedElement> _reactivePowermL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowermL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowermL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowermL2;
        
        private static Lazy<ITypedElement> _reactivePowermL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowermL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowermL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowermL3;
        
        private static Lazy<ITypedElement> _reactivePowermL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowermL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowermall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowermall;
        
        private static Lazy<ITypedElement> _reactivePowermallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowermallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIL1;
        
        private static Lazy<ITypedElement> _reactivePowerQIL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIL2;
        
        private static Lazy<ITypedElement> _reactivePowerQIL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIL3;
        
        private static Lazy<ITypedElement> _reactivePowerQIL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIall;
        
        private static Lazy<ITypedElement> _reactivePowerQIallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIL1;
        
        private static Lazy<ITypedElement> _reactivePowerQIIL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIL2;
        
        private static Lazy<ITypedElement> _reactivePowerQIIL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIL3;
        
        private static Lazy<ITypedElement> _reactivePowerQIIL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIall;
        
        private static Lazy<ITypedElement> _reactivePowerQIIallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIIL1;
        
        private static Lazy<ITypedElement> _reactivePowerQIIIL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIIL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIIL2;
        
        private static Lazy<ITypedElement> _reactivePowerQIIIL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIIL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIIL3;
        
        private static Lazy<ITypedElement> _reactivePowerQIIIL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIIL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIIIall;
        
        private static Lazy<ITypedElement> _reactivePowerQIIIallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIIIallAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIVL1;
        
        private static Lazy<ITypedElement> _reactivePowerQIVL1Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIVL1Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIVL2;
        
        private static Lazy<ITypedElement> _reactivePowerQIVL2Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIVL2Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIVL3;
        
        private static Lazy<ITypedElement> _reactivePowerQIVL3Attribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIVL3Attribute);
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactivePowerQIVall;
        
        private static Lazy<ITypedElement> _reactivePowerQIVallAttribute = new Lazy<ITypedElement>(RetrieveReactivePowerQIVallAttribute);
        
        /// <summary>
        /// The backing field for the ApparentPowerpL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowerpL1;
        
        private static Lazy<ITypedElement> _apparentPowerpL1Attribute = new Lazy<ITypedElement>(RetrieveApparentPowerpL1Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowerpL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowerpL2;
        
        private static Lazy<ITypedElement> _apparentPowerpL2Attribute = new Lazy<ITypedElement>(RetrieveApparentPowerpL2Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowerpL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowerpL3;
        
        private static Lazy<ITypedElement> _apparentPowerpL3Attribute = new Lazy<ITypedElement>(RetrieveApparentPowerpL3Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowerpAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowerpAll;
        
        private static Lazy<ITypedElement> _apparentPowerpAllAttribute = new Lazy<ITypedElement>(RetrieveApparentPowerpAllAttribute);
        
        /// <summary>
        /// The backing field for the ApparentPowermL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowermL1;
        
        private static Lazy<ITypedElement> _apparentPowermL1Attribute = new Lazy<ITypedElement>(RetrieveApparentPowermL1Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowermL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowermL2;
        
        private static Lazy<ITypedElement> _apparentPowermL2Attribute = new Lazy<ITypedElement>(RetrieveApparentPowermL2Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowermL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowermL3;
        
        private static Lazy<ITypedElement> _apparentPowermL3Attribute = new Lazy<ITypedElement>(RetrieveApparentPowermL3Attribute);
        
        /// <summary>
        /// The backing field for the ApparentPowermAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _apparentPowermAll;
        
        private static Lazy<ITypedElement> _apparentPowermAllAttribute = new Lazy<ITypedElement>(RetrieveApparentPowermAllAttribute);
        
        /// <summary>
        /// The backing field for the CurrentL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _currentL1;
        
        private static Lazy<ITypedElement> _currentL1Attribute = new Lazy<ITypedElement>(RetrieveCurrentL1Attribute);
        
        /// <summary>
        /// The backing field for the CurrentL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _currentL2;
        
        private static Lazy<ITypedElement> _currentL2Attribute = new Lazy<ITypedElement>(RetrieveCurrentL2Attribute);
        
        /// <summary>
        /// The backing field for the CurrentL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _currentL3;
        
        private static Lazy<ITypedElement> _currentL3Attribute = new Lazy<ITypedElement>(RetrieveCurrentL3Attribute);
        
        /// <summary>
        /// The backing field for the CurrentAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _currentAll;
        
        private static Lazy<ITypedElement> _currentAllAttribute = new Lazy<ITypedElement>(RetrieveCurrentAllAttribute);
        
        /// <summary>
        /// The backing field for the VoltageL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _voltageL1;
        
        private static Lazy<ITypedElement> _voltageL1Attribute = new Lazy<ITypedElement>(RetrieveVoltageL1Attribute);
        
        /// <summary>
        /// The backing field for the VoltageL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _voltageL2;
        
        private static Lazy<ITypedElement> _voltageL2Attribute = new Lazy<ITypedElement>(RetrieveVoltageL2Attribute);
        
        /// <summary>
        /// The backing field for the VoltageL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _voltageL3;
        
        private static Lazy<ITypedElement> _voltageL3Attribute = new Lazy<ITypedElement>(RetrieveVoltageL3Attribute);
        
        /// <summary>
        /// The backing field for the VoltageAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _voltageAll;
        
        private static Lazy<ITypedElement> _voltageAllAttribute = new Lazy<ITypedElement>(RetrieveVoltageAllAttribute);
        
        /// <summary>
        /// The backing field for the PowerFactorL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _powerFactorL1;
        
        private static Lazy<ITypedElement> _powerFactorL1Attribute = new Lazy<ITypedElement>(RetrievePowerFactorL1Attribute);
        
        /// <summary>
        /// The backing field for the PowerFactorL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _powerFactorL2;
        
        private static Lazy<ITypedElement> _powerFactorL2Attribute = new Lazy<ITypedElement>(RetrievePowerFactorL2Attribute);
        
        /// <summary>
        /// The backing field for the PowerFactorL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _powerFactorL3;
        
        private static Lazy<ITypedElement> _powerFactorL3Attribute = new Lazy<ITypedElement>(RetrievePowerFactorL3Attribute);
        
        /// <summary>
        /// The backing field for the PowerFactorAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _powerFactorAll;
        
        private static Lazy<ITypedElement> _powerFactorAllAttribute = new Lazy<ITypedElement>(RetrievePowerFactorAllAttribute);
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _supplyFrequencyL1;
        
        private static Lazy<ITypedElement> _supplyFrequencyL1Attribute = new Lazy<ITypedElement>(RetrieveSupplyFrequencyL1Attribute);
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _supplyFrequencyL2;
        
        private static Lazy<ITypedElement> _supplyFrequencyL2Attribute = new Lazy<ITypedElement>(RetrieveSupplyFrequencyL2Attribute);
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _supplyFrequencyL3;
        
        private static Lazy<ITypedElement> _supplyFrequencyL3Attribute = new Lazy<ITypedElement>(RetrieveSupplyFrequencyL3Attribute);
        
        /// <summary>
        /// The backing field for the SupplyFrequencyAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _supplyFrequencyAll;
        
        private static Lazy<ITypedElement> _supplyFrequencyAllAttribute = new Lazy<ITypedElement>(RetrieveSupplyFrequencyAllAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsPL1;
        
        private static Lazy<ITypedElement> _activePowerAbsPL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsPL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsPL2;
        
        private static Lazy<ITypedElement> _activePowerAbsPL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsPL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsPL3;
        
        private static Lazy<ITypedElement> _activePowerAbsPL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsPL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsPAll;
        
        private static Lazy<ITypedElement> _activePowerAbsPAllAttribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsPAllAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsML1;
        
        private static Lazy<ITypedElement> _activePowerAbsML1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsML1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsML2;
        
        private static Lazy<ITypedElement> _activePowerAbsML2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsML2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsML3;
        
        private static Lazy<ITypedElement> _activePowerAbsML3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsML3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerAbsMAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerAbsMAll;
        
        private static Lazy<ITypedElement> _activePowerAbsMAllAttribute = new Lazy<ITypedElement>(RetrieveActivePowerAbsMAllAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIL1;
        
        private static Lazy<ITypedElement> _activePowerQIL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIL2;
        
        private static Lazy<ITypedElement> _activePowerQIL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIL3;
        
        private static Lazy<ITypedElement> _activePowerQIL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIall;
        
        private static Lazy<ITypedElement> _activePowerQIallAttribute = new Lazy<ITypedElement>(RetrieveActivePowerQIallAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIL1;
        
        private static Lazy<ITypedElement> _activePowerQIIL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIL2;
        
        private static Lazy<ITypedElement> _activePowerQIIL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIL3;
        
        private static Lazy<ITypedElement> _activePowerQIIL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIall;
        
        private static Lazy<ITypedElement> _activePowerQIIallAttribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIallAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIIL1;
        
        private static Lazy<ITypedElement> _activePowerQIIIL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIIL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIIL2;
        
        private static Lazy<ITypedElement> _activePowerQIIIL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIIL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIIL3;
        
        private static Lazy<ITypedElement> _activePowerQIIIL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIIL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIIIall;
        
        private static Lazy<ITypedElement> _activePowerQIIIallAttribute = new Lazy<ITypedElement>(RetrieveActivePowerQIIIallAttribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIVL1;
        
        private static Lazy<ITypedElement> _activePowerQIVL1Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIVL1Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIVL2;
        
        private static Lazy<ITypedElement> _activePowerQIVL2Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIVL2Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIVL3;
        
        private static Lazy<ITypedElement> _activePowerQIVL3Attribute = new Lazy<ITypedElement>(RetrieveActivePowerQIVL3Attribute);
        
        /// <summary>
        /// The backing field for the ActivePowerQIVall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _activePowerQIVall;
        
        private static Lazy<ITypedElement> _activePowerQIVallAttribute = new Lazy<ITypedElement>(RetrieveActivePowerQIVallAttribute);
        
        /// <summary>
        /// The backing field for the Angles property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _angles;
        
        private static Lazy<ITypedElement> _anglesAttribute = new Lazy<ITypedElement>(RetrieveAnglesAttribute);
        
        /// <summary>
        /// The backing field for the Pulses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _pulses;
        
        private static Lazy<ITypedElement> _pulsesAttribute = new Lazy<ITypedElement>(RetrievePulsesAttribute);
        
        /// <summary>
        /// The backing field for the Ampere_squaredHours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _ampere_squaredHours;
        
        private static Lazy<ITypedElement> _ampere_squaredHoursAttribute = new Lazy<ITypedElement>(RetrieveAmpere_squaredHoursAttribute);
        
        /// <summary>
        /// The backing field for the Volt_squaredHours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _volt_squaredHours;
        
        private static Lazy<ITypedElement> _volt_squaredHoursAttribute = new Lazy<ITypedElement>(RetrieveVolt_squaredHoursAttribute);
        
        /// <summary>
        /// The backing field for the NeutralCurrent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _neutralCurrent;
        
        private static Lazy<ITypedElement> _neutralCurrentAttribute = new Lazy<ITypedElement>(RetrieveNeutralCurrentAttribute);
        
        /// <summary>
        /// The backing field for the NeutralVoltage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _neutralVoltage;
        
        private static Lazy<ITypedElement> _neutralVoltageAttribute = new Lazy<ITypedElement>(RetrieveNeutralVoltageAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActivePowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerpL1
        {
            get
            {
                return this._activePowerpL1;
            }
            set
            {
                if ((this._activePowerpL1 != value))
                {
                    Nullable<double> old = this._activePowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL1Changing(e);
                    this.OnPropertyChanging("ActivePowerpL1", e, _activePowerpL1Attribute);
                    this._activePowerpL1 = value;
                    this.OnActivePowerpL1Changed(e);
                    this.OnPropertyChanged("ActivePowerpL1", e, _activePowerpL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerpall
        {
            get
            {
                return this._activePowerpall;
            }
            set
            {
                if ((this._activePowerpall != value))
                {
                    Nullable<double> old = this._activePowerpall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpallChanging(e);
                    this.OnPropertyChanging("ActivePowerpall", e, _activePowerpallAttribute);
                    this._activePowerpall = value;
                    this.OnActivePowerpallChanged(e);
                    this.OnPropertyChanged("ActivePowerpall", e, _activePowerpallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerpL2
        {
            get
            {
                return this._activePowerpL2;
            }
            set
            {
                if ((this._activePowerpL2 != value))
                {
                    Nullable<double> old = this._activePowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL2Changing(e);
                    this.OnPropertyChanging("ActivePowerpL2", e, _activePowerpL2Attribute);
                    this._activePowerpL2 = value;
                    this.OnActivePowerpL2Changed(e);
                    this.OnPropertyChanged("ActivePowerpL2", e, _activePowerpL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerpL3
        {
            get
            {
                return this._activePowerpL3;
            }
            set
            {
                if ((this._activePowerpL3 != value))
                {
                    Nullable<double> old = this._activePowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL3Changing(e);
                    this.OnPropertyChanging("ActivePowerpL3", e, _activePowerpL3Attribute);
                    this._activePowerpL3 = value;
                    this.OnActivePowerpL3Changed(e);
                    this.OnPropertyChanged("ActivePowerpL3", e, _activePowerpL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowermL2
        {
            get
            {
                return this._activePowermL2;
            }
            set
            {
                if ((this._activePowermL2 != value))
                {
                    Nullable<double> old = this._activePowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL2Changing(e);
                    this.OnPropertyChanging("ActivePowermL2", e, _activePowermL2Attribute);
                    this._activePowermL2 = value;
                    this.OnActivePowermL2Changed(e);
                    this.OnPropertyChanged("ActivePowermL2", e, _activePowermL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowermL1
        {
            get
            {
                return this._activePowermL1;
            }
            set
            {
                if ((this._activePowermL1 != value))
                {
                    Nullable<double> old = this._activePowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL1Changing(e);
                    this.OnPropertyChanging("ActivePowermL1", e, _activePowermL1Attribute);
                    this._activePowermL1 = value;
                    this.OnActivePowermL1Changed(e);
                    this.OnPropertyChanged("ActivePowermL1", e, _activePowermL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowermL3
        {
            get
            {
                return this._activePowermL3;
            }
            set
            {
                if ((this._activePowermL3 != value))
                {
                    Nullable<double> old = this._activePowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL3Changing(e);
                    this.OnPropertyChanging("ActivePowermL3", e, _activePowermL3Attribute);
                    this._activePowermL3 = value;
                    this.OnActivePowermL3Changed(e);
                    this.OnPropertyChanged("ActivePowermL3", e, _activePowermL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowermall
        {
            get
            {
                return this._activePowermall;
            }
            set
            {
                if ((this._activePowermall != value))
                {
                    Nullable<double> old = this._activePowermall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermallChanging(e);
                    this.OnPropertyChanging("ActivePowermall", e, _activePowermallAttribute);
                    this._activePowermall = value;
                    this.OnActivePowermallChanged(e);
                    this.OnPropertyChanged("ActivePowermall", e, _activePowermallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerpL1
        {
            get
            {
                return this._reactivePowerpL1;
            }
            set
            {
                if ((this._reactivePowerpL1 != value))
                {
                    Nullable<double> old = this._reactivePowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL1", e, _reactivePowerpL1Attribute);
                    this._reactivePowerpL1 = value;
                    this.OnReactivePowerpL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL1", e, _reactivePowerpL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerpL2
        {
            get
            {
                return this._reactivePowerpL2;
            }
            set
            {
                if ((this._reactivePowerpL2 != value))
                {
                    Nullable<double> old = this._reactivePowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL2", e, _reactivePowerpL2Attribute);
                    this._reactivePowerpL2 = value;
                    this.OnReactivePowerpL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL2", e, _reactivePowerpL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerpL3
        {
            get
            {
                return this._reactivePowerpL3;
            }
            set
            {
                if ((this._reactivePowerpL3 != value))
                {
                    Nullable<double> old = this._reactivePowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL3", e, _reactivePowerpL3Attribute);
                    this._reactivePowerpL3 = value;
                    this.OnReactivePowerpL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL3", e, _reactivePowerpL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerpall
        {
            get
            {
                return this._reactivePowerpall;
            }
            set
            {
                if ((this._reactivePowerpall != value))
                {
                    Nullable<double> old = this._reactivePowerpall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpallChanging(e);
                    this.OnPropertyChanging("ReactivePowerpall", e, _reactivePowerpallAttribute);
                    this._reactivePowerpall = value;
                    this.OnReactivePowerpallChanged(e);
                    this.OnPropertyChanged("ReactivePowerpall", e, _reactivePowerpallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowermL1
        {
            get
            {
                return this._reactivePowermL1;
            }
            set
            {
                if ((this._reactivePowermL1 != value))
                {
                    Nullable<double> old = this._reactivePowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL1Changing(e);
                    this.OnPropertyChanging("ReactivePowermL1", e, _reactivePowermL1Attribute);
                    this._reactivePowermL1 = value;
                    this.OnReactivePowermL1Changed(e);
                    this.OnPropertyChanged("ReactivePowermL1", e, _reactivePowermL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowermL2
        {
            get
            {
                return this._reactivePowermL2;
            }
            set
            {
                if ((this._reactivePowermL2 != value))
                {
                    Nullable<double> old = this._reactivePowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL2Changing(e);
                    this.OnPropertyChanging("ReactivePowermL2", e, _reactivePowermL2Attribute);
                    this._reactivePowermL2 = value;
                    this.OnReactivePowermL2Changed(e);
                    this.OnPropertyChanged("ReactivePowermL2", e, _reactivePowermL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowermL3
        {
            get
            {
                return this._reactivePowermL3;
            }
            set
            {
                if ((this._reactivePowermL3 != value))
                {
                    Nullable<double> old = this._reactivePowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL3Changing(e);
                    this.OnPropertyChanging("ReactivePowermL3", e, _reactivePowermL3Attribute);
                    this._reactivePowermL3 = value;
                    this.OnReactivePowermL3Changed(e);
                    this.OnPropertyChanged("ReactivePowermL3", e, _reactivePowermL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowermall
        {
            get
            {
                return this._reactivePowermall;
            }
            set
            {
                if ((this._reactivePowermall != value))
                {
                    Nullable<double> old = this._reactivePowermall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermallChanging(e);
                    this.OnPropertyChanging("ReactivePowermall", e, _reactivePowermallAttribute);
                    this._reactivePowermall = value;
                    this.OnReactivePowermallChanged(e);
                    this.OnPropertyChanged("ReactivePowermall", e, _reactivePowermallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIL1
        {
            get
            {
                return this._reactivePowerQIL1;
            }
            set
            {
                if ((this._reactivePowerQIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL1", e, _reactivePowerQIL1Attribute);
                    this._reactivePowerQIL1 = value;
                    this.OnReactivePowerQIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL1", e, _reactivePowerQIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIL2
        {
            get
            {
                return this._reactivePowerQIL2;
            }
            set
            {
                if ((this._reactivePowerQIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL2", e, _reactivePowerQIL2Attribute);
                    this._reactivePowerQIL2 = value;
                    this.OnReactivePowerQIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL2", e, _reactivePowerQIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIL3
        {
            get
            {
                return this._reactivePowerQIL3;
            }
            set
            {
                if ((this._reactivePowerQIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL3", e, _reactivePowerQIL3Attribute);
                    this._reactivePowerQIL3 = value;
                    this.OnReactivePowerQIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL3", e, _reactivePowerQIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIall
        {
            get
            {
                return this._reactivePowerQIall;
            }
            set
            {
                if ((this._reactivePowerQIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIall", e, _reactivePowerQIallAttribute);
                    this._reactivePowerQIall = value;
                    this.OnReactivePowerQIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIall", e, _reactivePowerQIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIL1
        {
            get
            {
                return this._reactivePowerQIIL1;
            }
            set
            {
                if ((this._reactivePowerQIIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL1", e, _reactivePowerQIIL1Attribute);
                    this._reactivePowerQIIL1 = value;
                    this.OnReactivePowerQIIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL1", e, _reactivePowerQIIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIL2
        {
            get
            {
                return this._reactivePowerQIIL2;
            }
            set
            {
                if ((this._reactivePowerQIIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL2", e, _reactivePowerQIIL2Attribute);
                    this._reactivePowerQIIL2 = value;
                    this.OnReactivePowerQIIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL2", e, _reactivePowerQIIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIL3
        {
            get
            {
                return this._reactivePowerQIIL3;
            }
            set
            {
                if ((this._reactivePowerQIIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL3", e, _reactivePowerQIIL3Attribute);
                    this._reactivePowerQIIL3 = value;
                    this.OnReactivePowerQIIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL3", e, _reactivePowerQIIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIall
        {
            get
            {
                return this._reactivePowerQIIall;
            }
            set
            {
                if ((this._reactivePowerQIIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIIall", e, _reactivePowerQIIallAttribute);
                    this._reactivePowerQIIall = value;
                    this.OnReactivePowerQIIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIIall", e, _reactivePowerQIIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIIL1
        {
            get
            {
                return this._reactivePowerQIIIL1;
            }
            set
            {
                if ((this._reactivePowerQIIIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL1", e, _reactivePowerQIIIL1Attribute);
                    this._reactivePowerQIIIL1 = value;
                    this.OnReactivePowerQIIIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL1", e, _reactivePowerQIIIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIIL2
        {
            get
            {
                return this._reactivePowerQIIIL2;
            }
            set
            {
                if ((this._reactivePowerQIIIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL2", e, _reactivePowerQIIIL2Attribute);
                    this._reactivePowerQIIIL2 = value;
                    this.OnReactivePowerQIIIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL2", e, _reactivePowerQIIIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIIL3
        {
            get
            {
                return this._reactivePowerQIIIL3;
            }
            set
            {
                if ((this._reactivePowerQIIIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL3", e, _reactivePowerQIIIL3Attribute);
                    this._reactivePowerQIIIL3 = value;
                    this.OnReactivePowerQIIIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL3", e, _reactivePowerQIIIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIIIall
        {
            get
            {
                return this._reactivePowerQIIIall;
            }
            set
            {
                if ((this._reactivePowerQIIIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIIIall", e, _reactivePowerQIIIallAttribute);
                    this._reactivePowerQIIIall = value;
                    this.OnReactivePowerQIIIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIIIall", e, _reactivePowerQIIIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIVL1
        {
            get
            {
                return this._reactivePowerQIVL1;
            }
            set
            {
                if ((this._reactivePowerQIVL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL1", e, _reactivePowerQIVL1Attribute);
                    this._reactivePowerQIVL1 = value;
                    this.OnReactivePowerQIVL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL1", e, _reactivePowerQIVL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIVL2
        {
            get
            {
                return this._reactivePowerQIVL2;
            }
            set
            {
                if ((this._reactivePowerQIVL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL2", e, _reactivePowerQIVL2Attribute);
                    this._reactivePowerQIVL2 = value;
                    this.OnReactivePowerQIVL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL2", e, _reactivePowerQIVL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIVL3
        {
            get
            {
                return this._reactivePowerQIVL3;
            }
            set
            {
                if ((this._reactivePowerQIVL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL3", e, _reactivePowerQIVL3Attribute);
                    this._reactivePowerQIVL3 = value;
                    this.OnReactivePowerQIVL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL3", e, _reactivePowerQIVL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ReactivePowerQIVall
        {
            get
            {
                return this._reactivePowerQIVall;
            }
            set
            {
                if ((this._reactivePowerQIVall != value))
                {
                    Nullable<double> old = this._reactivePowerQIVall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIVall", e, _reactivePowerQIVallAttribute);
                    this._reactivePowerQIVall = value;
                    this.OnReactivePowerQIVallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIVall", e, _reactivePowerQIVallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowerpL1
        {
            get
            {
                return this._apparentPowerpL1;
            }
            set
            {
                if ((this._apparentPowerpL1 != value))
                {
                    Nullable<double> old = this._apparentPowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL1Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL1", e, _apparentPowerpL1Attribute);
                    this._apparentPowerpL1 = value;
                    this.OnApparentPowerpL1Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL1", e, _apparentPowerpL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowerpL2
        {
            get
            {
                return this._apparentPowerpL2;
            }
            set
            {
                if ((this._apparentPowerpL2 != value))
                {
                    Nullable<double> old = this._apparentPowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL2Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL2", e, _apparentPowerpL2Attribute);
                    this._apparentPowerpL2 = value;
                    this.OnApparentPowerpL2Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL2", e, _apparentPowerpL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowerpL3
        {
            get
            {
                return this._apparentPowerpL3;
            }
            set
            {
                if ((this._apparentPowerpL3 != value))
                {
                    Nullable<double> old = this._apparentPowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL3Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL3", e, _apparentPowerpL3Attribute);
                    this._apparentPowerpL3 = value;
                    this.OnApparentPowerpL3Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL3", e, _apparentPowerpL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowerpAll
        {
            get
            {
                return this._apparentPowerpAll;
            }
            set
            {
                if ((this._apparentPowerpAll != value))
                {
                    Nullable<double> old = this._apparentPowerpAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpAllChanging(e);
                    this.OnPropertyChanging("ApparentPowerpAll", e, _apparentPowerpAllAttribute);
                    this._apparentPowerpAll = value;
                    this.OnApparentPowerpAllChanged(e);
                    this.OnPropertyChanged("ApparentPowerpAll", e, _apparentPowerpAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowermL1
        {
            get
            {
                return this._apparentPowermL1;
            }
            set
            {
                if ((this._apparentPowermL1 != value))
                {
                    Nullable<double> old = this._apparentPowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL1Changing(e);
                    this.OnPropertyChanging("ApparentPowermL1", e, _apparentPowermL1Attribute);
                    this._apparentPowermL1 = value;
                    this.OnApparentPowermL1Changed(e);
                    this.OnPropertyChanged("ApparentPowermL1", e, _apparentPowermL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowermL2
        {
            get
            {
                return this._apparentPowermL2;
            }
            set
            {
                if ((this._apparentPowermL2 != value))
                {
                    Nullable<double> old = this._apparentPowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL2Changing(e);
                    this.OnPropertyChanging("ApparentPowermL2", e, _apparentPowermL2Attribute);
                    this._apparentPowermL2 = value;
                    this.OnApparentPowermL2Changed(e);
                    this.OnPropertyChanged("ApparentPowermL2", e, _apparentPowermL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowermL3
        {
            get
            {
                return this._apparentPowermL3;
            }
            set
            {
                if ((this._apparentPowermL3 != value))
                {
                    Nullable<double> old = this._apparentPowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL3Changing(e);
                    this.OnPropertyChanging("ApparentPowermL3", e, _apparentPowermL3Attribute);
                    this._apparentPowermL3 = value;
                    this.OnApparentPowermL3Changed(e);
                    this.OnPropertyChanged("ApparentPowermL3", e, _apparentPowermL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ApparentPowermAll
        {
            get
            {
                return this._apparentPowermAll;
            }
            set
            {
                if ((this._apparentPowermAll != value))
                {
                    Nullable<double> old = this._apparentPowermAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermAllChanging(e);
                    this.OnPropertyChanging("ApparentPowermAll", e, _apparentPowermAllAttribute);
                    this._apparentPowermAll = value;
                    this.OnApparentPowermAllChanged(e);
                    this.OnPropertyChanged("ApparentPowermAll", e, _apparentPowermAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> CurrentL1
        {
            get
            {
                return this._currentL1;
            }
            set
            {
                if ((this._currentL1 != value))
                {
                    Nullable<double> old = this._currentL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL1Changing(e);
                    this.OnPropertyChanging("CurrentL1", e, _currentL1Attribute);
                    this._currentL1 = value;
                    this.OnCurrentL1Changed(e);
                    this.OnPropertyChanged("CurrentL1", e, _currentL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> CurrentL2
        {
            get
            {
                return this._currentL2;
            }
            set
            {
                if ((this._currentL2 != value))
                {
                    Nullable<double> old = this._currentL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL2Changing(e);
                    this.OnPropertyChanging("CurrentL2", e, _currentL2Attribute);
                    this._currentL2 = value;
                    this.OnCurrentL2Changed(e);
                    this.OnPropertyChanged("CurrentL2", e, _currentL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> CurrentL3
        {
            get
            {
                return this._currentL3;
            }
            set
            {
                if ((this._currentL3 != value))
                {
                    Nullable<double> old = this._currentL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL3Changing(e);
                    this.OnPropertyChanging("CurrentL3", e, _currentL3Attribute);
                    this._currentL3 = value;
                    this.OnCurrentL3Changed(e);
                    this.OnPropertyChanged("CurrentL3", e, _currentL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The CurrentAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> CurrentAll
        {
            get
            {
                return this._currentAll;
            }
            set
            {
                if ((this._currentAll != value))
                {
                    Nullable<double> old = this._currentAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentAllChanging(e);
                    this.OnPropertyChanging("CurrentAll", e, _currentAllAttribute);
                    this._currentAll = value;
                    this.OnCurrentAllChanged(e);
                    this.OnPropertyChanged("CurrentAll", e, _currentAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageL1
        {
            get
            {
                return this._voltageL1;
            }
            set
            {
                if ((this._voltageL1 != value))
                {
                    Nullable<double> old = this._voltageL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL1Changing(e);
                    this.OnPropertyChanging("VoltageL1", e, _voltageL1Attribute);
                    this._voltageL1 = value;
                    this.OnVoltageL1Changed(e);
                    this.OnPropertyChanged("VoltageL1", e, _voltageL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageL2
        {
            get
            {
                return this._voltageL2;
            }
            set
            {
                if ((this._voltageL2 != value))
                {
                    Nullable<double> old = this._voltageL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL2Changing(e);
                    this.OnPropertyChanging("VoltageL2", e, _voltageL2Attribute);
                    this._voltageL2 = value;
                    this.OnVoltageL2Changed(e);
                    this.OnPropertyChanged("VoltageL2", e, _voltageL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageL3
        {
            get
            {
                return this._voltageL3;
            }
            set
            {
                if ((this._voltageL3 != value))
                {
                    Nullable<double> old = this._voltageL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL3Changing(e);
                    this.OnPropertyChanging("VoltageL3", e, _voltageL3Attribute);
                    this._voltageL3 = value;
                    this.OnVoltageL3Changed(e);
                    this.OnPropertyChanged("VoltageL3", e, _voltageL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageAll
        {
            get
            {
                return this._voltageAll;
            }
            set
            {
                if ((this._voltageAll != value))
                {
                    Nullable<double> old = this._voltageAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageAllChanging(e);
                    this.OnPropertyChanging("VoltageAll", e, _voltageAllAttribute);
                    this._voltageAll = value;
                    this.OnVoltageAllChanged(e);
                    this.OnPropertyChanged("VoltageAll", e, _voltageAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> PowerFactorL1
        {
            get
            {
                return this._powerFactorL1;
            }
            set
            {
                if ((this._powerFactorL1 != value))
                {
                    Nullable<double> old = this._powerFactorL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL1Changing(e);
                    this.OnPropertyChanging("PowerFactorL1", e, _powerFactorL1Attribute);
                    this._powerFactorL1 = value;
                    this.OnPowerFactorL1Changed(e);
                    this.OnPropertyChanged("PowerFactorL1", e, _powerFactorL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> PowerFactorL2
        {
            get
            {
                return this._powerFactorL2;
            }
            set
            {
                if ((this._powerFactorL2 != value))
                {
                    Nullable<double> old = this._powerFactorL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL2Changing(e);
                    this.OnPropertyChanging("PowerFactorL2", e, _powerFactorL2Attribute);
                    this._powerFactorL2 = value;
                    this.OnPowerFactorL2Changed(e);
                    this.OnPropertyChanged("PowerFactorL2", e, _powerFactorL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> PowerFactorL3
        {
            get
            {
                return this._powerFactorL3;
            }
            set
            {
                if ((this._powerFactorL3 != value))
                {
                    Nullable<double> old = this._powerFactorL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL3Changing(e);
                    this.OnPropertyChanging("PowerFactorL3", e, _powerFactorL3Attribute);
                    this._powerFactorL3 = value;
                    this.OnPowerFactorL3Changed(e);
                    this.OnPropertyChanged("PowerFactorL3", e, _powerFactorL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> PowerFactorAll
        {
            get
            {
                return this._powerFactorAll;
            }
            set
            {
                if ((this._powerFactorAll != value))
                {
                    Nullable<double> old = this._powerFactorAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorAllChanging(e);
                    this.OnPropertyChanging("PowerFactorAll", e, _powerFactorAllAttribute);
                    this._powerFactorAll = value;
                    this.OnPowerFactorAllChanged(e);
                    this.OnPropertyChanged("PowerFactorAll", e, _powerFactorAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> SupplyFrequencyL1
        {
            get
            {
                return this._supplyFrequencyL1;
            }
            set
            {
                if ((this._supplyFrequencyL1 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL1Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL1", e, _supplyFrequencyL1Attribute);
                    this._supplyFrequencyL1 = value;
                    this.OnSupplyFrequencyL1Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL1", e, _supplyFrequencyL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> SupplyFrequencyL2
        {
            get
            {
                return this._supplyFrequencyL2;
            }
            set
            {
                if ((this._supplyFrequencyL2 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL2Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL2", e, _supplyFrequencyL2Attribute);
                    this._supplyFrequencyL2 = value;
                    this.OnSupplyFrequencyL2Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL2", e, _supplyFrequencyL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> SupplyFrequencyL3
        {
            get
            {
                return this._supplyFrequencyL3;
            }
            set
            {
                if ((this._supplyFrequencyL3 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL3Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL3", e, _supplyFrequencyL3Attribute);
                    this._supplyFrequencyL3 = value;
                    this.OnSupplyFrequencyL3Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL3", e, _supplyFrequencyL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> SupplyFrequencyAll
        {
            get
            {
                return this._supplyFrequencyAll;
            }
            set
            {
                if ((this._supplyFrequencyAll != value))
                {
                    Nullable<double> old = this._supplyFrequencyAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyAllChanging(e);
                    this.OnPropertyChanging("SupplyFrequencyAll", e, _supplyFrequencyAllAttribute);
                    this._supplyFrequencyAll = value;
                    this.OnSupplyFrequencyAllChanged(e);
                    this.OnPropertyChanged("SupplyFrequencyAll", e, _supplyFrequencyAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsPL1
        {
            get
            {
                return this._activePowerAbsPL1;
            }
            set
            {
                if ((this._activePowerAbsPL1 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL1Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL1", e, _activePowerAbsPL1Attribute);
                    this._activePowerAbsPL1 = value;
                    this.OnActivePowerAbsPL1Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL1", e, _activePowerAbsPL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsPL2
        {
            get
            {
                return this._activePowerAbsPL2;
            }
            set
            {
                if ((this._activePowerAbsPL2 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL2Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL2", e, _activePowerAbsPL2Attribute);
                    this._activePowerAbsPL2 = value;
                    this.OnActivePowerAbsPL2Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL2", e, _activePowerAbsPL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsPL3
        {
            get
            {
                return this._activePowerAbsPL3;
            }
            set
            {
                if ((this._activePowerAbsPL3 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL3Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL3", e, _activePowerAbsPL3Attribute);
                    this._activePowerAbsPL3 = value;
                    this.OnActivePowerAbsPL3Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL3", e, _activePowerAbsPL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsPAll
        {
            get
            {
                return this._activePowerAbsPAll;
            }
            set
            {
                if ((this._activePowerAbsPAll != value))
                {
                    Nullable<double> old = this._activePowerAbsPAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPAllChanging(e);
                    this.OnPropertyChanging("ActivePowerAbsPAll", e, _activePowerAbsPAllAttribute);
                    this._activePowerAbsPAll = value;
                    this.OnActivePowerAbsPAllChanged(e);
                    this.OnPropertyChanged("ActivePowerAbsPAll", e, _activePowerAbsPAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsML1
        {
            get
            {
                return this._activePowerAbsML1;
            }
            set
            {
                if ((this._activePowerAbsML1 != value))
                {
                    Nullable<double> old = this._activePowerAbsML1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML1Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML1", e, _activePowerAbsML1Attribute);
                    this._activePowerAbsML1 = value;
                    this.OnActivePowerAbsML1Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML1", e, _activePowerAbsML1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsML2
        {
            get
            {
                return this._activePowerAbsML2;
            }
            set
            {
                if ((this._activePowerAbsML2 != value))
                {
                    Nullable<double> old = this._activePowerAbsML2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML2Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML2", e, _activePowerAbsML2Attribute);
                    this._activePowerAbsML2 = value;
                    this.OnActivePowerAbsML2Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML2", e, _activePowerAbsML2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsML3
        {
            get
            {
                return this._activePowerAbsML3;
            }
            set
            {
                if ((this._activePowerAbsML3 != value))
                {
                    Nullable<double> old = this._activePowerAbsML3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML3Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML3", e, _activePowerAbsML3Attribute);
                    this._activePowerAbsML3 = value;
                    this.OnActivePowerAbsML3Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML3", e, _activePowerAbsML3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsMAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerAbsMAll
        {
            get
            {
                return this._activePowerAbsMAll;
            }
            set
            {
                if ((this._activePowerAbsMAll != value))
                {
                    Nullable<double> old = this._activePowerAbsMAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsMAllChanging(e);
                    this.OnPropertyChanging("ActivePowerAbsMAll", e, _activePowerAbsMAllAttribute);
                    this._activePowerAbsMAll = value;
                    this.OnActivePowerAbsMAllChanged(e);
                    this.OnPropertyChanged("ActivePowerAbsMAll", e, _activePowerAbsMAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIL1
        {
            get
            {
                return this._activePowerQIL1;
            }
            set
            {
                if ((this._activePowerQIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL1", e, _activePowerQIL1Attribute);
                    this._activePowerQIL1 = value;
                    this.OnActivePowerQIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL1", e, _activePowerQIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIL2
        {
            get
            {
                return this._activePowerQIL2;
            }
            set
            {
                if ((this._activePowerQIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL2", e, _activePowerQIL2Attribute);
                    this._activePowerQIL2 = value;
                    this.OnActivePowerQIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL2", e, _activePowerQIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIL3
        {
            get
            {
                return this._activePowerQIL3;
            }
            set
            {
                if ((this._activePowerQIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL3", e, _activePowerQIL3Attribute);
                    this._activePowerQIL3 = value;
                    this.OnActivePowerQIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL3", e, _activePowerQIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIall
        {
            get
            {
                return this._activePowerQIall;
            }
            set
            {
                if ((this._activePowerQIall != value))
                {
                    Nullable<double> old = this._activePowerQIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIall", e, _activePowerQIallAttribute);
                    this._activePowerQIall = value;
                    this.OnActivePowerQIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIall", e, _activePowerQIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIL1
        {
            get
            {
                return this._activePowerQIIL1;
            }
            set
            {
                if ((this._activePowerQIIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL1", e, _activePowerQIIL1Attribute);
                    this._activePowerQIIL1 = value;
                    this.OnActivePowerQIIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL1", e, _activePowerQIIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIL2
        {
            get
            {
                return this._activePowerQIIL2;
            }
            set
            {
                if ((this._activePowerQIIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL2", e, _activePowerQIIL2Attribute);
                    this._activePowerQIIL2 = value;
                    this.OnActivePowerQIIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL2", e, _activePowerQIIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIL3
        {
            get
            {
                return this._activePowerQIIL3;
            }
            set
            {
                if ((this._activePowerQIIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL3", e, _activePowerQIIL3Attribute);
                    this._activePowerQIIL3 = value;
                    this.OnActivePowerQIIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL3", e, _activePowerQIIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIall
        {
            get
            {
                return this._activePowerQIIall;
            }
            set
            {
                if ((this._activePowerQIIall != value))
                {
                    Nullable<double> old = this._activePowerQIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIIall", e, _activePowerQIIallAttribute);
                    this._activePowerQIIall = value;
                    this.OnActivePowerQIIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIIall", e, _activePowerQIIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIIL1
        {
            get
            {
                return this._activePowerQIIIL1;
            }
            set
            {
                if ((this._activePowerQIIIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL1", e, _activePowerQIIIL1Attribute);
                    this._activePowerQIIIL1 = value;
                    this.OnActivePowerQIIIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL1", e, _activePowerQIIIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIIL2
        {
            get
            {
                return this._activePowerQIIIL2;
            }
            set
            {
                if ((this._activePowerQIIIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL2", e, _activePowerQIIIL2Attribute);
                    this._activePowerQIIIL2 = value;
                    this.OnActivePowerQIIIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL2", e, _activePowerQIIIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIIL3
        {
            get
            {
                return this._activePowerQIIIL3;
            }
            set
            {
                if ((this._activePowerQIIIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL3", e, _activePowerQIIIL3Attribute);
                    this._activePowerQIIIL3 = value;
                    this.OnActivePowerQIIIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL3", e, _activePowerQIIIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIIIall
        {
            get
            {
                return this._activePowerQIIIall;
            }
            set
            {
                if ((this._activePowerQIIIall != value))
                {
                    Nullable<double> old = this._activePowerQIIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIIIall", e, _activePowerQIIIallAttribute);
                    this._activePowerQIIIall = value;
                    this.OnActivePowerQIIIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIIIall", e, _activePowerQIIIallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIVL1
        {
            get
            {
                return this._activePowerQIVL1;
            }
            set
            {
                if ((this._activePowerQIVL1 != value))
                {
                    Nullable<double> old = this._activePowerQIVL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL1", e, _activePowerQIVL1Attribute);
                    this._activePowerQIVL1 = value;
                    this.OnActivePowerQIVL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL1", e, _activePowerQIVL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIVL2
        {
            get
            {
                return this._activePowerQIVL2;
            }
            set
            {
                if ((this._activePowerQIVL2 != value))
                {
                    Nullable<double> old = this._activePowerQIVL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL2", e, _activePowerQIVL2Attribute);
                    this._activePowerQIVL2 = value;
                    this.OnActivePowerQIVL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL2", e, _activePowerQIVL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIVL3
        {
            get
            {
                return this._activePowerQIVL3;
            }
            set
            {
                if ((this._activePowerQIVL3 != value))
                {
                    Nullable<double> old = this._activePowerQIVL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL3", e, _activePowerQIVL3Attribute);
                    this._activePowerQIVL3 = value;
                    this.OnActivePowerQIVL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL3", e, _activePowerQIVL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> ActivePowerQIVall
        {
            get
            {
                return this._activePowerQIVall;
            }
            set
            {
                if ((this._activePowerQIVall != value))
                {
                    Nullable<double> old = this._activePowerQIVall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIVall", e, _activePowerQIVallAttribute);
                    this._activePowerQIVall = value;
                    this.OnActivePowerQIVallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIVall", e, _activePowerQIVallAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Angles property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Angles
        {
            get
            {
                return this._angles;
            }
            set
            {
                if ((this._angles != value))
                {
                    Nullable<double> old = this._angles;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnglesChanging(e);
                    this.OnPropertyChanging("Angles", e, _anglesAttribute);
                    this._angles = value;
                    this.OnAnglesChanged(e);
                    this.OnPropertyChanged("Angles", e, _anglesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Pulses property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Pulses
        {
            get
            {
                return this._pulses;
            }
            set
            {
                if ((this._pulses != value))
                {
                    Nullable<int> old = this._pulses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPulsesChanging(e);
                    this.OnPropertyChanging("Pulses", e, _pulsesAttribute);
                    this._pulses = value;
                    this.OnPulsesChanged(e);
                    this.OnPropertyChanged("Pulses", e, _pulsesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredHours property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Ampere_squaredHours
        {
            get
            {
                return this._ampere_squaredHours;
            }
            set
            {
                if ((this._ampere_squaredHours != value))
                {
                    Nullable<double> old = this._ampere_squaredHours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredHoursChanging(e);
                    this.OnPropertyChanging("Ampere_squaredHours", e, _ampere_squaredHoursAttribute);
                    this._ampere_squaredHours = value;
                    this.OnAmpere_squaredHoursChanged(e);
                    this.OnPropertyChanged("Ampere_squaredHours", e, _ampere_squaredHoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredHours property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Volt_squaredHours
        {
            get
            {
                return this._volt_squaredHours;
            }
            set
            {
                if ((this._volt_squaredHours != value))
                {
                    Nullable<double> old = this._volt_squaredHours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredHoursChanging(e);
                    this.OnPropertyChanging("Volt_squaredHours", e, _volt_squaredHoursAttribute);
                    this._volt_squaredHours = value;
                    this.OnVolt_squaredHoursChanged(e);
                    this.OnPropertyChanged("Volt_squaredHours", e, _volt_squaredHoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NeutralCurrent property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> NeutralCurrent
        {
            get
            {
                return this._neutralCurrent;
            }
            set
            {
                if ((this._neutralCurrent != value))
                {
                    Nullable<double> old = this._neutralCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralCurrentChanging(e);
                    this.OnPropertyChanging("NeutralCurrent", e, _neutralCurrentAttribute);
                    this._neutralCurrent = value;
                    this.OnNeutralCurrentChanged(e);
                    this.OnPropertyChanged("NeutralCurrent", e, _neutralCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The NeutralVoltage property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> NeutralVoltage
        {
            get
            {
                return this._neutralVoltage;
            }
            set
            {
                if ((this._neutralVoltage != value))
                {
                    Nullable<double> old = this._neutralVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralVoltageChanging(e);
                    this.OnPropertyChanging("NeutralVoltage", e, _neutralVoltageAttribute);
                    this._neutralVoltage = value;
                    this.OnNeutralVoltageChanged(e);
                    this.OnPropertyChanged("NeutralVoltage", e, _neutralVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the ActivePowerpL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerpall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowermall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowermall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermAllChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowermAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ApparentPowermAllChanging;
        
        /// <summary>
        /// Gets fired when the CurrentL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL1Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL1Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL2Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL2Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL3Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentL3Changing;
        
        /// <summary>
        /// Gets fired when the CurrentAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentAllChanged;
        
        /// <summary>
        /// Gets fired before the CurrentAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CurrentAllChanging;
        
        /// <summary>
        /// Gets fired when the VoltageL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL1Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL1Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL2Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL2Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL3Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageL3Changing;
        
        /// <summary>
        /// Gets fired when the VoltageAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageAllChanged;
        
        /// <summary>
        /// Gets fired before the VoltageAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VoltageAllChanging;
        
        /// <summary>
        /// Gets fired when the PowerFactorL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL1Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL1Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL2Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL2Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL3Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorL3Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorAllChanged;
        
        /// <summary>
        /// Gets fired before the PowerFactorAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PowerFactorAllChanging;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanged;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsMAll property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsMAll property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVall property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the Angles property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AnglesChanged;
        
        /// <summary>
        /// Gets fired before the Angles property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AnglesChanging;
        
        /// <summary>
        /// Gets fired when the Pulses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PulsesChanged;
        
        /// <summary>
        /// Gets fired before the Pulses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PulsesChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredHours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredHours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredHours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredHours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the NeutralCurrent property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NeutralCurrentChanged;
        
        /// <summary>
        /// Gets fired before the NeutralCurrent property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NeutralCurrentChanging;
        
        /// <summary>
        /// Gets fired when the NeutralVoltage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NeutralVoltageChanged;
        
        /// <summary>
        /// Gets fired before the NeutralVoltage property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NeutralVoltageChanging;
        
        private static ITypedElement RetrieveActivePowerpL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerpL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerpallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerpall")));
        }
        
        /// <summary>
        /// Raises the ActivePowerpallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerpL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerpL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerpL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerpL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowermL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowermL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowermL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowermL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowermL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowermL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowermallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowermall")));
        }
        
        /// <summary>
        /// Raises the ActivePowermallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowermallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerpL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerpL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerpL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerpL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerpL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerpL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerpallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerpall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerpallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowermL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowermL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowermL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowermL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowermL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowermL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowermallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowermall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowermallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIIL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIIL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIIL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIIIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIIIall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIVL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIVL1")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIVL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIVL2")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIVL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIVL3")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePowerQIVallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ReactivePowerQIVall")));
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowerpL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowerpL1")));
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowerpL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowerpL2")));
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowerpL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowerpL3")));
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowerpAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowerpAll")));
        }
        
        /// <summary>
        /// Raises the ApparentPowerpAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowermL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowermL1")));
        }
        
        /// <summary>
        /// Raises the ApparentPowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowermL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowermL2")));
        }
        
        /// <summary>
        /// Raises the ApparentPowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowermL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowermL3")));
        }
        
        /// <summary>
        /// Raises the ApparentPowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApparentPowermAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ApparentPowermAll")));
        }
        
        /// <summary>
        /// Raises the ApparentPowermAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("CurrentL1")));
        }
        
        /// <summary>
        /// Raises the CurrentL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("CurrentL2")));
        }
        
        /// <summary>
        /// Raises the CurrentL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("CurrentL3")));
        }
        
        /// <summary>
        /// Raises the CurrentL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("CurrentAll")));
        }
        
        /// <summary>
        /// Raises the CurrentAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CurrentAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("VoltageL1")));
        }
        
        /// <summary>
        /// Raises the VoltageL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("VoltageL2")));
        }
        
        /// <summary>
        /// Raises the VoltageL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("VoltageL3")));
        }
        
        /// <summary>
        /// Raises the VoltageL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("VoltageAll")));
        }
        
        /// <summary>
        /// Raises the VoltageAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VoltageAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerFactorL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("PowerFactorL1")));
        }
        
        /// <summary>
        /// Raises the PowerFactorL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerFactorL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("PowerFactorL2")));
        }
        
        /// <summary>
        /// Raises the PowerFactorL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerFactorL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("PowerFactorL3")));
        }
        
        /// <summary>
        /// Raises the PowerFactorL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerFactorAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("PowerFactorAll")));
        }
        
        /// <summary>
        /// Raises the PowerFactorAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PowerFactorAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupplyFrequencyL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("SupplyFrequencyL1")));
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupplyFrequencyL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("SupplyFrequencyL2")));
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupplyFrequencyL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("SupplyFrequencyL3")));
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSupplyFrequencyAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("SupplyFrequencyAll")));
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsPL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsPL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsPL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsPL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsPL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsPL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsPAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsPAll")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsML1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsML1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsML2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsML2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsML3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsML3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerAbsMAllAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerAbsMAll")));
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsMAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsMAllChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsMAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsMAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsMAllChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsMAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIall")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIall")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIIL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIIL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIIL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIIIallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIIIall")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIVL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIVL1")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIVL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIVL2")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIVL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIVL3")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivePowerQIVallAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("ActivePowerQIVall")));
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVallChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAnglesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("Angles")));
        }
        
        /// <summary>
        /// Raises the AnglesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnglesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AnglesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnglesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnglesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AnglesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePulsesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("Pulses")));
        }
        
        /// <summary>
        /// Raises the PulsesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PulsesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PulsesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PulsesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmpere_squaredHoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("Ampere_squaredHours")));
        }
        
        /// <summary>
        /// Raises the Ampere_squaredHoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredHoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredHoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredHoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredHoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredHoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVolt_squaredHoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("Volt_squaredHours")));
        }
        
        /// <summary>
        /// Raises the Volt_squaredHoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredHoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredHoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredHoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredHoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredHoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNeutralCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("NeutralCurrent")));
        }
        
        /// <summary>
        /// Raises the NeutralCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NeutralCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NeutralCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNeutralVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityValues.ClassInstance)).Resolve("NeutralVoltage")));
        }
        
        /// <summary>
        /// Raises the NeutralVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NeutralVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NeutralVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEPOWERPL1"))
            {
                return this.ActivePowerpL1;
            }
            if ((attribute == "ACTIVEPOWERPALL"))
            {
                return this.ActivePowerpall;
            }
            if ((attribute == "ACTIVEPOWERPL2"))
            {
                return this.ActivePowerpL2;
            }
            if ((attribute == "ACTIVEPOWERPL3"))
            {
                return this.ActivePowerpL3;
            }
            if ((attribute == "ACTIVEPOWERML2"))
            {
                return this.ActivePowermL2;
            }
            if ((attribute == "ACTIVEPOWERML1"))
            {
                return this.ActivePowermL1;
            }
            if ((attribute == "ACTIVEPOWERML3"))
            {
                return this.ActivePowermL3;
            }
            if ((attribute == "ACTIVEPOWERMALL"))
            {
                return this.ActivePowermall;
            }
            if ((attribute == "REACTIVEPOWERPL1"))
            {
                return this.ReactivePowerpL1;
            }
            if ((attribute == "REACTIVEPOWERPL2"))
            {
                return this.ReactivePowerpL2;
            }
            if ((attribute == "REACTIVEPOWERPL3"))
            {
                return this.ReactivePowerpL3;
            }
            if ((attribute == "REACTIVEPOWERPALL"))
            {
                return this.ReactivePowerpall;
            }
            if ((attribute == "REACTIVEPOWERML1"))
            {
                return this.ReactivePowermL1;
            }
            if ((attribute == "REACTIVEPOWERML2"))
            {
                return this.ReactivePowermL2;
            }
            if ((attribute == "REACTIVEPOWERML3"))
            {
                return this.ReactivePowermL3;
            }
            if ((attribute == "REACTIVEPOWERMALL"))
            {
                return this.ReactivePowermall;
            }
            if ((attribute == "REACTIVEPOWERQIL1"))
            {
                return this.ReactivePowerQIL1;
            }
            if ((attribute == "REACTIVEPOWERQIL2"))
            {
                return this.ReactivePowerQIL2;
            }
            if ((attribute == "REACTIVEPOWERQIL3"))
            {
                return this.ReactivePowerQIL3;
            }
            if ((attribute == "REACTIVEPOWERQIALL"))
            {
                return this.ReactivePowerQIall;
            }
            if ((attribute == "REACTIVEPOWERQIIL1"))
            {
                return this.ReactivePowerQIIL1;
            }
            if ((attribute == "REACTIVEPOWERQIIL2"))
            {
                return this.ReactivePowerQIIL2;
            }
            if ((attribute == "REACTIVEPOWERQIIL3"))
            {
                return this.ReactivePowerQIIL3;
            }
            if ((attribute == "REACTIVEPOWERQIIALL"))
            {
                return this.ReactivePowerQIIall;
            }
            if ((attribute == "REACTIVEPOWERQIIIL1"))
            {
                return this.ReactivePowerQIIIL1;
            }
            if ((attribute == "REACTIVEPOWERQIIIL2"))
            {
                return this.ReactivePowerQIIIL2;
            }
            if ((attribute == "REACTIVEPOWERQIIIL3"))
            {
                return this.ReactivePowerQIIIL3;
            }
            if ((attribute == "REACTIVEPOWERQIIIALL"))
            {
                return this.ReactivePowerQIIIall;
            }
            if ((attribute == "REACTIVEPOWERQIVL1"))
            {
                return this.ReactivePowerQIVL1;
            }
            if ((attribute == "REACTIVEPOWERQIVL2"))
            {
                return this.ReactivePowerQIVL2;
            }
            if ((attribute == "REACTIVEPOWERQIVL3"))
            {
                return this.ReactivePowerQIVL3;
            }
            if ((attribute == "REACTIVEPOWERQIVALL"))
            {
                return this.ReactivePowerQIVall;
            }
            if ((attribute == "APPARENTPOWERPL1"))
            {
                return this.ApparentPowerpL1;
            }
            if ((attribute == "APPARENTPOWERPL2"))
            {
                return this.ApparentPowerpL2;
            }
            if ((attribute == "APPARENTPOWERPL3"))
            {
                return this.ApparentPowerpL3;
            }
            if ((attribute == "APPARENTPOWERPALL"))
            {
                return this.ApparentPowerpAll;
            }
            if ((attribute == "APPARENTPOWERML1"))
            {
                return this.ApparentPowermL1;
            }
            if ((attribute == "APPARENTPOWERML2"))
            {
                return this.ApparentPowermL2;
            }
            if ((attribute == "APPARENTPOWERML3"))
            {
                return this.ApparentPowermL3;
            }
            if ((attribute == "APPARENTPOWERMALL"))
            {
                return this.ApparentPowermAll;
            }
            if ((attribute == "CURRENTL1"))
            {
                return this.CurrentL1;
            }
            if ((attribute == "CURRENTL2"))
            {
                return this.CurrentL2;
            }
            if ((attribute == "CURRENTL3"))
            {
                return this.CurrentL3;
            }
            if ((attribute == "CURRENTALL"))
            {
                return this.CurrentAll;
            }
            if ((attribute == "VOLTAGEL1"))
            {
                return this.VoltageL1;
            }
            if ((attribute == "VOLTAGEL2"))
            {
                return this.VoltageL2;
            }
            if ((attribute == "VOLTAGEL3"))
            {
                return this.VoltageL3;
            }
            if ((attribute == "VOLTAGEALL"))
            {
                return this.VoltageAll;
            }
            if ((attribute == "POWERFACTORL1"))
            {
                return this.PowerFactorL1;
            }
            if ((attribute == "POWERFACTORL2"))
            {
                return this.PowerFactorL2;
            }
            if ((attribute == "POWERFACTORL3"))
            {
                return this.PowerFactorL3;
            }
            if ((attribute == "POWERFACTORALL"))
            {
                return this.PowerFactorAll;
            }
            if ((attribute == "SUPPLYFREQUENCYL1"))
            {
                return this.SupplyFrequencyL1;
            }
            if ((attribute == "SUPPLYFREQUENCYL2"))
            {
                return this.SupplyFrequencyL2;
            }
            if ((attribute == "SUPPLYFREQUENCYL3"))
            {
                return this.SupplyFrequencyL3;
            }
            if ((attribute == "SUPPLYFREQUENCYALL"))
            {
                return this.SupplyFrequencyAll;
            }
            if ((attribute == "ACTIVEPOWERABSPL1"))
            {
                return this.ActivePowerAbsPL1;
            }
            if ((attribute == "ACTIVEPOWERABSPL2"))
            {
                return this.ActivePowerAbsPL2;
            }
            if ((attribute == "ACTIVEPOWERABSPL3"))
            {
                return this.ActivePowerAbsPL3;
            }
            if ((attribute == "ACTIVEPOWERABSPALL"))
            {
                return this.ActivePowerAbsPAll;
            }
            if ((attribute == "ACTIVEPOWERABSML1"))
            {
                return this.ActivePowerAbsML1;
            }
            if ((attribute == "ACTIVEPOWERABSML2"))
            {
                return this.ActivePowerAbsML2;
            }
            if ((attribute == "ACTIVEPOWERABSML3"))
            {
                return this.ActivePowerAbsML3;
            }
            if ((attribute == "ACTIVEPOWERABSMALL"))
            {
                return this.ActivePowerAbsMAll;
            }
            if ((attribute == "ACTIVEPOWERQIL1"))
            {
                return this.ActivePowerQIL1;
            }
            if ((attribute == "ACTIVEPOWERQIL2"))
            {
                return this.ActivePowerQIL2;
            }
            if ((attribute == "ACTIVEPOWERQIL3"))
            {
                return this.ActivePowerQIL3;
            }
            if ((attribute == "ACTIVEPOWERQIALL"))
            {
                return this.ActivePowerQIall;
            }
            if ((attribute == "ACTIVEPOWERQIIL1"))
            {
                return this.ActivePowerQIIL1;
            }
            if ((attribute == "ACTIVEPOWERQIIL2"))
            {
                return this.ActivePowerQIIL2;
            }
            if ((attribute == "ACTIVEPOWERQIIL3"))
            {
                return this.ActivePowerQIIL3;
            }
            if ((attribute == "ACTIVEPOWERQIIALL"))
            {
                return this.ActivePowerQIIall;
            }
            if ((attribute == "ACTIVEPOWERQIIIL1"))
            {
                return this.ActivePowerQIIIL1;
            }
            if ((attribute == "ACTIVEPOWERQIIIL2"))
            {
                return this.ActivePowerQIIIL2;
            }
            if ((attribute == "ACTIVEPOWERQIIIL3"))
            {
                return this.ActivePowerQIIIL3;
            }
            if ((attribute == "ACTIVEPOWERQIIIALL"))
            {
                return this.ActivePowerQIIIall;
            }
            if ((attribute == "ACTIVEPOWERQIVL1"))
            {
                return this.ActivePowerQIVL1;
            }
            if ((attribute == "ACTIVEPOWERQIVL2"))
            {
                return this.ActivePowerQIVL2;
            }
            if ((attribute == "ACTIVEPOWERQIVL3"))
            {
                return this.ActivePowerQIVL3;
            }
            if ((attribute == "ACTIVEPOWERQIVALL"))
            {
                return this.ActivePowerQIVall;
            }
            if ((attribute == "ANGLES"))
            {
                return this.Angles;
            }
            if ((attribute == "PULSES"))
            {
                return this.Pulses;
            }
            if ((attribute == "AMPERE_SQUAREDHOURS"))
            {
                return this.Ampere_squaredHours;
            }
            if ((attribute == "VOLT_SQUAREDHOURS"))
            {
                return this.Volt_squaredHours;
            }
            if ((attribute == "NEUTRALCURRENT"))
            {
                return this.NeutralCurrent;
            }
            if ((attribute == "NEUTRALVOLTAGE"))
            {
                return this.NeutralVoltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEPOWERPL1"))
            {
                this.ActivePowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPALL"))
            {
                this.ActivePowerpall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPL2"))
            {
                this.ActivePowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPL3"))
            {
                this.ActivePowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML2"))
            {
                this.ActivePowermL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML1"))
            {
                this.ActivePowermL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML3"))
            {
                this.ActivePowermL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERMALL"))
            {
                this.ActivePowermall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL1"))
            {
                this.ReactivePowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL2"))
            {
                this.ReactivePowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL3"))
            {
                this.ReactivePowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPALL"))
            {
                this.ReactivePowerpall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML1"))
            {
                this.ReactivePowermL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML2"))
            {
                this.ReactivePowermL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML3"))
            {
                this.ReactivePowermL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERMALL"))
            {
                this.ReactivePowermall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL1"))
            {
                this.ReactivePowerQIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL2"))
            {
                this.ReactivePowerQIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL3"))
            {
                this.ReactivePowerQIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIALL"))
            {
                this.ReactivePowerQIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL1"))
            {
                this.ReactivePowerQIIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL2"))
            {
                this.ReactivePowerQIIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL3"))
            {
                this.ReactivePowerQIIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIALL"))
            {
                this.ReactivePowerQIIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL1"))
            {
                this.ReactivePowerQIIIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL2"))
            {
                this.ReactivePowerQIIIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL3"))
            {
                this.ReactivePowerQIIIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIALL"))
            {
                this.ReactivePowerQIIIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL1"))
            {
                this.ReactivePowerQIVL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL2"))
            {
                this.ReactivePowerQIVL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL3"))
            {
                this.ReactivePowerQIVL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVALL"))
            {
                this.ReactivePowerQIVall = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL1"))
            {
                this.ApparentPowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL2"))
            {
                this.ApparentPowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL3"))
            {
                this.ApparentPowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPALL"))
            {
                this.ApparentPowerpAll = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML1"))
            {
                this.ApparentPowermL1 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML2"))
            {
                this.ApparentPowermL2 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML3"))
            {
                this.ApparentPowermL3 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERMALL"))
            {
                this.ApparentPowermAll = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL1"))
            {
                this.CurrentL1 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL2"))
            {
                this.CurrentL2 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL3"))
            {
                this.CurrentL3 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTALL"))
            {
                this.CurrentAll = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL1"))
            {
                this.VoltageL1 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL2"))
            {
                this.VoltageL2 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL3"))
            {
                this.VoltageL3 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEALL"))
            {
                this.VoltageAll = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL1"))
            {
                this.PowerFactorL1 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL2"))
            {
                this.PowerFactorL2 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL3"))
            {
                this.PowerFactorL3 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORALL"))
            {
                this.PowerFactorAll = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL1"))
            {
                this.SupplyFrequencyL1 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL2"))
            {
                this.SupplyFrequencyL2 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL3"))
            {
                this.SupplyFrequencyL3 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYALL"))
            {
                this.SupplyFrequencyAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL1"))
            {
                this.ActivePowerAbsPL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL2"))
            {
                this.ActivePowerAbsPL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL3"))
            {
                this.ActivePowerAbsPL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPALL"))
            {
                this.ActivePowerAbsPAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML1"))
            {
                this.ActivePowerAbsML1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML2"))
            {
                this.ActivePowerAbsML2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML3"))
            {
                this.ActivePowerAbsML3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSMALL"))
            {
                this.ActivePowerAbsMAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL1"))
            {
                this.ActivePowerQIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL2"))
            {
                this.ActivePowerQIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL3"))
            {
                this.ActivePowerQIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIALL"))
            {
                this.ActivePowerQIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL1"))
            {
                this.ActivePowerQIIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL2"))
            {
                this.ActivePowerQIIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL3"))
            {
                this.ActivePowerQIIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIALL"))
            {
                this.ActivePowerQIIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL1"))
            {
                this.ActivePowerQIIIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL2"))
            {
                this.ActivePowerQIIIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL3"))
            {
                this.ActivePowerQIIIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIALL"))
            {
                this.ActivePowerQIIIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL1"))
            {
                this.ActivePowerQIVL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL2"))
            {
                this.ActivePowerQIVL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL3"))
            {
                this.ActivePowerQIVL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVALL"))
            {
                this.ActivePowerQIVall = ((double)(value));
                return;
            }
            if ((feature == "ANGLES"))
            {
                this.Angles = ((double)(value));
                return;
            }
            if ((feature == "PULSES"))
            {
                this.Pulses = ((int)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURS"))
            {
                this.Ampere_squaredHours = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURS"))
            {
                this.Volt_squaredHours = ((double)(value));
                return;
            }
            if ((feature == "NEUTRALCURRENT"))
            {
                this.NeutralCurrent = ((double)(value));
                return;
            }
            if ((feature == "NEUTRALVOLTAGE"))
            {
                this.NeutralVoltage = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVEPOWERPL1"))
            {
                return Observable.Box(new ActivePowerpL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERPALL"))
            {
                return Observable.Box(new ActivePowerpallProxy(this));
            }
            if ((attribute == "ACTIVEPOWERPL2"))
            {
                return Observable.Box(new ActivePowerpL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERPL3"))
            {
                return Observable.Box(new ActivePowerpL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERML2"))
            {
                return Observable.Box(new ActivePowermL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERML1"))
            {
                return Observable.Box(new ActivePowermL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERML3"))
            {
                return Observable.Box(new ActivePowermL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERMALL"))
            {
                return Observable.Box(new ActivePowermallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERPL1"))
            {
                return Observable.Box(new ReactivePowerpL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERPL2"))
            {
                return Observable.Box(new ReactivePowerpL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERPL3"))
            {
                return Observable.Box(new ReactivePowerpL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERPALL"))
            {
                return Observable.Box(new ReactivePowerpallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERML1"))
            {
                return Observable.Box(new ReactivePowermL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERML2"))
            {
                return Observable.Box(new ReactivePowermL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERML3"))
            {
                return Observable.Box(new ReactivePowermL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERMALL"))
            {
                return Observable.Box(new ReactivePowermallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIL1"))
            {
                return Observable.Box(new ReactivePowerQIL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIL2"))
            {
                return Observable.Box(new ReactivePowerQIL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIL3"))
            {
                return Observable.Box(new ReactivePowerQIL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIALL"))
            {
                return Observable.Box(new ReactivePowerQIallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIL1"))
            {
                return Observable.Box(new ReactivePowerQIIL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIL2"))
            {
                return Observable.Box(new ReactivePowerQIIL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIL3"))
            {
                return Observable.Box(new ReactivePowerQIIL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIALL"))
            {
                return Observable.Box(new ReactivePowerQIIallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIIL1"))
            {
                return Observable.Box(new ReactivePowerQIIIL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIIL2"))
            {
                return Observable.Box(new ReactivePowerQIIIL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIIL3"))
            {
                return Observable.Box(new ReactivePowerQIIIL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIIIALL"))
            {
                return Observable.Box(new ReactivePowerQIIIallProxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIVL1"))
            {
                return Observable.Box(new ReactivePowerQIVL1Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIVL2"))
            {
                return Observable.Box(new ReactivePowerQIVL2Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIVL3"))
            {
                return Observable.Box(new ReactivePowerQIVL3Proxy(this));
            }
            if ((attribute == "REACTIVEPOWERQIVALL"))
            {
                return Observable.Box(new ReactivePowerQIVallProxy(this));
            }
            if ((attribute == "APPARENTPOWERPL1"))
            {
                return Observable.Box(new ApparentPowerpL1Proxy(this));
            }
            if ((attribute == "APPARENTPOWERPL2"))
            {
                return Observable.Box(new ApparentPowerpL2Proxy(this));
            }
            if ((attribute == "APPARENTPOWERPL3"))
            {
                return Observable.Box(new ApparentPowerpL3Proxy(this));
            }
            if ((attribute == "APPARENTPOWERPALL"))
            {
                return Observable.Box(new ApparentPowerpAllProxy(this));
            }
            if ((attribute == "APPARENTPOWERML1"))
            {
                return Observable.Box(new ApparentPowermL1Proxy(this));
            }
            if ((attribute == "APPARENTPOWERML2"))
            {
                return Observable.Box(new ApparentPowermL2Proxy(this));
            }
            if ((attribute == "APPARENTPOWERML3"))
            {
                return Observable.Box(new ApparentPowermL3Proxy(this));
            }
            if ((attribute == "APPARENTPOWERMALL"))
            {
                return Observable.Box(new ApparentPowermAllProxy(this));
            }
            if ((attribute == "CURRENTL1"))
            {
                return Observable.Box(new CurrentL1Proxy(this));
            }
            if ((attribute == "CURRENTL2"))
            {
                return Observable.Box(new CurrentL2Proxy(this));
            }
            if ((attribute == "CURRENTL3"))
            {
                return Observable.Box(new CurrentL3Proxy(this));
            }
            if ((attribute == "CURRENTALL"))
            {
                return Observable.Box(new CurrentAllProxy(this));
            }
            if ((attribute == "VOLTAGEL1"))
            {
                return Observable.Box(new VoltageL1Proxy(this));
            }
            if ((attribute == "VOLTAGEL2"))
            {
                return Observable.Box(new VoltageL2Proxy(this));
            }
            if ((attribute == "VOLTAGEL3"))
            {
                return Observable.Box(new VoltageL3Proxy(this));
            }
            if ((attribute == "VOLTAGEALL"))
            {
                return Observable.Box(new VoltageAllProxy(this));
            }
            if ((attribute == "POWERFACTORL1"))
            {
                return Observable.Box(new PowerFactorL1Proxy(this));
            }
            if ((attribute == "POWERFACTORL2"))
            {
                return Observable.Box(new PowerFactorL2Proxy(this));
            }
            if ((attribute == "POWERFACTORL3"))
            {
                return Observable.Box(new PowerFactorL3Proxy(this));
            }
            if ((attribute == "POWERFACTORALL"))
            {
                return Observable.Box(new PowerFactorAllProxy(this));
            }
            if ((attribute == "SUPPLYFREQUENCYL1"))
            {
                return Observable.Box(new SupplyFrequencyL1Proxy(this));
            }
            if ((attribute == "SUPPLYFREQUENCYL2"))
            {
                return Observable.Box(new SupplyFrequencyL2Proxy(this));
            }
            if ((attribute == "SUPPLYFREQUENCYL3"))
            {
                return Observable.Box(new SupplyFrequencyL3Proxy(this));
            }
            if ((attribute == "SUPPLYFREQUENCYALL"))
            {
                return Observable.Box(new SupplyFrequencyAllProxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSPL1"))
            {
                return Observable.Box(new ActivePowerAbsPL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSPL2"))
            {
                return Observable.Box(new ActivePowerAbsPL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSPL3"))
            {
                return Observable.Box(new ActivePowerAbsPL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSPALL"))
            {
                return Observable.Box(new ActivePowerAbsPAllProxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSML1"))
            {
                return Observable.Box(new ActivePowerAbsML1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSML2"))
            {
                return Observable.Box(new ActivePowerAbsML2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSML3"))
            {
                return Observable.Box(new ActivePowerAbsML3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERABSMALL"))
            {
                return Observable.Box(new ActivePowerAbsMAllProxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIL1"))
            {
                return Observable.Box(new ActivePowerQIL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIL2"))
            {
                return Observable.Box(new ActivePowerQIL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIL3"))
            {
                return Observable.Box(new ActivePowerQIL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIALL"))
            {
                return Observable.Box(new ActivePowerQIallProxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIL1"))
            {
                return Observable.Box(new ActivePowerQIIL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIL2"))
            {
                return Observable.Box(new ActivePowerQIIL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIL3"))
            {
                return Observable.Box(new ActivePowerQIIL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIALL"))
            {
                return Observable.Box(new ActivePowerQIIallProxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIIL1"))
            {
                return Observable.Box(new ActivePowerQIIIL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIIL2"))
            {
                return Observable.Box(new ActivePowerQIIIL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIIL3"))
            {
                return Observable.Box(new ActivePowerQIIIL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIIIALL"))
            {
                return Observable.Box(new ActivePowerQIIIallProxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIVL1"))
            {
                return Observable.Box(new ActivePowerQIVL1Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIVL2"))
            {
                return Observable.Box(new ActivePowerQIVL2Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIVL3"))
            {
                return Observable.Box(new ActivePowerQIVL3Proxy(this));
            }
            if ((attribute == "ACTIVEPOWERQIVALL"))
            {
                return Observable.Box(new ActivePowerQIVallProxy(this));
            }
            if ((attribute == "ANGLES"))
            {
                return Observable.Box(new AnglesProxy(this));
            }
            if ((attribute == "PULSES"))
            {
                return Observable.Box(new PulsesProxy(this));
            }
            if ((attribute == "AMPERE_SQUAREDHOURS"))
            {
                return Observable.Box(new Ampere_squaredHoursProxy(this));
            }
            if ((attribute == "VOLT_SQUAREDHOURS"))
            {
                return Observable.Box(new Volt_squaredHoursProxy(this));
            }
            if ((attribute == "NEUTRALCURRENT"))
            {
                return Observable.Box(new NeutralCurrentProxy(this));
            }
            if ((attribute == "NEUTRALVOLTAGE"))
            {
                return Observable.Box(new NeutralVoltageProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL1 property
        /// </summary>
        private sealed class ActivePowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerpL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL1;
                }
                set
                {
                    this.ModelElement.ActivePowerpL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpall property
        /// </summary>
        private sealed class ActivePowerpallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerpall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpall;
                }
                set
                {
                    this.ModelElement.ActivePowerpall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL2 property
        /// </summary>
        private sealed class ActivePowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerpL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL2;
                }
                set
                {
                    this.ModelElement.ActivePowerpL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL3 property
        /// </summary>
        private sealed class ActivePowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerpL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL3;
                }
                set
                {
                    this.ModelElement.ActivePowerpL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL2 property
        /// </summary>
        private sealed class ActivePowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowermL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL2;
                }
                set
                {
                    this.ModelElement.ActivePowermL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL1 property
        /// </summary>
        private sealed class ActivePowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowermL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL1;
                }
                set
                {
                    this.ModelElement.ActivePowermL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL3 property
        /// </summary>
        private sealed class ActivePowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowermL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL3;
                }
                set
                {
                    this.ModelElement.ActivePowermL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermall property
        /// </summary>
        private sealed class ActivePowermallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowermall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermall;
                }
                set
                {
                    this.ModelElement.ActivePowermall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL1 property
        /// </summary>
        private sealed class ReactivePowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerpL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL2 property
        /// </summary>
        private sealed class ReactivePowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerpL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL3 property
        /// </summary>
        private sealed class ReactivePowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerpL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpall property
        /// </summary>
        private sealed class ReactivePowerpallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerpall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpall;
                }
                set
                {
                    this.ModelElement.ReactivePowerpall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL1 property
        /// </summary>
        private sealed class ReactivePowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowermL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL1;
                }
                set
                {
                    this.ModelElement.ReactivePowermL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL2 property
        /// </summary>
        private sealed class ReactivePowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowermL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL2;
                }
                set
                {
                    this.ModelElement.ReactivePowermL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL3 property
        /// </summary>
        private sealed class ReactivePowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowermL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL3;
                }
                set
                {
                    this.ModelElement.ReactivePowermL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermall property
        /// </summary>
        private sealed class ReactivePowermallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowermall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermall;
                }
                set
                {
                    this.ModelElement.ReactivePowermall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL1 property
        /// </summary>
        private sealed class ReactivePowerQIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL2 property
        /// </summary>
        private sealed class ReactivePowerQIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL3 property
        /// </summary>
        private sealed class ReactivePowerQIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIall property
        /// </summary>
        private sealed class ReactivePowerQIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL1 property
        /// </summary>
        private sealed class ReactivePowerQIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL2 property
        /// </summary>
        private sealed class ReactivePowerQIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL3 property
        /// </summary>
        private sealed class ReactivePowerQIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIall property
        /// </summary>
        private sealed class ReactivePowerQIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL1 property
        /// </summary>
        private sealed class ReactivePowerQIIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL2 property
        /// </summary>
        private sealed class ReactivePowerQIIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL3 property
        /// </summary>
        private sealed class ReactivePowerQIIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIall property
        /// </summary>
        private sealed class ReactivePowerQIIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIIIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL1 property
        /// </summary>
        private sealed class ReactivePowerQIVL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIVL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL2 property
        /// </summary>
        private sealed class ReactivePowerQIVL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIVL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL3 property
        /// </summary>
        private sealed class ReactivePowerQIVL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIVL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVall property
        /// </summary>
        private sealed class ReactivePowerQIVallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ReactivePowerQIVall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL1 property
        /// </summary>
        private sealed class ApparentPowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowerpL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL1;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL2 property
        /// </summary>
        private sealed class ApparentPowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowerpL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL2;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL3 property
        /// </summary>
        private sealed class ApparentPowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowerpL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL3;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpAll property
        /// </summary>
        private sealed class ApparentPowerpAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowerpAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpAll;
                }
                set
                {
                    this.ModelElement.ApparentPowerpAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL1 property
        /// </summary>
        private sealed class ApparentPowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowermL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL1;
                }
                set
                {
                    this.ModelElement.ApparentPowermL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL2 property
        /// </summary>
        private sealed class ApparentPowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowermL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL2;
                }
                set
                {
                    this.ModelElement.ApparentPowermL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL3 property
        /// </summary>
        private sealed class ApparentPowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowermL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL3;
                }
                set
                {
                    this.ModelElement.ApparentPowermL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermAll property
        /// </summary>
        private sealed class ApparentPowermAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ApparentPowermAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermAll;
                }
                set
                {
                    this.ModelElement.ApparentPowermAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL1 property
        /// </summary>
        private sealed class CurrentL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "CurrentL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL1;
                }
                set
                {
                    this.ModelElement.CurrentL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL2 property
        /// </summary>
        private sealed class CurrentL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "CurrentL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL2;
                }
                set
                {
                    this.ModelElement.CurrentL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL3 property
        /// </summary>
        private sealed class CurrentL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "CurrentL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL3;
                }
                set
                {
                    this.ModelElement.CurrentL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentAll property
        /// </summary>
        private sealed class CurrentAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "CurrentAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentAll;
                }
                set
                {
                    this.ModelElement.CurrentAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL1 property
        /// </summary>
        private sealed class VoltageL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "VoltageL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL1;
                }
                set
                {
                    this.ModelElement.VoltageL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL2 property
        /// </summary>
        private sealed class VoltageL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "VoltageL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL2;
                }
                set
                {
                    this.ModelElement.VoltageL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL3 property
        /// </summary>
        private sealed class VoltageL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "VoltageL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL3;
                }
                set
                {
                    this.ModelElement.VoltageL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageAll property
        /// </summary>
        private sealed class VoltageAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "VoltageAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageAll;
                }
                set
                {
                    this.ModelElement.VoltageAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL1 property
        /// </summary>
        private sealed class PowerFactorL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "PowerFactorL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL1;
                }
                set
                {
                    this.ModelElement.PowerFactorL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL2 property
        /// </summary>
        private sealed class PowerFactorL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "PowerFactorL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL2;
                }
                set
                {
                    this.ModelElement.PowerFactorL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL3 property
        /// </summary>
        private sealed class PowerFactorL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "PowerFactorL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL3;
                }
                set
                {
                    this.ModelElement.PowerFactorL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorAll property
        /// </summary>
        private sealed class PowerFactorAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "PowerFactorAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorAll;
                }
                set
                {
                    this.ModelElement.PowerFactorAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL1 property
        /// </summary>
        private sealed class SupplyFrequencyL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "SupplyFrequencyL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL1;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL2 property
        /// </summary>
        private sealed class SupplyFrequencyL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "SupplyFrequencyL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL2;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL3 property
        /// </summary>
        private sealed class SupplyFrequencyL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "SupplyFrequencyL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL3;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyAll property
        /// </summary>
        private sealed class SupplyFrequencyAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "SupplyFrequencyAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyAll;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL1 property
        /// </summary>
        private sealed class ActivePowerAbsPL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsPL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL1;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL2 property
        /// </summary>
        private sealed class ActivePowerAbsPL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsPL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL2;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL3 property
        /// </summary>
        private sealed class ActivePowerAbsPL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsPL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL3;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPAll property
        /// </summary>
        private sealed class ActivePowerAbsPAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsPAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPAll;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML1 property
        /// </summary>
        private sealed class ActivePowerAbsML1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsML1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML1;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML2 property
        /// </summary>
        private sealed class ActivePowerAbsML2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsML2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML2;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML3 property
        /// </summary>
        private sealed class ActivePowerAbsML3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsML3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML3;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsMAll property
        /// </summary>
        private sealed class ActivePowerAbsMAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsMAllProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerAbsMAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsMAll;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsMAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL1 property
        /// </summary>
        private sealed class ActivePowerQIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL2 property
        /// </summary>
        private sealed class ActivePowerQIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL3 property
        /// </summary>
        private sealed class ActivePowerQIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIall property
        /// </summary>
        private sealed class ActivePowerQIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL1 property
        /// </summary>
        private sealed class ActivePowerQIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL2 property
        /// </summary>
        private sealed class ActivePowerQIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL3 property
        /// </summary>
        private sealed class ActivePowerQIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIall property
        /// </summary>
        private sealed class ActivePowerQIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL1 property
        /// </summary>
        private sealed class ActivePowerQIIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL2 property
        /// </summary>
        private sealed class ActivePowerQIIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL3 property
        /// </summary>
        private sealed class ActivePowerQIIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIall property
        /// </summary>
        private sealed class ActivePowerQIIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIIIall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL1 property
        /// </summary>
        private sealed class ActivePowerQIVL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIVL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL2 property
        /// </summary>
        private sealed class ActivePowerQIVL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIVL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL3 property
        /// </summary>
        private sealed class ActivePowerQIVL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIVL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVall property
        /// </summary>
        private sealed class ActivePowerQIVallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVallProxy(IElectricityValues modelElement) : 
                    base(modelElement, "ActivePowerQIVall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Angles property
        /// </summary>
        private sealed class AnglesProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnglesProxy(IElectricityValues modelElement) : 
                    base(modelElement, "Angles")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Angles;
                }
                set
                {
                    this.ModelElement.Angles = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pulses property
        /// </summary>
        private sealed class PulsesProxy : ModelPropertyChange<IElectricityValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PulsesProxy(IElectricityValues modelElement) : 
                    base(modelElement, "Pulses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Pulses;
                }
                set
                {
                    this.ModelElement.Pulses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredHours property
        /// </summary>
        private sealed class Ampere_squaredHoursProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredHoursProxy(IElectricityValues modelElement) : 
                    base(modelElement, "Ampere_squaredHours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredHours;
                }
                set
                {
                    this.ModelElement.Ampere_squaredHours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredHours property
        /// </summary>
        private sealed class Volt_squaredHoursProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredHoursProxy(IElectricityValues modelElement) : 
                    base(modelElement, "Volt_squaredHours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredHours;
                }
                set
                {
                    this.ModelElement.Volt_squaredHours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NeutralCurrent property
        /// </summary>
        private sealed class NeutralCurrentProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralCurrentProxy(IElectricityValues modelElement) : 
                    base(modelElement, "NeutralCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.NeutralCurrent;
                }
                set
                {
                    this.ModelElement.NeutralCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NeutralVoltage property
        /// </summary>
        private sealed class NeutralVoltageProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralVoltageProxy(IElectricityValues modelElement) : 
                    base(modelElement, "NeutralVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.NeutralVoltage;
                }
                set
                {
                    this.ModelElement.NeutralVoltage = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MeasurementValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementValues")]
    public partial class MeasurementValues : Data, IMeasurementValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Billing_period_average property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _billing_period_average;
        
        private static Lazy<ITypedElement> _billing_period_averageAttribute = new Lazy<ITypedElement>(RetrieveBilling_period_averageAttribute);
        
        /// <summary>
        /// The backing field for the Cumulative_minimum property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _cumulative_minimum;
        
        private static Lazy<ITypedElement> _cumulative_minimumAttribute = new Lazy<ITypedElement>(RetrieveCumulative_minimumAttribute);
        
        /// <summary>
        /// The backing field for the Cumulative_maximum property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _cumulative_maximum;
        
        private static Lazy<ITypedElement> _cumulative_maximumAttribute = new Lazy<ITypedElement>(RetrieveCumulative_maximumAttribute);
        
        /// <summary>
        /// The backing field for the Minimum property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _minimum;
        
        private static Lazy<ITypedElement> _minimumAttribute = new Lazy<ITypedElement>(RetrieveMinimumAttribute);
        
        /// <summary>
        /// The backing field for the Current_average property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _current_average;
        
        private static Lazy<ITypedElement> _current_averageAttribute = new Lazy<ITypedElement>(RetrieveCurrent_averageAttribute);
        
        /// <summary>
        /// The backing field for the Last_average property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _last_average;
        
        private static Lazy<ITypedElement> _last_averageAttribute = new Lazy<ITypedElement>(RetrieveLast_averageAttribute);
        
        /// <summary>
        /// The backing field for the Maximum property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _maximum;
        
        private static Lazy<ITypedElement> _maximumAttribute = new Lazy<ITypedElement>(RetrieveMaximumAttribute);
        
        /// <summary>
        /// The backing field for the Instantaneous_value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _instantaneous_value;
        
        private static Lazy<ITypedElement> _instantaneous_valueAttribute = new Lazy<ITypedElement>(RetrieveInstantaneous_valueAttribute);
        
        /// <summary>
        /// The backing field for the Time_integral property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _time_integral;
        
        private static Lazy<ITypedElement> _time_integralAttribute = new Lazy<ITypedElement>(RetrieveTime_integralAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_threshold property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _under_limit_threshold;
        
        private static Lazy<ITypedElement> _under_limit_thresholdAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_occurrence_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _under_limit_occurrence_counter;
        
        private static Lazy<ITypedElement> _under_limit_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _under_limit_duration;
        
        private static Lazy<ITypedElement> _under_limit_durationAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_durationAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_magnitude property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _under_limit_magnitude;
        
        private static Lazy<ITypedElement> _under_limit_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_threshold property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _over_limit_threshold;
        
        private static Lazy<ITypedElement> _over_limit_thresholdAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_occurrence_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _over_limit_occurrence_counter;
        
        private static Lazy<ITypedElement> _over_limit_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _over_limit_duration;
        
        private static Lazy<ITypedElement> _over_limit_durationAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_durationAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_magnitude property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _over_limit_magnitude;
        
        private static Lazy<ITypedElement> _over_limit_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Missing_threshold property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _missing_threshold;
        
        private static Lazy<ITypedElement> _missing_thresholdAttribute = new Lazy<ITypedElement>(RetrieveMissing_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Missing_occurrence_counter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _missing_occurrence_counter;
        
        private static Lazy<ITypedElement> _missing_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveMissing_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Missing_duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _missing_duration;
        
        private static Lazy<ITypedElement> _missing_durationAttribute = new Lazy<ITypedElement>(RetrieveMissing_durationAttribute);
        
        /// <summary>
        /// The backing field for the Missing_magnitude property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _missing_magnitude;
        
        private static Lazy<ITypedElement> _missing_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveMissing_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_under_limit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time_threshold_for_under_limit;
        
        private static Lazy<ITypedElement> _time_threshold_for_under_limitAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_under_limitAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_over_limit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time_threshold_for_over_limit;
        
        private static Lazy<ITypedElement> _time_threshold_for_over_limitAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_over_limitAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_missing_magnitude property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _time_threshold_for_missing_magnitude;
        
        private static Lazy<ITypedElement> _time_threshold_for_missing_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_missing_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Contracted_value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _contracted_value;
        
        private static Lazy<ITypedElement> _contracted_valueAttribute = new Lazy<ITypedElement>(RetrieveContracted_valueAttribute);
        
        /// <summary>
        /// The backing field for the Minimum_for_recording_interval property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _minimum_for_recording_interval;
        
        private static Lazy<ITypedElement> _minimum_for_recording_intervalAttribute = new Lazy<ITypedElement>(RetrieveMinimum_for_recording_intervalAttribute);
        
        /// <summary>
        /// The backing field for the Maximum_for_recording_interval property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _maximum_for_recording_interval;
        
        private static Lazy<ITypedElement> _maximum_for_recording_intervalAttribute = new Lazy<ITypedElement>(RetrieveMaximum_for_recording_intervalAttribute);
        
        /// <summary>
        /// The backing field for the Test_average property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _test_average;
        
        private static Lazy<ITypedElement> _test_averageAttribute = new Lazy<ITypedElement>(RetrieveTest_averageAttribute);
        
        private static Lazy<ITypedElement> _calculationsReference = new Lazy<ITypedElement>(RetrieveCalculationsReference);
        
        /// <summary>
        /// The backing field for the Calculations property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElectricityValues _calculations;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Billing_period_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Billing_period_average
        {
            get
            {
                return this._billing_period_average;
            }
            set
            {
                if ((this._billing_period_average != value))
                {
                    Nullable<double> old = this._billing_period_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilling_period_averageChanging(e);
                    this.OnPropertyChanging("Billing_period_average", e, _billing_period_averageAttribute);
                    this._billing_period_average = value;
                    this.OnBilling_period_averageChanged(e);
                    this.OnPropertyChanged("Billing_period_average", e, _billing_period_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Cumulative_minimum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Cumulative_minimum
        {
            get
            {
                return this._cumulative_minimum;
            }
            set
            {
                if ((this._cumulative_minimum != value))
                {
                    Nullable<double> old = this._cumulative_minimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumulative_minimumChanging(e);
                    this.OnPropertyChanging("Cumulative_minimum", e, _cumulative_minimumAttribute);
                    this._cumulative_minimum = value;
                    this.OnCumulative_minimumChanged(e);
                    this.OnPropertyChanged("Cumulative_minimum", e, _cumulative_minimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Cumulative_maximum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Cumulative_maximum
        {
            get
            {
                return this._cumulative_maximum;
            }
            set
            {
                if ((this._cumulative_maximum != value))
                {
                    Nullable<double> old = this._cumulative_maximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumulative_maximumChanging(e);
                    this.OnPropertyChanging("Cumulative_maximum", e, _cumulative_maximumAttribute);
                    this._cumulative_maximum = value;
                    this.OnCumulative_maximumChanged(e);
                    this.OnPropertyChanged("Cumulative_maximum", e, _cumulative_maximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Minimum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Minimum
        {
            get
            {
                return this._minimum;
            }
            set
            {
                if ((this._minimum != value))
                {
                    Nullable<double> old = this._minimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumChanging(e);
                    this.OnPropertyChanging("Minimum", e, _minimumAttribute);
                    this._minimum = value;
                    this.OnMinimumChanged(e);
                    this.OnPropertyChanged("Minimum", e, _minimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Current_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Current_average
        {
            get
            {
                return this._current_average;
            }
            set
            {
                if ((this._current_average != value))
                {
                    Nullable<double> old = this._current_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrent_averageChanging(e);
                    this.OnPropertyChanging("Current_average", e, _current_averageAttribute);
                    this._current_average = value;
                    this.OnCurrent_averageChanged(e);
                    this.OnPropertyChanged("Current_average", e, _current_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Last_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Last_average
        {
            get
            {
                return this._last_average;
            }
            set
            {
                if ((this._last_average != value))
                {
                    Nullable<double> old = this._last_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLast_averageChanging(e);
                    this.OnPropertyChanging("Last_average", e, _last_averageAttribute);
                    this._last_average = value;
                    this.OnLast_averageChanged(e);
                    this.OnPropertyChanged("Last_average", e, _last_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Maximum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Maximum
        {
            get
            {
                return this._maximum;
            }
            set
            {
                if ((this._maximum != value))
                {
                    Nullable<double> old = this._maximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumChanging(e);
                    this.OnPropertyChanging("Maximum", e, _maximumAttribute);
                    this._maximum = value;
                    this.OnMaximumChanged(e);
                    this.OnPropertyChanged("Maximum", e, _maximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Instantaneous_value property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Instantaneous_value
        {
            get
            {
                return this._instantaneous_value;
            }
            set
            {
                if ((this._instantaneous_value != value))
                {
                    Nullable<double> old = this._instantaneous_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstantaneous_valueChanging(e);
                    this.OnPropertyChanging("Instantaneous_value", e, _instantaneous_valueAttribute);
                    this._instantaneous_value = value;
                    this.OnInstantaneous_valueChanged(e);
                    this.OnPropertyChanged("Instantaneous_value", e, _instantaneous_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_integral property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Time_integral
        {
            get
            {
                return this._time_integral;
            }
            set
            {
                if ((this._time_integral != value))
                {
                    Nullable<double> old = this._time_integral;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_integralChanging(e);
                    this.OnPropertyChanging("Time_integral", e, _time_integralAttribute);
                    this._time_integral = value;
                    this.OnTime_integralChanged(e);
                    this.OnPropertyChanged("Time_integral", e, _time_integralAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Under_limit_threshold
        {
            get
            {
                return this._under_limit_threshold;
            }
            set
            {
                if ((this._under_limit_threshold != value))
                {
                    Nullable<double> old = this._under_limit_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_thresholdChanging(e);
                    this.OnPropertyChanging("Under_limit_threshold", e, _under_limit_thresholdAttribute);
                    this._under_limit_threshold = value;
                    this.OnUnder_limit_thresholdChanged(e);
                    this.OnPropertyChanged("Under_limit_threshold", e, _under_limit_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Under_limit_occurrence_counter
        {
            get
            {
                return this._under_limit_occurrence_counter;
            }
            set
            {
                if ((this._under_limit_occurrence_counter != value))
                {
                    Nullable<double> old = this._under_limit_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Under_limit_occurrence_counter", e, _under_limit_occurrence_counterAttribute);
                    this._under_limit_occurrence_counter = value;
                    this.OnUnder_limit_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Under_limit_occurrence_counter", e, _under_limit_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Under_limit_duration
        {
            get
            {
                return this._under_limit_duration;
            }
            set
            {
                if ((this._under_limit_duration != value))
                {
                    Nullable<double> old = this._under_limit_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_durationChanging(e);
                    this.OnPropertyChanging("Under_limit_duration", e, _under_limit_durationAttribute);
                    this._under_limit_duration = value;
                    this.OnUnder_limit_durationChanged(e);
                    this.OnPropertyChanged("Under_limit_duration", e, _under_limit_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Under_limit_magnitude
        {
            get
            {
                return this._under_limit_magnitude;
            }
            set
            {
                if ((this._under_limit_magnitude != value))
                {
                    Nullable<double> old = this._under_limit_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_magnitudeChanging(e);
                    this.OnPropertyChanging("Under_limit_magnitude", e, _under_limit_magnitudeAttribute);
                    this._under_limit_magnitude = value;
                    this.OnUnder_limit_magnitudeChanged(e);
                    this.OnPropertyChanged("Under_limit_magnitude", e, _under_limit_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Over_limit_threshold
        {
            get
            {
                return this._over_limit_threshold;
            }
            set
            {
                if ((this._over_limit_threshold != value))
                {
                    Nullable<double> old = this._over_limit_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_thresholdChanging(e);
                    this.OnPropertyChanging("Over_limit_threshold", e, _over_limit_thresholdAttribute);
                    this._over_limit_threshold = value;
                    this.OnOver_limit_thresholdChanged(e);
                    this.OnPropertyChanged("Over_limit_threshold", e, _over_limit_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Over_limit_occurrence_counter
        {
            get
            {
                return this._over_limit_occurrence_counter;
            }
            set
            {
                if ((this._over_limit_occurrence_counter != value))
                {
                    Nullable<double> old = this._over_limit_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Over_limit_occurrence_counter", e, _over_limit_occurrence_counterAttribute);
                    this._over_limit_occurrence_counter = value;
                    this.OnOver_limit_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Over_limit_occurrence_counter", e, _over_limit_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Over_limit_duration
        {
            get
            {
                return this._over_limit_duration;
            }
            set
            {
                if ((this._over_limit_duration != value))
                {
                    Nullable<double> old = this._over_limit_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_durationChanging(e);
                    this.OnPropertyChanging("Over_limit_duration", e, _over_limit_durationAttribute);
                    this._over_limit_duration = value;
                    this.OnOver_limit_durationChanged(e);
                    this.OnPropertyChanged("Over_limit_duration", e, _over_limit_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Over_limit_magnitude
        {
            get
            {
                return this._over_limit_magnitude;
            }
            set
            {
                if ((this._over_limit_magnitude != value))
                {
                    Nullable<double> old = this._over_limit_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_magnitudeChanging(e);
                    this.OnPropertyChanging("Over_limit_magnitude", e, _over_limit_magnitudeAttribute);
                    this._over_limit_magnitude = value;
                    this.OnOver_limit_magnitudeChanged(e);
                    this.OnPropertyChanged("Over_limit_magnitude", e, _over_limit_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Missing_threshold
        {
            get
            {
                return this._missing_threshold;
            }
            set
            {
                if ((this._missing_threshold != value))
                {
                    Nullable<bool> old = this._missing_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_thresholdChanging(e);
                    this.OnPropertyChanging("Missing_threshold", e, _missing_thresholdAttribute);
                    this._missing_threshold = value;
                    this.OnMissing_thresholdChanged(e);
                    this.OnPropertyChanged("Missing_threshold", e, _missing_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Missing_occurrence_counter
        {
            get
            {
                return this._missing_occurrence_counter;
            }
            set
            {
                if ((this._missing_occurrence_counter != value))
                {
                    Nullable<bool> old = this._missing_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Missing_occurrence_counter", e, _missing_occurrence_counterAttribute);
                    this._missing_occurrence_counter = value;
                    this.OnMissing_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Missing_occurrence_counter", e, _missing_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Missing_duration
        {
            get
            {
                return this._missing_duration;
            }
            set
            {
                if ((this._missing_duration != value))
                {
                    Nullable<bool> old = this._missing_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_durationChanging(e);
                    this.OnPropertyChanging("Missing_duration", e, _missing_durationAttribute);
                    this._missing_duration = value;
                    this.OnMissing_durationChanged(e);
                    this.OnPropertyChanged("Missing_duration", e, _missing_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> Missing_magnitude
        {
            get
            {
                return this._missing_magnitude;
            }
            set
            {
                if ((this._missing_magnitude != value))
                {
                    Nullable<bool> old = this._missing_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_magnitudeChanging(e);
                    this.OnPropertyChanging("Missing_magnitude", e, _missing_magnitudeAttribute);
                    this._missing_magnitude = value;
                    this.OnMissing_magnitudeChanged(e);
                    this.OnPropertyChanged("Missing_magnitude", e, _missing_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_under_limit property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public string Time_threshold_for_under_limit
        {
            get
            {
                return this._time_threshold_for_under_limit;
            }
            set
            {
                if ((this._time_threshold_for_under_limit != value))
                {
                    string old = this._time_threshold_for_under_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_under_limitChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_under_limit", e, _time_threshold_for_under_limitAttribute);
                    this._time_threshold_for_under_limit = value;
                    this.OnTime_threshold_for_under_limitChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_under_limit", e, _time_threshold_for_under_limitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_over_limit property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public string Time_threshold_for_over_limit
        {
            get
            {
                return this._time_threshold_for_over_limit;
            }
            set
            {
                if ((this._time_threshold_for_over_limit != value))
                {
                    string old = this._time_threshold_for_over_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_over_limitChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_over_limit", e, _time_threshold_for_over_limitAttribute);
                    this._time_threshold_for_over_limit = value;
                    this.OnTime_threshold_for_over_limitChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_over_limit", e, _time_threshold_for_over_limitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_missing_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public string Time_threshold_for_missing_magnitude
        {
            get
            {
                return this._time_threshold_for_missing_magnitude;
            }
            set
            {
                if ((this._time_threshold_for_missing_magnitude != value))
                {
                    string old = this._time_threshold_for_missing_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_missing_magnitudeChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_missing_magnitude", e, _time_threshold_for_missing_magnitudeAttribute);
                    this._time_threshold_for_missing_magnitude = value;
                    this.OnTime_threshold_for_missing_magnitudeChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_missing_magnitude", e, _time_threshold_for_missing_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Contracted_value property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Contracted_value
        {
            get
            {
                return this._contracted_value;
            }
            set
            {
                if ((this._contracted_value != value))
                {
                    Nullable<double> old = this._contracted_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContracted_valueChanging(e);
                    this.OnPropertyChanging("Contracted_value", e, _contracted_valueAttribute);
                    this._contracted_value = value;
                    this.OnContracted_valueChanged(e);
                    this.OnPropertyChanged("Contracted_value", e, _contracted_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Minimum_for_recording_interval property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Minimum_for_recording_interval
        {
            get
            {
                return this._minimum_for_recording_interval;
            }
            set
            {
                if ((this._minimum_for_recording_interval != value))
                {
                    Nullable<double> old = this._minimum_for_recording_interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimum_for_recording_intervalChanging(e);
                    this.OnPropertyChanging("Minimum_for_recording_interval", e, _minimum_for_recording_intervalAttribute);
                    this._minimum_for_recording_interval = value;
                    this.OnMinimum_for_recording_intervalChanged(e);
                    this.OnPropertyChanged("Minimum_for_recording_interval", e, _minimum_for_recording_intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Maximum_for_recording_interval property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Maximum_for_recording_interval
        {
            get
            {
                return this._maximum_for_recording_interval;
            }
            set
            {
                if ((this._maximum_for_recording_interval != value))
                {
                    Nullable<double> old = this._maximum_for_recording_interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximum_for_recording_intervalChanging(e);
                    this.OnPropertyChanging("Maximum_for_recording_interval", e, _maximum_for_recording_intervalAttribute);
                    this._maximum_for_recording_interval = value;
                    this.OnMaximum_for_recording_intervalChanged(e);
                    this.OnPropertyChanged("Maximum_for_recording_interval", e, _maximum_for_recording_intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Test_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Test_average
        {
            get
            {
                return this._test_average;
            }
            set
            {
                if ((this._test_average != value))
                {
                    Nullable<double> old = this._test_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTest_averageChanging(e);
                    this.OnPropertyChanging("Test_average", e, _test_averageAttribute);
                    this._test_average = value;
                    this.OnTest_averageChanged(e);
                    this.OnPropertyChanged("Test_average", e, _test_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The calculations property
        /// </summary>
        [DisplayNameAttribute("calculations")]
        [CategoryAttribute("MeasurementValues")]
        [XmlElementNameAttribute("calculations")]
        [XmlAttributeAttribute(true)]
        public IElectricityValues Calculations
        {
            get
            {
                return this._calculations;
            }
            set
            {
                if ((this._calculations != value))
                {
                    IElectricityValues old = this._calculations;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCalculationsChanging(e);
                    this.OnPropertyChanging("Calculations", e, _calculationsReference);
                    this._calculations = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCalculations;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCalculations;
                    }
                    this.OnCalculationsChanged(e);
                    this.OnPropertyChanged("Calculations", e, _calculationsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeasurementValuesReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Billing_period_average property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Billing_period_averageChanged;
        
        /// <summary>
        /// Gets fired before the Billing_period_average property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Billing_period_averageChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_minimum property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Cumulative_minimumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_minimum property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Cumulative_minimumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_maximum property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Cumulative_maximumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_maximum property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Cumulative_maximumChanging;
        
        /// <summary>
        /// Gets fired when the Minimum property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MinimumChanged;
        
        /// <summary>
        /// Gets fired before the Minimum property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MinimumChanging;
        
        /// <summary>
        /// Gets fired when the Current_average property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Current_averageChanged;
        
        /// <summary>
        /// Gets fired before the Current_average property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Current_averageChanging;
        
        /// <summary>
        /// Gets fired when the Last_average property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Last_averageChanged;
        
        /// <summary>
        /// Gets fired before the Last_average property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Last_averageChanging;
        
        /// <summary>
        /// Gets fired when the Maximum property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MaximumChanged;
        
        /// <summary>
        /// Gets fired before the Maximum property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MaximumChanging;
        
        /// <summary>
        /// Gets fired when the Instantaneous_value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Instantaneous_value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Time_integral property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_integralChanged;
        
        /// <summary>
        /// Gets fired before the Time_integral property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_integralChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_threshold property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_threshold property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_occurrence_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_occurrence_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_magnitude property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_magnitude property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_threshold property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_threshold property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_occurrence_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_occurrence_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_magnitude property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_magnitude property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Missing_threshold property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Missing_threshold property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Missing_occurrence_counter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Missing_occurrence_counter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Missing_duration property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_durationChanged;
        
        /// <summary>
        /// Gets fired before the Missing_duration property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_durationChanging;
        
        /// <summary>
        /// Gets fired when the Missing_magnitude property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Missing_magnitude property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_under_limit property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_under_limit property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_over_limit property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_over_limit property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_missing_magnitude property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_missing_magnitude property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Contracted_value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Contracted_valueChanged;
        
        /// <summary>
        /// Gets fired before the Contracted_value property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Contracted_valueChanging;
        
        /// <summary>
        /// Gets fired when the Minimum_for_recording_interval property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Minimum_for_recording_interval property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Maximum_for_recording_interval property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Maximum_for_recording_interval property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Test_average property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Test_averageChanged;
        
        /// <summary>
        /// Gets fired before the Test_average property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Test_averageChanging;
        
        /// <summary>
        /// Gets fired before the Calculations property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CalculationsChanging;
        
        /// <summary>
        /// Gets fired when the Calculations property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CalculationsChanged;
        
        private static ITypedElement RetrieveBilling_period_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Billing_period_average")));
        }
        
        /// <summary>
        /// Raises the Billing_period_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_averageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Billing_period_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Billing_period_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_averageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Billing_period_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumulative_minimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Cumulative_minimum")));
        }
        
        /// <summary>
        /// Raises the Cumulative_minimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_minimumChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Cumulative_minimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Cumulative_minimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_minimumChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Cumulative_minimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumulative_maximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Cumulative_maximum")));
        }
        
        /// <summary>
        /// Raises the Cumulative_maximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_maximumChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Cumulative_maximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Cumulative_maximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_maximumChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Cumulative_maximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Minimum")));
        }
        
        /// <summary>
        /// Raises the MinimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MinimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MinimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrent_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Current_average")));
        }
        
        /// <summary>
        /// Raises the Current_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrent_averageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Current_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Current_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrent_averageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Current_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLast_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Last_average")));
        }
        
        /// <summary>
        /// Raises the Last_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLast_averageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Last_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Last_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLast_averageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Last_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Maximum")));
        }
        
        /// <summary>
        /// Raises the MaximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MaximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MaximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInstantaneous_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Instantaneous_value")));
        }
        
        /// <summary>
        /// Raises the Instantaneous_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstantaneous_valueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Instantaneous_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Instantaneous_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstantaneous_valueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Instantaneous_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_integralAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Time_integral")));
        }
        
        /// <summary>
        /// Raises the Time_integralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_integralChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_integralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_integralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_integralChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_integralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Under_limit_threshold")));
        }
        
        /// <summary>
        /// Raises the Under_limit_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Under_limit_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Under_limit_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Under_limit_duration")));
        }
        
        /// <summary>
        /// Raises the Under_limit_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Under_limit_magnitude")));
        }
        
        /// <summary>
        /// Raises the Under_limit_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Under_limit_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Over_limit_threshold")));
        }
        
        /// <summary>
        /// Raises the Over_limit_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Over_limit_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Over_limit_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Over_limit_duration")));
        }
        
        /// <summary>
        /// Raises the Over_limit_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Over_limit_magnitude")));
        }
        
        /// <summary>
        /// Raises the Over_limit_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Over_limit_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Missing_threshold")));
        }
        
        /// <summary>
        /// Raises the Missing_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Missing_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Missing_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Missing_duration")));
        }
        
        /// <summary>
        /// Raises the Missing_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_durationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_durationChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Missing_magnitude")));
        }
        
        /// <summary>
        /// Raises the Missing_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Missing_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_under_limitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_under_limit")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_under_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_under_limitChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_under_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_under_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_under_limitChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_under_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_over_limitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_over_limit")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_over_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_over_limitChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_over_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_over_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_over_limitChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_over_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_missing_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_missing_magnitude")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_missing_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_missing_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_missing_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_missing_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_missing_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_missing_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveContracted_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Contracted_value")));
        }
        
        /// <summary>
        /// Raises the Contracted_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContracted_valueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Contracted_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Contracted_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContracted_valueChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Contracted_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimum_for_recording_intervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Minimum_for_recording_interval")));
        }
        
        /// <summary>
        /// Raises the Minimum_for_recording_intervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimum_for_recording_intervalChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Minimum_for_recording_intervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Minimum_for_recording_intervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimum_for_recording_intervalChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Minimum_for_recording_intervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximum_for_recording_intervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Maximum_for_recording_interval")));
        }
        
        /// <summary>
        /// Raises the Maximum_for_recording_intervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximum_for_recording_intervalChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Maximum_for_recording_intervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Maximum_for_recording_intervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximum_for_recording_intervalChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Maximum_for_recording_intervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTest_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("Test_average")));
        }
        
        /// <summary>
        /// Raises the Test_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTest_averageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Test_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Test_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTest_averageChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Test_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCalculationsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.MeasurementValues.ClassInstance)).Resolve("calculations")));
        }
        
        /// <summary>
        /// Raises the CalculationsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CalculationsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CalculationsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CalculationsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Calculations property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCalculations(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Calculations))
            {
                this.Calculations = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CALCULATIONS"))
            {
                return this.Calculations;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BILLING_PERIOD_AVERAGE"))
            {
                return this.Billing_period_average;
            }
            if ((attribute == "CUMULATIVE_MINIMUM"))
            {
                return this.Cumulative_minimum;
            }
            if ((attribute == "CUMULATIVE_MAXIMUM"))
            {
                return this.Cumulative_maximum;
            }
            if ((attribute == "MINIMUM"))
            {
                return this.Minimum;
            }
            if ((attribute == "CURRENT_AVERAGE"))
            {
                return this.Current_average;
            }
            if ((attribute == "LAST_AVERAGE"))
            {
                return this.Last_average;
            }
            if ((attribute == "MAXIMUM"))
            {
                return this.Maximum;
            }
            if ((attribute == "INSTANTANEOUS_VALUE"))
            {
                return this.Instantaneous_value;
            }
            if ((attribute == "TIME_INTEGRAL"))
            {
                return this.Time_integral;
            }
            if ((attribute == "UNDER_LIMIT_THRESHOLD"))
            {
                return this.Under_limit_threshold;
            }
            if ((attribute == "UNDER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return this.Under_limit_occurrence_counter;
            }
            if ((attribute == "UNDER_LIMIT_DURATION"))
            {
                return this.Under_limit_duration;
            }
            if ((attribute == "UNDER_LIMIT_MAGNITUDE"))
            {
                return this.Under_limit_magnitude;
            }
            if ((attribute == "OVER_LIMIT_THRESHOLD"))
            {
                return this.Over_limit_threshold;
            }
            if ((attribute == "OVER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return this.Over_limit_occurrence_counter;
            }
            if ((attribute == "OVER_LIMIT_DURATION"))
            {
                return this.Over_limit_duration;
            }
            if ((attribute == "OVER_LIMIT_MAGNITUDE"))
            {
                return this.Over_limit_magnitude;
            }
            if ((attribute == "MISSING_THRESHOLD"))
            {
                return this.Missing_threshold;
            }
            if ((attribute == "MISSING_OCCURRENCE_COUNTER"))
            {
                return this.Missing_occurrence_counter;
            }
            if ((attribute == "MISSING_DURATION"))
            {
                return this.Missing_duration;
            }
            if ((attribute == "MISSING_MAGNITUDE"))
            {
                return this.Missing_magnitude;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_UNDER_LIMIT"))
            {
                return this.Time_threshold_for_under_limit;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_OVER_LIMIT"))
            {
                return this.Time_threshold_for_over_limit;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_MISSING_MAGNITUDE"))
            {
                return this.Time_threshold_for_missing_magnitude;
            }
            if ((attribute == "CONTRACTED_VALUE"))
            {
                return this.Contracted_value;
            }
            if ((attribute == "MINIMUM_FOR_RECORDING_INTERVAL"))
            {
                return this.Minimum_for_recording_interval;
            }
            if ((attribute == "MAXIMUM_FOR_RECORDING_INTERVAL"))
            {
                return this.Maximum_for_recording_interval;
            }
            if ((attribute == "TEST_AVERAGE"))
            {
                return this.Test_average;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CALCULATIONS"))
            {
                this.Calculations = ((IElectricityValues)(value));
                return;
            }
            if ((feature == "BILLING_PERIOD_AVERAGE"))
            {
                this.Billing_period_average = ((double)(value));
                return;
            }
            if ((feature == "CUMULATIVE_MINIMUM"))
            {
                this.Cumulative_minimum = ((double)(value));
                return;
            }
            if ((feature == "CUMULATIVE_MAXIMUM"))
            {
                this.Cumulative_maximum = ((double)(value));
                return;
            }
            if ((feature == "MINIMUM"))
            {
                this.Minimum = ((double)(value));
                return;
            }
            if ((feature == "CURRENT_AVERAGE"))
            {
                this.Current_average = ((double)(value));
                return;
            }
            if ((feature == "LAST_AVERAGE"))
            {
                this.Last_average = ((double)(value));
                return;
            }
            if ((feature == "MAXIMUM"))
            {
                this.Maximum = ((double)(value));
                return;
            }
            if ((feature == "INSTANTANEOUS_VALUE"))
            {
                this.Instantaneous_value = ((double)(value));
                return;
            }
            if ((feature == "TIME_INTEGRAL"))
            {
                this.Time_integral = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_THRESHOLD"))
            {
                this.Under_limit_threshold = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_OCCURRENCE_COUNTER"))
            {
                this.Under_limit_occurrence_counter = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_DURATION"))
            {
                this.Under_limit_duration = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_MAGNITUDE"))
            {
                this.Under_limit_magnitude = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_THRESHOLD"))
            {
                this.Over_limit_threshold = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_OCCURRENCE_COUNTER"))
            {
                this.Over_limit_occurrence_counter = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_DURATION"))
            {
                this.Over_limit_duration = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_MAGNITUDE"))
            {
                this.Over_limit_magnitude = ((double)(value));
                return;
            }
            if ((feature == "MISSING_THRESHOLD"))
            {
                this.Missing_threshold = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_OCCURRENCE_COUNTER"))
            {
                this.Missing_occurrence_counter = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_DURATION"))
            {
                this.Missing_duration = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_MAGNITUDE"))
            {
                this.Missing_magnitude = ((bool)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_UNDER_LIMIT"))
            {
                this.Time_threshold_for_under_limit = ((string)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_OVER_LIMIT"))
            {
                this.Time_threshold_for_over_limit = ((string)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_MISSING_MAGNITUDE"))
            {
                this.Time_threshold_for_missing_magnitude = ((string)(value));
                return;
            }
            if ((feature == "CONTRACTED_VALUE"))
            {
                this.Contracted_value = ((double)(value));
                return;
            }
            if ((feature == "MINIMUM_FOR_RECORDING_INTERVAL"))
            {
                this.Minimum_for_recording_interval = ((double)(value));
                return;
            }
            if ((feature == "MAXIMUM_FOR_RECORDING_INTERVAL"))
            {
                this.Maximum_for_recording_interval = ((double)(value));
                return;
            }
            if ((feature == "TEST_AVERAGE"))
            {
                this.Test_average = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BILLING_PERIOD_AVERAGE"))
            {
                return Observable.Box(new Billing_period_averageProxy(this));
            }
            if ((attribute == "CUMULATIVE_MINIMUM"))
            {
                return Observable.Box(new Cumulative_minimumProxy(this));
            }
            if ((attribute == "CUMULATIVE_MAXIMUM"))
            {
                return Observable.Box(new Cumulative_maximumProxy(this));
            }
            if ((attribute == "MINIMUM"))
            {
                return Observable.Box(new MinimumProxy(this));
            }
            if ((attribute == "CURRENT_AVERAGE"))
            {
                return Observable.Box(new Current_averageProxy(this));
            }
            if ((attribute == "LAST_AVERAGE"))
            {
                return Observable.Box(new Last_averageProxy(this));
            }
            if ((attribute == "MAXIMUM"))
            {
                return Observable.Box(new MaximumProxy(this));
            }
            if ((attribute == "INSTANTANEOUS_VALUE"))
            {
                return Observable.Box(new Instantaneous_valueProxy(this));
            }
            if ((attribute == "TIME_INTEGRAL"))
            {
                return Observable.Box(new Time_integralProxy(this));
            }
            if ((attribute == "UNDER_LIMIT_THRESHOLD"))
            {
                return Observable.Box(new Under_limit_thresholdProxy(this));
            }
            if ((attribute == "UNDER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return Observable.Box(new Under_limit_occurrence_counterProxy(this));
            }
            if ((attribute == "UNDER_LIMIT_DURATION"))
            {
                return Observable.Box(new Under_limit_durationProxy(this));
            }
            if ((attribute == "UNDER_LIMIT_MAGNITUDE"))
            {
                return Observable.Box(new Under_limit_magnitudeProxy(this));
            }
            if ((attribute == "OVER_LIMIT_THRESHOLD"))
            {
                return Observable.Box(new Over_limit_thresholdProxy(this));
            }
            if ((attribute == "OVER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return Observable.Box(new Over_limit_occurrence_counterProxy(this));
            }
            if ((attribute == "OVER_LIMIT_DURATION"))
            {
                return Observable.Box(new Over_limit_durationProxy(this));
            }
            if ((attribute == "OVER_LIMIT_MAGNITUDE"))
            {
                return Observable.Box(new Over_limit_magnitudeProxy(this));
            }
            if ((attribute == "MISSING_THRESHOLD"))
            {
                return Observable.Box(new Missing_thresholdProxy(this));
            }
            if ((attribute == "MISSING_OCCURRENCE_COUNTER"))
            {
                return Observable.Box(new Missing_occurrence_counterProxy(this));
            }
            if ((attribute == "MISSING_DURATION"))
            {
                return Observable.Box(new Missing_durationProxy(this));
            }
            if ((attribute == "MISSING_MAGNITUDE"))
            {
                return Observable.Box(new Missing_magnitudeProxy(this));
            }
            if ((attribute == "TIME_THRESHOLD_FOR_UNDER_LIMIT"))
            {
                return new Time_threshold_for_under_limitProxy(this);
            }
            if ((attribute == "TIME_THRESHOLD_FOR_OVER_LIMIT"))
            {
                return new Time_threshold_for_over_limitProxy(this);
            }
            if ((attribute == "TIME_THRESHOLD_FOR_MISSING_MAGNITUDE"))
            {
                return new Time_threshold_for_missing_magnitudeProxy(this);
            }
            if ((attribute == "CONTRACTED_VALUE"))
            {
                return Observable.Box(new Contracted_valueProxy(this));
            }
            if ((attribute == "MINIMUM_FOR_RECORDING_INTERVAL"))
            {
                return Observable.Box(new Minimum_for_recording_intervalProxy(this));
            }
            if ((attribute == "MAXIMUM_FOR_RECORDING_INTERVAL"))
            {
                return Observable.Box(new Maximum_for_recording_intervalProxy(this));
            }
            if ((attribute == "TEST_AVERAGE"))
            {
                return Observable.Box(new Test_averageProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CALCULATIONS"))
            {
                return new CalculationsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/MeasurementValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeasurementValues class
        /// </summary>
        public class MeasurementValuesReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeasurementValues _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeasurementValuesReferencedElementsCollection(MeasurementValues parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Calculations != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.CalculationsChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.CalculationsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Calculations == null))
                {
                    IElectricityValues calculationsCasted = item.As<IElectricityValues>();
                    if ((calculationsCasted != null))
                    {
                        this._parent.Calculations = calculationsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Calculations = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Calculations))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Calculations != null))
                {
                    array[arrayIndex] = this._parent.Calculations;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Calculations == item))
                {
                    this._parent.Calculations = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Calculations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billing_period_average property
        /// </summary>
        private sealed class Billing_period_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Billing_period_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Billing_period_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Billing_period_average;
                }
                set
                {
                    this.ModelElement.Billing_period_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Cumulative_minimum property
        /// </summary>
        private sealed class Cumulative_minimumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Cumulative_minimumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Cumulative_minimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Cumulative_minimum;
                }
                set
                {
                    this.ModelElement.Cumulative_minimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Cumulative_maximum property
        /// </summary>
        private sealed class Cumulative_maximumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Cumulative_maximumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Cumulative_maximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Cumulative_maximum;
                }
                set
                {
                    this.ModelElement.Cumulative_maximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Minimum property
        /// </summary>
        private sealed class MinimumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Minimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Minimum;
                }
                set
                {
                    this.ModelElement.Minimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Current_average property
        /// </summary>
        private sealed class Current_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Current_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Current_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Current_average;
                }
                set
                {
                    this.ModelElement.Current_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Last_average property
        /// </summary>
        private sealed class Last_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Last_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Last_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Last_average;
                }
                set
                {
                    this.ModelElement.Last_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Maximum property
        /// </summary>
        private sealed class MaximumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Maximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Maximum;
                }
                set
                {
                    this.ModelElement.Maximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Instantaneous_value property
        /// </summary>
        private sealed class Instantaneous_valueProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Instantaneous_valueProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Instantaneous_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Instantaneous_value;
                }
                set
                {
                    this.ModelElement.Instantaneous_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_integral property
        /// </summary>
        private sealed class Time_integralProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_integralProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_integral")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Time_integral;
                }
                set
                {
                    this.ModelElement.Time_integral = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_threshold property
        /// </summary>
        private sealed class Under_limit_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_threshold;
                }
                set
                {
                    this.ModelElement.Under_limit_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_occurrence_counter property
        /// </summary>
        private sealed class Under_limit_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Under_limit_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_duration property
        /// </summary>
        private sealed class Under_limit_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_duration;
                }
                set
                {
                    this.ModelElement.Under_limit_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_magnitude property
        /// </summary>
        private sealed class Under_limit_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_magnitude;
                }
                set
                {
                    this.ModelElement.Under_limit_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_threshold property
        /// </summary>
        private sealed class Over_limit_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_threshold;
                }
                set
                {
                    this.ModelElement.Over_limit_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_occurrence_counter property
        /// </summary>
        private sealed class Over_limit_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Over_limit_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_duration property
        /// </summary>
        private sealed class Over_limit_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_duration;
                }
                set
                {
                    this.ModelElement.Over_limit_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_magnitude property
        /// </summary>
        private sealed class Over_limit_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_magnitude;
                }
                set
                {
                    this.ModelElement.Over_limit_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_threshold property
        /// </summary>
        private sealed class Missing_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_threshold;
                }
                set
                {
                    this.ModelElement.Missing_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_occurrence_counter property
        /// </summary>
        private sealed class Missing_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Missing_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_duration property
        /// </summary>
        private sealed class Missing_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_duration;
                }
                set
                {
                    this.ModelElement.Missing_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_magnitude property
        /// </summary>
        private sealed class Missing_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_magnitude;
                }
                set
                {
                    this.ModelElement.Missing_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_under_limit property
        /// </summary>
        private sealed class Time_threshold_for_under_limitProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_under_limitProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_under_limit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_under_limit;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_under_limit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_over_limit property
        /// </summary>
        private sealed class Time_threshold_for_over_limitProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_over_limitProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_over_limit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_over_limit;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_over_limit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_missing_magnitude property
        /// </summary>
        private sealed class Time_threshold_for_missing_magnitudeProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_missing_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_missing_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_missing_magnitude;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_missing_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Contracted_value property
        /// </summary>
        private sealed class Contracted_valueProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Contracted_valueProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Contracted_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Contracted_value;
                }
                set
                {
                    this.ModelElement.Contracted_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Minimum_for_recording_interval property
        /// </summary>
        private sealed class Minimum_for_recording_intervalProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Minimum_for_recording_intervalProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Minimum_for_recording_interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Minimum_for_recording_interval;
                }
                set
                {
                    this.ModelElement.Minimum_for_recording_interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Maximum_for_recording_interval property
        /// </summary>
        private sealed class Maximum_for_recording_intervalProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Maximum_for_recording_intervalProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Maximum_for_recording_interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Maximum_for_recording_interval;
                }
                set
                {
                    this.ModelElement.Maximum_for_recording_interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Test_average property
        /// </summary>
        private sealed class Test_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Test_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Test_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Test_average;
                }
                set
                {
                    this.ModelElement.Test_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the calculations property
        /// </summary>
        private sealed class CalculationsProxy : ModelPropertyChange<IMeasurementValues, IElectricityValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CalculationsProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "calculations")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityValues Value
            {
                get
                {
                    return this.ModelElement.Calculations;
                }
                set
                {
                    this.ModelElement.Calculations = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ElectricityHarmonics class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityHarmonics")]
    public partial class ElectricityHarmonics : Data, IElectricityHarmonics, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Total property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _total;
        
        private static Lazy<ITypedElement> _totalAttribute = new Lazy<ITypedElement>(RetrieveTotalAttribute);
        
        /// <summary>
        /// The backing field for the Fundamental_harmonic property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fundamental_harmonic;
        
        private static Lazy<ITypedElement> _fundamental_harmonicAttribute = new Lazy<ITypedElement>(RetrieveFundamental_harmonicAttribute);
        
        /// <summary>
        /// The backing field for the Harmonic property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _harmonic;
        
        private static Lazy<ITypedElement> _harmonicAttribute = new Lazy<ITypedElement>(RetrieveHarmonicAttribute);
        
        /// <summary>
        /// The backing field for the Total_Harmoni_Distortion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _total_Harmoni_Distortion;
        
        private static Lazy<ITypedElement> _total_Harmoni_DistortionAttribute = new Lazy<ITypedElement>(RetrieveTotal_Harmoni_DistortionAttribute);
        
        /// <summary>
        /// The backing field for the Total_Demand_Distortion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _total_Demand_Distortion;
        
        private static Lazy<ITypedElement> _total_Demand_DistortionAttribute = new Lazy<ITypedElement>(RetrieveTotal_Demand_DistortionAttribute);
        
        /// <summary>
        /// The backing field for the All_harmonics property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _all_harmonics;
        
        private static Lazy<ITypedElement> _all_harmonicsAttribute = new Lazy<ITypedElement>(RetrieveAll_harmonicsAttribute);
        
        /// <summary>
        /// The backing field for the All_harmonics_to_nominal_value_ratio property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _all_harmonics_to_nominal_value_ratio;
        
        private static Lazy<ITypedElement> _all_harmonics_to_nominal_value_ratioAttribute = new Lazy<ITypedElement>(RetrieveAll_harmonics_to_nominal_value_ratioAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The total property
        /// </summary>
        [DisplayNameAttribute("total")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("total")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    Nullable<double> old = this._total;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalChanging(e);
                    this.OnPropertyChanging("Total", e, _totalAttribute);
                    this._total = value;
                    this.OnTotalChanged(e);
                    this.OnPropertyChanged("Total", e, _totalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fundamental_harmonic property
        /// </summary>
        [DisplayNameAttribute("fundamental_harmonic")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("fundamental_harmonic")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Fundamental_harmonic
        {
            get
            {
                return this._fundamental_harmonic;
            }
            set
            {
                if ((this._fundamental_harmonic != value))
                {
                    Nullable<double> old = this._fundamental_harmonic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFundamental_harmonicChanging(e);
                    this.OnPropertyChanging("Fundamental_harmonic", e, _fundamental_harmonicAttribute);
                    this._fundamental_harmonic = value;
                    this.OnFundamental_harmonicChanged(e);
                    this.OnPropertyChanged("Fundamental_harmonic", e, _fundamental_harmonicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The harmonic property
        /// </summary>
        [DisplayNameAttribute("harmonic")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("harmonic")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Harmonic
        {
            get
            {
                return this._harmonic;
            }
            set
            {
                if ((this._harmonic != value))
                {
                    Nullable<double> old = this._harmonic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHarmonicChanging(e);
                    this.OnPropertyChanging("Harmonic", e, _harmonicAttribute);
                    this._harmonic = value;
                    this.OnHarmonicChanged(e);
                    this.OnPropertyChanged("Harmonic", e, _harmonicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_Harmoni_Distortion property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Total_Harmoni_Distortion
        {
            get
            {
                return this._total_Harmoni_Distortion;
            }
            set
            {
                if ((this._total_Harmoni_Distortion != value))
                {
                    Nullable<double> old = this._total_Harmoni_Distortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_Harmoni_DistortionChanging(e);
                    this.OnPropertyChanging("Total_Harmoni_Distortion", e, _total_Harmoni_DistortionAttribute);
                    this._total_Harmoni_Distortion = value;
                    this.OnTotal_Harmoni_DistortionChanged(e);
                    this.OnPropertyChanged("Total_Harmoni_Distortion", e, _total_Harmoni_DistortionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_Demand_Distortion property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Total_Demand_Distortion
        {
            get
            {
                return this._total_Demand_Distortion;
            }
            set
            {
                if ((this._total_Demand_Distortion != value))
                {
                    Nullable<double> old = this._total_Demand_Distortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_Demand_DistortionChanging(e);
                    this.OnPropertyChanging("Total_Demand_Distortion", e, _total_Demand_DistortionAttribute);
                    this._total_Demand_Distortion = value;
                    this.OnTotal_Demand_DistortionChanged(e);
                    this.OnPropertyChanged("Total_Demand_Distortion", e, _total_Demand_DistortionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The All_harmonics property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> All_harmonics
        {
            get
            {
                return this._all_harmonics;
            }
            set
            {
                if ((this._all_harmonics != value))
                {
                    Nullable<double> old = this._all_harmonics;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAll_harmonicsChanging(e);
                    this.OnPropertyChanging("All_harmonics", e, _all_harmonicsAttribute);
                    this._all_harmonics = value;
                    this.OnAll_harmonicsChanged(e);
                    this.OnPropertyChanged("All_harmonics", e, _all_harmonicsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The All_harmonics_to_nominal_value_ratio property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> All_harmonics_to_nominal_value_ratio
        {
            get
            {
                return this._all_harmonics_to_nominal_value_ratio;
            }
            set
            {
                if ((this._all_harmonics_to_nominal_value_ratio != value))
                {
                    Nullable<double> old = this._all_harmonics_to_nominal_value_ratio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAll_harmonics_to_nominal_value_ratioChanging(e);
                    this.OnPropertyChanging("All_harmonics_to_nominal_value_ratio", e, _all_harmonics_to_nominal_value_ratioAttribute);
                    this._all_harmonics_to_nominal_value_ratio = value;
                    this.OnAll_harmonics_to_nominal_value_ratioChanged(e);
                    this.OnPropertyChanged("All_harmonics_to_nominal_value_ratio", e, _all_harmonics_to_nominal_value_ratioAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityHarmonics")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Total property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TotalChanged;
        
        /// <summary>
        /// Gets fired before the Total property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TotalChanging;
        
        /// <summary>
        /// Gets fired when the Fundamental_harmonic property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanged;
        
        /// <summary>
        /// Gets fired before the Fundamental_harmonic property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanging;
        
        /// <summary>
        /// Gets fired when the Harmonic property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicChanged;
        
        /// <summary>
        /// Gets fired before the Harmonic property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> HarmonicChanging;
        
        /// <summary>
        /// Gets fired when the Total_Harmoni_Distortion property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the Total_Harmoni_Distortion property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the Total_Demand_Distortion property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the Total_Demand_Distortion property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> All_harmonicsChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> All_harmonicsChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics_to_nominal_value_ratio property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics_to_nominal_value_ratio property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanging;
        
        private static ITypedElement RetrieveTotalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("total")));
        }
        
        /// <summary>
        /// Raises the TotalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TotalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TotalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFundamental_harmonicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("fundamental_harmonic")));
        }
        
        /// <summary>
        /// Raises the Fundamental_harmonicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFundamental_harmonicChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Fundamental_harmonicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Fundamental_harmonicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFundamental_harmonicChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Fundamental_harmonicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHarmonicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("harmonic")));
        }
        
        /// <summary>
        /// Raises the HarmonicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HarmonicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.HarmonicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_Harmoni_DistortionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("Total_Harmoni_Distortion")));
        }
        
        /// <summary>
        /// Raises the Total_Harmoni_DistortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Harmoni_DistortionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_Harmoni_DistortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_Harmoni_DistortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Harmoni_DistortionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_Harmoni_DistortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_Demand_DistortionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("Total_Demand_Distortion")));
        }
        
        /// <summary>
        /// Raises the Total_Demand_DistortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Demand_DistortionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_Demand_DistortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_Demand_DistortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Demand_DistortionChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_Demand_DistortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAll_harmonicsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("All_harmonics")));
        }
        
        /// <summary>
        /// Raises the All_harmonicsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonicsChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.All_harmonicsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the All_harmonicsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonicsChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.All_harmonicsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAll_harmonics_to_nominal_value_ratioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ElectricityHarmonics.ClassInstance)).Resolve("All_harmonics_to_nominal_value_ratio")));
        }
        
        /// <summary>
        /// Raises the All_harmonics_to_nominal_value_ratioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonics_to_nominal_value_ratioChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.All_harmonics_to_nominal_value_ratioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the All_harmonics_to_nominal_value_ratioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonics_to_nominal_value_ratioChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.All_harmonics_to_nominal_value_ratioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TOTAL"))
            {
                return this.Total;
            }
            if ((attribute == "FUNDAMENTAL_HARMONIC"))
            {
                return this.Fundamental_harmonic;
            }
            if ((attribute == "HARMONIC"))
            {
                return this.Harmonic;
            }
            if ((attribute == "TOTAL_HARMONI_DISTORTION"))
            {
                return this.Total_Harmoni_Distortion;
            }
            if ((attribute == "TOTAL_DEMAND_DISTORTION"))
            {
                return this.Total_Demand_Distortion;
            }
            if ((attribute == "ALL_HARMONICS"))
            {
                return this.All_harmonics;
            }
            if ((attribute == "ALL_HARMONICS_TO_NOMINAL_VALUE_RATIO"))
            {
                return this.All_harmonics_to_nominal_value_ratio;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOTAL"))
            {
                this.Total = ((double)(value));
                return;
            }
            if ((feature == "FUNDAMENTAL_HARMONIC"))
            {
                this.Fundamental_harmonic = ((double)(value));
                return;
            }
            if ((feature == "HARMONIC"))
            {
                this.Harmonic = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_HARMONI_DISTORTION"))
            {
                this.Total_Harmoni_Distortion = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_DEMAND_DISTORTION"))
            {
                this.Total_Demand_Distortion = ((double)(value));
                return;
            }
            if ((feature == "ALL_HARMONICS"))
            {
                this.All_harmonics = ((double)(value));
                return;
            }
            if ((feature == "ALL_HARMONICS_TO_NOMINAL_VALUE_RATIO"))
            {
                this.All_harmonics_to_nominal_value_ratio = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TOTAL"))
            {
                return Observable.Box(new TotalProxy(this));
            }
            if ((attribute == "FUNDAMENTAL_HARMONIC"))
            {
                return Observable.Box(new Fundamental_harmonicProxy(this));
            }
            if ((attribute == "HARMONIC"))
            {
                return Observable.Box(new HarmonicProxy(this));
            }
            if ((attribute == "TOTAL_HARMONI_DISTORTION"))
            {
                return Observable.Box(new Total_Harmoni_DistortionProxy(this));
            }
            if ((attribute == "TOTAL_DEMAND_DISTORTION"))
            {
                return Observable.Box(new Total_Demand_DistortionProxy(this));
            }
            if ((attribute == "ALL_HARMONICS"))
            {
                return Observable.Box(new All_harmonicsProxy(this));
            }
            if ((attribute == "ALL_HARMONICS_TO_NOMINAL_VALUE_RATIO"))
            {
                return Observable.Box(new All_harmonics_to_nominal_value_ratioProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ElectricityHarmonics")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the total property
        /// </summary>
        private sealed class TotalProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "total")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total;
                }
                set
                {
                    this.ModelElement.Total = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fundamental_harmonic property
        /// </summary>
        private sealed class Fundamental_harmonicProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Fundamental_harmonicProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "fundamental_harmonic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Fundamental_harmonic;
                }
                set
                {
                    this.ModelElement.Fundamental_harmonic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the harmonic property
        /// </summary>
        private sealed class HarmonicProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HarmonicProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "harmonic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Harmonic;
                }
                set
                {
                    this.ModelElement.Harmonic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_Harmoni_Distortion property
        /// </summary>
        private sealed class Total_Harmoni_DistortionProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_Harmoni_DistortionProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "Total_Harmoni_Distortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_Harmoni_Distortion;
                }
                set
                {
                    this.ModelElement.Total_Harmoni_Distortion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_Demand_Distortion property
        /// </summary>
        private sealed class Total_Demand_DistortionProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_Demand_DistortionProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "Total_Demand_Distortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_Demand_Distortion;
                }
                set
                {
                    this.ModelElement.Total_Demand_Distortion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the All_harmonics property
        /// </summary>
        private sealed class All_harmonicsProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public All_harmonicsProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "All_harmonics")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.All_harmonics;
                }
                set
                {
                    this.ModelElement.All_harmonics = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the All_harmonics_to_nominal_value_ratio property
        /// </summary>
        private sealed class All_harmonics_to_nominal_value_ratioProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public All_harmonics_to_nominal_value_ratioProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "All_harmonics_to_nominal_value_ratio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.All_harmonics_to_nominal_value_ratio;
                }
                set
                {
                    this.ModelElement.All_harmonics_to_nominal_value_ratio = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ExtendedPhaseAngleMeasurement class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ExtendedPhaseAngleMeasurement")]
    public partial class ExtendedPhaseAngleMeasurement : Data, IExtendedPhaseAngleMeasurement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FromUL1toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toUL2;
        
        private static Lazy<ITypedElement> _fromUL1toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toUL3;
        
        private static Lazy<ITypedElement> _fromUL1toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toIL1;
        
        private static Lazy<ITypedElement> _fromUL1toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toIL2;
        
        private static Lazy<ITypedElement> _fromUL1toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toIL3;
        
        private static Lazy<ITypedElement> _fromUL1toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL1toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL1toIL0;
        
        private static Lazy<ITypedElement> _fromUL1toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL1toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toUL1;
        
        private static Lazy<ITypedElement> _fromUL2toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toUL3;
        
        private static Lazy<ITypedElement> _fromUL2toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toIL1;
        
        private static Lazy<ITypedElement> _fromUL2toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toIL2;
        
        private static Lazy<ITypedElement> _fromUL2toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toIL3;
        
        private static Lazy<ITypedElement> _fromUL2toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL2toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL2toIL0;
        
        private static Lazy<ITypedElement> _fromUL2toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL2toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toUL1;
        
        private static Lazy<ITypedElement> _fromUL3toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toUL2;
        
        private static Lazy<ITypedElement> _fromUL3toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toIL1;
        
        private static Lazy<ITypedElement> _fromUL3toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toIL2;
        
        private static Lazy<ITypedElement> _fromUL3toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toIL3;
        
        private static Lazy<ITypedElement> _fromUL3toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromUL3toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromUL3toIL0;
        
        private static Lazy<ITypedElement> _fromUL3toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromUL3toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toUL1;
        
        private static Lazy<ITypedElement> _fromIL1toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toUL2;
        
        private static Lazy<ITypedElement> _fromIL1toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toUL3;
        
        private static Lazy<ITypedElement> _fromIL1toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toIL2;
        
        private static Lazy<ITypedElement> _fromIL1toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toIL3;
        
        private static Lazy<ITypedElement> _fromIL1toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL1toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL1toIL0;
        
        private static Lazy<ITypedElement> _fromIL1toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL1toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toUL1;
        
        private static Lazy<ITypedElement> _fromIL2toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toUL2;
        
        private static Lazy<ITypedElement> _fromIL2toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toUL3;
        
        private static Lazy<ITypedElement> _fromIL2toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toIL1;
        
        private static Lazy<ITypedElement> _fromIL2toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toIL3;
        
        private static Lazy<ITypedElement> _fromIL2toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL2toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL2toIL0;
        
        private static Lazy<ITypedElement> _fromIL2toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL2toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toUL1;
        
        private static Lazy<ITypedElement> _fromIL3toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toUL2;
        
        private static Lazy<ITypedElement> _fromIL3toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toUL3;
        
        private static Lazy<ITypedElement> _fromIL3toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toIL1;
        
        private static Lazy<ITypedElement> _fromIL3toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toIL2;
        
        private static Lazy<ITypedElement> _fromIL3toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL3toIL0 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL3toIL0;
        
        private static Lazy<ITypedElement> _fromIL3toIL0Attribute = new Lazy<ITypedElement>(RetrieveFromIL3toIL0Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toUL1;
        
        private static Lazy<ITypedElement> _fromIL0toUL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toUL2;
        
        private static Lazy<ITypedElement> _fromIL0toUL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toUL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toUL3;
        
        private static Lazy<ITypedElement> _fromIL0toUL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toUL3Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL1 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toIL1;
        
        private static Lazy<ITypedElement> _fromIL0toIL1Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL1Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL2 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toIL2;
        
        private static Lazy<ITypedElement> _fromIL0toIL2Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL2Attribute);
        
        /// <summary>
        /// The backing field for the FromIL0toIL3 property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _fromIL0toIL3;
        
        private static Lazy<ITypedElement> _fromIL0toIL3Attribute = new Lazy<ITypedElement>(RetrieveFromIL0toIL3Attribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The FromUL1toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toUL2
        {
            get
            {
                return this._fromUL1toUL2;
            }
            set
            {
                if ((this._fromUL1toUL2 != value))
                {
                    Nullable<double> old = this._fromUL1toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toUL2Changing(e);
                    this.OnPropertyChanging("FromUL1toUL2", e, _fromUL1toUL2Attribute);
                    this._fromUL1toUL2 = value;
                    this.OnFromUL1toUL2Changed(e);
                    this.OnPropertyChanged("FromUL1toUL2", e, _fromUL1toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toUL3
        {
            get
            {
                return this._fromUL1toUL3;
            }
            set
            {
                if ((this._fromUL1toUL3 != value))
                {
                    Nullable<double> old = this._fromUL1toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toUL3Changing(e);
                    this.OnPropertyChanging("FromUL1toUL3", e, _fromUL1toUL3Attribute);
                    this._fromUL1toUL3 = value;
                    this.OnFromUL1toUL3Changed(e);
                    this.OnPropertyChanged("FromUL1toUL3", e, _fromUL1toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toIL1
        {
            get
            {
                return this._fromUL1toIL1;
            }
            set
            {
                if ((this._fromUL1toIL1 != value))
                {
                    Nullable<double> old = this._fromUL1toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL1Changing(e);
                    this.OnPropertyChanging("FromUL1toIL1", e, _fromUL1toIL1Attribute);
                    this._fromUL1toIL1 = value;
                    this.OnFromUL1toIL1Changed(e);
                    this.OnPropertyChanged("FromUL1toIL1", e, _fromUL1toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toIL2
        {
            get
            {
                return this._fromUL1toIL2;
            }
            set
            {
                if ((this._fromUL1toIL2 != value))
                {
                    Nullable<double> old = this._fromUL1toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL2Changing(e);
                    this.OnPropertyChanging("FromUL1toIL2", e, _fromUL1toIL2Attribute);
                    this._fromUL1toIL2 = value;
                    this.OnFromUL1toIL2Changed(e);
                    this.OnPropertyChanged("FromUL1toIL2", e, _fromUL1toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toIL3
        {
            get
            {
                return this._fromUL1toIL3;
            }
            set
            {
                if ((this._fromUL1toIL3 != value))
                {
                    Nullable<double> old = this._fromUL1toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL3Changing(e);
                    this.OnPropertyChanging("FromUL1toIL3", e, _fromUL1toIL3Attribute);
                    this._fromUL1toIL3 = value;
                    this.OnFromUL1toIL3Changed(e);
                    this.OnPropertyChanged("FromUL1toIL3", e, _fromUL1toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL1toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL1toIL0
        {
            get
            {
                return this._fromUL1toIL0;
            }
            set
            {
                if ((this._fromUL1toIL0 != value))
                {
                    Nullable<double> old = this._fromUL1toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL1toIL0Changing(e);
                    this.OnPropertyChanging("FromUL1toIL0", e, _fromUL1toIL0Attribute);
                    this._fromUL1toIL0 = value;
                    this.OnFromUL1toIL0Changed(e);
                    this.OnPropertyChanged("FromUL1toIL0", e, _fromUL1toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toUL1
        {
            get
            {
                return this._fromUL2toUL1;
            }
            set
            {
                if ((this._fromUL2toUL1 != value))
                {
                    Nullable<double> old = this._fromUL2toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toUL1Changing(e);
                    this.OnPropertyChanging("FromUL2toUL1", e, _fromUL2toUL1Attribute);
                    this._fromUL2toUL1 = value;
                    this.OnFromUL2toUL1Changed(e);
                    this.OnPropertyChanged("FromUL2toUL1", e, _fromUL2toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toUL3
        {
            get
            {
                return this._fromUL2toUL3;
            }
            set
            {
                if ((this._fromUL2toUL3 != value))
                {
                    Nullable<double> old = this._fromUL2toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toUL3Changing(e);
                    this.OnPropertyChanging("FromUL2toUL3", e, _fromUL2toUL3Attribute);
                    this._fromUL2toUL3 = value;
                    this.OnFromUL2toUL3Changed(e);
                    this.OnPropertyChanged("FromUL2toUL3", e, _fromUL2toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toIL1
        {
            get
            {
                return this._fromUL2toIL1;
            }
            set
            {
                if ((this._fromUL2toIL1 != value))
                {
                    Nullable<double> old = this._fromUL2toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL1Changing(e);
                    this.OnPropertyChanging("FromUL2toIL1", e, _fromUL2toIL1Attribute);
                    this._fromUL2toIL1 = value;
                    this.OnFromUL2toIL1Changed(e);
                    this.OnPropertyChanged("FromUL2toIL1", e, _fromUL2toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toIL2
        {
            get
            {
                return this._fromUL2toIL2;
            }
            set
            {
                if ((this._fromUL2toIL2 != value))
                {
                    Nullable<double> old = this._fromUL2toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL2Changing(e);
                    this.OnPropertyChanging("FromUL2toIL2", e, _fromUL2toIL2Attribute);
                    this._fromUL2toIL2 = value;
                    this.OnFromUL2toIL2Changed(e);
                    this.OnPropertyChanged("FromUL2toIL2", e, _fromUL2toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toIL3
        {
            get
            {
                return this._fromUL2toIL3;
            }
            set
            {
                if ((this._fromUL2toIL3 != value))
                {
                    Nullable<double> old = this._fromUL2toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL3Changing(e);
                    this.OnPropertyChanging("FromUL2toIL3", e, _fromUL2toIL3Attribute);
                    this._fromUL2toIL3 = value;
                    this.OnFromUL2toIL3Changed(e);
                    this.OnPropertyChanged("FromUL2toIL3", e, _fromUL2toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL2toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL2toIL0
        {
            get
            {
                return this._fromUL2toIL0;
            }
            set
            {
                if ((this._fromUL2toIL0 != value))
                {
                    Nullable<double> old = this._fromUL2toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL2toIL0Changing(e);
                    this.OnPropertyChanging("FromUL2toIL0", e, _fromUL2toIL0Attribute);
                    this._fromUL2toIL0 = value;
                    this.OnFromUL2toIL0Changed(e);
                    this.OnPropertyChanged("FromUL2toIL0", e, _fromUL2toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toUL1
        {
            get
            {
                return this._fromUL3toUL1;
            }
            set
            {
                if ((this._fromUL3toUL1 != value))
                {
                    Nullable<double> old = this._fromUL3toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toUL1Changing(e);
                    this.OnPropertyChanging("FromUL3toUL1", e, _fromUL3toUL1Attribute);
                    this._fromUL3toUL1 = value;
                    this.OnFromUL3toUL1Changed(e);
                    this.OnPropertyChanged("FromUL3toUL1", e, _fromUL3toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toUL2
        {
            get
            {
                return this._fromUL3toUL2;
            }
            set
            {
                if ((this._fromUL3toUL2 != value))
                {
                    Nullable<double> old = this._fromUL3toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toUL2Changing(e);
                    this.OnPropertyChanging("FromUL3toUL2", e, _fromUL3toUL2Attribute);
                    this._fromUL3toUL2 = value;
                    this.OnFromUL3toUL2Changed(e);
                    this.OnPropertyChanged("FromUL3toUL2", e, _fromUL3toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toIL1
        {
            get
            {
                return this._fromUL3toIL1;
            }
            set
            {
                if ((this._fromUL3toIL1 != value))
                {
                    Nullable<double> old = this._fromUL3toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL1Changing(e);
                    this.OnPropertyChanging("FromUL3toIL1", e, _fromUL3toIL1Attribute);
                    this._fromUL3toIL1 = value;
                    this.OnFromUL3toIL1Changed(e);
                    this.OnPropertyChanged("FromUL3toIL1", e, _fromUL3toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toIL2
        {
            get
            {
                return this._fromUL3toIL2;
            }
            set
            {
                if ((this._fromUL3toIL2 != value))
                {
                    Nullable<double> old = this._fromUL3toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL2Changing(e);
                    this.OnPropertyChanging("FromUL3toIL2", e, _fromUL3toIL2Attribute);
                    this._fromUL3toIL2 = value;
                    this.OnFromUL3toIL2Changed(e);
                    this.OnPropertyChanged("FromUL3toIL2", e, _fromUL3toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toIL3
        {
            get
            {
                return this._fromUL3toIL3;
            }
            set
            {
                if ((this._fromUL3toIL3 != value))
                {
                    Nullable<double> old = this._fromUL3toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL3Changing(e);
                    this.OnPropertyChanging("FromUL3toIL3", e, _fromUL3toIL3Attribute);
                    this._fromUL3toIL3 = value;
                    this.OnFromUL3toIL3Changed(e);
                    this.OnPropertyChanged("FromUL3toIL3", e, _fromUL3toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromUL3toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromUL3toIL0
        {
            get
            {
                return this._fromUL3toIL0;
            }
            set
            {
                if ((this._fromUL3toIL0 != value))
                {
                    Nullable<double> old = this._fromUL3toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromUL3toIL0Changing(e);
                    this.OnPropertyChanging("FromUL3toIL0", e, _fromUL3toIL0Attribute);
                    this._fromUL3toIL0 = value;
                    this.OnFromUL3toIL0Changed(e);
                    this.OnPropertyChanged("FromUL3toIL0", e, _fromUL3toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toUL1
        {
            get
            {
                return this._fromIL1toUL1;
            }
            set
            {
                if ((this._fromIL1toUL1 != value))
                {
                    Nullable<double> old = this._fromIL1toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL1Changing(e);
                    this.OnPropertyChanging("FromIL1toUL1", e, _fromIL1toUL1Attribute);
                    this._fromIL1toUL1 = value;
                    this.OnFromIL1toUL1Changed(e);
                    this.OnPropertyChanged("FromIL1toUL1", e, _fromIL1toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toUL2
        {
            get
            {
                return this._fromIL1toUL2;
            }
            set
            {
                if ((this._fromIL1toUL2 != value))
                {
                    Nullable<double> old = this._fromIL1toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL2Changing(e);
                    this.OnPropertyChanging("FromIL1toUL2", e, _fromIL1toUL2Attribute);
                    this._fromIL1toUL2 = value;
                    this.OnFromIL1toUL2Changed(e);
                    this.OnPropertyChanged("FromIL1toUL2", e, _fromIL1toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toUL3
        {
            get
            {
                return this._fromIL1toUL3;
            }
            set
            {
                if ((this._fromIL1toUL3 != value))
                {
                    Nullable<double> old = this._fromIL1toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toUL3Changing(e);
                    this.OnPropertyChanging("FromIL1toUL3", e, _fromIL1toUL3Attribute);
                    this._fromIL1toUL3 = value;
                    this.OnFromIL1toUL3Changed(e);
                    this.OnPropertyChanged("FromIL1toUL3", e, _fromIL1toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toIL2
        {
            get
            {
                return this._fromIL1toIL2;
            }
            set
            {
                if ((this._fromIL1toIL2 != value))
                {
                    Nullable<double> old = this._fromIL1toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL2Changing(e);
                    this.OnPropertyChanging("FromIL1toIL2", e, _fromIL1toIL2Attribute);
                    this._fromIL1toIL2 = value;
                    this.OnFromIL1toIL2Changed(e);
                    this.OnPropertyChanged("FromIL1toIL2", e, _fromIL1toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toIL3
        {
            get
            {
                return this._fromIL1toIL3;
            }
            set
            {
                if ((this._fromIL1toIL3 != value))
                {
                    Nullable<double> old = this._fromIL1toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL3Changing(e);
                    this.OnPropertyChanging("FromIL1toIL3", e, _fromIL1toIL3Attribute);
                    this._fromIL1toIL3 = value;
                    this.OnFromIL1toIL3Changed(e);
                    this.OnPropertyChanged("FromIL1toIL3", e, _fromIL1toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL1toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL1toIL0
        {
            get
            {
                return this._fromIL1toIL0;
            }
            set
            {
                if ((this._fromIL1toIL0 != value))
                {
                    Nullable<double> old = this._fromIL1toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL1toIL0Changing(e);
                    this.OnPropertyChanging("FromIL1toIL0", e, _fromIL1toIL0Attribute);
                    this._fromIL1toIL0 = value;
                    this.OnFromIL1toIL0Changed(e);
                    this.OnPropertyChanged("FromIL1toIL0", e, _fromIL1toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toUL1
        {
            get
            {
                return this._fromIL2toUL1;
            }
            set
            {
                if ((this._fromIL2toUL1 != value))
                {
                    Nullable<double> old = this._fromIL2toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL1Changing(e);
                    this.OnPropertyChanging("FromIL2toUL1", e, _fromIL2toUL1Attribute);
                    this._fromIL2toUL1 = value;
                    this.OnFromIL2toUL1Changed(e);
                    this.OnPropertyChanged("FromIL2toUL1", e, _fromIL2toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toUL2
        {
            get
            {
                return this._fromIL2toUL2;
            }
            set
            {
                if ((this._fromIL2toUL2 != value))
                {
                    Nullable<double> old = this._fromIL2toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL2Changing(e);
                    this.OnPropertyChanging("FromIL2toUL2", e, _fromIL2toUL2Attribute);
                    this._fromIL2toUL2 = value;
                    this.OnFromIL2toUL2Changed(e);
                    this.OnPropertyChanged("FromIL2toUL2", e, _fromIL2toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toUL3
        {
            get
            {
                return this._fromIL2toUL3;
            }
            set
            {
                if ((this._fromIL2toUL3 != value))
                {
                    Nullable<double> old = this._fromIL2toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toUL3Changing(e);
                    this.OnPropertyChanging("FromIL2toUL3", e, _fromIL2toUL3Attribute);
                    this._fromIL2toUL3 = value;
                    this.OnFromIL2toUL3Changed(e);
                    this.OnPropertyChanged("FromIL2toUL3", e, _fromIL2toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toIL1
        {
            get
            {
                return this._fromIL2toIL1;
            }
            set
            {
                if ((this._fromIL2toIL1 != value))
                {
                    Nullable<double> old = this._fromIL2toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL1Changing(e);
                    this.OnPropertyChanging("FromIL2toIL1", e, _fromIL2toIL1Attribute);
                    this._fromIL2toIL1 = value;
                    this.OnFromIL2toIL1Changed(e);
                    this.OnPropertyChanged("FromIL2toIL1", e, _fromIL2toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toIL3
        {
            get
            {
                return this._fromIL2toIL3;
            }
            set
            {
                if ((this._fromIL2toIL3 != value))
                {
                    Nullable<double> old = this._fromIL2toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL3Changing(e);
                    this.OnPropertyChanging("FromIL2toIL3", e, _fromIL2toIL3Attribute);
                    this._fromIL2toIL3 = value;
                    this.OnFromIL2toIL3Changed(e);
                    this.OnPropertyChanged("FromIL2toIL3", e, _fromIL2toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL2toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL2toIL0
        {
            get
            {
                return this._fromIL2toIL0;
            }
            set
            {
                if ((this._fromIL2toIL0 != value))
                {
                    Nullable<double> old = this._fromIL2toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL2toIL0Changing(e);
                    this.OnPropertyChanging("FromIL2toIL0", e, _fromIL2toIL0Attribute);
                    this._fromIL2toIL0 = value;
                    this.OnFromIL2toIL0Changed(e);
                    this.OnPropertyChanged("FromIL2toIL0", e, _fromIL2toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toUL1
        {
            get
            {
                return this._fromIL3toUL1;
            }
            set
            {
                if ((this._fromIL3toUL1 != value))
                {
                    Nullable<double> old = this._fromIL3toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL1Changing(e);
                    this.OnPropertyChanging("FromIL3toUL1", e, _fromIL3toUL1Attribute);
                    this._fromIL3toUL1 = value;
                    this.OnFromIL3toUL1Changed(e);
                    this.OnPropertyChanged("FromIL3toUL1", e, _fromIL3toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toUL2
        {
            get
            {
                return this._fromIL3toUL2;
            }
            set
            {
                if ((this._fromIL3toUL2 != value))
                {
                    Nullable<double> old = this._fromIL3toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL2Changing(e);
                    this.OnPropertyChanging("FromIL3toUL2", e, _fromIL3toUL2Attribute);
                    this._fromIL3toUL2 = value;
                    this.OnFromIL3toUL2Changed(e);
                    this.OnPropertyChanged("FromIL3toUL2", e, _fromIL3toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toUL3
        {
            get
            {
                return this._fromIL3toUL3;
            }
            set
            {
                if ((this._fromIL3toUL3 != value))
                {
                    Nullable<double> old = this._fromIL3toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toUL3Changing(e);
                    this.OnPropertyChanging("FromIL3toUL3", e, _fromIL3toUL3Attribute);
                    this._fromIL3toUL3 = value;
                    this.OnFromIL3toUL3Changed(e);
                    this.OnPropertyChanged("FromIL3toUL3", e, _fromIL3toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toIL1
        {
            get
            {
                return this._fromIL3toIL1;
            }
            set
            {
                if ((this._fromIL3toIL1 != value))
                {
                    Nullable<double> old = this._fromIL3toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL1Changing(e);
                    this.OnPropertyChanging("FromIL3toIL1", e, _fromIL3toIL1Attribute);
                    this._fromIL3toIL1 = value;
                    this.OnFromIL3toIL1Changed(e);
                    this.OnPropertyChanged("FromIL3toIL1", e, _fromIL3toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toIL2
        {
            get
            {
                return this._fromIL3toIL2;
            }
            set
            {
                if ((this._fromIL3toIL2 != value))
                {
                    Nullable<double> old = this._fromIL3toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL2Changing(e);
                    this.OnPropertyChanging("FromIL3toIL2", e, _fromIL3toIL2Attribute);
                    this._fromIL3toIL2 = value;
                    this.OnFromIL3toIL2Changed(e);
                    this.OnPropertyChanged("FromIL3toIL2", e, _fromIL3toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL3toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL3toIL0
        {
            get
            {
                return this._fromIL3toIL0;
            }
            set
            {
                if ((this._fromIL3toIL0 != value))
                {
                    Nullable<double> old = this._fromIL3toIL0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL3toIL0Changing(e);
                    this.OnPropertyChanging("FromIL3toIL0", e, _fromIL3toIL0Attribute);
                    this._fromIL3toIL0 = value;
                    this.OnFromIL3toIL0Changed(e);
                    this.OnPropertyChanged("FromIL3toIL0", e, _fromIL3toIL0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toUL1
        {
            get
            {
                return this._fromIL0toUL1;
            }
            set
            {
                if ((this._fromIL0toUL1 != value))
                {
                    Nullable<double> old = this._fromIL0toUL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL1Changing(e);
                    this.OnPropertyChanging("FromIL0toUL1", e, _fromIL0toUL1Attribute);
                    this._fromIL0toUL1 = value;
                    this.OnFromIL0toUL1Changed(e);
                    this.OnPropertyChanged("FromIL0toUL1", e, _fromIL0toUL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toUL2
        {
            get
            {
                return this._fromIL0toUL2;
            }
            set
            {
                if ((this._fromIL0toUL2 != value))
                {
                    Nullable<double> old = this._fromIL0toUL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL2Changing(e);
                    this.OnPropertyChanging("FromIL0toUL2", e, _fromIL0toUL2Attribute);
                    this._fromIL0toUL2 = value;
                    this.OnFromIL0toUL2Changed(e);
                    this.OnPropertyChanged("FromIL0toUL2", e, _fromIL0toUL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toUL3
        {
            get
            {
                return this._fromIL0toUL3;
            }
            set
            {
                if ((this._fromIL0toUL3 != value))
                {
                    Nullable<double> old = this._fromIL0toUL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toUL3Changing(e);
                    this.OnPropertyChanging("FromIL0toUL3", e, _fromIL0toUL3Attribute);
                    this._fromIL0toUL3 = value;
                    this.OnFromIL0toUL3Changed(e);
                    this.OnPropertyChanged("FromIL0toUL3", e, _fromIL0toUL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toIL1
        {
            get
            {
                return this._fromIL0toIL1;
            }
            set
            {
                if ((this._fromIL0toIL1 != value))
                {
                    Nullable<double> old = this._fromIL0toIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL1Changing(e);
                    this.OnPropertyChanging("FromIL0toIL1", e, _fromIL0toIL1Attribute);
                    this._fromIL0toIL1 = value;
                    this.OnFromIL0toIL1Changed(e);
                    this.OnPropertyChanged("FromIL0toIL1", e, _fromIL0toIL1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toIL2
        {
            get
            {
                return this._fromIL0toIL2;
            }
            set
            {
                if ((this._fromIL0toIL2 != value))
                {
                    Nullable<double> old = this._fromIL0toIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL2Changing(e);
                    this.OnPropertyChanging("FromIL0toIL2", e, _fromIL0toIL2Attribute);
                    this._fromIL0toIL2 = value;
                    this.OnFromIL0toIL2Changed(e);
                    this.OnPropertyChanged("FromIL0toIL2", e, _fromIL0toIL2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The FromIL0toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> FromIL0toIL3
        {
            get
            {
                return this._fromIL0toIL3;
            }
            set
            {
                if ((this._fromIL0toIL3 != value))
                {
                    Nullable<double> old = this._fromIL0toIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromIL0toIL3Changing(e);
                    this.OnPropertyChanging("FromIL0toIL3", e, _fromIL0toIL3Attribute);
                    this._fromIL0toIL3 = value;
                    this.OnFromIL0toIL3Changed(e);
                    this.OnPropertyChanged("FromIL0toIL3", e, _fromIL0toIL3Attribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ExtendedPhaseAngleMeasurement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the FromUL1toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromUL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL0 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL0 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL1 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL1 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL2 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL2 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL3 property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL3 property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FromIL0toIL3Changing;
        
        private static ITypedElement RetrieveFromUL1toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toUL2")));
        }
        
        /// <summary>
        /// Raises the FromUL1toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toUL3")));
        }
        
        /// <summary>
        /// Raises the FromUL1toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL1toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL1toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL1toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL1toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL1toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL1toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toUL1")));
        }
        
        /// <summary>
        /// Raises the FromUL2toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toUL3")));
        }
        
        /// <summary>
        /// Raises the FromUL2toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL2toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL2toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL2toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL2toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL2toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL2toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toUL1")));
        }
        
        /// <summary>
        /// Raises the FromUL3toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toUL2")));
        }
        
        /// <summary>
        /// Raises the FromUL3toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL1")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL2")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL3")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromUL3toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromUL3toIL0")));
        }
        
        /// <summary>
        /// Raises the FromUL3toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromUL3toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromUL3toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromUL3toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL1toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL1toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL1toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL1toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL1toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL1toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL1toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL2toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL2toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL2toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL2toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL2toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL2toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL2toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL3toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL3toIL0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL3toIL0")));
        }
        
        /// <summary>
        /// Raises the FromIL3toIL0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL0Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL3toIL0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL3toIL0Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL3toIL0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL1")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL2")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toUL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toUL3")));
        }
        
        /// <summary>
        /// Raises the FromIL0toUL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toUL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toUL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toUL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL1")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL1Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL1Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL2")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL2Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL2Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromIL0toIL3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.ExtendedPhaseAngleMeasurement.ClassInstance)).Resolve("FromIL0toIL3")));
        }
        
        /// <summary>
        /// Raises the FromIL0toIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL3Changed(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromIL0toIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromIL0toIL3Changing(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FromIL0toIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FROMUL1TOUL2"))
            {
                return this.FromUL1toUL2;
            }
            if ((attribute == "FROMUL1TOUL3"))
            {
                return this.FromUL1toUL3;
            }
            if ((attribute == "FROMUL1TOIL1"))
            {
                return this.FromUL1toIL1;
            }
            if ((attribute == "FROMUL1TOIL2"))
            {
                return this.FromUL1toIL2;
            }
            if ((attribute == "FROMUL1TOIL3"))
            {
                return this.FromUL1toIL3;
            }
            if ((attribute == "FROMUL1TOIL0"))
            {
                return this.FromUL1toIL0;
            }
            if ((attribute == "FROMUL2TOUL1"))
            {
                return this.FromUL2toUL1;
            }
            if ((attribute == "FROMUL2TOUL3"))
            {
                return this.FromUL2toUL3;
            }
            if ((attribute == "FROMUL2TOIL1"))
            {
                return this.FromUL2toIL1;
            }
            if ((attribute == "FROMUL2TOIL2"))
            {
                return this.FromUL2toIL2;
            }
            if ((attribute == "FROMUL2TOIL3"))
            {
                return this.FromUL2toIL3;
            }
            if ((attribute == "FROMUL2TOIL0"))
            {
                return this.FromUL2toIL0;
            }
            if ((attribute == "FROMUL3TOUL1"))
            {
                return this.FromUL3toUL1;
            }
            if ((attribute == "FROMUL3TOUL2"))
            {
                return this.FromUL3toUL2;
            }
            if ((attribute == "FROMUL3TOIL1"))
            {
                return this.FromUL3toIL1;
            }
            if ((attribute == "FROMUL3TOIL2"))
            {
                return this.FromUL3toIL2;
            }
            if ((attribute == "FROMUL3TOIL3"))
            {
                return this.FromUL3toIL3;
            }
            if ((attribute == "FROMUL3TOIL0"))
            {
                return this.FromUL3toIL0;
            }
            if ((attribute == "FROMIL1TOUL1"))
            {
                return this.FromIL1toUL1;
            }
            if ((attribute == "FROMIL1TOUL2"))
            {
                return this.FromIL1toUL2;
            }
            if ((attribute == "FROMIL1TOUL3"))
            {
                return this.FromIL1toUL3;
            }
            if ((attribute == "FROMIL1TOIL2"))
            {
                return this.FromIL1toIL2;
            }
            if ((attribute == "FROMIL1TOIL3"))
            {
                return this.FromIL1toIL3;
            }
            if ((attribute == "FROMIL1TOIL0"))
            {
                return this.FromIL1toIL0;
            }
            if ((attribute == "FROMIL2TOUL1"))
            {
                return this.FromIL2toUL1;
            }
            if ((attribute == "FROMIL2TOUL2"))
            {
                return this.FromIL2toUL2;
            }
            if ((attribute == "FROMIL2TOUL3"))
            {
                return this.FromIL2toUL3;
            }
            if ((attribute == "FROMIL2TOIL1"))
            {
                return this.FromIL2toIL1;
            }
            if ((attribute == "FROMIL2TOIL3"))
            {
                return this.FromIL2toIL3;
            }
            if ((attribute == "FROMIL2TOIL0"))
            {
                return this.FromIL2toIL0;
            }
            if ((attribute == "FROMIL3TOUL1"))
            {
                return this.FromIL3toUL1;
            }
            if ((attribute == "FROMIL3TOUL2"))
            {
                return this.FromIL3toUL2;
            }
            if ((attribute == "FROMIL3TOUL3"))
            {
                return this.FromIL3toUL3;
            }
            if ((attribute == "FROMIL3TOIL1"))
            {
                return this.FromIL3toIL1;
            }
            if ((attribute == "FROMIL3TOIL2"))
            {
                return this.FromIL3toIL2;
            }
            if ((attribute == "FROMIL3TOIL0"))
            {
                return this.FromIL3toIL0;
            }
            if ((attribute == "FROMIL0TOUL1"))
            {
                return this.FromIL0toUL1;
            }
            if ((attribute == "FROMIL0TOUL2"))
            {
                return this.FromIL0toUL2;
            }
            if ((attribute == "FROMIL0TOUL3"))
            {
                return this.FromIL0toUL3;
            }
            if ((attribute == "FROMIL0TOIL1"))
            {
                return this.FromIL0toIL1;
            }
            if ((attribute == "FROMIL0TOIL2"))
            {
                return this.FromIL0toIL2;
            }
            if ((attribute == "FROMIL0TOIL3"))
            {
                return this.FromIL0toIL3;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FROMUL1TOUL2"))
            {
                this.FromUL1toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOUL3"))
            {
                this.FromUL1toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL1"))
            {
                this.FromUL1toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL2"))
            {
                this.FromUL1toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL3"))
            {
                this.FromUL1toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL1TOIL0"))
            {
                this.FromUL1toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOUL1"))
            {
                this.FromUL2toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOUL3"))
            {
                this.FromUL2toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL1"))
            {
                this.FromUL2toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL2"))
            {
                this.FromUL2toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL3"))
            {
                this.FromUL2toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL2TOIL0"))
            {
                this.FromUL2toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOUL1"))
            {
                this.FromUL3toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOUL2"))
            {
                this.FromUL3toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL1"))
            {
                this.FromUL3toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL2"))
            {
                this.FromUL3toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL3"))
            {
                this.FromUL3toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMUL3TOIL0"))
            {
                this.FromUL3toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL1"))
            {
                this.FromIL1toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL2"))
            {
                this.FromIL1toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOUL3"))
            {
                this.FromIL1toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL2"))
            {
                this.FromIL1toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL3"))
            {
                this.FromIL1toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL1TOIL0"))
            {
                this.FromIL1toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL1"))
            {
                this.FromIL2toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL2"))
            {
                this.FromIL2toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOUL3"))
            {
                this.FromIL2toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL1"))
            {
                this.FromIL2toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL3"))
            {
                this.FromIL2toIL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL2TOIL0"))
            {
                this.FromIL2toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL1"))
            {
                this.FromIL3toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL2"))
            {
                this.FromIL3toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOUL3"))
            {
                this.FromIL3toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL1"))
            {
                this.FromIL3toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL2"))
            {
                this.FromIL3toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL3TOIL0"))
            {
                this.FromIL3toIL0 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL1"))
            {
                this.FromIL0toUL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL2"))
            {
                this.FromIL0toUL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOUL3"))
            {
                this.FromIL0toUL3 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL1"))
            {
                this.FromIL0toIL1 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL2"))
            {
                this.FromIL0toIL2 = ((double)(value));
                return;
            }
            if ((feature == "FROMIL0TOIL3"))
            {
                this.FromIL0toIL3 = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FROMUL1TOUL2"))
            {
                return Observable.Box(new FromUL1toUL2Proxy(this));
            }
            if ((attribute == "FROMUL1TOUL3"))
            {
                return Observable.Box(new FromUL1toUL3Proxy(this));
            }
            if ((attribute == "FROMUL1TOIL1"))
            {
                return Observable.Box(new FromUL1toIL1Proxy(this));
            }
            if ((attribute == "FROMUL1TOIL2"))
            {
                return Observable.Box(new FromUL1toIL2Proxy(this));
            }
            if ((attribute == "FROMUL1TOIL3"))
            {
                return Observable.Box(new FromUL1toIL3Proxy(this));
            }
            if ((attribute == "FROMUL1TOIL0"))
            {
                return Observable.Box(new FromUL1toIL0Proxy(this));
            }
            if ((attribute == "FROMUL2TOUL1"))
            {
                return Observable.Box(new FromUL2toUL1Proxy(this));
            }
            if ((attribute == "FROMUL2TOUL3"))
            {
                return Observable.Box(new FromUL2toUL3Proxy(this));
            }
            if ((attribute == "FROMUL2TOIL1"))
            {
                return Observable.Box(new FromUL2toIL1Proxy(this));
            }
            if ((attribute == "FROMUL2TOIL2"))
            {
                return Observable.Box(new FromUL2toIL2Proxy(this));
            }
            if ((attribute == "FROMUL2TOIL3"))
            {
                return Observable.Box(new FromUL2toIL3Proxy(this));
            }
            if ((attribute == "FROMUL2TOIL0"))
            {
                return Observable.Box(new FromUL2toIL0Proxy(this));
            }
            if ((attribute == "FROMUL3TOUL1"))
            {
                return Observable.Box(new FromUL3toUL1Proxy(this));
            }
            if ((attribute == "FROMUL3TOUL2"))
            {
                return Observable.Box(new FromUL3toUL2Proxy(this));
            }
            if ((attribute == "FROMUL3TOIL1"))
            {
                return Observable.Box(new FromUL3toIL1Proxy(this));
            }
            if ((attribute == "FROMUL3TOIL2"))
            {
                return Observable.Box(new FromUL3toIL2Proxy(this));
            }
            if ((attribute == "FROMUL3TOIL3"))
            {
                return Observable.Box(new FromUL3toIL3Proxy(this));
            }
            if ((attribute == "FROMUL3TOIL0"))
            {
                return Observable.Box(new FromUL3toIL0Proxy(this));
            }
            if ((attribute == "FROMIL1TOUL1"))
            {
                return Observable.Box(new FromIL1toUL1Proxy(this));
            }
            if ((attribute == "FROMIL1TOUL2"))
            {
                return Observable.Box(new FromIL1toUL2Proxy(this));
            }
            if ((attribute == "FROMIL1TOUL3"))
            {
                return Observable.Box(new FromIL1toUL3Proxy(this));
            }
            if ((attribute == "FROMIL1TOIL2"))
            {
                return Observable.Box(new FromIL1toIL2Proxy(this));
            }
            if ((attribute == "FROMIL1TOIL3"))
            {
                return Observable.Box(new FromIL1toIL3Proxy(this));
            }
            if ((attribute == "FROMIL1TOIL0"))
            {
                return Observable.Box(new FromIL1toIL0Proxy(this));
            }
            if ((attribute == "FROMIL2TOUL1"))
            {
                return Observable.Box(new FromIL2toUL1Proxy(this));
            }
            if ((attribute == "FROMIL2TOUL2"))
            {
                return Observable.Box(new FromIL2toUL2Proxy(this));
            }
            if ((attribute == "FROMIL2TOUL3"))
            {
                return Observable.Box(new FromIL2toUL3Proxy(this));
            }
            if ((attribute == "FROMIL2TOIL1"))
            {
                return Observable.Box(new FromIL2toIL1Proxy(this));
            }
            if ((attribute == "FROMIL2TOIL3"))
            {
                return Observable.Box(new FromIL2toIL3Proxy(this));
            }
            if ((attribute == "FROMIL2TOIL0"))
            {
                return Observable.Box(new FromIL2toIL0Proxy(this));
            }
            if ((attribute == "FROMIL3TOUL1"))
            {
                return Observable.Box(new FromIL3toUL1Proxy(this));
            }
            if ((attribute == "FROMIL3TOUL2"))
            {
                return Observable.Box(new FromIL3toUL2Proxy(this));
            }
            if ((attribute == "FROMIL3TOUL3"))
            {
                return Observable.Box(new FromIL3toUL3Proxy(this));
            }
            if ((attribute == "FROMIL3TOIL1"))
            {
                return Observable.Box(new FromIL3toIL1Proxy(this));
            }
            if ((attribute == "FROMIL3TOIL2"))
            {
                return Observable.Box(new FromIL3toIL2Proxy(this));
            }
            if ((attribute == "FROMIL3TOIL0"))
            {
                return Observable.Box(new FromIL3toIL0Proxy(this));
            }
            if ((attribute == "FROMIL0TOUL1"))
            {
                return Observable.Box(new FromIL0toUL1Proxy(this));
            }
            if ((attribute == "FROMIL0TOUL2"))
            {
                return Observable.Box(new FromIL0toUL2Proxy(this));
            }
            if ((attribute == "FROMIL0TOUL3"))
            {
                return Observable.Box(new FromIL0toUL3Proxy(this));
            }
            if ((attribute == "FROMIL0TOIL1"))
            {
                return Observable.Box(new FromIL0toIL1Proxy(this));
            }
            if ((attribute == "FROMIL0TOIL2"))
            {
                return Observable.Box(new FromIL0toIL2Proxy(this));
            }
            if ((attribute == "FROMIL0TOIL3"))
            {
                return Observable.Box(new FromIL0toIL3Proxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/ExtendedPhaseAngleMeasurement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toUL2 property
        /// </summary>
        private sealed class FromUL1toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toUL2;
                }
                set
                {
                    this.ModelElement.FromUL1toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toUL3 property
        /// </summary>
        private sealed class FromUL1toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toUL3;
                }
                set
                {
                    this.ModelElement.FromUL1toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL1 property
        /// </summary>
        private sealed class FromUL1toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL1;
                }
                set
                {
                    this.ModelElement.FromUL1toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL2 property
        /// </summary>
        private sealed class FromUL1toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL2;
                }
                set
                {
                    this.ModelElement.FromUL1toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL3 property
        /// </summary>
        private sealed class FromUL1toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL3;
                }
                set
                {
                    this.ModelElement.FromUL1toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL1toIL0 property
        /// </summary>
        private sealed class FromUL1toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL1toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL1toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL1toIL0;
                }
                set
                {
                    this.ModelElement.FromUL1toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toUL1 property
        /// </summary>
        private sealed class FromUL2toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toUL1;
                }
                set
                {
                    this.ModelElement.FromUL2toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toUL3 property
        /// </summary>
        private sealed class FromUL2toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toUL3;
                }
                set
                {
                    this.ModelElement.FromUL2toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL1 property
        /// </summary>
        private sealed class FromUL2toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL1;
                }
                set
                {
                    this.ModelElement.FromUL2toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL2 property
        /// </summary>
        private sealed class FromUL2toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL2;
                }
                set
                {
                    this.ModelElement.FromUL2toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL3 property
        /// </summary>
        private sealed class FromUL2toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL3;
                }
                set
                {
                    this.ModelElement.FromUL2toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL2toIL0 property
        /// </summary>
        private sealed class FromUL2toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL2toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL2toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL2toIL0;
                }
                set
                {
                    this.ModelElement.FromUL2toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toUL1 property
        /// </summary>
        private sealed class FromUL3toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toUL1;
                }
                set
                {
                    this.ModelElement.FromUL3toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toUL2 property
        /// </summary>
        private sealed class FromUL3toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toUL2;
                }
                set
                {
                    this.ModelElement.FromUL3toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL1 property
        /// </summary>
        private sealed class FromUL3toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL1;
                }
                set
                {
                    this.ModelElement.FromUL3toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL2 property
        /// </summary>
        private sealed class FromUL3toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL2;
                }
                set
                {
                    this.ModelElement.FromUL3toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL3 property
        /// </summary>
        private sealed class FromUL3toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL3;
                }
                set
                {
                    this.ModelElement.FromUL3toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromUL3toIL0 property
        /// </summary>
        private sealed class FromUL3toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromUL3toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromUL3toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromUL3toIL0;
                }
                set
                {
                    this.ModelElement.FromUL3toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL1 property
        /// </summary>
        private sealed class FromIL1toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL1;
                }
                set
                {
                    this.ModelElement.FromIL1toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL2 property
        /// </summary>
        private sealed class FromIL1toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL2;
                }
                set
                {
                    this.ModelElement.FromIL1toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toUL3 property
        /// </summary>
        private sealed class FromIL1toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toUL3;
                }
                set
                {
                    this.ModelElement.FromIL1toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL2 property
        /// </summary>
        private sealed class FromIL1toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL2;
                }
                set
                {
                    this.ModelElement.FromIL1toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL3 property
        /// </summary>
        private sealed class FromIL1toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL3;
                }
                set
                {
                    this.ModelElement.FromIL1toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL1toIL0 property
        /// </summary>
        private sealed class FromIL1toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL1toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL1toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL1toIL0;
                }
                set
                {
                    this.ModelElement.FromIL1toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL1 property
        /// </summary>
        private sealed class FromIL2toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL1;
                }
                set
                {
                    this.ModelElement.FromIL2toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL2 property
        /// </summary>
        private sealed class FromIL2toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL2;
                }
                set
                {
                    this.ModelElement.FromIL2toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toUL3 property
        /// </summary>
        private sealed class FromIL2toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toUL3;
                }
                set
                {
                    this.ModelElement.FromIL2toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL1 property
        /// </summary>
        private sealed class FromIL2toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL1;
                }
                set
                {
                    this.ModelElement.FromIL2toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL3 property
        /// </summary>
        private sealed class FromIL2toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL3;
                }
                set
                {
                    this.ModelElement.FromIL2toIL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL2toIL0 property
        /// </summary>
        private sealed class FromIL2toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL2toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL2toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL2toIL0;
                }
                set
                {
                    this.ModelElement.FromIL2toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL1 property
        /// </summary>
        private sealed class FromIL3toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL1;
                }
                set
                {
                    this.ModelElement.FromIL3toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL2 property
        /// </summary>
        private sealed class FromIL3toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL2;
                }
                set
                {
                    this.ModelElement.FromIL3toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toUL3 property
        /// </summary>
        private sealed class FromIL3toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toUL3;
                }
                set
                {
                    this.ModelElement.FromIL3toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL1 property
        /// </summary>
        private sealed class FromIL3toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL1;
                }
                set
                {
                    this.ModelElement.FromIL3toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL2 property
        /// </summary>
        private sealed class FromIL3toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL2;
                }
                set
                {
                    this.ModelElement.FromIL3toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL3toIL0 property
        /// </summary>
        private sealed class FromIL3toIL0Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL3toIL0Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL3toIL0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL3toIL0;
                }
                set
                {
                    this.ModelElement.FromIL3toIL0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL1 property
        /// </summary>
        private sealed class FromIL0toUL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL1;
                }
                set
                {
                    this.ModelElement.FromIL0toUL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL2 property
        /// </summary>
        private sealed class FromIL0toUL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL2;
                }
                set
                {
                    this.ModelElement.FromIL0toUL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toUL3 property
        /// </summary>
        private sealed class FromIL0toUL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toUL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toUL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toUL3;
                }
                set
                {
                    this.ModelElement.FromIL0toUL3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL1 property
        /// </summary>
        private sealed class FromIL0toIL1Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL1Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL1;
                }
                set
                {
                    this.ModelElement.FromIL0toIL1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL2 property
        /// </summary>
        private sealed class FromIL0toIL2Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL2Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL2;
                }
                set
                {
                    this.ModelElement.FromIL0toIL2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromIL0toIL3 property
        /// </summary>
        private sealed class FromIL0toIL3Proxy : ModelPropertyChange<IExtendedPhaseAngleMeasurement, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromIL0toIL3Proxy(IExtendedPhaseAngleMeasurement modelElement) : 
                    base(modelElement, "FromIL0toIL3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.FromIL0toIL3;
                }
                set
                {
                    this.ModelElement.FromIL0toIL3 = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the TransformerAndLineLosses class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TransformerAndLineLosses")]
    public partial class TransformerAndLineLosses : Data, ITransformerAndLineLosses, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Active_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_line_losses_P;
        
        private static Lazy<ITypedElement> _active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_line_losses_M;
        
        private static Lazy<ITypedElement> _active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_line_losses;
        
        private static Lazy<ITypedElement> _active_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_transformer_losses;
        
        private static Lazy<ITypedElement> _active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_losses_P;
        
        private static Lazy<ITypedElement> _active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveActive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_losses_M;
        
        private static Lazy<ITypedElement> _active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveActive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Active_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _active_losses;
        
        private static Lazy<ITypedElement> _active_lossesAttribute = new Lazy<ITypedElement>(RetrieveActive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_line_losses;
        
        private static Lazy<ITypedElement> _reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_losses_P;
        
        private static Lazy<ITypedElement> _reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveReactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_losses_M;
        
        private static Lazy<ITypedElement> _reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveReactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the Reactive_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _reactive_losses;
        
        private static Lazy<ITypedElement> _reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveReactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Total_normalized_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _total_normalized_transformer_losses;
        
        private static Lazy<ITypedElement> _total_normalized_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveTotal_normalized_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Total_normalized_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _total_normalized_line_losses;
        
        private static Lazy<ITypedElement> _total_normalized_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveTotal_normalized_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_gross_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_active_gross_P;
        
        private static Lazy<ITypedElement> _compensated_active_gross_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_gross_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_net_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_active_net_P;
        
        private static Lazy<ITypedElement> _compensated_active_net_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_net_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_gross_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_active_gross_M;
        
        private static Lazy<ITypedElement> _compensated_active_gross_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_gross_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_active_net_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_active_net_M;
        
        private static Lazy<ITypedElement> _compensated_active_net_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_active_net_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_gross_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_reactive_gross_P;
        
        private static Lazy<ITypedElement> _compensated_reactive_gross_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_gross_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_net_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_reactive_net_P;
        
        private static Lazy<ITypedElement> _compensated_reactive_net_PAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_net_PAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_gross_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_reactive_gross_M;
        
        private static Lazy<ITypedElement> _compensated_reactive_gross_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_gross_MAttribute);
        
        /// <summary>
        /// The backing field for the Compensated_reactive_net_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _compensated_reactive_net_M;
        
        private static Lazy<ITypedElement> _compensated_reactive_net_MAttribute = new Lazy<ITypedElement>(RetrieveCompensated_reactive_net_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_line_losses;
        
        private static Lazy<ITypedElement> _l1active_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1active_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_line_losses_M;
        
        private static Lazy<ITypedElement> _l1active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l1active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l1active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_transformer_losses;
        
        private static Lazy<ITypedElement> _l1active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_losses_P;
        
        private static Lazy<ITypedElement> _l1active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_losses_M;
        
        private static Lazy<ITypedElement> _l1active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1active_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1active_losses;
        
        private static Lazy<ITypedElement> _l1active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l1reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l1reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_line_losses;
        
        private static Lazy<ITypedElement> _l1reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1reactive_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l1reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1Reactive_losses_P;
        
        private static Lazy<ITypedElement> _l1Reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1Reactive_losses_M;
        
        private static Lazy<ITypedElement> _l1Reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L1Reactive_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1Reactive_losses;
        
        private static Lazy<ITypedElement> _l1Reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL1Reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L1Ampere_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l1Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL1Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L1Volt_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l1Volt_squared_hours;
        
        private static Lazy<ITypedElement> _l1Volt_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL1Volt_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L2active_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_line_losses_P;
        
        private static Lazy<ITypedElement> _l2active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_line_losses_M;
        
        private static Lazy<ITypedElement> _l2active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l2active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l2active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_transformer_losses;
        
        private static Lazy<ITypedElement> _l2active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_losses_P;
        
        private static Lazy<ITypedElement> _l2active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_losses_M;
        
        private static Lazy<ITypedElement> _l2active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2active_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2active_losses;
        
        private static Lazy<ITypedElement> _l2active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_line_losses;
        
        private static Lazy<ITypedElement> _l2reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_losses;
        
        private static Lazy<ITypedElement> _l2reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_losses_P;
        
        private static Lazy<ITypedElement> _l2reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L2reactive_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2reactive_losses_M;
        
        private static Lazy<ITypedElement> _l2reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL2reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L2Ampere_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l2Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL2Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L2Volt_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l2Volt_squared_hours;
        
        private static Lazy<ITypedElement> _l2Volt_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL2Volt_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L3Active_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3Active_line_losses_P;
        
        private static Lazy<ITypedElement> _l3Active_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3Active_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3Active_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3Active_line_losses_M;
        
        private static Lazy<ITypedElement> _l3Active_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3Active_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l3active_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l3active_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_transformer_losses;
        
        private static Lazy<ITypedElement> _l3active_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3active_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_losses_P;
        
        private static Lazy<ITypedElement> _l3active_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3active_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_losses_M;
        
        private static Lazy<ITypedElement> _l3active_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3active_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3active_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3active_losses;
        
        private static Lazy<ITypedElement> _l3active_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3active_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_line_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_line_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_line_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_line_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_line_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_line_losses;
        
        private static Lazy<ITypedElement> _l3reactive_line_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_line_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_transformer_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_transformer_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_transformer_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_transformer_losses;
        
        private static Lazy<ITypedElement> _l3reactive_transformer_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_transformer_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses_P property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_losses_P;
        
        private static Lazy<ITypedElement> _l3reactive_losses_PAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_losses_PAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses_M property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_losses_M;
        
        private static Lazy<ITypedElement> _l3reactive_losses_MAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_losses_MAttribute);
        
        /// <summary>
        /// The backing field for the L3reactive_losses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3reactive_losses;
        
        private static Lazy<ITypedElement> _l3reactive_lossesAttribute = new Lazy<ITypedElement>(RetrieveL3reactive_lossesAttribute);
        
        /// <summary>
        /// The backing field for the L3Ampere_squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3Ampere_squared_hours;
        
        private static Lazy<ITypedElement> _l3Ampere_squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL3Ampere_squared_hoursAttribute);
        
        /// <summary>
        /// The backing field for the L3Volt_Squared_hours property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _l3Volt_Squared_hours;
        
        private static Lazy<ITypedElement> _l3Volt_Squared_hoursAttribute = new Lazy<ITypedElement>(RetrieveL3Volt_Squared_hoursAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_line_losses_P
        {
            get
            {
                return this._active_line_losses_P;
            }
            set
            {
                if ((this._active_line_losses_P != value))
                {
                    Nullable<double> old = this._active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_losses_PChanging(e);
                    this.OnPropertyChanging("Active_line_losses_P", e, _active_line_losses_PAttribute);
                    this._active_line_losses_P = value;
                    this.OnActive_line_losses_PChanged(e);
                    this.OnPropertyChanged("Active_line_losses_P", e, _active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_line_losses_M
        {
            get
            {
                return this._active_line_losses_M;
            }
            set
            {
                if ((this._active_line_losses_M != value))
                {
                    Nullable<double> old = this._active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_losses_MChanging(e);
                    this.OnPropertyChanging("Active_line_losses_M", e, _active_line_losses_MAttribute);
                    this._active_line_losses_M = value;
                    this.OnActive_line_losses_MChanged(e);
                    this.OnPropertyChanged("Active_line_losses_M", e, _active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_line_losses
        {
            get
            {
                return this._active_line_losses;
            }
            set
            {
                if ((this._active_line_losses != value))
                {
                    Nullable<double> old = this._active_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_line_lossesChanging(e);
                    this.OnPropertyChanging("Active_line_losses", e, _active_line_lossesAttribute);
                    this._active_line_losses = value;
                    this.OnActive_line_lossesChanged(e);
                    this.OnPropertyChanged("Active_line_losses", e, _active_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_transformer_losses_P
        {
            get
            {
                return this._active_transformer_losses_P;
            }
            set
            {
                if ((this._active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses_P", e, _active_transformer_losses_PAttribute);
                    this._active_transformer_losses_P = value;
                    this.OnActive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses_P", e, _active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_transformer_losses_M
        {
            get
            {
                return this._active_transformer_losses_M;
            }
            set
            {
                if ((this._active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses_M", e, _active_transformer_losses_MAttribute);
                    this._active_transformer_losses_M = value;
                    this.OnActive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses_M", e, _active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_transformer_losses
        {
            get
            {
                return this._active_transformer_losses;
            }
            set
            {
                if ((this._active_transformer_losses != value))
                {
                    Nullable<double> old = this._active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Active_transformer_losses", e, _active_transformer_lossesAttribute);
                    this._active_transformer_losses = value;
                    this.OnActive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Active_transformer_losses", e, _active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_losses_P
        {
            get
            {
                return this._active_losses_P;
            }
            set
            {
                if ((this._active_losses_P != value))
                {
                    Nullable<double> old = this._active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_losses_PChanging(e);
                    this.OnPropertyChanging("Active_losses_P", e, _active_losses_PAttribute);
                    this._active_losses_P = value;
                    this.OnActive_losses_PChanged(e);
                    this.OnPropertyChanged("Active_losses_P", e, _active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_losses_M
        {
            get
            {
                return this._active_losses_M;
            }
            set
            {
                if ((this._active_losses_M != value))
                {
                    Nullable<double> old = this._active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_losses_MChanging(e);
                    this.OnPropertyChanging("Active_losses_M", e, _active_losses_MAttribute);
                    this._active_losses_M = value;
                    this.OnActive_losses_MChanged(e);
                    this.OnPropertyChanged("Active_losses_M", e, _active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Active_losses
        {
            get
            {
                return this._active_losses;
            }
            set
            {
                if ((this._active_losses != value))
                {
                    Nullable<double> old = this._active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_lossesChanging(e);
                    this.OnPropertyChanging("Active_losses", e, _active_lossesAttribute);
                    this._active_losses = value;
                    this.OnActive_lossesChanged(e);
                    this.OnPropertyChanged("Active_losses", e, _active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_line_losses_P
        {
            get
            {
                return this._reactive_line_losses_P;
            }
            set
            {
                if ((this._reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses_P", e, _reactive_line_losses_PAttribute);
                    this._reactive_line_losses_P = value;
                    this.OnReactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses_P", e, _reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_line_losses_M
        {
            get
            {
                return this._reactive_line_losses_M;
            }
            set
            {
                if ((this._reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses_M", e, _reactive_line_losses_MAttribute);
                    this._reactive_line_losses_M = value;
                    this.OnReactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses_M", e, _reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_line_losses
        {
            get
            {
                return this._reactive_line_losses;
            }
            set
            {
                if ((this._reactive_line_losses != value))
                {
                    Nullable<double> old = this._reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_line_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_line_losses", e, _reactive_line_lossesAttribute);
                    this._reactive_line_losses = value;
                    this.OnReactive_line_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_line_losses", e, _reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_transformer_losses_P
        {
            get
            {
                return this._reactive_transformer_losses_P;
            }
            set
            {
                if ((this._reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses_P", e, _reactive_transformer_losses_PAttribute);
                    this._reactive_transformer_losses_P = value;
                    this.OnReactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses_P", e, _reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_transformer_losses_M
        {
            get
            {
                return this._reactive_transformer_losses_M;
            }
            set
            {
                if ((this._reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses_M", e, _reactive_transformer_losses_MAttribute);
                    this._reactive_transformer_losses_M = value;
                    this.OnReactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses_M", e, _reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_transformer_losses
        {
            get
            {
                return this._reactive_transformer_losses;
            }
            set
            {
                if ((this._reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_transformer_losses", e, _reactive_transformer_lossesAttribute);
                    this._reactive_transformer_losses = value;
                    this.OnReactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_transformer_losses", e, _reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_losses_P
        {
            get
            {
                return this._reactive_losses_P;
            }
            set
            {
                if ((this._reactive_losses_P != value))
                {
                    Nullable<double> old = this._reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_losses_PChanging(e);
                    this.OnPropertyChanging("Reactive_losses_P", e, _reactive_losses_PAttribute);
                    this._reactive_losses_P = value;
                    this.OnReactive_losses_PChanged(e);
                    this.OnPropertyChanged("Reactive_losses_P", e, _reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_losses_M
        {
            get
            {
                return this._reactive_losses_M;
            }
            set
            {
                if ((this._reactive_losses_M != value))
                {
                    Nullable<double> old = this._reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_losses_MChanging(e);
                    this.OnPropertyChanging("Reactive_losses_M", e, _reactive_losses_MAttribute);
                    this._reactive_losses_M = value;
                    this.OnReactive_losses_MChanged(e);
                    this.OnPropertyChanged("Reactive_losses_M", e, _reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Reactive_losses
        {
            get
            {
                return this._reactive_losses;
            }
            set
            {
                if ((this._reactive_losses != value))
                {
                    Nullable<double> old = this._reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_lossesChanging(e);
                    this.OnPropertyChanging("Reactive_losses", e, _reactive_lossesAttribute);
                    this._reactive_losses = value;
                    this.OnReactive_lossesChanged(e);
                    this.OnPropertyChanged("Reactive_losses", e, _reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_normalized_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Total_normalized_transformer_losses
        {
            get
            {
                return this._total_normalized_transformer_losses;
            }
            set
            {
                if ((this._total_normalized_transformer_losses != value))
                {
                    Nullable<double> old = this._total_normalized_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_normalized_transformer_lossesChanging(e);
                    this.OnPropertyChanging("Total_normalized_transformer_losses", e, _total_normalized_transformer_lossesAttribute);
                    this._total_normalized_transformer_losses = value;
                    this.OnTotal_normalized_transformer_lossesChanged(e);
                    this.OnPropertyChanged("Total_normalized_transformer_losses", e, _total_normalized_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_normalized_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Total_normalized_line_losses
        {
            get
            {
                return this._total_normalized_line_losses;
            }
            set
            {
                if ((this._total_normalized_line_losses != value))
                {
                    Nullable<double> old = this._total_normalized_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_normalized_line_lossesChanging(e);
                    this.OnPropertyChanging("Total_normalized_line_losses", e, _total_normalized_line_lossesAttribute);
                    this._total_normalized_line_losses = value;
                    this.OnTotal_normalized_line_lossesChanged(e);
                    this.OnPropertyChanged("Total_normalized_line_losses", e, _total_normalized_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_gross_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_active_gross_P
        {
            get
            {
                return this._compensated_active_gross_P;
            }
            set
            {
                if ((this._compensated_active_gross_P != value))
                {
                    Nullable<double> old = this._compensated_active_gross_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_gross_PChanging(e);
                    this.OnPropertyChanging("Compensated_active_gross_P", e, _compensated_active_gross_PAttribute);
                    this._compensated_active_gross_P = value;
                    this.OnCompensated_active_gross_PChanged(e);
                    this.OnPropertyChanged("Compensated_active_gross_P", e, _compensated_active_gross_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_net_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_active_net_P
        {
            get
            {
                return this._compensated_active_net_P;
            }
            set
            {
                if ((this._compensated_active_net_P != value))
                {
                    Nullable<double> old = this._compensated_active_net_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_net_PChanging(e);
                    this.OnPropertyChanging("Compensated_active_net_P", e, _compensated_active_net_PAttribute);
                    this._compensated_active_net_P = value;
                    this.OnCompensated_active_net_PChanged(e);
                    this.OnPropertyChanged("Compensated_active_net_P", e, _compensated_active_net_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_gross_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_active_gross_M
        {
            get
            {
                return this._compensated_active_gross_M;
            }
            set
            {
                if ((this._compensated_active_gross_M != value))
                {
                    Nullable<double> old = this._compensated_active_gross_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_gross_MChanging(e);
                    this.OnPropertyChanging("Compensated_active_gross_M", e, _compensated_active_gross_MAttribute);
                    this._compensated_active_gross_M = value;
                    this.OnCompensated_active_gross_MChanged(e);
                    this.OnPropertyChanged("Compensated_active_gross_M", e, _compensated_active_gross_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_active_net_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_active_net_M
        {
            get
            {
                return this._compensated_active_net_M;
            }
            set
            {
                if ((this._compensated_active_net_M != value))
                {
                    Nullable<double> old = this._compensated_active_net_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_active_net_MChanging(e);
                    this.OnPropertyChanging("Compensated_active_net_M", e, _compensated_active_net_MAttribute);
                    this._compensated_active_net_M = value;
                    this.OnCompensated_active_net_MChanged(e);
                    this.OnPropertyChanged("Compensated_active_net_M", e, _compensated_active_net_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_reactive_gross_P
        {
            get
            {
                return this._compensated_reactive_gross_P;
            }
            set
            {
                if ((this._compensated_reactive_gross_P != value))
                {
                    Nullable<double> old = this._compensated_reactive_gross_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_gross_PChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_gross_P", e, _compensated_reactive_gross_PAttribute);
                    this._compensated_reactive_gross_P = value;
                    this.OnCompensated_reactive_gross_PChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_gross_P", e, _compensated_reactive_gross_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_net_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_reactive_net_P
        {
            get
            {
                return this._compensated_reactive_net_P;
            }
            set
            {
                if ((this._compensated_reactive_net_P != value))
                {
                    Nullable<double> old = this._compensated_reactive_net_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_net_PChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_net_P", e, _compensated_reactive_net_PAttribute);
                    this._compensated_reactive_net_P = value;
                    this.OnCompensated_reactive_net_PChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_net_P", e, _compensated_reactive_net_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_reactive_gross_M
        {
            get
            {
                return this._compensated_reactive_gross_M;
            }
            set
            {
                if ((this._compensated_reactive_gross_M != value))
                {
                    Nullable<double> old = this._compensated_reactive_gross_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_gross_MChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_gross_M", e, _compensated_reactive_gross_MAttribute);
                    this._compensated_reactive_gross_M = value;
                    this.OnCompensated_reactive_gross_MChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_gross_M", e, _compensated_reactive_gross_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Compensated_reactive_net_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> Compensated_reactive_net_M
        {
            get
            {
                return this._compensated_reactive_net_M;
            }
            set
            {
                if ((this._compensated_reactive_net_M != value))
                {
                    Nullable<double> old = this._compensated_reactive_net_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompensated_reactive_net_MChanging(e);
                    this.OnPropertyChanging("Compensated_reactive_net_M", e, _compensated_reactive_net_MAttribute);
                    this._compensated_reactive_net_M = value;
                    this.OnCompensated_reactive_net_MChanged(e);
                    this.OnPropertyChanged("Compensated_reactive_net_M", e, _compensated_reactive_net_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_line_losses
        {
            get
            {
                return this._l1active_line_losses;
            }
            set
            {
                if ((this._l1active_line_losses != value))
                {
                    Nullable<double> old = this._l1active_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_line_lossesChanging(e);
                    this.OnPropertyChanging("L1active_line_losses", e, _l1active_line_lossesAttribute);
                    this._l1active_line_losses = value;
                    this.OnL1active_line_lossesChanged(e);
                    this.OnPropertyChanged("L1active_line_losses", e, _l1active_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_line_losses_M
        {
            get
            {
                return this._l1active_line_losses_M;
            }
            set
            {
                if ((this._l1active_line_losses_M != value))
                {
                    Nullable<double> old = this._l1active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_line_losses_M", e, _l1active_line_losses_MAttribute);
                    this._l1active_line_losses_M = value;
                    this.OnL1active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_line_losses_M", e, _l1active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_transformer_losses_P
        {
            get
            {
                return this._l1active_transformer_losses_P;
            }
            set
            {
                if ((this._l1active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses_P", e, _l1active_transformer_losses_PAttribute);
                    this._l1active_transformer_losses_P = value;
                    this.OnL1active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses_P", e, _l1active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_transformer_losses_M
        {
            get
            {
                return this._l1active_transformer_losses_M;
            }
            set
            {
                if ((this._l1active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses_M", e, _l1active_transformer_losses_MAttribute);
                    this._l1active_transformer_losses_M = value;
                    this.OnL1active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses_M", e, _l1active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_transformer_losses
        {
            get
            {
                return this._l1active_transformer_losses;
            }
            set
            {
                if ((this._l1active_transformer_losses != value))
                {
                    Nullable<double> old = this._l1active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L1active_transformer_losses", e, _l1active_transformer_lossesAttribute);
                    this._l1active_transformer_losses = value;
                    this.OnL1active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L1active_transformer_losses", e, _l1active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_losses_P
        {
            get
            {
                return this._l1active_losses_P;
            }
            set
            {
                if ((this._l1active_losses_P != value))
                {
                    Nullable<double> old = this._l1active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_losses_PChanging(e);
                    this.OnPropertyChanging("L1active_losses_P", e, _l1active_losses_PAttribute);
                    this._l1active_losses_P = value;
                    this.OnL1active_losses_PChanged(e);
                    this.OnPropertyChanged("L1active_losses_P", e, _l1active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_losses_M
        {
            get
            {
                return this._l1active_losses_M;
            }
            set
            {
                if ((this._l1active_losses_M != value))
                {
                    Nullable<double> old = this._l1active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_losses_MChanging(e);
                    this.OnPropertyChanging("L1active_losses_M", e, _l1active_losses_MAttribute);
                    this._l1active_losses_M = value;
                    this.OnL1active_losses_MChanged(e);
                    this.OnPropertyChanged("L1active_losses_M", e, _l1active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1active_losses
        {
            get
            {
                return this._l1active_losses;
            }
            set
            {
                if ((this._l1active_losses != value))
                {
                    Nullable<double> old = this._l1active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1active_lossesChanging(e);
                    this.OnPropertyChanging("L1active_losses", e, _l1active_lossesAttribute);
                    this._l1active_losses = value;
                    this.OnL1active_lossesChanged(e);
                    this.OnPropertyChanged("L1active_losses", e, _l1active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_line_losses_P
        {
            get
            {
                return this._l1reactive_line_losses_P;
            }
            set
            {
                if ((this._l1reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses_P", e, _l1reactive_line_losses_PAttribute);
                    this._l1reactive_line_losses_P = value;
                    this.OnL1reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses_P", e, _l1reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_line_losses_M
        {
            get
            {
                return this._l1reactive_line_losses_M;
            }
            set
            {
                if ((this._l1reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses_M", e, _l1reactive_line_losses_MAttribute);
                    this._l1reactive_line_losses_M = value;
                    this.OnL1reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses_M", e, _l1reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_line_losses
        {
            get
            {
                return this._l1reactive_line_losses;
            }
            set
            {
                if ((this._l1reactive_line_losses != value))
                {
                    Nullable<double> old = this._l1reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L1reactive_line_losses", e, _l1reactive_line_lossesAttribute);
                    this._l1reactive_line_losses = value;
                    this.OnL1reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L1reactive_line_losses", e, _l1reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_transformer_losses_P
        {
            get
            {
                return this._l1reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l1reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses_P", e, _l1reactive_transformer_losses_PAttribute);
                    this._l1reactive_transformer_losses_P = value;
                    this.OnL1reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses_P", e, _l1reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_transformer_losses_M
        {
            get
            {
                return this._l1reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l1reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses_M", e, _l1reactive_transformer_losses_MAttribute);
                    this._l1reactive_transformer_losses_M = value;
                    this.OnL1reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses_M", e, _l1reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1reactive_transformer_losses
        {
            get
            {
                return this._l1reactive_transformer_losses;
            }
            set
            {
                if ((this._l1reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l1reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L1reactive_transformer_losses", e, _l1reactive_transformer_lossesAttribute);
                    this._l1reactive_transformer_losses = value;
                    this.OnL1reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L1reactive_transformer_losses", e, _l1reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1Reactive_losses_P
        {
            get
            {
                return this._l1Reactive_losses_P;
            }
            set
            {
                if ((this._l1Reactive_losses_P != value))
                {
                    Nullable<double> old = this._l1Reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses_P", e, _l1Reactive_losses_PAttribute);
                    this._l1Reactive_losses_P = value;
                    this.OnL1Reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses_P", e, _l1Reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1Reactive_losses_M
        {
            get
            {
                return this._l1Reactive_losses_M;
            }
            set
            {
                if ((this._l1Reactive_losses_M != value))
                {
                    Nullable<double> old = this._l1Reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses_M", e, _l1Reactive_losses_MAttribute);
                    this._l1Reactive_losses_M = value;
                    this.OnL1Reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses_M", e, _l1Reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1Reactive_losses
        {
            get
            {
                return this._l1Reactive_losses;
            }
            set
            {
                if ((this._l1Reactive_losses != value))
                {
                    Nullable<double> old = this._l1Reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Reactive_lossesChanging(e);
                    this.OnPropertyChanging("L1Reactive_losses", e, _l1Reactive_lossesAttribute);
                    this._l1Reactive_losses = value;
                    this.OnL1Reactive_lossesChanged(e);
                    this.OnPropertyChanged("L1Reactive_losses", e, _l1Reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1Ampere_squared_hours
        {
            get
            {
                return this._l1Ampere_squared_hours;
            }
            set
            {
                if ((this._l1Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l1Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L1Ampere_squared_hours", e, _l1Ampere_squared_hoursAttribute);
                    this._l1Ampere_squared_hours = value;
                    this.OnL1Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L1Ampere_squared_hours", e, _l1Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L1Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L1Volt_squared_hours
        {
            get
            {
                return this._l1Volt_squared_hours;
            }
            set
            {
                if ((this._l1Volt_squared_hours != value))
                {
                    Nullable<double> old = this._l1Volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL1Volt_squared_hoursChanging(e);
                    this.OnPropertyChanging("L1Volt_squared_hours", e, _l1Volt_squared_hoursAttribute);
                    this._l1Volt_squared_hours = value;
                    this.OnL1Volt_squared_hoursChanged(e);
                    this.OnPropertyChanged("L1Volt_squared_hours", e, _l1Volt_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_line_losses_P
        {
            get
            {
                return this._l2active_line_losses_P;
            }
            set
            {
                if ((this._l2active_line_losses_P != value))
                {
                    Nullable<double> old = this._l2active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_line_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_line_losses_P", e, _l2active_line_losses_PAttribute);
                    this._l2active_line_losses_P = value;
                    this.OnL2active_line_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_line_losses_P", e, _l2active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_line_losses_M
        {
            get
            {
                return this._l2active_line_losses_M;
            }
            set
            {
                if ((this._l2active_line_losses_M != value))
                {
                    Nullable<double> old = this._l2active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_line_losses_M", e, _l2active_line_losses_MAttribute);
                    this._l2active_line_losses_M = value;
                    this.OnL2active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_line_losses_M", e, _l2active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_transformer_losses_P
        {
            get
            {
                return this._l2active_transformer_losses_P;
            }
            set
            {
                if ((this._l2active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses_P", e, _l2active_transformer_losses_PAttribute);
                    this._l2active_transformer_losses_P = value;
                    this.OnL2active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses_P", e, _l2active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_transformer_losses_M
        {
            get
            {
                return this._l2active_transformer_losses_M;
            }
            set
            {
                if ((this._l2active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses_M", e, _l2active_transformer_losses_MAttribute);
                    this._l2active_transformer_losses_M = value;
                    this.OnL2active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses_M", e, _l2active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_transformer_losses
        {
            get
            {
                return this._l2active_transformer_losses;
            }
            set
            {
                if ((this._l2active_transformer_losses != value))
                {
                    Nullable<double> old = this._l2active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L2active_transformer_losses", e, _l2active_transformer_lossesAttribute);
                    this._l2active_transformer_losses = value;
                    this.OnL2active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L2active_transformer_losses", e, _l2active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_losses_P
        {
            get
            {
                return this._l2active_losses_P;
            }
            set
            {
                if ((this._l2active_losses_P != value))
                {
                    Nullable<double> old = this._l2active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_losses_PChanging(e);
                    this.OnPropertyChanging("L2active_losses_P", e, _l2active_losses_PAttribute);
                    this._l2active_losses_P = value;
                    this.OnL2active_losses_PChanged(e);
                    this.OnPropertyChanged("L2active_losses_P", e, _l2active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_losses_M
        {
            get
            {
                return this._l2active_losses_M;
            }
            set
            {
                if ((this._l2active_losses_M != value))
                {
                    Nullable<double> old = this._l2active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_losses_MChanging(e);
                    this.OnPropertyChanging("L2active_losses_M", e, _l2active_losses_MAttribute);
                    this._l2active_losses_M = value;
                    this.OnL2active_losses_MChanged(e);
                    this.OnPropertyChanged("L2active_losses_M", e, _l2active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2active_losses
        {
            get
            {
                return this._l2active_losses;
            }
            set
            {
                if ((this._l2active_losses != value))
                {
                    Nullable<double> old = this._l2active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2active_lossesChanging(e);
                    this.OnPropertyChanging("L2active_losses", e, _l2active_lossesAttribute);
                    this._l2active_losses = value;
                    this.OnL2active_lossesChanged(e);
                    this.OnPropertyChanged("L2active_losses", e, _l2active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_line_losses_P
        {
            get
            {
                return this._l2reactive_line_losses_P;
            }
            set
            {
                if ((this._l2reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses_P", e, _l2reactive_line_losses_PAttribute);
                    this._l2reactive_line_losses_P = value;
                    this.OnL2reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses_P", e, _l2reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_line_losses_M
        {
            get
            {
                return this._l2reactive_line_losses_M;
            }
            set
            {
                if ((this._l2reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses_M", e, _l2reactive_line_losses_MAttribute);
                    this._l2reactive_line_losses_M = value;
                    this.OnL2reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses_M", e, _l2reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_line_losses
        {
            get
            {
                return this._l2reactive_line_losses;
            }
            set
            {
                if ((this._l2reactive_line_losses != value))
                {
                    Nullable<double> old = this._l2reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_line_losses", e, _l2reactive_line_lossesAttribute);
                    this._l2reactive_line_losses = value;
                    this.OnL2reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_line_losses", e, _l2reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_transformer_losses
        {
            get
            {
                return this._l2reactive_transformer_losses;
            }
            set
            {
                if ((this._l2reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses", e, _l2reactive_transformer_lossesAttribute);
                    this._l2reactive_transformer_losses = value;
                    this.OnL2reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses", e, _l2reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_transformer_losses_P
        {
            get
            {
                return this._l2reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l2reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses_P", e, _l2reactive_transformer_losses_PAttribute);
                    this._l2reactive_transformer_losses_P = value;
                    this.OnL2reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses_P", e, _l2reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_transformer_losses_M
        {
            get
            {
                return this._l2reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l2reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_transformer_losses_M", e, _l2reactive_transformer_losses_MAttribute);
                    this._l2reactive_transformer_losses_M = value;
                    this.OnL2reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_transformer_losses_M", e, _l2reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_losses
        {
            get
            {
                return this._l2reactive_losses;
            }
            set
            {
                if ((this._l2reactive_losses != value))
                {
                    Nullable<double> old = this._l2reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_lossesChanging(e);
                    this.OnPropertyChanging("L2reactive_losses", e, _l2reactive_lossesAttribute);
                    this._l2reactive_losses = value;
                    this.OnL2reactive_lossesChanged(e);
                    this.OnPropertyChanged("L2reactive_losses", e, _l2reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_losses_P
        {
            get
            {
                return this._l2reactive_losses_P;
            }
            set
            {
                if ((this._l2reactive_losses_P != value))
                {
                    Nullable<double> old = this._l2reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L2reactive_losses_P", e, _l2reactive_losses_PAttribute);
                    this._l2reactive_losses_P = value;
                    this.OnL2reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L2reactive_losses_P", e, _l2reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2reactive_losses_M
        {
            get
            {
                return this._l2reactive_losses_M;
            }
            set
            {
                if ((this._l2reactive_losses_M != value))
                {
                    Nullable<double> old = this._l2reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L2reactive_losses_M", e, _l2reactive_losses_MAttribute);
                    this._l2reactive_losses_M = value;
                    this.OnL2reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L2reactive_losses_M", e, _l2reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2Ampere_squared_hours
        {
            get
            {
                return this._l2Ampere_squared_hours;
            }
            set
            {
                if ((this._l2Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l2Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L2Ampere_squared_hours", e, _l2Ampere_squared_hoursAttribute);
                    this._l2Ampere_squared_hours = value;
                    this.OnL2Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L2Ampere_squared_hours", e, _l2Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L2Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L2Volt_squared_hours
        {
            get
            {
                return this._l2Volt_squared_hours;
            }
            set
            {
                if ((this._l2Volt_squared_hours != value))
                {
                    Nullable<double> old = this._l2Volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL2Volt_squared_hoursChanging(e);
                    this.OnPropertyChanging("L2Volt_squared_hours", e, _l2Volt_squared_hoursAttribute);
                    this._l2Volt_squared_hours = value;
                    this.OnL2Volt_squared_hoursChanged(e);
                    this.OnPropertyChanged("L2Volt_squared_hours", e, _l2Volt_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3Active_line_losses_P
        {
            get
            {
                return this._l3Active_line_losses_P;
            }
            set
            {
                if ((this._l3Active_line_losses_P != value))
                {
                    Nullable<double> old = this._l3Active_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Active_line_losses_PChanging(e);
                    this.OnPropertyChanging("L3Active_line_losses_P", e, _l3Active_line_losses_PAttribute);
                    this._l3Active_line_losses_P = value;
                    this.OnL3Active_line_losses_PChanged(e);
                    this.OnPropertyChanged("L3Active_line_losses_P", e, _l3Active_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3Active_line_losses_M
        {
            get
            {
                return this._l3Active_line_losses_M;
            }
            set
            {
                if ((this._l3Active_line_losses_M != value))
                {
                    Nullable<double> old = this._l3Active_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Active_line_losses_MChanging(e);
                    this.OnPropertyChanging("L3Active_line_losses_M", e, _l3Active_line_losses_MAttribute);
                    this._l3Active_line_losses_M = value;
                    this.OnL3Active_line_losses_MChanged(e);
                    this.OnPropertyChanged("L3Active_line_losses_M", e, _l3Active_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_transformer_losses_P
        {
            get
            {
                return this._l3active_transformer_losses_P;
            }
            set
            {
                if ((this._l3active_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses_P", e, _l3active_transformer_losses_PAttribute);
                    this._l3active_transformer_losses_P = value;
                    this.OnL3active_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses_P", e, _l3active_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_transformer_losses_M
        {
            get
            {
                return this._l3active_transformer_losses_M;
            }
            set
            {
                if ((this._l3active_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses_M", e, _l3active_transformer_losses_MAttribute);
                    this._l3active_transformer_losses_M = value;
                    this.OnL3active_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses_M", e, _l3active_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_transformer_losses
        {
            get
            {
                return this._l3active_transformer_losses;
            }
            set
            {
                if ((this._l3active_transformer_losses != value))
                {
                    Nullable<double> old = this._l3active_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L3active_transformer_losses", e, _l3active_transformer_lossesAttribute);
                    this._l3active_transformer_losses = value;
                    this.OnL3active_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L3active_transformer_losses", e, _l3active_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_losses_P
        {
            get
            {
                return this._l3active_losses_P;
            }
            set
            {
                if ((this._l3active_losses_P != value))
                {
                    Nullable<double> old = this._l3active_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_losses_PChanging(e);
                    this.OnPropertyChanging("L3active_losses_P", e, _l3active_losses_PAttribute);
                    this._l3active_losses_P = value;
                    this.OnL3active_losses_PChanged(e);
                    this.OnPropertyChanged("L3active_losses_P", e, _l3active_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_losses_M
        {
            get
            {
                return this._l3active_losses_M;
            }
            set
            {
                if ((this._l3active_losses_M != value))
                {
                    Nullable<double> old = this._l3active_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_losses_MChanging(e);
                    this.OnPropertyChanging("L3active_losses_M", e, _l3active_losses_MAttribute);
                    this._l3active_losses_M = value;
                    this.OnL3active_losses_MChanged(e);
                    this.OnPropertyChanged("L3active_losses_M", e, _l3active_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3active_losses
        {
            get
            {
                return this._l3active_losses;
            }
            set
            {
                if ((this._l3active_losses != value))
                {
                    Nullable<double> old = this._l3active_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3active_lossesChanging(e);
                    this.OnPropertyChanging("L3active_losses", e, _l3active_lossesAttribute);
                    this._l3active_losses = value;
                    this.OnL3active_lossesChanged(e);
                    this.OnPropertyChanged("L3active_losses", e, _l3active_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_line_losses_P
        {
            get
            {
                return this._l3reactive_line_losses_P;
            }
            set
            {
                if ((this._l3reactive_line_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses_P", e, _l3reactive_line_losses_PAttribute);
                    this._l3reactive_line_losses_P = value;
                    this.OnL3reactive_line_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses_P", e, _l3reactive_line_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_line_losses_M
        {
            get
            {
                return this._l3reactive_line_losses_M;
            }
            set
            {
                if ((this._l3reactive_line_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses_M", e, _l3reactive_line_losses_MAttribute);
                    this._l3reactive_line_losses_M = value;
                    this.OnL3reactive_line_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses_M", e, _l3reactive_line_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_line_losses
        {
            get
            {
                return this._l3reactive_line_losses;
            }
            set
            {
                if ((this._l3reactive_line_losses != value))
                {
                    Nullable<double> old = this._l3reactive_line_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_line_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_line_losses", e, _l3reactive_line_lossesAttribute);
                    this._l3reactive_line_losses = value;
                    this.OnL3reactive_line_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_line_losses", e, _l3reactive_line_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_transformer_losses_P
        {
            get
            {
                return this._l3reactive_transformer_losses_P;
            }
            set
            {
                if ((this._l3reactive_transformer_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses_P", e, _l3reactive_transformer_losses_PAttribute);
                    this._l3reactive_transformer_losses_P = value;
                    this.OnL3reactive_transformer_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses_P", e, _l3reactive_transformer_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_transformer_losses_M
        {
            get
            {
                return this._l3reactive_transformer_losses_M;
            }
            set
            {
                if ((this._l3reactive_transformer_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses_M", e, _l3reactive_transformer_losses_MAttribute);
                    this._l3reactive_transformer_losses_M = value;
                    this.OnL3reactive_transformer_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses_M", e, _l3reactive_transformer_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_transformer_losses
        {
            get
            {
                return this._l3reactive_transformer_losses;
            }
            set
            {
                if ((this._l3reactive_transformer_losses != value))
                {
                    Nullable<double> old = this._l3reactive_transformer_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_transformer_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_transformer_losses", e, _l3reactive_transformer_lossesAttribute);
                    this._l3reactive_transformer_losses = value;
                    this.OnL3reactive_transformer_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_transformer_losses", e, _l3reactive_transformer_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_losses_P
        {
            get
            {
                return this._l3reactive_losses_P;
            }
            set
            {
                if ((this._l3reactive_losses_P != value))
                {
                    Nullable<double> old = this._l3reactive_losses_P;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_losses_PChanging(e);
                    this.OnPropertyChanging("L3reactive_losses_P", e, _l3reactive_losses_PAttribute);
                    this._l3reactive_losses_P = value;
                    this.OnL3reactive_losses_PChanged(e);
                    this.OnPropertyChanged("L3reactive_losses_P", e, _l3reactive_losses_PAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_losses_M
        {
            get
            {
                return this._l3reactive_losses_M;
            }
            set
            {
                if ((this._l3reactive_losses_M != value))
                {
                    Nullable<double> old = this._l3reactive_losses_M;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_losses_MChanging(e);
                    this.OnPropertyChanging("L3reactive_losses_M", e, _l3reactive_losses_MAttribute);
                    this._l3reactive_losses_M = value;
                    this.OnL3reactive_losses_MChanged(e);
                    this.OnPropertyChanged("L3reactive_losses_M", e, _l3reactive_losses_MAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3reactive_losses
        {
            get
            {
                return this._l3reactive_losses;
            }
            set
            {
                if ((this._l3reactive_losses != value))
                {
                    Nullable<double> old = this._l3reactive_losses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3reactive_lossesChanging(e);
                    this.OnPropertyChanging("L3reactive_losses", e, _l3reactive_lossesAttribute);
                    this._l3reactive_losses = value;
                    this.OnL3reactive_lossesChanged(e);
                    this.OnPropertyChanged("L3reactive_losses", e, _l3reactive_lossesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3Ampere_squared_hours
        {
            get
            {
                return this._l3Ampere_squared_hours;
            }
            set
            {
                if ((this._l3Ampere_squared_hours != value))
                {
                    Nullable<double> old = this._l3Ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Ampere_squared_hoursChanging(e);
                    this.OnPropertyChanging("L3Ampere_squared_hours", e, _l3Ampere_squared_hoursAttribute);
                    this._l3Ampere_squared_hours = value;
                    this.OnL3Ampere_squared_hoursChanged(e);
                    this.OnPropertyChanged("L3Ampere_squared_hours", e, _l3Ampere_squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// The L3Volt_Squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> L3Volt_Squared_hours
        {
            get
            {
                return this._l3Volt_Squared_hours;
            }
            set
            {
                if ((this._l3Volt_Squared_hours != value))
                {
                    Nullable<double> old = this._l3Volt_Squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnL3Volt_Squared_hoursChanging(e);
                    this.OnPropertyChanging("L3Volt_Squared_hours", e, _l3Volt_Squared_hoursAttribute);
                    this._l3Volt_Squared_hours = value;
                    this.OnL3Volt_Squared_hoursChanged(e);
                    this.OnPropertyChanged("L3Volt_Squared_hours", e, _l3Volt_Squared_hoursAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TransformerAndLineLosses")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Active_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1Ampere_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L1Ampere_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L1Volt_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L1Volt_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2Ampere_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2Ampere_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2Volt_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2Volt_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_P property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_P property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_M property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_M property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3Ampere_squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Ampere_squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Volt_Squared_hours property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Volt_Squared_hours property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanging;
        
        private static ITypedElement RetrieveActive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_line_losses")));
        }
        
        /// <summary>
        /// Raises the Active_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses_P")));
        }
        
        /// <summary>
        /// Raises the Active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses_M")));
        }
        
        /// <summary>
        /// Raises the Active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Active_losses")));
        }
        
        /// <summary>
        /// Raises the Active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the Reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the Reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Reactive_losses")));
        }
        
        /// <summary>
        /// Raises the Reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_normalized_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Total_normalized_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the Total_normalized_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_normalized_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_normalized_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Total_normalized_line_losses")));
        }
        
        /// <summary>
        /// Raises the Total_normalized_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_normalized_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_normalized_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Total_normalized_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_gross_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_gross_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_net_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_net_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_gross_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_gross_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_gross_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_gross_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_gross_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_active_net_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_active_net_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_active_net_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_active_net_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_active_net_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_gross_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_gross_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_net_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_net_P")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_gross_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_gross_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_gross_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_gross_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_gross_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCompensated_reactive_net_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("Compensated_reactive_net_M")));
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compensated_reactive_net_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompensated_reactive_net_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Compensated_reactive_net_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_line_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1active_losses")));
        }
        
        /// <summary>
        /// Raises the L1active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L1reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1Reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L1Reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L1Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL1Volt_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L1Volt_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L1Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Volt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L1Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL1Volt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L1Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L2active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2active_losses")));
        }
        
        /// <summary>
        /// Raises the L2active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L2reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L2Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL2Volt_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L2Volt_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L2Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Volt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L2Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL2Volt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L2Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Active_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3Active_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Active_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3Active_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Active_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Active_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Active_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L3active_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3active_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3active_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3active_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3active_losses")));
        }
        
        /// <summary>
        /// Raises the L3active_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3active_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3active_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3active_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_line_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_line_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_line_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_line_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_line_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_line_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_transformer_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_transformer_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_transformer_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_transformer_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_transformer_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_losses_PAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses_P")));
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_PChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_PChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_PChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_PChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_PChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_PChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_losses_MAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses_M")));
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_MChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_MChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_MChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_losses_MChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_losses_MChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_losses_MChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3reactive_lossesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3reactive_losses")));
        }
        
        /// <summary>
        /// Raises the L3reactive_lossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_lossesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_lossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3reactive_lossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3reactive_lossesChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3reactive_lossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Ampere_squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3Ampere_squared_hours")));
        }
        
        /// <summary>
        /// Raises the L3Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Ampere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Ampere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveL3Volt_Squared_hoursAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.COSEM.COSEMObjects.TransformerAndLineLosses.ClassInstance)).Resolve("L3Volt_Squared_hours")));
        }
        
        /// <summary>
        /// Raises the L3Volt_Squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Volt_Squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Volt_Squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the L3Volt_Squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnL3Volt_Squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.L3Volt_Squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVE_LINE_LOSSES_P"))
            {
                return this.Active_line_losses_P;
            }
            if ((attribute == "ACTIVE_LINE_LOSSES_M"))
            {
                return this.Active_line_losses_M;
            }
            if ((attribute == "ACTIVE_LINE_LOSSES"))
            {
                return this.Active_line_losses;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.Active_transformer_losses_P;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.Active_transformer_losses_M;
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.Active_transformer_losses;
            }
            if ((attribute == "ACTIVE_LOSSES_P"))
            {
                return this.Active_losses_P;
            }
            if ((attribute == "ACTIVE_LOSSES_M"))
            {
                return this.Active_losses_M;
            }
            if ((attribute == "ACTIVE_LOSSES"))
            {
                return this.Active_losses;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_P"))
            {
                return this.Reactive_line_losses_P;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_M"))
            {
                return this.Reactive_line_losses_M;
            }
            if ((attribute == "REACTIVE_LINE_LOSSES"))
            {
                return this.Reactive_line_losses;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.Reactive_transformer_losses_P;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.Reactive_transformer_losses_M;
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.Reactive_transformer_losses;
            }
            if ((attribute == "REACTIVE_LOSSES_P"))
            {
                return this.Reactive_losses_P;
            }
            if ((attribute == "REACTIVE_LOSSES_M"))
            {
                return this.Reactive_losses_M;
            }
            if ((attribute == "REACTIVE_LOSSES"))
            {
                return this.Reactive_losses;
            }
            if ((attribute == "TOTAL_NORMALIZED_TRANSFORMER_LOSSES"))
            {
                return this.Total_normalized_transformer_losses;
            }
            if ((attribute == "TOTAL_NORMALIZED_LINE_LOSSES"))
            {
                return this.Total_normalized_line_losses;
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_P"))
            {
                return this.Compensated_active_gross_P;
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_P"))
            {
                return this.Compensated_active_net_P;
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_M"))
            {
                return this.Compensated_active_gross_M;
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_M"))
            {
                return this.Compensated_active_net_M;
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_P"))
            {
                return this.Compensated_reactive_gross_P;
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_P"))
            {
                return this.Compensated_reactive_net_P;
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_M"))
            {
                return this.Compensated_reactive_gross_M;
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_M"))
            {
                return this.Compensated_reactive_net_M;
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES"))
            {
                return this.L1active_line_losses;
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES_M"))
            {
                return this.L1active_line_losses_M;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L1active_transformer_losses_P;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L1active_transformer_losses_M;
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L1active_transformer_losses;
            }
            if ((attribute == "L1ACTIVE_LOSSES_P"))
            {
                return this.L1active_losses_P;
            }
            if ((attribute == "L1ACTIVE_LOSSES_M"))
            {
                return this.L1active_losses_M;
            }
            if ((attribute == "L1ACTIVE_LOSSES"))
            {
                return this.L1active_losses;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_P"))
            {
                return this.L1reactive_line_losses_P;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_M"))
            {
                return this.L1reactive_line_losses_M;
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES"))
            {
                return this.L1reactive_line_losses;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L1reactive_transformer_losses_P;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L1reactive_transformer_losses_M;
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L1reactive_transformer_losses;
            }
            if ((attribute == "L1REACTIVE_LOSSES_P"))
            {
                return this.L1Reactive_losses_P;
            }
            if ((attribute == "L1REACTIVE_LOSSES_M"))
            {
                return this.L1Reactive_losses_M;
            }
            if ((attribute == "L1REACTIVE_LOSSES"))
            {
                return this.L1Reactive_losses;
            }
            if ((attribute == "L1AMPERE_SQUARED_HOURS"))
            {
                return this.L1Ampere_squared_hours;
            }
            if ((attribute == "L1VOLT_SQUARED_HOURS"))
            {
                return this.L1Volt_squared_hours;
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_P"))
            {
                return this.L2active_line_losses_P;
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_M"))
            {
                return this.L2active_line_losses_M;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L2active_transformer_losses_P;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L2active_transformer_losses_M;
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L2active_transformer_losses;
            }
            if ((attribute == "L2ACTIVE_LOSSES_P"))
            {
                return this.L2active_losses_P;
            }
            if ((attribute == "L2ACTIVE_LOSSES_M"))
            {
                return this.L2active_losses_M;
            }
            if ((attribute == "L2ACTIVE_LOSSES"))
            {
                return this.L2active_losses;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_P"))
            {
                return this.L2reactive_line_losses_P;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_M"))
            {
                return this.L2reactive_line_losses_M;
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES"))
            {
                return this.L2reactive_line_losses;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L2reactive_transformer_losses;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L2reactive_transformer_losses_P;
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L2reactive_transformer_losses_M;
            }
            if ((attribute == "L2REACTIVE_LOSSES"))
            {
                return this.L2reactive_losses;
            }
            if ((attribute == "L2REACTIVE_LOSSES_P"))
            {
                return this.L2reactive_losses_P;
            }
            if ((attribute == "L2REACTIVE_LOSSES_M"))
            {
                return this.L2reactive_losses_M;
            }
            if ((attribute == "L2AMPERE_SQUARED_HOURS"))
            {
                return this.L2Ampere_squared_hours;
            }
            if ((attribute == "L2VOLT_SQUARED_HOURS"))
            {
                return this.L2Volt_squared_hours;
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_P"))
            {
                return this.L3Active_line_losses_P;
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_M"))
            {
                return this.L3Active_line_losses_M;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L3active_transformer_losses_P;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L3active_transformer_losses_M;
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L3active_transformer_losses;
            }
            if ((attribute == "L3ACTIVE_LOSSES_P"))
            {
                return this.L3active_losses_P;
            }
            if ((attribute == "L3ACTIVE_LOSSES_M"))
            {
                return this.L3active_losses_M;
            }
            if ((attribute == "L3ACTIVE_LOSSES"))
            {
                return this.L3active_losses;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_P"))
            {
                return this.L3reactive_line_losses_P;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_M"))
            {
                return this.L3reactive_line_losses_M;
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES"))
            {
                return this.L3reactive_line_losses;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return this.L3reactive_transformer_losses_P;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return this.L3reactive_transformer_losses_M;
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES"))
            {
                return this.L3reactive_transformer_losses;
            }
            if ((attribute == "L3REACTIVE_LOSSES_P"))
            {
                return this.L3reactive_losses_P;
            }
            if ((attribute == "L3REACTIVE_LOSSES_M"))
            {
                return this.L3reactive_losses_M;
            }
            if ((attribute == "L3REACTIVE_LOSSES"))
            {
                return this.L3reactive_losses;
            }
            if ((attribute == "L3AMPERE_SQUARED_HOURS"))
            {
                return this.L3Ampere_squared_hours;
            }
            if ((attribute == "L3VOLT_SQUARED_HOURS"))
            {
                return this.L3Volt_Squared_hours;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVE_LINE_LOSSES_P"))
            {
                this.Active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LINE_LOSSES_M"))
            {
                this.Active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LINE_LOSSES"))
            {
                this.Active_line_losses = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.Active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.Active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.Active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES_P"))
            {
                this.Active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES_M"))
            {
                this.Active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_LOSSES"))
            {
                this.Active_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES_P"))
            {
                this.Reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES_M"))
            {
                this.Reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LINE_LOSSES"))
            {
                this.Reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.Reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.Reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.Reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES_P"))
            {
                this.Reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES_M"))
            {
                this.Reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_LOSSES"))
            {
                this.Reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_NORMALIZED_TRANSFORMER_LOSSES"))
            {
                this.Total_normalized_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_NORMALIZED_LINE_LOSSES"))
            {
                this.Total_normalized_line_losses = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_GROSS_P"))
            {
                this.Compensated_active_gross_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_NET_P"))
            {
                this.Compensated_active_net_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_GROSS_M"))
            {
                this.Compensated_active_gross_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_ACTIVE_NET_M"))
            {
                this.Compensated_active_net_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_GROSS_P"))
            {
                this.Compensated_reactive_gross_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_NET_P"))
            {
                this.Compensated_reactive_net_P = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_GROSS_M"))
            {
                this.Compensated_reactive_gross_M = ((double)(value));
                return;
            }
            if ((feature == "COMPENSATED_REACTIVE_NET_M"))
            {
                this.Compensated_reactive_net_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LINE_LOSSES"))
            {
                this.L1active_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LINE_LOSSES_M"))
            {
                this.L1active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L1active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L1active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L1active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES_P"))
            {
                this.L1active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES_M"))
            {
                this.L1active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1ACTIVE_LOSSES"))
            {
                this.L1active_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES_P"))
            {
                this.L1reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES_M"))
            {
                this.L1reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LINE_LOSSES"))
            {
                this.L1reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L1reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L1reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L1reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES_P"))
            {
                this.L1Reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES_M"))
            {
                this.L1Reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L1REACTIVE_LOSSES"))
            {
                this.L1Reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L1AMPERE_SQUARED_HOURS"))
            {
                this.L1Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L1VOLT_SQUARED_HOURS"))
            {
                this.L1Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LINE_LOSSES_P"))
            {
                this.L2active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LINE_LOSSES_M"))
            {
                this.L2active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L2active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L2active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L2active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES_P"))
            {
                this.L2active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES_M"))
            {
                this.L2active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2ACTIVE_LOSSES"))
            {
                this.L2active_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES_P"))
            {
                this.L2reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES_M"))
            {
                this.L2reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LINE_LOSSES"))
            {
                this.L2reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L2reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L2reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L2reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES"))
            {
                this.L2reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES_P"))
            {
                this.L2reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L2REACTIVE_LOSSES_M"))
            {
                this.L2reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L2AMPERE_SQUARED_HOURS"))
            {
                this.L2Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L2VOLT_SQUARED_HOURS"))
            {
                this.L2Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LINE_LOSSES_P"))
            {
                this.L3Active_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LINE_LOSSES_M"))
            {
                this.L3Active_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L3active_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L3active_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L3active_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES_P"))
            {
                this.L3active_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES_M"))
            {
                this.L3active_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3ACTIVE_LOSSES"))
            {
                this.L3active_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES_P"))
            {
                this.L3reactive_line_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES_M"))
            {
                this.L3reactive_line_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LINE_LOSSES"))
            {
                this.L3reactive_line_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                this.L3reactive_transformer_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                this.L3reactive_transformer_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_TRANSFORMER_LOSSES"))
            {
                this.L3reactive_transformer_losses = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES_P"))
            {
                this.L3reactive_losses_P = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES_M"))
            {
                this.L3reactive_losses_M = ((double)(value));
                return;
            }
            if ((feature == "L3REACTIVE_LOSSES"))
            {
                this.L3reactive_losses = ((double)(value));
                return;
            }
            if ((feature == "L3AMPERE_SQUARED_HOURS"))
            {
                this.L3Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "L3VOLT_SQUARED_HOURS"))
            {
                this.L3Volt_Squared_hours = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new Active_line_losses_PProxy(this));
            }
            if ((attribute == "ACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new Active_line_losses_MProxy(this));
            }
            if ((attribute == "ACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new Active_line_lossesProxy(this));
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new Active_transformer_losses_PProxy(this));
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new Active_transformer_losses_MProxy(this));
            }
            if ((attribute == "ACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new Active_transformer_lossesProxy(this));
            }
            if ((attribute == "ACTIVE_LOSSES_P"))
            {
                return Observable.Box(new Active_losses_PProxy(this));
            }
            if ((attribute == "ACTIVE_LOSSES_M"))
            {
                return Observable.Box(new Active_losses_MProxy(this));
            }
            if ((attribute == "ACTIVE_LOSSES"))
            {
                return Observable.Box(new Active_lossesProxy(this));
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new Reactive_line_losses_PProxy(this));
            }
            if ((attribute == "REACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new Reactive_line_losses_MProxy(this));
            }
            if ((attribute == "REACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new Reactive_line_lossesProxy(this));
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new Reactive_transformer_losses_PProxy(this));
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new Reactive_transformer_losses_MProxy(this));
            }
            if ((attribute == "REACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new Reactive_transformer_lossesProxy(this));
            }
            if ((attribute == "REACTIVE_LOSSES_P"))
            {
                return Observable.Box(new Reactive_losses_PProxy(this));
            }
            if ((attribute == "REACTIVE_LOSSES_M"))
            {
                return Observable.Box(new Reactive_losses_MProxy(this));
            }
            if ((attribute == "REACTIVE_LOSSES"))
            {
                return Observable.Box(new Reactive_lossesProxy(this));
            }
            if ((attribute == "TOTAL_NORMALIZED_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new Total_normalized_transformer_lossesProxy(this));
            }
            if ((attribute == "TOTAL_NORMALIZED_LINE_LOSSES"))
            {
                return Observable.Box(new Total_normalized_line_lossesProxy(this));
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_P"))
            {
                return Observable.Box(new Compensated_active_gross_PProxy(this));
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_P"))
            {
                return Observable.Box(new Compensated_active_net_PProxy(this));
            }
            if ((attribute == "COMPENSATED_ACTIVE_GROSS_M"))
            {
                return Observable.Box(new Compensated_active_gross_MProxy(this));
            }
            if ((attribute == "COMPENSATED_ACTIVE_NET_M"))
            {
                return Observable.Box(new Compensated_active_net_MProxy(this));
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_P"))
            {
                return Observable.Box(new Compensated_reactive_gross_PProxy(this));
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_P"))
            {
                return Observable.Box(new Compensated_reactive_net_PProxy(this));
            }
            if ((attribute == "COMPENSATED_REACTIVE_GROSS_M"))
            {
                return Observable.Box(new Compensated_reactive_gross_MProxy(this));
            }
            if ((attribute == "COMPENSATED_REACTIVE_NET_M"))
            {
                return Observable.Box(new Compensated_reactive_net_MProxy(this));
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new L1active_line_lossesProxy(this));
            }
            if ((attribute == "L1ACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L1active_line_losses_MProxy(this));
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L1active_transformer_losses_PProxy(this));
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L1active_transformer_losses_MProxy(this));
            }
            if ((attribute == "L1ACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L1active_transformer_lossesProxy(this));
            }
            if ((attribute == "L1ACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L1active_losses_PProxy(this));
            }
            if ((attribute == "L1ACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L1active_losses_MProxy(this));
            }
            if ((attribute == "L1ACTIVE_LOSSES"))
            {
                return Observable.Box(new L1active_lossesProxy(this));
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new L1reactive_line_losses_PProxy(this));
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L1reactive_line_losses_MProxy(this));
            }
            if ((attribute == "L1REACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new L1reactive_line_lossesProxy(this));
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L1reactive_transformer_losses_PProxy(this));
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L1reactive_transformer_losses_MProxy(this));
            }
            if ((attribute == "L1REACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L1reactive_transformer_lossesProxy(this));
            }
            if ((attribute == "L1REACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L1Reactive_losses_PProxy(this));
            }
            if ((attribute == "L1REACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L1Reactive_losses_MProxy(this));
            }
            if ((attribute == "L1REACTIVE_LOSSES"))
            {
                return Observable.Box(new L1Reactive_lossesProxy(this));
            }
            if ((attribute == "L1AMPERE_SQUARED_HOURS"))
            {
                return Observable.Box(new L1Ampere_squared_hoursProxy(this));
            }
            if ((attribute == "L1VOLT_SQUARED_HOURS"))
            {
                return Observable.Box(new L1Volt_squared_hoursProxy(this));
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new L2active_line_losses_PProxy(this));
            }
            if ((attribute == "L2ACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L2active_line_losses_MProxy(this));
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L2active_transformer_losses_PProxy(this));
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L2active_transformer_losses_MProxy(this));
            }
            if ((attribute == "L2ACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L2active_transformer_lossesProxy(this));
            }
            if ((attribute == "L2ACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L2active_losses_PProxy(this));
            }
            if ((attribute == "L2ACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L2active_losses_MProxy(this));
            }
            if ((attribute == "L2ACTIVE_LOSSES"))
            {
                return Observable.Box(new L2active_lossesProxy(this));
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new L2reactive_line_losses_PProxy(this));
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L2reactive_line_losses_MProxy(this));
            }
            if ((attribute == "L2REACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new L2reactive_line_lossesProxy(this));
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L2reactive_transformer_lossesProxy(this));
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L2reactive_transformer_losses_PProxy(this));
            }
            if ((attribute == "L2REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L2reactive_transformer_losses_MProxy(this));
            }
            if ((attribute == "L2REACTIVE_LOSSES"))
            {
                return Observable.Box(new L2reactive_lossesProxy(this));
            }
            if ((attribute == "L2REACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L2reactive_losses_PProxy(this));
            }
            if ((attribute == "L2REACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L2reactive_losses_MProxy(this));
            }
            if ((attribute == "L2AMPERE_SQUARED_HOURS"))
            {
                return Observable.Box(new L2Ampere_squared_hoursProxy(this));
            }
            if ((attribute == "L2VOLT_SQUARED_HOURS"))
            {
                return Observable.Box(new L2Volt_squared_hoursProxy(this));
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new L3Active_line_losses_PProxy(this));
            }
            if ((attribute == "L3ACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L3Active_line_losses_MProxy(this));
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L3active_transformer_losses_PProxy(this));
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L3active_transformer_losses_MProxy(this));
            }
            if ((attribute == "L3ACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L3active_transformer_lossesProxy(this));
            }
            if ((attribute == "L3ACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L3active_losses_PProxy(this));
            }
            if ((attribute == "L3ACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L3active_losses_MProxy(this));
            }
            if ((attribute == "L3ACTIVE_LOSSES"))
            {
                return Observable.Box(new L3active_lossesProxy(this));
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_P"))
            {
                return Observable.Box(new L3reactive_line_losses_PProxy(this));
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES_M"))
            {
                return Observable.Box(new L3reactive_line_losses_MProxy(this));
            }
            if ((attribute == "L3REACTIVE_LINE_LOSSES"))
            {
                return Observable.Box(new L3reactive_line_lossesProxy(this));
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_P"))
            {
                return Observable.Box(new L3reactive_transformer_losses_PProxy(this));
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES_M"))
            {
                return Observable.Box(new L3reactive_transformer_losses_MProxy(this));
            }
            if ((attribute == "L3REACTIVE_TRANSFORMER_LOSSES"))
            {
                return Observable.Box(new L3reactive_transformer_lossesProxy(this));
            }
            if ((attribute == "L3REACTIVE_LOSSES_P"))
            {
                return Observable.Box(new L3reactive_losses_PProxy(this));
            }
            if ((attribute == "L3REACTIVE_LOSSES_M"))
            {
                return Observable.Box(new L3reactive_losses_MProxy(this));
            }
            if ((attribute == "L3REACTIVE_LOSSES"))
            {
                return Observable.Box(new L3reactive_lossesProxy(this));
            }
            if ((attribute == "L3AMPERE_SQUARED_HOURS"))
            {
                return Observable.Box(new L3Ampere_squared_hoursProxy(this));
            }
            if ((attribute == "L3VOLT_SQUARED_HOURS"))
            {
                return Observable.Box(new L3Volt_Squared_hoursProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("foo:cosem#//COSEMObjects/TransformerAndLineLosses")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses_P property
        /// </summary>
        private sealed class Active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses_P;
                }
                set
                {
                    this.ModelElement.Active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses_M property
        /// </summary>
        private sealed class Active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses_M;
                }
                set
                {
                    this.ModelElement.Active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_line_losses property
        /// </summary>
        private sealed class Active_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_line_losses;
                }
                set
                {
                    this.ModelElement.Active_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses_P property
        /// </summary>
        private sealed class Active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses_M property
        /// </summary>
        private sealed class Active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_transformer_losses property
        /// </summary>
        private sealed class Active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_transformer_losses;
                }
                set
                {
                    this.ModelElement.Active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses_P property
        /// </summary>
        private sealed class Active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses_P;
                }
                set
                {
                    this.ModelElement.Active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses_M property
        /// </summary>
        private sealed class Active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses_M;
                }
                set
                {
                    this.ModelElement.Active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_losses property
        /// </summary>
        private sealed class Active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_losses;
                }
                set
                {
                    this.ModelElement.Active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses_P property
        /// </summary>
        private sealed class Reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses_M property
        /// </summary>
        private sealed class Reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_line_losses property
        /// </summary>
        private sealed class Reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_line_losses;
                }
                set
                {
                    this.ModelElement.Reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses_P property
        /// </summary>
        private sealed class Reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses_M property
        /// </summary>
        private sealed class Reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_transformer_losses property
        /// </summary>
        private sealed class Reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.Reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses_P property
        /// </summary>
        private sealed class Reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses_P;
                }
                set
                {
                    this.ModelElement.Reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses_M property
        /// </summary>
        private sealed class Reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses_M;
                }
                set
                {
                    this.ModelElement.Reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_losses property
        /// </summary>
        private sealed class Reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_losses;
                }
                set
                {
                    this.ModelElement.Reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_normalized_transformer_losses property
        /// </summary>
        private sealed class Total_normalized_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_normalized_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Total_normalized_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_normalized_transformer_losses;
                }
                set
                {
                    this.ModelElement.Total_normalized_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_normalized_line_losses property
        /// </summary>
        private sealed class Total_normalized_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_normalized_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Total_normalized_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_normalized_line_losses;
                }
                set
                {
                    this.ModelElement.Total_normalized_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_gross_P property
        /// </summary>
        private sealed class Compensated_active_gross_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_gross_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_gross_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_gross_P;
                }
                set
                {
                    this.ModelElement.Compensated_active_gross_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_net_P property
        /// </summary>
        private sealed class Compensated_active_net_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_net_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_net_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_net_P;
                }
                set
                {
                    this.ModelElement.Compensated_active_net_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_gross_M property
        /// </summary>
        private sealed class Compensated_active_gross_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_gross_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_gross_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_gross_M;
                }
                set
                {
                    this.ModelElement.Compensated_active_gross_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_active_net_M property
        /// </summary>
        private sealed class Compensated_active_net_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_active_net_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_active_net_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_active_net_M;
                }
                set
                {
                    this.ModelElement.Compensated_active_net_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_gross_P property
        /// </summary>
        private sealed class Compensated_reactive_gross_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_gross_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_gross_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_gross_P;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_gross_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_net_P property
        /// </summary>
        private sealed class Compensated_reactive_net_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_net_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_net_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_net_P;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_net_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_gross_M property
        /// </summary>
        private sealed class Compensated_reactive_gross_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_gross_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_gross_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_gross_M;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_gross_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Compensated_reactive_net_M property
        /// </summary>
        private sealed class Compensated_reactive_net_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compensated_reactive_net_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "Compensated_reactive_net_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Compensated_reactive_net_M;
                }
                set
                {
                    this.ModelElement.Compensated_reactive_net_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_line_losses property
        /// </summary>
        private sealed class L1active_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_line_losses;
                }
                set
                {
                    this.ModelElement.L1active_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_line_losses_M property
        /// </summary>
        private sealed class L1active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses_P property
        /// </summary>
        private sealed class L1active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses_M property
        /// </summary>
        private sealed class L1active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_transformer_losses property
        /// </summary>
        private sealed class L1active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L1active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses_P property
        /// </summary>
        private sealed class L1active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses_P;
                }
                set
                {
                    this.ModelElement.L1active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses_M property
        /// </summary>
        private sealed class L1active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses_M;
                }
                set
                {
                    this.ModelElement.L1active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1active_losses property
        /// </summary>
        private sealed class L1active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1active_losses;
                }
                set
                {
                    this.ModelElement.L1active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses_P property
        /// </summary>
        private sealed class L1reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses_M property
        /// </summary>
        private sealed class L1reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_line_losses property
        /// </summary>
        private sealed class L1reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L1reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses_P property
        /// </summary>
        private sealed class L1reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses_M property
        /// </summary>
        private sealed class L1reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1reactive_transformer_losses property
        /// </summary>
        private sealed class L1reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L1reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses_P property
        /// </summary>
        private sealed class L1Reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses_M property
        /// </summary>
        private sealed class L1Reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Reactive_losses property
        /// </summary>
        private sealed class L1Reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Reactive_losses;
                }
                set
                {
                    this.ModelElement.L1Reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Ampere_squared_hours property
        /// </summary>
        private sealed class L1Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L1Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L1Volt_squared_hours property
        /// </summary>
        private sealed class L1Volt_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L1Volt_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L1Volt_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L1Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.L1Volt_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_line_losses_P property
        /// </summary>
        private sealed class L2active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_line_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_line_losses_M property
        /// </summary>
        private sealed class L2active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses_P property
        /// </summary>
        private sealed class L2active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses_M property
        /// </summary>
        private sealed class L2active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_transformer_losses property
        /// </summary>
        private sealed class L2active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L2active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses_P property
        /// </summary>
        private sealed class L2active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses_P;
                }
                set
                {
                    this.ModelElement.L2active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses_M property
        /// </summary>
        private sealed class L2active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses_M;
                }
                set
                {
                    this.ModelElement.L2active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2active_losses property
        /// </summary>
        private sealed class L2active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2active_losses;
                }
                set
                {
                    this.ModelElement.L2active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses_P property
        /// </summary>
        private sealed class L2reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses_M property
        /// </summary>
        private sealed class L2reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_line_losses property
        /// </summary>
        private sealed class L2reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses property
        /// </summary>
        private sealed class L2reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses_P property
        /// </summary>
        private sealed class L2reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_transformer_losses_M property
        /// </summary>
        private sealed class L2reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses property
        /// </summary>
        private sealed class L2reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses;
                }
                set
                {
                    this.ModelElement.L2reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses_P property
        /// </summary>
        private sealed class L2reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L2reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2reactive_losses_M property
        /// </summary>
        private sealed class L2reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L2reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2Ampere_squared_hours property
        /// </summary>
        private sealed class L2Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L2Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L2Volt_squared_hours property
        /// </summary>
        private sealed class L2Volt_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L2Volt_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L2Volt_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L2Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.L2Volt_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Active_line_losses_P property
        /// </summary>
        private sealed class L3Active_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Active_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Active_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Active_line_losses_P;
                }
                set
                {
                    this.ModelElement.L3Active_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Active_line_losses_M property
        /// </summary>
        private sealed class L3Active_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Active_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Active_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Active_line_losses_M;
                }
                set
                {
                    this.ModelElement.L3Active_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses_P property
        /// </summary>
        private sealed class L3active_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses_M property
        /// </summary>
        private sealed class L3active_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_transformer_losses property
        /// </summary>
        private sealed class L3active_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_transformer_losses;
                }
                set
                {
                    this.ModelElement.L3active_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses_P property
        /// </summary>
        private sealed class L3active_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses_P;
                }
                set
                {
                    this.ModelElement.L3active_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses_M property
        /// </summary>
        private sealed class L3active_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses_M;
                }
                set
                {
                    this.ModelElement.L3active_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3active_losses property
        /// </summary>
        private sealed class L3active_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3active_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3active_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3active_losses;
                }
                set
                {
                    this.ModelElement.L3active_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses_P property
        /// </summary>
        private sealed class L3reactive_line_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses_M property
        /// </summary>
        private sealed class L3reactive_line_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_line_losses property
        /// </summary>
        private sealed class L3reactive_line_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_line_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_line_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_line_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_line_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses_P property
        /// </summary>
        private sealed class L3reactive_transformer_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses_M property
        /// </summary>
        private sealed class L3reactive_transformer_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_transformer_losses property
        /// </summary>
        private sealed class L3reactive_transformer_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_transformer_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_transformer_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_transformer_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_transformer_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses_P property
        /// </summary>
        private sealed class L3reactive_losses_PProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_losses_PProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses_P")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses_P;
                }
                set
                {
                    this.ModelElement.L3reactive_losses_P = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses_M property
        /// </summary>
        private sealed class L3reactive_losses_MProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_losses_MProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses_M")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses_M;
                }
                set
                {
                    this.ModelElement.L3reactive_losses_M = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3reactive_losses property
        /// </summary>
        private sealed class L3reactive_lossesProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3reactive_lossesProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3reactive_losses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3reactive_losses;
                }
                set
                {
                    this.ModelElement.L3reactive_losses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Ampere_squared_hours property
        /// </summary>
        private sealed class L3Ampere_squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Ampere_squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Ampere_squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.L3Ampere_squared_hours = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the L3Volt_Squared_hours property
        /// </summary>
        private sealed class L3Volt_Squared_hoursProxy : ModelPropertyChange<ITransformerAndLineLosses, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public L3Volt_Squared_hoursProxy(ITransformerAndLineLosses modelElement) : 
                    base(modelElement, "L3Volt_Squared_hours")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.L3Volt_Squared_hours;
                }
                set
                {
                    this.ModelElement.L3Volt_Squared_hours = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for TransformerAndLineLosses
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TransformerAndLineLosses))]
    [XmlDefaultImplementationTypeAttribute(typeof(TransformerAndLineLosses))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TransformerAndLineLosses")]
    public partial interface ITransformerAndLineLosses : IModelElement, IData
    {
        
        /// <summary>
        /// The Active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Total_normalized_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Total_normalized_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Total_normalized_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Total_normalized_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_active_gross_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_active_gross_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_active_net_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_active_net_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_active_gross_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_active_gross_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_active_net_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_active_net_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_reactive_gross_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_reactive_net_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_reactive_net_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_reactive_gross_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_reactive_gross_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Compensated_reactive_net_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Compensated_reactive_net_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1active_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1reactive_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1Reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1Reactive_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1Reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1Reactive_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1Reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1Reactive_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1Ampere_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L1Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L1Volt_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2active_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2reactive_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2Ampere_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L2Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L2Volt_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3Active_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3Active_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3Active_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3Active_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3active_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3active_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_line_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_line_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_line_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_line_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_line_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_line_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_transformer_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_transformer_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_transformer_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_transformer_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_losses_P property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_losses_P
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_losses_M property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_losses_M
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3reactive_losses property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3reactive_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3Ampere_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The L3Volt_Squared_hours property
        /// </summary>
        [CategoryAttribute("TransformerAndLineLosses")]
        [XmlAttributeAttribute(true)]
        Nullable<double> L3Volt_Squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Active_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Active_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Active_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_normalized_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Total_normalized_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Total_normalized_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_normalized_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_gross_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_gross_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_active_net_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_active_net_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_active_net_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_PChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_gross_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_gross_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_gross_MChanging;
        
        /// <summary>
        /// Gets fired when the Compensated_reactive_net_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanged;
        
        /// <summary>
        /// Gets fired before the Compensated_reactive_net_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Compensated_reactive_net_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1active_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1active_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1reactive_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1reactive_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L1Reactive_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L1Reactive_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L1Ampere_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L1Ampere_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L1Volt_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L1Volt_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L1Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2active_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2active_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2active_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L2reactive_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L2reactive_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L2Ampere_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2Ampere_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L2Volt_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L2Volt_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L2Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Active_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3Active_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3Active_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Active_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3active_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3active_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3active_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3active_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_line_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_line_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_line_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_transformer_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_transformer_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_transformer_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_P property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_P property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_losses_PChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses_M property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses_M property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_losses_MChanging;
        
        /// <summary>
        /// Gets fired when the L3reactive_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_lossesChanged;
        
        /// <summary>
        /// Gets fired before the L3reactive_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3reactive_lossesChanging;
        
        /// <summary>
        /// Gets fired when the L3Ampere_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Ampere_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the L3Volt_Squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the L3Volt_Squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> L3Volt_Squared_hoursChanging;
    }
    
    /// <summary>
    /// The public interface for ExtendedPhaseAngleMeasurement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ExtendedPhaseAngleMeasurement))]
    [XmlDefaultImplementationTypeAttribute(typeof(ExtendedPhaseAngleMeasurement))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ExtendedPhaseAngleMeasurement")]
    public partial interface IExtendedPhaseAngleMeasurement : IModelElement, IData
    {
        
        /// <summary>
        /// The FromUL1toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL1toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL1toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL1toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL1toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL1toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL1toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL2toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL2toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromUL3toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromUL3toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL1toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL1toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL2toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL2toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL3toIL0 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL3toIL0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toUL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toUL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toUL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toUL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toUL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toUL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toIL1 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toIL2 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromIL0toIL3 property
        /// </summary>
        [CategoryAttribute("ExtendedPhaseAngleMeasurement")]
        [XmlAttributeAttribute(true)]
        Nullable<double> FromIL0toIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the FromUL1toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL1toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL1toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL2toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL2toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromUL3toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromUL3toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromUL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL1toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL1toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL1toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL2toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL2toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL2toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL3toIL0 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL0Changed;
        
        /// <summary>
        /// Gets fired before the FromIL3toIL0 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL3toIL0Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toUL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toUL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toUL3Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL1Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL1Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL2Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL2Changing;
        
        /// <summary>
        /// Gets fired when the FromIL0toIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL3Changed;
        
        /// <summary>
        /// Gets fired before the FromIL0toIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FromIL0toIL3Changing;
    }
    
    /// <summary>
    /// The public interface for ElectricityHarmonics
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityHarmonics))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityHarmonics))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityHarmonics")]
    public partial interface IElectricityHarmonics : IModelElement, IData
    {
        
        /// <summary>
        /// The total property
        /// </summary>
        [DisplayNameAttribute("total")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("total")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Total
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fundamental_harmonic property
        /// </summary>
        [DisplayNameAttribute("fundamental_harmonic")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("fundamental_harmonic")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Fundamental_harmonic
        {
            get;
            set;
        }
        
        /// <summary>
        /// The harmonic property
        /// </summary>
        [DisplayNameAttribute("harmonic")]
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlElementNameAttribute("harmonic")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Harmonic
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Total_Harmoni_Distortion property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Total_Harmoni_Distortion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Total_Demand_Distortion property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Total_Demand_Distortion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The All_harmonics property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        Nullable<double> All_harmonics
        {
            get;
            set;
        }
        
        /// <summary>
        /// The All_harmonics_to_nominal_value_ratio property
        /// </summary>
        [CategoryAttribute("ElectricityHarmonics")]
        [XmlAttributeAttribute(true)]
        Nullable<double> All_harmonics_to_nominal_value_ratio
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Total property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TotalChanged;
        
        /// <summary>
        /// Gets fired before the Total property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TotalChanging;
        
        /// <summary>
        /// Gets fired when the Fundamental_harmonic property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanged;
        
        /// <summary>
        /// Gets fired before the Fundamental_harmonic property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanging;
        
        /// <summary>
        /// Gets fired when the Harmonic property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicChanged;
        
        /// <summary>
        /// Gets fired before the Harmonic property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> HarmonicChanging;
        
        /// <summary>
        /// Gets fired when the Total_Harmoni_Distortion property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the Total_Harmoni_Distortion property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the Total_Demand_Distortion property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the Total_Demand_Distortion property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> All_harmonicsChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> All_harmonicsChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics_to_nominal_value_ratio property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics_to_nominal_value_ratio property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanging;
    }
    
    /// <summary>
    /// The public interface for MeasurementValues
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeasurementValues))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeasurementValues))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementValues")]
    public partial interface IMeasurementValues : IModelElement, IData
    {
        
        /// <summary>
        /// The Billing_period_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Billing_period_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Cumulative_minimum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Cumulative_minimum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Cumulative_maximum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Cumulative_maximum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Minimum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Minimum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Current_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Current_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Last_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Last_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Maximum property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Maximum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Instantaneous_value property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Instantaneous_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_integral property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Time_integral
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Under_limit_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Under_limit_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Under_limit_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Under_limit_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Over_limit_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Over_limit_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Over_limit_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Over_limit_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_threshold property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Missing_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_occurrence_counter property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Missing_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_duration property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Missing_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Missing_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_under_limit property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        string Time_threshold_for_under_limit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_over_limit property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        string Time_threshold_for_over_limit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_missing_magnitude property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        string Time_threshold_for_missing_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Contracted_value property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Contracted_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Minimum_for_recording_interval property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Minimum_for_recording_interval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Maximum_for_recording_interval property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Maximum_for_recording_interval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Test_average property
        /// </summary>
        [CategoryAttribute("MeasurementValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Test_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The calculations property
        /// </summary>
        [DisplayNameAttribute("calculations")]
        [CategoryAttribute("MeasurementValues")]
        [XmlElementNameAttribute("calculations")]
        [XmlAttributeAttribute(true)]
        IElectricityValues Calculations
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Billing_period_average property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Billing_period_averageChanged;
        
        /// <summary>
        /// Gets fired before the Billing_period_average property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Billing_period_averageChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_minimum property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Cumulative_minimumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_minimum property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Cumulative_minimumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_maximum property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Cumulative_maximumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_maximum property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Cumulative_maximumChanging;
        
        /// <summary>
        /// Gets fired when the Minimum property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MinimumChanged;
        
        /// <summary>
        /// Gets fired before the Minimum property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MinimumChanging;
        
        /// <summary>
        /// Gets fired when the Current_average property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Current_averageChanged;
        
        /// <summary>
        /// Gets fired before the Current_average property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Current_averageChanging;
        
        /// <summary>
        /// Gets fired when the Last_average property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Last_averageChanged;
        
        /// <summary>
        /// Gets fired before the Last_average property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Last_averageChanging;
        
        /// <summary>
        /// Gets fired when the Maximum property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MaximumChanged;
        
        /// <summary>
        /// Gets fired before the Maximum property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MaximumChanging;
        
        /// <summary>
        /// Gets fired when the Instantaneous_value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Instantaneous_value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Time_integral property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_integralChanged;
        
        /// <summary>
        /// Gets fired before the Time_integral property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_integralChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_threshold property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_threshold property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_occurrence_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_occurrence_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_magnitude property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_magnitude property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_threshold property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_threshold property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_occurrence_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_occurrence_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_magnitude property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_magnitude property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Missing_threshold property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Missing_threshold property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Missing_occurrence_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Missing_occurrence_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Missing_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_durationChanged;
        
        /// <summary>
        /// Gets fired before the Missing_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_durationChanging;
        
        /// <summary>
        /// Gets fired when the Missing_magnitude property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Missing_magnitude property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_under_limit property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_under_limit property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_over_limit property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_over_limit property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_missing_magnitude property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_missing_magnitude property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Contracted_value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Contracted_valueChanged;
        
        /// <summary>
        /// Gets fired before the Contracted_value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Contracted_valueChanging;
        
        /// <summary>
        /// Gets fired when the Minimum_for_recording_interval property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Minimum_for_recording_interval property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Maximum_for_recording_interval property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Maximum_for_recording_interval property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Test_average property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Test_averageChanged;
        
        /// <summary>
        /// Gets fired before the Test_average property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Test_averageChanging;
        
        /// <summary>
        /// Gets fired before the Calculations property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CalculationsChanging;
        
        /// <summary>
        /// Gets fired when the Calculations property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CalculationsChanged;
    }
    
    /// <summary>
    /// The public interface for ElectricityValues
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityValues))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityValues))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityValues")]
    public partial interface IElectricityValues : IModelElement, IData
    {
        
        /// <summary>
        /// The ActivePowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerpL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerpall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerpall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerpL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerpL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowermL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowermL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowermL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowermall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowermall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerpL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerpL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerpL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerpall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerpall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowermL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowermL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowermL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowermall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowermall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIIIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIVL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIVL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIVL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIVL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIVL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIVL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactivePowerQIVall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactivePowerQIVall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowerpL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowerpL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowerpL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowerpL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowerpL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowerpL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowerpAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowerpAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowermL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowermL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowermL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowermL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowermL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowermL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentPowermAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentPowermAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CurrentL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> CurrentL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CurrentL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> CurrentL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CurrentL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> CurrentL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CurrentAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> CurrentAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VoltageL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> VoltageL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VoltageL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> VoltageL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VoltageL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> VoltageL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VoltageAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> VoltageAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerFactorL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> PowerFactorL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerFactorL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> PowerFactorL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerFactorL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> PowerFactorL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerFactorAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> PowerFactorAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SupplyFrequencyL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> SupplyFrequencyL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SupplyFrequencyL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> SupplyFrequencyL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SupplyFrequencyL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> SupplyFrequencyL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SupplyFrequencyAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> SupplyFrequencyAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsPL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsPL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsPL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsPL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsPL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsPL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsPAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsPAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsML1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsML1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsML2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsML2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsML3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsML3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerAbsMAll property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerAbsMAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIIL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIIL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIIL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIIL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIIL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIIL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIIIall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIIIall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIVL1 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIVL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIVL2 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIVL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIVL3 property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIVL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivePowerQIVall property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActivePowerQIVall
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Angles property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Angles
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Pulses property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Pulses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squaredHours property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ampere_squaredHours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squaredHours property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Volt_squaredHours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NeutralCurrent property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> NeutralCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NeutralVoltage property
        /// </summary>
        [CategoryAttribute("ElectricityValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> NeutralVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ActivePowerpL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerpall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowermall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowermall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermAllChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowermAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentPowermAllChanging;
        
        /// <summary>
        /// Gets fired when the CurrentL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL1Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL1Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL2Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL2Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL3Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentL3Changing;
        
        /// <summary>
        /// Gets fired when the CurrentAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentAllChanged;
        
        /// <summary>
        /// Gets fired before the CurrentAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CurrentAllChanging;
        
        /// <summary>
        /// Gets fired when the VoltageL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL1Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL1Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL2Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL2Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL3Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageL3Changing;
        
        /// <summary>
        /// Gets fired when the VoltageAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageAllChanged;
        
        /// <summary>
        /// Gets fired before the VoltageAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageAllChanging;
        
        /// <summary>
        /// Gets fired when the PowerFactorL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL1Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL1Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL2Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL2Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL3Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorL3Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorAllChanged;
        
        /// <summary>
        /// Gets fired before the PowerFactorAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerFactorAllChanging;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanged;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsMAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsMAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVall property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVall property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the Angles property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AnglesChanged;
        
        /// <summary>
        /// Gets fired before the Angles property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AnglesChanging;
        
        /// <summary>
        /// Gets fired when the Pulses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PulsesChanged;
        
        /// <summary>
        /// Gets fired before the Pulses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PulsesChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredHours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredHours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredHours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredHours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the NeutralCurrent property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NeutralCurrentChanged;
        
        /// <summary>
        /// Gets fired before the NeutralCurrent property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NeutralCurrentChanging;
        
        /// <summary>
        /// Gets fired when the NeutralVoltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NeutralVoltageChanged;
        
        /// <summary>
        /// Gets fired before the NeutralVoltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NeutralVoltageChanging;
    }
    
    /// <summary>
    /// The public interface for MeterTemperEventRelatedObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeterTemperEventRelatedObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeterTemperEventRelatedObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeterTemperEventRelatedObject")]
    public partial interface IMeterTemperEventRelatedObject : IModelElement, IData
    {
        
        /// <summary>
        /// The Meter_open_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Meter_open_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Meter_open_event_timestamp property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Meter_open_event_timestamp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Meter_open_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Meter_open_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Meter_open_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Meter_open_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Terminal_cover_open_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Terminal_cover_open_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Terminal_cover_open_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Terminal_cover_open_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Terminal_cover_open_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tilt_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Tilt_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tilt_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Tilt_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tilt_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Tilt_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tilt_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Tilt_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Strong_DC_magnetic_field_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Strong_DC_magnetic_field_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Strong_DC_magnetic_field_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Strong_DC_magnetic_field_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Strong_DC_magnetic_field_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Supply_control_switch_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Supply_control_switch_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Supply_control_switch_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Supply_control_switch_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Supply_control_switch_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Supply_control_switch_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Supply_control_switch_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Supply_control_switch_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Metrology_tamper_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Metrology_tamper_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Metrology_tamper_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Metrology_tamper_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Metrology_tamper_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Metrology_tamper_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Metrology_tamper_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Metrology_tamper_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communication_tamper_event_counter property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Communication_tamper_event_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communication_tamper_event_time property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Communication_tamper_event_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communication_tamper_event_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Communication_tamper_event_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communication_tamper_event_cumulative_duration property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Communication_tamper_event_cumulative_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Manufacturer_specific property
        /// </summary>
        [CategoryAttribute("MeterTemperEventRelatedObject")]
        [XmlAttributeAttribute(true)]
        string Manufacturer_specific
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Meter_open_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_timestamp property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_timestamp property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_timestampChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Meter_open_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Meter_open_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Meter_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Terminal_cover_open_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Terminal_cover_open_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Terminal_cover_open_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Tilt_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Tilt_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Tilt_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Strong_DC_magnetic_field_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Strong_DC_magnetic_field_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Strong_DC_magnetic_field_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Supply_control_switch_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Supply_control_switch_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Supply_control_switch_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Metrology_tamper_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Metrology_tamper_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Metrology_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_counterChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_timeChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_durationChanging;
        
        /// <summary>
        /// Gets fired when the Communication_tamper_event_cumulative_duration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanged;
        
        /// <summary>
        /// Gets fired before the Communication_tamper_event_cumulative_duration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_tamper_event_cumulative_durationChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer_specific property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Manufacturer_specificChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer_specific property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Manufacturer_specificChanging;
    }
    
    /// <summary>
    /// The public interface for ProfileEntryDigitalSignatureObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ProfileEntryDigitalSignatureObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ProfileEntryDigitalSignatureObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ProfileEntryDigitalSignatureObject")]
    public partial interface IProfileEntryDigitalSignatureObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ProfileEntryDigitalSignatureObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for EventCounterObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EventCounterObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(EventCounterObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventCounterObject")]
    public partial interface IEventCounterObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("EventCounterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for CurrentlyActiveTariff
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CurrentlyActiveTariff))]
    [XmlDefaultImplementationTypeAttribute(typeof(CurrentlyActiveTariff))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CurrentlyActiveTariff")]
    public partial interface ICurrentlyActiveTariff : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("CurrentlyActiveTariff")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for ConsumerMessage
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConsumerMessage))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConsumerMessage))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ConsumerMessage")]
    public partial interface IConsumerMessage : IModelElement, IData
    {
        
        /// <summary>
        /// The Consumer_message_via_local_consumer_information_port property
        /// </summary>
        [CategoryAttribute("ConsumerMessage")]
        [XmlAttributeAttribute(true)]
        string Consumer_message_via_local_consumer_information_port
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Consumer_message_via_meter_display property
        /// </summary>
        [CategoryAttribute("ConsumerMessage")]
        [XmlAttributeAttribute(true)]
        string Consumer_message_via_meter_display
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Consumer_message_via_local_consumer_information_port property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Consumer_message_via_local_consumer_information_portChanged;
        
        /// <summary>
        /// Gets fired before the Consumer_message_via_local_consumer_information_port property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Consumer_message_via_local_consumer_information_portChanging;
        
        /// <summary>
        /// Gets fired when the Consumer_message_via_meter_display property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Consumer_message_via_meter_displayChanged;
        
        /// <summary>
        /// Gets fired before the Consumer_message_via_meter_display property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Consumer_message_via_meter_displayChanging;
    }
    
    /// <summary>
    /// The public interface for CommunicationPortLogParameters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CommunicationPortLogParameters))]
    [XmlDefaultImplementationTypeAttribute(typeof(CommunicationPortLogParameters))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CommunicationPortLogParameters")]
    public partial interface ICommunicationPortLogParameters : IModelElement, IData
    {
        
        /// <summary>
        /// The Reserved property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        string Reserved
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Number_connections property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        string Number_connections
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communication_port_parameter property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        string Communication_port_parameter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GSM_field_strength property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        string GSM_field_strength
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Communicationaddress property
        /// </summary>
        [CategoryAttribute("CommunicationPortLogParameters")]
        [XmlAttributeAttribute(true)]
        string Communicationaddress
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Reserved property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReservedChanged;
        
        /// <summary>
        /// Gets fired before the Reserved property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReservedChanging;
        
        /// <summary>
        /// Gets fired when the Number_connections property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Number_connectionsChanged;
        
        /// <summary>
        /// Gets fired before the Number_connections property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Number_connectionsChanging;
        
        /// <summary>
        /// Gets fired when the Communication_port_parameter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_port_parameterChanged;
        
        /// <summary>
        /// Gets fired before the Communication_port_parameter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Communication_port_parameterChanging;
        
        /// <summary>
        /// Gets fired when the GSM_field_strength property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GSM_field_strengthChanged;
        
        /// <summary>
        /// Gets fired before the GSM_field_strength property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GSM_field_strengthChanging;
        
        /// <summary>
        /// Gets fired when the Communicationaddress property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CommunicationaddressChanged;
        
        /// <summary>
        /// Gets fired before the Communicationaddress property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> CommunicationaddressChanging;
    }
    
    /// <summary>
    /// The public interface for EventCode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EventCode))]
    [XmlDefaultImplementationTypeAttribute(typeof(EventCode))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventCode")]
    public partial interface IEventCode : IModelElement, IData
    {
        
        /// <summary>
        /// The event_code_object property
        /// </summary>
        [DisplayNameAttribute("event_code_object")]
        [CategoryAttribute("EventCode")]
        [XmlElementNameAttribute("event_code_object")]
        [XmlAttributeAttribute(true)]
        string Event_code_object
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Event_code_object property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Event_code_objectChanged;
        
        /// <summary>
        /// Gets fired before the Event_code_object property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Event_code_objectChanging;
    }
    
    /// <summary>
    /// The public interface for StatusRegister
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StatusRegister))]
    [XmlDefaultImplementationTypeAttribute(typeof(StatusRegister))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegister")]
    public partial interface IStatusRegister : IModelElement, IRegister
    {
    }
    
    /// <summary>
    /// The public interface for EnvironmentRelatedParameters
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EnvironmentRelatedParameters))]
    [XmlDefaultImplementationTypeAttribute(typeof(EnvironmentRelatedParameters))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EnvironmentRelatedParameters")]
    public partial interface IEnvironmentRelatedParameters : IModelElement, IRegister
    {
        
        /// <summary>
        /// The ambient_temperature property
        /// </summary>
        [DisplayNameAttribute("ambient_temperature")]
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlElementNameAttribute("ambient_temperature")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ambient_temperature
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ambient_pressure property
        /// </summary>
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ambient_pressure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Relative_humidity property
        /// </summary>
        [CategoryAttribute("EnvironmentRelatedParameters")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Relative_humidity
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Ambient_temperature property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ambient_temperatureChanged;
        
        /// <summary>
        /// Gets fired before the Ambient_temperature property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ambient_temperatureChanging;
        
        /// <summary>
        /// Gets fired when the Ambient_pressure property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ambient_pressureChanged;
        
        /// <summary>
        /// Gets fired before the Ambient_pressure property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ambient_pressureChanging;
        
        /// <summary>
        /// Gets fired when the Relative_humidity property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Relative_humidityChanged;
        
        /// <summary>
        /// Gets fired before the Relative_humidity property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Relative_humidityChanging;
    }
    
    /// <summary>
    /// The public interface for OperatingTime
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OperatingTime))]
    [XmlDefaultImplementationTypeAttribute(typeof(OperatingTime))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OperatingTime")]
    public partial interface IOperatingTime : IModelElement, IData
    {
        
        /// <summary>
        /// The Timeofoperation property
        /// </summary>
        [CategoryAttribute("OperatingTime")]
        [XmlAttributeAttribute(true)]
        string Timeofoperation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Timeofoperation property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeofoperationChanged;
        
        /// <summary>
        /// Gets fired before the Timeofoperation property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeofoperationChanging;
    }
    
    /// <summary>
    /// The public interface for PowerFailureMonitoring
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PowerFailureMonitoring))]
    [XmlDefaultImplementationTypeAttribute(typeof(PowerFailureMonitoring))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PowerFailureMonitoring")]
    public partial interface IPowerFailureMonitoring : IModelElement, IData
    {
        
        /// <summary>
        /// The FailuresAllPhases property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> FailuresAllPhases
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailuresL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> FailuresL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailuresL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> FailuresL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailuresL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> FailuresL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FailuresAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> FailuresAny
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Auxiliarysupply property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string Auxiliarysupply
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LongFailsAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> LongFailsAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LongFailsL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> LongFailsL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LongFailsL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> LongFailsL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LongFailsL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> LongFailsL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LongFailsAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> LongFailsAny
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string TimeAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string TimeL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string TimeL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string TimeL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimeAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        string TimeAny
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DurationAll property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> DurationAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DurationL1 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> DurationL1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DurationL2 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> DurationL2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DurationL3 property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> DurationL3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DurationAny property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> DurationAny
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_long_powerfailure property
        /// </summary>
        [CategoryAttribute("PowerFailureMonitoring")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Time_threshold_long_powerfailure
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the FailuresAllPhases property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanged;
        
        /// <summary>
        /// Gets fired before the FailuresAllPhases property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanging;
        
        /// <summary>
        /// Gets fired when the FailuresL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL1Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL1Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL2Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL2Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL3Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresL3Changing;
        
        /// <summary>
        /// Gets fired when the FailuresAny property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresAnyChanged;
        
        /// <summary>
        /// Gets fired before the FailuresAny property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FailuresAnyChanging;
        
        /// <summary>
        /// Gets fired when the Auxiliarysupply property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanged;
        
        /// <summary>
        /// Gets fired before the Auxiliarysupply property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsAllChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsAllChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL1Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL1Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL2Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL2Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL3Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsL3Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsAny property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsAnyChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsAny property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LongFailsAnyChanging;
        
        /// <summary>
        /// Gets fired when the TimeAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeAllChanged;
        
        /// <summary>
        /// Gets fired before the TimeAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeAllChanging;
        
        /// <summary>
        /// Gets fired when the TimeL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL1Changed;
        
        /// <summary>
        /// Gets fired before the TimeL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL1Changing;
        
        /// <summary>
        /// Gets fired when the TimeL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL2Changed;
        
        /// <summary>
        /// Gets fired before the TimeL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL2Changing;
        
        /// <summary>
        /// Gets fired when the TimeL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL3Changed;
        
        /// <summary>
        /// Gets fired before the TimeL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeL3Changing;
        
        /// <summary>
        /// Gets fired when the TimeAny property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeAnyChanged;
        
        /// <summary>
        /// Gets fired before the TimeAny property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeAnyChanging;
        
        /// <summary>
        /// Gets fired when the DurationAll property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationAllChanged;
        
        /// <summary>
        /// Gets fired before the DurationAll property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationAllChanging;
        
        /// <summary>
        /// Gets fired when the DurationL1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL1Changed;
        
        /// <summary>
        /// Gets fired before the DurationL1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL1Changing;
        
        /// <summary>
        /// Gets fired when the DurationL2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL2Changed;
        
        /// <summary>
        /// Gets fired before the DurationL2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL2Changing;
        
        /// <summary>
        /// Gets fired when the DurationL3 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL3Changed;
        
        /// <summary>
        /// Gets fired before the DurationL3 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationL3Changing;
        
        /// <summary>
        /// Gets fired when the DurationAny property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationAnyChanged;
        
        /// <summary>
        /// Gets fired before the DurationAny property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DurationAnyChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_long_powerfailure property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_long_powerfailure property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanging;
    }
    
    /// <summary>
    /// The public interface for BatteryEntries
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BatteryEntries))]
    [XmlDefaultImplementationTypeAttribute(typeof(BatteryEntries))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/BatteryEntries")]
    public partial interface IBatteryEntries : IModelElement, IData
    {
        
        /// <summary>
        /// The Battery_use_time_counter property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Battery_use_time_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Battery_charge_display property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        string Battery_charge_display
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Date_of_next_battery_change property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        string Date_of_next_battery_change
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Battery_voltage property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Battery_voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Battery_initial_capacity property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Battery_initial_capacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Battery_installation_date_and_time property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        string Battery_installation_date_and_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Battery_estimated_remaining_use_time property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        string Battery_estimated_remaining_use_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Aux_supply_use_time_counter property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Aux_supply_use_time_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Aux_voltage property
        /// </summary>
        [CategoryAttribute("BatteryEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Aux_voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Battery_use_time_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Battery_use_time_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Battery_charge_display property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_charge_displayChanged;
        
        /// <summary>
        /// Gets fired before the Battery_charge_display property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_charge_displayChanging;
        
        /// <summary>
        /// Gets fired when the Date_of_next_battery_change property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanged;
        
        /// <summary>
        /// Gets fired before the Date_of_next_battery_change property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_voltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Battery_voltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Battery_initial_capacity property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanged;
        
        /// <summary>
        /// Gets fired before the Battery_initial_capacity property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanging;
        
        /// <summary>
        /// Gets fired when the Battery_installation_date_and_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_installation_date_and_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_estimated_remaining_use_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_estimated_remaining_use_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanging;
        
        /// <summary>
        /// Gets fired when the Aux_supply_use_time_counter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Aux_supply_use_time_counter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Aux_voltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Aux_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Aux_voltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Aux_voltageChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityRelatedStatusDataMapped
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityRelatedStatusDataMapped))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityRelatedStatusDataMapped))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityRelatedStatusDataMapped")]
    public partial interface IElectricityRelatedStatusDataMapped : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for ElectricityRelatedStatusData
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityRelatedStatusData))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityRelatedStatusData))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityRelatedStatusData")]
    public partial interface IElectricityRelatedStatusData : IModelElement, IData
    {
        
        /// <summary>
        /// The Status_information_missing_voltage property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        string Status_information_missing_voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Status_information_missing_current property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        string Status_information_missing_current
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Status_information_current_without_voltage property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        string Status_information_current_without_voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Status_information_auxiliary_power_supply property
        /// </summary>
        [CategoryAttribute("ElectricityRelatedStatusData")]
        [XmlAttributeAttribute(true)]
        string Status_information_auxiliary_power_supply
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Status_information_missing_voltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_missing_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_missing_voltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_missing_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_missing_current property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_missing_currentChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_missing_current property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_missing_currentChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_current_without_voltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_current_without_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_current_without_voltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_current_without_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Status_information_auxiliary_power_supply property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_auxiliary_power_supplyChanged;
        
        /// <summary>
        /// Gets fired before the Status_information_auxiliary_power_supply property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Status_information_auxiliary_power_supplyChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityMeteringPointID
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityMeteringPointID))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityMeteringPointID))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityMeteringPointID")]
    public partial interface IElectricityMeteringPointID : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ElectricityMeteringPointID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for MeasurementMethods
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeasurementMethods))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeasurementMethods))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementMethods")]
    public partial interface IMeasurementMethods : IModelElement, IData
    {
        
        /// <summary>
        /// The Algorithm_for_active_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_active_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_active_energy_management property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_active_energy_management
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_reactive_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_energy_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_reactive_energy_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_power_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_apparent_power_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_energy_measurement property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_apparent_energy_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Algorithm_for_power_factor_calculation property
        /// </summary>
        [CategoryAttribute("MeasurementMethods")]
        [XmlAttributeAttribute(true)]
        string Algorithm_for_power_factor_calculation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_power_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_power_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_energy_management property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_energy_management property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_power_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_power_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_energy_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_energy_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_power_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_power_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_energy_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_energy_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_power_factor_calculation property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_power_factor_calculation property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanging;
    }
    
    /// <summary>
    /// The public interface for Coefficients
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Coefficients))]
    [XmlDefaultImplementationTypeAttribute(typeof(Coefficients))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Coefficients")]
    public partial interface ICoefficients : IModelElement, IData
    {
        
        /// <summary>
        /// The Transformer_magnetic_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Transformer_magnetic_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transformer_iron_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Transformer_iron_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Line_resistance_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Line_resistance_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Line_reactance_losses property
        /// </summary>
        [CategoryAttribute("Coefficients")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Line_reactance_losses
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Transformer_magnetic_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformer_magnetic_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Transformer_magnetic_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformer_magnetic_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Transformer_iron_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformer_iron_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Transformer_iron_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformer_iron_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Line_resistance_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Line_resistance_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Line_resistance_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Line_resistance_lossesChanging;
        
        /// <summary>
        /// Gets fired when the Line_reactance_losses property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Line_reactance_lossesChanged;
        
        /// <summary>
        /// Gets fired before the Line_reactance_losses property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Line_reactance_lossesChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityTimeEntries
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityTimeEntries))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityTimeEntries))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityTimeEntries")]
    public partial interface IElectricityTimeEntries : IModelElement, IData
    {
        
        /// <summary>
        /// The Time_expired_since_last_end_of_billing_period property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Time_expired_since_last_end_of_billing_period
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Localtime property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Localtime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Localdate property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Localdate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Weekday property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Weekday
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Timeoflastreset property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Timeoflastreset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Dateoflastreset property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Dateoflastreset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Outputpulseduration property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Outputpulseduration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Clocksynchronizationwindow property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Clocksynchronizationwindow
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Clock_synchronization_method property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Clock_synchronization_method
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Clock_time_shift_limit property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Clock_time_shift_limit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Billing_period_reset_lockout_time property
        /// </summary>
        [CategoryAttribute("ElectricityTimeEntries")]
        [XmlAttributeAttribute(true)]
        string Billing_period_reset_lockout_time
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Time_expired_since_last_end_of_billing_period property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanged;
        
        /// <summary>
        /// Gets fired before the Time_expired_since_last_end_of_billing_period property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanging;
        
        /// <summary>
        /// Gets fired when the Localtime property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocaltimeChanged;
        
        /// <summary>
        /// Gets fired before the Localtime property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocaltimeChanging;
        
        /// <summary>
        /// Gets fired when the Localdate property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocaldateChanged;
        
        /// <summary>
        /// Gets fired before the Localdate property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocaldateChanging;
        
        /// <summary>
        /// Gets fired when the Weekday property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> WeekdayChanged;
        
        /// <summary>
        /// Gets fired before the Weekday property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> WeekdayChanging;
        
        /// <summary>
        /// Gets fired when the Timeoflastreset property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Timeoflastreset property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Dateoflastreset property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Dateoflastreset property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Outputpulseduration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputpulsedurationChanged;
        
        /// <summary>
        /// Gets fired before the Outputpulseduration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputpulsedurationChanging;
        
        /// <summary>
        /// Gets fired when the Clocksynchronizationwindow property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanged;
        
        /// <summary>
        /// Gets fired before the Clocksynchronizationwindow property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanging;
        
        /// <summary>
        /// Gets fired when the Clock_synchronization_method property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanged;
        
        /// <summary>
        /// Gets fired before the Clock_synchronization_method property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanging;
        
        /// <summary>
        /// Gets fired when the Clock_time_shift_limit property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanged;
        
        /// <summary>
        /// Gets fired before the Clock_time_shift_limit property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanging;
        
        /// <summary>
        /// Gets fired when the Billing_period_reset_lockout_time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanged;
        
        /// <summary>
        /// Gets fired before the Billing_period_reset_lockout_time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanging;
    }
    
    /// <summary>
    /// The public interface for MeasurementPeriod_recordingInterval_billingPeriodDuration
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeasurementPeriod_recordingInterval_billingPeriodDuration))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeasurementPeriod_recordingInterval_billingPeriodDuration))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeasurementPeriod_recordingInterval_billingPeriodDuratio" +
        "n")]
    public partial interface IMeasurementPeriod_recordingInterval_billingPeriodDuration : IModelElement, IData
    {
        
        /// <summary>
        /// The Measurement_period_1_for_averaging_scheme_1 property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Measurement_period_1_for_averaging_scheme_1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Measurement_period_2_for_averagingscheme_2 property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Measurement_period_2_for_averagingscheme_2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Measurement_period_3_for_instantaneous_value property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Measurement_period_3_for_instantaneous_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Measurement_period_4_for_test_value property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Measurement_period_4_for_test_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Recording_interval_1_for_loadprofile property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Recording_interval_1_for_loadprofile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Recording_interval_2_for_loadprofile property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Recording_interval_2_for_loadprofile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Billingperiod property
        /// </summary>
        [CategoryAttribute("MeasurementPeriod_recordingInterval_billingPeriodDuration")]
        [XmlAttributeAttribute(true)]
        string Billingperiod
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Measurement_period_1_for_averaging_scheme_1 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_1_for_averaging_scheme_1 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_1_for_averaging_scheme_1Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_2_for_averagingscheme_2 property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changed;
        
        /// <summary>
        /// Gets fired before the Measurement_period_2_for_averagingscheme_2 property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_2_for_averagingscheme_2Changing;
        
        /// <summary>
        /// Gets fired when the Measurement_period_3_for_instantaneous_value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Measurement_period_3_for_instantaneous_value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_3_for_instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Measurement_period_4_for_test_value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanged;
        
        /// <summary>
        /// Gets fired before the Measurement_period_4_for_test_value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Measurement_period_4_for_test_valueChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_1_for_loadprofile property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_1_for_loadprofile property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Recording_interval_1_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Recording_interval_2_for_loadprofile property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanged;
        
        /// <summary>
        /// Gets fired before the Recording_interval_2_for_loadprofile property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Recording_interval_2_for_loadprofileChanging;
        
        /// <summary>
        /// Gets fired when the Billingperiod property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingperiodChanged;
        
        /// <summary>
        /// Gets fired before the Billingperiod property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingperiodChanging;
    }
    
    /// <summary>
    /// The public interface for InputPulseValuesOrConstants
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InputPulseValuesOrConstants))]
    [XmlDefaultImplementationTypeAttribute(typeof(InputPulseValuesOrConstants))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InputPulseValuesOrConstants")]
    public partial interface IInputPulseValuesOrConstants : IModelElement, IData
    {
        
        /// <summary>
        /// The ActiveEnergy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActiveEnergy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_energy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_energy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Apparent_energy property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Apparent_energy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squared_hours property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Volt_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squared_hours property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ampere_squared_hours
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Unitless_quantities property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Unitless_quantities
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Active_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Active_energy_export
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactive_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactive_energy_export
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Apparent_energy_export property
        /// </summary>
        [CategoryAttribute("InputPulseValuesOrConstants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Apparent_energy_export
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ActiveEnergy property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveEnergyChanged;
        
        /// <summary>
        /// Gets fired before the ActiveEnergy property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveEnergyChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_energyChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_energyChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Apparent_energyChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Apparent_energyChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squared_hours property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squared_hours property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Unitless_quantities property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanged;
        
        /// <summary>
        /// Gets fired before the Unitless_quantities property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanging;
        
        /// <summary>
        /// Gets fired when the Active_energy_export property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Active_energy_export property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Active_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy_export property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy_export property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy_export property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy_export property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityNominalValues
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityNominalValues))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityNominalValues))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityNominalValues")]
    public partial interface IElectricityNominalValues : IModelElement, IData
    {
        
        /// <summary>
        /// The Voltage property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Nominalcurrent property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Nominalcurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Frequency property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Maximumcurrent property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Maximumcurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reference_voltage_for_power_quality_measurement property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reference_voltage_for_power_quality_measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reference_voltage_for_aux_power_supply property
        /// </summary>
        [CategoryAttribute("ElectricityNominalValues")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reference_voltage_for_aux_power_supply
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Voltage property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageChanged;
        
        /// <summary>
        /// Gets fired before the Voltage property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> VoltageChanging;
        
        /// <summary>
        /// Gets fired when the Nominalcurrent property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalcurrentChanged;
        
        /// <summary>
        /// Gets fired before the Nominalcurrent property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NominalcurrentChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Maximumcurrent property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MaximumcurrentChanged;
        
        /// <summary>
        /// Gets fired before the Maximumcurrent property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MaximumcurrentChanging;
        
        /// <summary>
        /// Gets fired when the Reference_voltage_for_power_quality_measurement property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reference_voltage_for_power_quality_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Reference_voltage_for_power_quality_measurement property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reference_voltage_for_power_quality_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Reference_voltage_for_aux_power_supply property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reference_voltage_for_aux_power_supplyChanged;
        
        /// <summary>
        /// Gets fired before the Reference_voltage_for_aux_power_supply property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Reference_voltage_for_aux_power_supplyChanging;
    }
    
    /// <summary>
    /// The public interface for ReadingFactorAndCT_VTratio
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReadingFactorAndCT_VTratio))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReadingFactorAndCT_VTratio))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ReadingFactorAndCT_VTratio")]
    public partial interface IReadingFactorAndCT_VTratio : IModelElement, IData
    {
        
        /// <summary>
        /// The Readingfactorforpower property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Readingfactorforpower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Readingfactorforenergy property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Readingfactorforenergy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transformerratio_currentzähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Transformerratio_currentzähler
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transformerratio_voltagezähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Transformerratio_voltagezähler
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Overalltransformerratiozähler property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Overalltransformerratiozähler
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transformerratio_currentnenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Transformerratio_currentnenner
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transformerratio_voltagenenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Transformerratio_voltagenenner
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Overalltransformer_rationenner property
        /// </summary>
        [CategoryAttribute("ReadingFactorAndCT_VTratio")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Overalltransformer_rationenner
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Readingfactorforpower property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanged;
        
        /// <summary>
        /// Gets fired before the Readingfactorforpower property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanging;
        
        /// <summary>
        /// Gets fired when the Readingfactorforenergy property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanged;
        
        /// <summary>
        /// Gets fired before the Readingfactorforenergy property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentzähler property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_currentzählerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentzähler property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_currentzählerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagezähler property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_voltagezählerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagezähler property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_voltagezählerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformerratiozähler property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OveralltransformerratiozählerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformerratiozähler property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OveralltransformerratiozählerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentnenner property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentnenner property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagenenner property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagenenner property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformer_rationenner property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformer_rationenner property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanging;
    }
    
    /// <summary>
    /// The public interface for OutputPulseValues_constants
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OutputPulseValues_constants))]
    [XmlDefaultImplementationTypeAttribute(typeof(OutputPulseValues_constants))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OutputPulseValues_constants")]
    public partial interface IOutputPulseValues_constants : IModelElement, IData
    {
        
        /// <summary>
        /// The ActiveenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ActiveenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactiveenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ReactiveenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentenergymetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> ApparentenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Activeenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Activeenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactiveenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Reactiveenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Apparentenergyoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Apparentenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squaredhoursmetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Volt_squaredhoursmetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ampere_squaredhoursmetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squaredhoursoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Volt_squaredhoursoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squaredhoursoutputpulse property
        /// </summary>
        [CategoryAttribute("OutputPulseValues_constants")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Ampere_squaredhoursoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ActiveenergymetrologicalLED property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ActiveenergymetrologicalLED property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveenergymetrologicalLED property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveenergymetrologicalLED property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ApparentenergymetrologicalLED property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ApparentenergymetrologicalLED property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Activeenergyoutputpulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Activeenergyoutputpulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Reactiveenergyoutputpulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Reactiveenergyoutputpulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Apparentenergyoutputpulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Apparentenergyoutputpulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursoutputpulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursoutputpulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursoutputpulse property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursoutputpulse property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityProgramEntries
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityProgramEntries))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityProgramEntries))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityProgramEntries")]
    public partial interface IElectricityProgramEntries : IModelElement, IData
    {
        
        /// <summary>
        /// The Activefirmwareidentifier property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        string Activefirmwareidentifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Parameterrecordnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Parameterrecordnumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Timeswitchprogramnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Timeswitchprogramnumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RCRprogramnumber property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        Nullable<int> RCRprogramnumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeterconnectiondiagramID property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        string MeterconnectiondiagramID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Passivecalendarname property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        string Passivecalendarname
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Activefirmwaresignature property
        /// </summary>
        [CategoryAttribute("ElectricityProgramEntries")]
        [XmlAttributeAttribute(true)]
        string Activefirmwaresignature
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Activefirmwareidentifier property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanged;
        
        /// <summary>
        /// Gets fired before the Activefirmwareidentifier property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivefirmwareidentifierChanging;
        
        /// <summary>
        /// Gets fired when the Parameterrecordnumber property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanged;
        
        /// <summary>
        /// Gets fired before the Parameterrecordnumber property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ParameterrecordnumberChanging;
        
        /// <summary>
        /// Gets fired when the Timeswitchprogramnumber property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the Timeswitchprogramnumber property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeswitchprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the RCRprogramnumber property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RCRprogramnumberChanged;
        
        /// <summary>
        /// Gets fired before the RCRprogramnumber property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RCRprogramnumberChanging;
        
        /// <summary>
        /// Gets fired when the MeterconnectiondiagramID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanged;
        
        /// <summary>
        /// Gets fired before the MeterconnectiondiagramID property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MeterconnectiondiagramIDChanging;
        
        /// <summary>
        /// Gets fired when the Passivecalendarname property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PassivecalendarnameChanged;
        
        /// <summary>
        /// Gets fired before the Passivecalendarname property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PassivecalendarnameChanging;
        
        /// <summary>
        /// Gets fired when the Activefirmwaresignature property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanged;
        
        /// <summary>
        /// Gets fired before the Activefirmwaresignature property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivefirmwaresignatureChanging;
    }
    
    /// <summary>
    /// The public interface for ElectricityID
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricityID))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricityID))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ElectricityID")]
    public partial interface IElectricityID : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ElectricityID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for EventLog
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EventLog))]
    [XmlDefaultImplementationTypeAttribute(typeof(EventLog))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EventLog")]
    public partial interface IEventLog : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for AlarmDescriptorObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AlarmDescriptorObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AlarmDescriptorObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmDescriptorObject")]
    public partial interface IAlarmDescriptorObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmDescriptorObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for AlarmFilterObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AlarmFilterObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AlarmFilterObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmFilterObject")]
    public partial interface IAlarmFilterObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmFilterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for AlarmRegisterObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AlarmRegisterObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AlarmRegisterObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmRegisterObject")]
    public partial interface IAlarmRegisterObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("AlarmRegisterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for ErrorTableObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ErrorTableObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ErrorTableObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorTableObject")]
    public partial interface IErrorTableObject : IModelElement, IRegistertable
    {
    }
    
    /// <summary>
    /// The public interface for ErrorProfileObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ErrorProfileObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ErrorProfileObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorProfileObject")]
    public partial interface IErrorProfileObject : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for ErrorRegisterObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ErrorRegisterObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ErrorRegisterObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ErrorRegisterObject")]
    public partial interface IErrorRegisterObject : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("ErrorRegisterObject")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for StatusRegisterMapped
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StatusRegisterMapped))]
    [XmlDefaultImplementationTypeAttribute(typeof(StatusRegisterMapped))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegisterMapped")]
    public partial interface IStatusRegisterMapped : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for StatusRegisterManu
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StatusRegisterManu))]
    [XmlDefaultImplementationTypeAttribute(typeof(StatusRegisterManu))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StatusRegisterManu")]
    public partial interface IStatusRegisterManu : IModelElement, IData
    {
    }
    
    /// <summary>
    /// The public interface for InternalOperatingStatusGlobal
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalOperatingStatusGlobal))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalOperatingStatusGlobal))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusGlobal")]
    public partial interface IInternalOperatingStatusGlobal : IModelElement, IRegistertable
    {
    }
    
    /// <summary>
    /// The public interface for InternalOperatingStatusMapped
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalOperatingStatusMapped))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalOperatingStatusMapped))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusMapped")]
    public partial interface IInternalOperatingStatusMapped : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for InternalOperatingStatusManu
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalOperatingStatusManu))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalOperatingStatusManu))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalOperatingStatusManu")]
    public partial interface IInternalOperatingStatusManu : IModelElement, IData
    {
    }
    
    /// <summary>
    /// The public interface for InternalControlGlobal
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalControlGlobal))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalControlGlobal))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlGlobal")]
    public partial interface IInternalControlGlobal : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for InternalControlMapped
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalControlMapped))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalControlMapped))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlMapped")]
    public partial interface IInternalControlMapped : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for InternalControlManu
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InternalControlManu))]
    [XmlDefaultImplementationTypeAttribute(typeof(InternalControlManu))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InternalControlManu")]
    public partial interface IInternalControlManu : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("InternalControlManu")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for GeneralPurposeArbitrator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GeneralPurposeArbitrator))]
    [XmlDefaultImplementationTypeAttribute(typeof(GeneralPurposeArbitrator))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GeneralPurposeArbitrator")]
    public partial interface IGeneralPurposeArbitrator : IModelElement, IArbitrator
    {
    }
    
    /// <summary>
    /// The public interface for DisconnectControlObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DisconnectControlObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(DisconnectControlObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControlObject")]
    public partial interface IDisconnectControlObject : IModelElement, TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl
    {
    }
    
    /// <summary>
    /// The public interface for IOControlSignalsGlobal
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IOControlSignalsGlobal))]
    [XmlDefaultImplementationTypeAttribute(typeof(IOControlSignalsGlobal))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsGlobal")]
    public partial interface IIOControlSignalsGlobal : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for IOControlSignalsMapped
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IOControlSignalsMapped))]
    [XmlDefaultImplementationTypeAttribute(typeof(IOControlSignalsMapped))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsMapped")]
    public partial interface IIOControlSignalsMapped : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for IOControlSignalsManufacturer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IOControlSignalsManufacturer))]
    [XmlDefaultImplementationTypeAttribute(typeof(IOControlSignalsManufacturer))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IOControlSignalsManufacturer")]
    public partial interface IIOControlSignalsManufacturer : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("IOControlSignalsManufacturer")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for GeneralpurposeArbitrator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GeneralpurposeArbitrator))]
    [XmlDefaultImplementationTypeAttribute(typeof(GeneralpurposeArbitrator))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GeneralpurposeArbitrator")]
    public partial interface IGeneralpurposeArbitrator : IModelElement, IArbitrator
    {
    }
    
    /// <summary>
    /// The public interface for Disconnectcontrolobject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Disconnectcontrolobject))]
    [XmlDefaultImplementationTypeAttribute(typeof(Disconnectcontrolobject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Disconnectcontrolobject")]
    public partial interface IDisconnectcontrolobject : IModelElement, TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl
    {
    }
    
    /// <summary>
    /// The public interface for I_O_control_signal_objects_global
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_global))]
    [XmlDefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_global))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_global")]
    public partial interface II_O_control_signal_objects_global : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for I_O_control_signal_objects_contentsmappedtoareferencetable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_contentsmappedtoareferencetable))]
    [XmlDefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_contentsmappedtoareferencetable))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmappedtoareferencetab" +
        "le")]
    public partial interface II_O_control_signal_objects_contentsmappedtoareferencetable : IModelElement, IStatusmapping
    {
    }
    
    /// <summary>
    /// The public interface for I_O_control_signal_objects_contentsmanufacturerspecific
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_contentsmanufacturerspecific))]
    [XmlDefaultImplementationTypeAttribute(typeof(I_O_control_signal_objects_contentsmanufacturerspecific))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/I_O_control_signal_objects_contentsmanufacturerspecific")]
    public partial interface II_O_control_signal_objects_contentsmanufacturerspecific : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("I_O_control_signal_objects_contentsmanufacturerspecific")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for ParameterChangesObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ParameterChangesObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ParameterChangesObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ParameterChangesObject")]
    public partial interface IParameterChangesObject : IModelElement, IData
    {
        
        /// <summary>
        /// The NumberConfigProgramChanges property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> NumberConfigProgramChanges
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastConfigChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastConfigChange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastSwitchChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastSwitchChange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastRippleControlChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastRippleControlChange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StatusSecuritySwitches property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        string StatusSecuritySwitches
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastCalibration property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastCalibration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateNextConfig property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateNextConfig
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateActivationPassivCalendar property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateActivationPassivCalendar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NumberProtectedConfigChanges property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<int> NumberProtectedConfigChanges
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastProtectedConfigChange property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastProtectedConfigChange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastClockSynch property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastClockSynch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DateLastFirmwareActivation property
        /// </summary>
        [CategoryAttribute("ParameterChangesObject")]
        [XmlAttributeAttribute(true)]
        Nullable<DateTime> DateLastFirmwareActivation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the NumberConfigProgramChanges property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanged;
        
        /// <summary>
        /// Gets fired before the NumberConfigProgramChanges property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberConfigProgramChangesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastConfigChange property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastConfigChange property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastSwitchChange property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastSwitchChange property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastSwitchChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastRippleControlChange property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastRippleControlChange property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastRippleControlChangeChanging;
        
        /// <summary>
        /// Gets fired when the StatusSecuritySwitches property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanged;
        
        /// <summary>
        /// Gets fired before the StatusSecuritySwitches property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StatusSecuritySwitchesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastCalibration property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastCalibrationChanged;
        
        /// <summary>
        /// Gets fired before the DateLastCalibration property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastCalibrationChanging;
        
        /// <summary>
        /// Gets fired when the DateNextConfig property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateNextConfigChanged;
        
        /// <summary>
        /// Gets fired before the DateNextConfig property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateNextConfigChanging;
        
        /// <summary>
        /// Gets fired when the DateActivationPassivCalendar property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanged;
        
        /// <summary>
        /// Gets fired before the DateActivationPassivCalendar property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateActivationPassivCalendarChanging;
        
        /// <summary>
        /// Gets fired when the NumberProtectedConfigChanges property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanged;
        
        /// <summary>
        /// Gets fired before the NumberProtectedConfigChanges property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberProtectedConfigChangesChanging;
        
        /// <summary>
        /// Gets fired when the DateLastProtectedConfigChange property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanged;
        
        /// <summary>
        /// Gets fired before the DateLastProtectedConfigChange property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastProtectedConfigChangeChanging;
        
        /// <summary>
        /// Gets fired when the DateLastClockSynch property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastClockSynchChanged;
        
        /// <summary>
        /// Gets fired before the DateLastClockSynch property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastClockSynchChanging;
        
        /// <summary>
        /// Gets fired when the DateLastFirmwareActivation property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanged;
        
        /// <summary>
        /// Gets fired before the DateLastFirmwareActivation property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DateLastFirmwareActivationChanging;
    }
    
    /// <summary>
    /// The public interface for MeteringPointID
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeteringPointID))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeteringPointID))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MeteringPointID")]
    public partial interface IMeteringPointID : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MeteringPointID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for DeviceID
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DeviceID))]
    [XmlDefaultImplementationTypeAttribute(typeof(DeviceID))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DeviceID")]
    public partial interface IDeviceID : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("DeviceID")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for CompactDataObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CompactDataObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(CompactDataObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CompactDataObject")]
    public partial interface ICompactDataObject : IModelElement, ICompactdata
    {
    }
    
    /// <summary>
    /// The public interface for UtilitiesTableObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(UtilitiesTableObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(UtilitiesTableObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/UtilitiesTableObject")]
    public partial interface IUtilitiesTableObject : IModelElement, IUtilitytables
    {
        
        /// <summary>
        /// The Standard property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        string Standard
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Manufacturer property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        string Manufacturer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StdPending property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        string StdPending
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MfgPending property
        /// </summary>
        [CategoryAttribute("UtilitiesTableObject")]
        [XmlAttributeAttribute(true)]
        string MfgPending
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Standard property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StandardChanged;
        
        /// <summary>
        /// Gets fired before the Standard property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StandardChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ManufacturerChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ManufacturerChanging;
        
        /// <summary>
        /// Gets fired when the StdPending property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StdPendingChanged;
        
        /// <summary>
        /// Gets fired before the StdPending property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> StdPendingChanging;
        
        /// <summary>
        /// Gets fired when the MfgPending property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MfgPendingChanged;
        
        /// <summary>
        /// Gets fired before the MfgPending property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MfgPendingChanging;
    }
    
    /// <summary>
    /// The public interface for ImageTransferObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ImageTransferObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ImageTransferObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageTransferObject")]
    public partial interface IImageTransferObject : IModelElement, IImagetransfer
    {
    }
    
    /// <summary>
    /// The public interface for DataProtectionObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DataProtectionObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(DataProtectionObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DataProtectionObject")]
    public partial interface IDataProtectionObject : IModelElement, IDataprotection
    {
    }
    
    /// <summary>
    /// The public interface for InvocationCounter
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InvocationCounter))]
    [XmlDefaultImplementationTypeAttribute(typeof(InvocationCounter))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/InvocationCounter")]
    public partial interface IInvocationCounter : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("InvocationCounter")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        Nullable<int> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for SecuritySetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SecuritySetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(SecuritySetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SecuritySetupObject")]
    public partial interface ISecuritySetupObject : IModelElement, ISecuritysetup
    {
    }
    
    /// <summary>
    /// The public interface for SAPAssignmentCurrent
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SAPAssignmentCurrent))]
    [XmlDefaultImplementationTypeAttribute(typeof(SAPAssignmentCurrent))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SAPAssignmentCurrent")]
    public partial interface ISAPAssignmentCurrent : IModelElement, ISAPAssignment
    {
    }
    
    /// <summary>
    /// The public interface for CurrentAssociation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CurrentAssociation))]
    [XmlDefaultImplementationTypeAttribute(typeof(CurrentAssociation))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CurrentAssociation")]
    public partial interface ICurrentAssociation : IModelElement, IAssociationLN
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_tunnel_setup_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_tunnel_setup_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_tunnel_setup_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_tunnel_setup_object")]
    public partial interface IZigBee_tunnel_setup_object : IModelElement, IZigBeetunnelsetup
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_network_control_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_network_control_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_network_control_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_network_control_object")]
    public partial interface IZigBee_network_control_object : IModelElement, IZigBeenetworkcontrol
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_APS_fragmentation_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_APS_fragmentation_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_APS_fragmentation_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_APS_fragmentation_object")]
    public partial interface IZigBee_SAS_APS_fragmentation_object : IModelElement, IZigBee_SAS_APS_fragmentation
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_join_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_join_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_join_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_join_object")]
    public partial interface IZigBee_SAS_join_object : IModelElement, IZigBee_SAS_join
    {
    }
    
    /// <summary>
    /// The public interface for ZigBee_SAS_startup_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZigBee_SAS_startup_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZigBee_SAS_startup_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ZigBee_SAS_startup_object")]
    public partial interface IZigBee_SAS_startup_object : IModelElement, IZigBee_SAS_startup
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_6LoWPAN_adaptation_layer_setup_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_6LoWPAN_adaptation_layer_setup_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_6LoWPAN_adaptation_layer_setup_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_6LoWPAN_adaptation_layer_setup_object")]
    public partial interface IG3_PLC_6LoWPAN_adaptation_layer_setup_object : IModelElement, IG3_PLC_6LoWPAN
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_MAC_setup_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_setup_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_setup_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_MAC_setup_object")]
    public partial interface IG3_PLC_MAC_setup_object : IModelElement, IG3_PLC_MAC_setup
    {
    }
    
    /// <summary>
    /// The public interface for G3_PLC_MAC_layer_counters_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_layer_counters_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(G3_PLC_MAC_layer_counters_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/G3_PLC_MAC_layer_counters_object")]
    public partial interface IG3_PLC_MAC_layer_counters_object : IModelElement, IG3_PLC_MAC_layer_counters
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_Application_identification_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Application_identification_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Application_identification_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Application_identification_object")]
    public partial interface IPRIME_NB_OFDM_PLC_Application_identification_object : IModelElement, IPRIME_NB_OFDM_PLC_Application_identification
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_address_setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_address_setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_address_setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_address_setup")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_address_setup : IModelElement, IMACaddresssetup
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_network_administration_data_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_network_administration_data_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_network_administration_data_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_network_administration_data_object" +
        "")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_network_administration_data_object : IModelElement, IPRIME_NB_OFDM_PLC_MACnetworkadmindata
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_counters_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_counters_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_counters_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_counters_object")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_counters_object : IModelElement, IPRIME_NB_OFDM_PLC_MAC_counters
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_functional_parameters_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_functional_parameters_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_functional_parameters_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_functional_parameters_object")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_functional_parameters_object : IModelElement, IPRIME_NB_OFDM_PLC_MAC_functionalparams
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_MAC_setup_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_setup_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_MAC_setup_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_MAC_setup_object")]
    public partial interface IPRIME_NB_OFDM_PLC_MAC_setup_object : IModelElement, IPRIME_NB_OFDM_PLC_MACsetup
    {
    }
    
    /// <summary>
    /// The public interface for PRIME_NB_OFDM_PLC_Physical_layer_counters_object
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Physical_layer_counters_object))]
    [XmlDefaultImplementationTypeAttribute(typeof(PRIME_NB_OFDM_PLC_Physical_layer_counters_object))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PRIME_NB_OFDM_PLC_Physical_layer_counters_object")]
    public partial interface IPRIME_NB_OFDM_PLC_Physical_layer_counters_object : IModelElement, IPRIME_NB_OFDM_PLC_Phy_layer_counters
    {
    }
    
    /// <summary>
    /// The public interface for t61334_4_32LLCSSCSsetupobject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(T61334_4_32LLCSSCSsetupobject))]
    [XmlDefaultImplementationTypeAttribute(typeof(T61334_4_32LLCSSCSsetupobject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/t61334_4_32LLCSSCSsetupobject")]
    public partial interface IT61334_4_32LLCSSCSsetupobject : IModelElement, IT61334_32_LLC_SSCS_setup
    {
    }
    
    /// <summary>
    /// The public interface for ISO_IEC8802_2LLCType3Setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType3Setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType3Setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType3Setup")]
    public partial interface IISO_IEC8802_2LLCType3Setup : IModelElement, IIEC8802_2LLCType3
    {
    }
    
    /// <summary>
    /// The public interface for ISO_IEC8802_2LLCType2Setup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType2Setup))]
    [XmlDefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType2Setup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType2Setup")]
    public partial interface IISO_IEC8802_2LLCType2Setup : IModelElement, IIEC_8802_2_LLC_G3_NB
    {
    }
    
    /// <summary>
    /// The public interface for ISO_IEC8802_2LLCType1SetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType1SetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ISO_IEC8802_2LLCType1SetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ISO_IEC8802_2LLCType1SetupObject")]
    public partial interface IISO_IEC8802_2LLCType1SetupObject : IModelElement, IIEC_8802_2_LLC_Type_1
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKReportingSystemListObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKReportingSystemListObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKReportingSystemListObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKReportingSystemListObject")]
    public partial interface IS_FSKReportingSystemListObject : IModelElement, IS_FSKReportingsystemlist
    {
    }
    
    /// <summary>
    /// The public interface for IEC61334_4_32LLCSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC61334_4_32LLCSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC61334_4_32LLCSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC61334_4_32LLCSetupObject")]
    public partial interface IIEC61334_4_32LLCSetupObject : IModelElement, IIEC61334_4_32LLCsetup
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKMACCountersObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKMACCountersObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKMACCountersObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKMACCountersObject")]
    public partial interface IS_FSKMACCountersObject : IModelElement, IS_FSKMACcounters
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKMACSynchronizationTimeouts
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKMACSynchronizationTimeouts))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKMACSynchronizationTimeouts))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKMACSynchronizationTimeouts")]
    public partial interface IS_FSKMACSynchronizationTimeouts : IModelElement, IS_FSKMACsynctimeouts
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKActiveInitiatorObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKActiveInitiatorObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKActiveInitiatorObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKActiveInitiatorObject")]
    public partial interface IS_FSKActiveInitiatorObject : IModelElement, IS_FSKActiveinitiator
    {
    }
    
    /// <summary>
    /// The public interface for S_FSKPhy_MACSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(S_FSKPhy_MACSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(S_FSKPhy_MACSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/S_FSKPhy_MACSetupObject")]
    public partial interface IS_FSKPhy_MACSetupObject : IModelElement, IS_FSK_PHY_MACsetup
    {
    }
    
    /// <summary>
    /// The public interface for PushSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PushSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(PushSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PushSetupObject")]
    public partial interface IPushSetupObject : IModelElement, IPushsetup
    {
    }
    
    /// <summary>
    /// The public interface for IPv6SetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IPv6SetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(IPv6SetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IPv6SetupObject")]
    public partial interface IIPv6SetupObject : IModelElement, IIPv6setup
    {
    }
    
    /// <summary>
    /// The public interface for GSMDiagnosticObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GSMDiagnosticObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(GSMDiagnosticObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GSMDiagnosticObject")]
    public partial interface IGSMDiagnosticObject : IModelElement, IGSM_Diagnostic
    {
    }
    
    /// <summary>
    /// The public interface for SMTPSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SMTPSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(SMTPSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SMTPSetupObject")]
    public partial interface ISMTPSetupObject : IModelElement, ISMTPsetup
    {
    }
    
    /// <summary>
    /// The public interface for GPRSModemSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GPRSModemSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(GPRSModemSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GPRSModemSetupObject")]
    public partial interface IGPRSModemSetupObject : IModelElement, IGPRS_modem_setup
    {
    }
    
    /// <summary>
    /// The public interface for PPPSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PPPSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(PPPSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PPPSetupObject")]
    public partial interface IPPPSetupObject : IModelElement, IPPPsetup
    {
    }
    
    /// <summary>
    /// The public interface for MACAddressSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MACAddressSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(MACAddressSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MACAddressSetupObject")]
    public partial interface IMACAddressSetupObject : IModelElement, IMACaddresssetup
    {
    }
    
    /// <summary>
    /// The public interface for IPv4SetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IPv4SetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(IPv4SetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IPv4SetupObject")]
    public partial interface IIPv4SetupObject : IModelElement, IIPv4setup
    {
    }
    
    /// <summary>
    /// The public interface for TCP_UDPSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TCP_UDPSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(TCP_UDPSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TCP_UDPSetupObject")]
    public partial interface ITCP_UDPSetupObject : IModelElement, ITCP_UDPsetup
    {
    }
    
    /// <summary>
    /// The public interface for M_BusDiagnosticObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusDiagnosticObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusDiagnosticObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusDiagnosticObject")]
    public partial interface IM_BusDiagnosticObject : IModelElement, IM_Bus_diagnostic
    {
    }
    
    /// <summary>
    /// The public interface for DLMS_COSEMServerM_BusPortSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DLMS_COSEMServerM_BusPortSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(DLMS_COSEMServerM_BusPortSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DLMS_COSEMServerM_BusPortSetupObject")]
    public partial interface IDLMS_COSEMServerM_BusPortSetupObject : IModelElement, IDLMS_COSEM_Server_M_Bus_port_setup
    {
    }
    
    /// <summary>
    /// The public interface for WirelessModeQChannelObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(WirelessModeQChannelObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(WirelessModeQChannelObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/WirelessModeQChannelObject")]
    public partial interface IWirelessModeQChannelObject : IModelElement, IWireless_Mode_Q_Channel
    {
    }
    
    /// <summary>
    /// The public interface for M_BusMasterPortSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusMasterPortSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusMasterPortSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusMasterPortSetupObject")]
    public partial interface IM_BusMasterPortSetupObject : IModelElement, IM_Bus_master_port_setup
    {
    }
    
    /// <summary>
    /// The public interface for M_BusControlLog
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusControlLog))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusControlLog))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusControlLog")]
    public partial interface IM_BusControlLog : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for M_BusDisconnectControl
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusDisconnectControl))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusDisconnectControl))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusDisconnectControl")]
    public partial interface IM_BusDisconnectControl : IModelElement, TemporaryGeneratedCode.COSEM.InterfaceClasses.IDisconnectControl
    {
    }
    
    /// <summary>
    /// The public interface for M_BusProfileGeneric
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusProfileGeneric))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusProfileGeneric))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusProfileGeneric")]
    public partial interface IM_BusProfileGeneric : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for M_BusValue
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusValue))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusValue))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusValue")]
    public partial interface IM_BusValue : IModelElement, IExtendedRegister
    {
    }
    
    /// <summary>
    /// The public interface for M_BusClientObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusClientObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusClientObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusClientObject")]
    public partial interface IM_BusClientObject : IModelElement, IM_Bus_client
    {
    }
    
    /// <summary>
    /// The public interface for M_BusSlavePortSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(M_BusSlavePortSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(M_BusSlavePortSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/M_BusSlavePortSetupObject")]
    public partial interface IM_BusSlavePortSetupObject : IModelElement, IM_Bus_slave_port_setup
    {
    }
    
    /// <summary>
    /// The public interface for IEC_62056_3_1AlternateReadoutProfile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC_62056_3_1AlternateReadoutProfile))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC_62056_3_1AlternateReadoutProfile))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC_62056_3_1AlternateReadoutProfile")]
    public partial interface IIEC_62056_3_1AlternateReadoutProfile : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for IEC62056_3_1LongReadout
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC62056_3_1LongReadout))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC62056_3_1LongReadout))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC62056_3_1LongReadout")]
    public partial interface IIEC62056_3_1LongReadout : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for IEC62056_3_1ShortReadout
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IEC62056_3_1ShortReadout))]
    [XmlDefaultImplementationTypeAttribute(typeof(IEC62056_3_1ShortReadout))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IEC62056_3_1ShortReadout")]
    public partial interface IIEC62056_3_1ShortReadout : IModelElement, IProfilegeneric
    {
    }
    
    /// <summary>
    /// The public interface for IECTwistedPairFatalErrorRegister
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECTwistedPairFatalErrorRegister))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECTwistedPairFatalErrorRegister))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairFatalErrorRegister")]
    public partial interface IIECTwistedPairFatalErrorRegister : IModelElement, IData
    {
    }
    
    /// <summary>
    /// The public interface for IECTwistedPairMACAddressSetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECTwistedPairMACAddressSetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECTwistedPairMACAddressSetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairMACAddressSetup")]
    public partial interface IIECTwistedPairMACAddressSetup : IModelElement, IMACaddresssetup
    {
    }
    
    /// <summary>
    /// The public interface for IECTwistedPairSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECTwistedPairSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECTwistedPairSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECTwistedPairSetupObject")]
    public partial interface IIECTwistedPairSetupObject : IModelElement, IIEC_twisted_pair_setup
    {
    }
    
    /// <summary>
    /// The public interface for IECHDLCSetupObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECHDLCSetupObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECHDLCSetupObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECHDLCSetupObject")]
    public partial interface IIECHDLCSetupObject : IModelElement, IIEC_HDLC_setup
    {
    }
    
    /// <summary>
    /// The public interface for StandardReadoutParam
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StandardReadoutParam))]
    [XmlDefaultImplementationTypeAttribute(typeof(StandardReadoutParam))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StandardReadoutParam")]
    public partial interface IStandardReadoutParam : IModelElement, IData
    {
    }
    
    /// <summary>
    /// The public interface for StandardReadout
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StandardReadout))]
    [XmlDefaultImplementationTypeAttribute(typeof(StandardReadout))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/StandardReadout")]
    public partial interface IStandardReadout : IModelElement, IProfilegeneric
    {
        
        /// <summary>
        /// The GeneralLocalPortReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string GeneralLocalPortReadout
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GeneralDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string GeneralDisplayReadout
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AlternateDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string AlternateDisplayReadout
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceDisplayReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string ServiceDisplayReadout
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ListConfigMeterData property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string ListConfigMeterData
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AdditionalReadout property
        /// </summary>
        [CategoryAttribute("StandardReadout")]
        [XmlAttributeAttribute(true)]
        string AdditionalReadout
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the GeneralLocalPortReadout property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GeneralLocalPortReadoutChanged;
        
        /// <summary>
        /// Gets fired before the GeneralLocalPortReadout property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GeneralLocalPortReadoutChanging;
        
        /// <summary>
        /// Gets fired when the GeneralDisplayReadout property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GeneralDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the GeneralDisplayReadout property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GeneralDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the AlternateDisplayReadout property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AlternateDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the AlternateDisplayReadout property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AlternateDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDisplayReadout property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ServiceDisplayReadoutChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDisplayReadout property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ServiceDisplayReadoutChanging;
        
        /// <summary>
        /// Gets fired when the ListConfigMeterData property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ListConfigMeterDataChanged;
        
        /// <summary>
        /// Gets fired before the ListConfigMeterData property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ListConfigMeterDataChanging;
        
        /// <summary>
        /// Gets fired when the AdditionalReadout property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AdditionalReadoutChanged;
        
        /// <summary>
        /// Gets fired before the AdditionalReadout property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AdditionalReadoutChanging;
    }
    
    /// <summary>
    /// The public interface for IECElectricalPortSetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECElectricalPortSetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECElectricalPortSetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECElectricalPortSetup")]
    public partial interface IIECElectricalPortSetup : IModelElement, IIEC_local_port_setup
    {
    }
    
    /// <summary>
    /// The public interface for IECOpticalPortSetup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IECOpticalPortSetup))]
    [XmlDefaultImplementationTypeAttribute(typeof(IECOpticalPortSetup))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/IECOpticalPortSetup")]
    public partial interface IIECOpticalPortSetup : IModelElement, IIEC_local_port_setup
    {
    }
    
    /// <summary>
    /// The public interface for MaxVendLimit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MaxVendLimit))]
    [XmlDefaultImplementationTypeAttribute(typeof(MaxVendLimit))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MaxVendLimit")]
    public partial interface IMaxVendLimit : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MaxVendLimit")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for MaxCreditLimit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MaxCreditLimit))]
    [XmlDefaultImplementationTypeAttribute(typeof(MaxCreditLimit))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MaxCreditLimit")]
    public partial interface IMaxCreditLimit : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("MaxCreditLimit")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        Nullable<double> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for TokenGatewayObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TokenGatewayObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(TokenGatewayObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TokenGatewayObject")]
    public partial interface ITokenGatewayObject : IModelElement, ITokengateway
    {
    }
    
    /// <summary>
    /// The public interface for ChargeObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ChargeObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ChargeObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ChargeObject")]
    public partial interface IChargeObject : IModelElement, ICharge
    {
    }
    
    /// <summary>
    /// The public interface for CreditObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CreditObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(CreditObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/CreditObject")]
    public partial interface ICreditObject : IModelElement, ICredit
    {
    }
    
    /// <summary>
    /// The public interface for AccountObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AccountObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AccountObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AccountObject")]
    public partial interface IAccountObject : IModelElement, IAccount
    {
    }
    
    /// <summary>
    /// The public interface for LimiterObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(LimiterObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(LimiterObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/LimiterObject")]
    public partial interface ILimiterObject : IModelElement, ILimiter
    {
    }
    
    /// <summary>
    /// The public interface for ParameterMonitorObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ParameterMonitorObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ParameterMonitorObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ParameterMonitorObject")]
    public partial interface IParameterMonitorObject : IModelElement, IParametermonitor
    {
    }
    
    /// <summary>
    /// The public interface for AlarmMonitor
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AlarmMonitor))]
    [XmlDefaultImplementationTypeAttribute(typeof(AlarmMonitor))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AlarmMonitor")]
    public partial interface IAlarmMonitor : IModelElement, IRegistermonitor
    {
    }
    
    /// <summary>
    /// The public interface for RegisterMonitorObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RegisterMonitorObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(RegisterMonitorObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/RegisterMonitorObject")]
    public partial interface IRegisterMonitorObject : IModelElement, IRegistermonitor
    {
    }
    
    /// <summary>
    /// The public interface for PushSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PushSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(PushSchedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PushSchedule")]
    public partial interface IPushSchedule : IModelElement, ISingleactionschedule
    {
    }
    
    /// <summary>
    /// The public interface for OutputControlSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OutputControlSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(OutputControlSchedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/OutputControlSchedule")]
    public partial interface IOutputControlSchedule : IModelElement, ISingleactionschedule
    {
    }
    
    /// <summary>
    /// The public interface for ImageActivationSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ImageActivationSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(ImageActivationSchedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageActivationSchedule")]
    public partial interface IImageActivationSchedule : IModelElement, ISingleactionschedule
    {
    }
    
    /// <summary>
    /// The public interface for EndOfBillingPeriodSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EndOfBillingPeriodSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(EndOfBillingPeriodSchedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/EndOfBillingPeriodSchedule")]
    public partial interface IEndOfBillingPeriodSchedule : IModelElement, ISingleactionschedule
    {
    }
    
    /// <summary>
    /// The public interface for DisconnectControlSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DisconnectControlSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(DisconnectControlSchedule))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControlSchedule")]
    public partial interface IDisconnectControlSchedule : IModelElement, ISingleactionschedule
    {
    }
    
    /// <summary>
    /// The public interface for SingleActionScheduleObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SingleActionScheduleObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(SingleActionScheduleObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SingleActionScheduleObject")]
    public partial interface ISingleActionScheduleObject : IModelElement, ISingleactionschedule
    {
        
        /// <summary>
        /// The disconnect property
        /// </summary>
        [DisplayNameAttribute("disconnect")]
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlElementNameAttribute("disconnect")]
        [XmlAttributeAttribute(true)]
        IDisconnectControlSchedule Disconnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BillingPeriodEnd property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        IEndOfBillingPeriodSchedule BillingPeriodEnd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        IImageActivationSchedule Image
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Output property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        IOutputControlSchedule Output
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [CategoryAttribute("SingleActionScheduleObject")]
        [XmlAttributeAttribute(true)]
        IPushSchedule Push
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodEnd property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodEndChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodEnd property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodEndChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Output property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputChanging;
        
        /// <summary>
        /// Gets fired when the Output property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OutputChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PushChanged;
    }
    
    /// <summary>
    /// The public interface for RegisterActivationObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RegisterActivationObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(RegisterActivationObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/RegisterActivationObject")]
    public partial interface IRegisterActivationObject : IModelElement, IRegisterActivation
    {
    }
    
    /// <summary>
    /// The public interface for ActivityCalendarObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ActivityCalendarObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ActivityCalendarObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivityCalendarObject")]
    public partial interface IActivityCalendarObject : IModelElement, IActivitycalendar
    {
    }
    
    /// <summary>
    /// The public interface for ScheduleObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ScheduleObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ScheduleObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ScheduleObject")]
    public partial interface IScheduleObject : IModelElement, ISchedule
    {
    }
    
    /// <summary>
    /// The public interface for SpecialDays
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SpecialDays))]
    [XmlDefaultImplementationTypeAttribute(typeof(SpecialDays))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SpecialDays")]
    public partial interface ISpecialDays : IModelElement, ISpecialdaystable
    {
    }
    
    /// <summary>
    /// The public interface for Broadcast
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Broadcast))]
    [XmlDefaultImplementationTypeAttribute(typeof(Broadcast))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Broadcast")]
    public partial interface IBroadcast : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for Push
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Push))]
    [XmlDefaultImplementationTypeAttribute(typeof(Push))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Push")]
    public partial interface IPush : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for ImageActivation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ImageActivation))]
    [XmlDefaultImplementationTypeAttribute(typeof(ImageActivation))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ImageActivation")]
    public partial interface IImageActivation : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for DisconnectControl
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DisconnectControl))]
    [XmlDefaultImplementationTypeAttribute(typeof(DisconnectControl))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/DisconnectControl")]
    public partial interface IDisconnectControl : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for PowerQualityMeasurementManagement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PowerQualityMeasurementManagement))]
    [XmlDefaultImplementationTypeAttribute(typeof(PowerQualityMeasurementManagement))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/PowerQualityMeasurementManagement")]
    public partial interface IPowerQualityMeasurementManagement : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for SwitchOpticalTestOutput
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SwitchOpticalTestOutput))]
    [XmlDefaultImplementationTypeAttribute(typeof(SwitchOpticalTestOutput))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SwitchOpticalTestOutput")]
    public partial interface ISwitchOpticalTestOutput : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for SetOutputSignal
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SetOutputSignal))]
    [XmlDefaultImplementationTypeAttribute(typeof(SetOutputSignal))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/SetOutputSignal")]
    public partial interface ISetOutputSignal : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for ActivateNormalMode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ActivateNormalMode))]
    [XmlDefaultImplementationTypeAttribute(typeof(ActivateNormalMode))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivateNormalMode")]
    public partial interface IActivateNormalMode : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for ActivateTestMode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ActivateTestMode))]
    [XmlDefaultImplementationTypeAttribute(typeof(ActivateTestMode))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ActivateTestMode")]
    public partial interface IActivateTestMode : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for Tariffication
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Tariffication))]
    [XmlDefaultImplementationTypeAttribute(typeof(Tariffication))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/Tariffication")]
    public partial interface ITariffication : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for MDIReset
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MDIReset))]
    [XmlDefaultImplementationTypeAttribute(typeof(MDIReset))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/MDIReset")]
    public partial interface IMDIReset : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for GlobalMeterReset
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GlobalMeterReset))]
    [XmlDefaultImplementationTypeAttribute(typeof(GlobalMeterReset))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/GlobalMeterReset")]
    public partial interface IGlobalMeterReset : IModelElement, IScripttable
    {
    }
    
    /// <summary>
    /// The public interface for ScriptTable
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ScriptTable))]
    [XmlDefaultImplementationTypeAttribute(typeof(ScriptTable))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ScriptTable")]
    public partial interface IScriptTable : IModelElement, IScripttable
    {
        
        /// <summary>
        /// The globalMeterReset property
        /// </summary>
        [DisplayNameAttribute("globalMeterReset")]
        [CategoryAttribute("ScriptTable")]
        [XmlElementNameAttribute("globalMeterReset")]
        [XmlAttributeAttribute(true)]
        IGlobalMeterReset GlobalMeterReset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MDIReset property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IMDIReset MDIReset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tariffication property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        ITariffication Tariffication
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AcitvateTest property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IActivateTestMode AcitvateTest
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivateNormal property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IActivateNormalMode ActivateNormal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SetOutput property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        ISetOutputSignal SetOutput
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SwitchOptical property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        ISwitchOpticalTestOutput SwitchOptical
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerQuality property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IPowerQualityMeasurementManagement PowerQuality
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Disconnect property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IDisconnectControl Disconnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IImageActivation Image
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IPush Push
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Broadcast property
        /// </summary>
        [CategoryAttribute("ScriptTable")]
        [XmlAttributeAttribute(true)]
        IBroadcast Broadcast
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the GlobalMeterReset property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GlobalMeterResetChanging;
        
        /// <summary>
        /// Gets fired when the GlobalMeterReset property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> GlobalMeterResetChanged;
        
        /// <summary>
        /// Gets fired before the MDIReset property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MDIResetChanging;
        
        /// <summary>
        /// Gets fired when the MDIReset property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MDIResetChanged;
        
        /// <summary>
        /// Gets fired before the Tariffication property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TarifficationChanging;
        
        /// <summary>
        /// Gets fired when the Tariffication property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TarifficationChanged;
        
        /// <summary>
        /// Gets fired before the AcitvateTest property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AcitvateTestChanging;
        
        /// <summary>
        /// Gets fired when the AcitvateTest property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AcitvateTestChanged;
        
        /// <summary>
        /// Gets fired before the ActivateNormal property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivateNormalChanging;
        
        /// <summary>
        /// Gets fired when the ActivateNormal property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActivateNormalChanged;
        
        /// <summary>
        /// Gets fired before the SetOutput property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SetOutputChanging;
        
        /// <summary>
        /// Gets fired when the SetOutput property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SetOutputChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOptical property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SwitchOpticalChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOptical property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SwitchOpticalChanged;
        
        /// <summary>
        /// Gets fired before the PowerQuality property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerQualityChanging;
        
        /// <summary>
        /// Gets fired when the PowerQuality property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PowerQualityChanged;
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> PushChanged;
        
        /// <summary>
        /// Gets fired before the Broadcast property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BroadcastChanging;
        
        /// <summary>
        /// Gets fired when the Broadcast property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BroadcastChanged;
    }
    
    /// <summary>
    /// The public interface for AutoAnswerObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AutoAnswerObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AutoAnswerObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AutoAnswerObject")]
    public partial interface IAutoAnswerObject : IModelElement, IAuto_answer
    {
        
        /// <summary>
        /// The Answer property
        /// </summary>
        [CategoryAttribute("AutoAnswerObject")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Answer
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Answer property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AnswerChanged;
        
        /// <summary>
        /// Gets fired before the Answer property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> AnswerChanging;
    }
    
    /// <summary>
    /// The public interface for AutoConnectObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AutoConnectObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(AutoConnectObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/AutoConnectObject")]
    public partial interface IAutoConnectObject : IModelElement, IAuto_connect
    {
        
        /// <summary>
        /// The Connection property
        /// </summary>
        [CategoryAttribute("AutoConnectObject")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> Connection
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Connection property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ConnectionChanged;
        
        /// <summary>
        /// Gets fired before the Connection property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ConnectionChanging;
    }
    
    /// <summary>
    /// The public interface for ModemConfigurationObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ModemConfigurationObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ModemConfigurationObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ModemConfigurationObject")]
    public partial interface IModemConfigurationObject : IModelElement, IModemconfiguration
    {
    }
    
    /// <summary>
    /// The public interface for UNIXClock
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(UNIXClock))]
    [XmlDefaultImplementationTypeAttribute(typeof(UNIXClock))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/UNIXClock")]
    public partial interface IUNIXClock : IModelElement, IData
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        [DisplayNameAttribute("value")]
        [CategoryAttribute("UNIXClock")]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanging;
    }
    
    /// <summary>
    /// The public interface for ClockObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ClockObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(ClockObject))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ClockObject")]
    public partial interface IClockObject : IModelElement, IClock
    {
        
        /// <summary>
        /// The Time property
        /// </summary>
        [CategoryAttribute("ClockObject")]
        [XmlAttributeAttribute(true)]
        string Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Time property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeChanged;
        
        /// <summary>
        /// Gets fired before the Time property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimeChanging;
    }
    
    /// <summary>
    /// The public interface for TimeEntries
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TimeEntries))]
    [XmlDefaultImplementationTypeAttribute(typeof(TimeEntries))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/TimeEntries")]
    public partial interface ITimeEntries : IModelElement, IData
    {
        
        /// <summary>
        /// The LocalTime property
        /// </summary>
        [CategoryAttribute("TimeEntries")]
        [XmlAttributeAttribute(true)]
        string LocalTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LocalDate property
        /// </summary>
        [CategoryAttribute("TimeEntries")]
        [XmlAttributeAttribute(true)]
        string LocalDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the LocalTime property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocalTimeChanged;
        
        /// <summary>
        /// Gets fired before the LocalTime property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocalTimeChanging;
        
        /// <summary>
        /// Gets fired when the LocalDate property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocalDateChanged;
        
        /// <summary>
        /// Gets fired before the LocalDate property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LocalDateChanging;
    }
    
    /// <summary>
    /// The public interface for BillingPeriodValues
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BillingPeriodValues))]
    [XmlDefaultImplementationTypeAttribute(typeof(BillingPeriodValues))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/BillingPeriodValues")]
    public partial interface IBillingPeriodValues : IModelElement, IData
    {
        
        /// <summary>
        /// The BillingPeriodCounter property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        Nullable<int> BillingPeriodCounter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NumberAvailableBillingPeriods property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        Nullable<int> NumberAvailableBillingPeriods
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimestampRecentBillingPeriod property
        /// </summary>
        [CategoryAttribute("BillingPeriodValues")]
        [XmlAttributeAttribute(true)]
        string TimestampRecentBillingPeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the BillingPeriodCounter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodCounter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> BillingPeriodCounterChanging;
        
        /// <summary>
        /// Gets fired when the NumberAvailableBillingPeriods property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanged;
        
        /// <summary>
        /// Gets fired before the NumberAvailableBillingPeriods property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NumberAvailableBillingPeriodsChanging;
        
        /// <summary>
        /// Gets fired when the TimestampRecentBillingPeriod property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimestampRecentBillingPeriod property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> TimestampRecentBillingPeriodChanging;
    }
    
    /// <summary>
    /// The public interface for ProgramEntries
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ProgramEntries))]
    [XmlDefaultImplementationTypeAttribute(typeof(ProgramEntries))]
    [ModelRepresentationClassAttribute("foo:cosem#//COSEMObjects/ProgramEntries")]
    public partial interface IProgramEntries : IModelElement, IData
    {
        
        /// <summary>
        /// The ActiveFirmwareIdentifier property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        string ActiveFirmwareIdentifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActiveFirmwareVersion property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        string ActiveFirmwareVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActiveFirmwareSignature property
        /// </summary>
        [CategoryAttribute("ProgramEntries")]
        [XmlAttributeAttribute(true)]
        string ActiveFirmwareSignature
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareIdentifier property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareIdentifierChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareIdentifier property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareIdentifierChanging;
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareVersion property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareVersionChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareVersion property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareVersionChanging;
        
        /// <summary>
        /// Gets fired when the ActiveFirmwareSignature property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareSignatureChanged;
        
        /// <summary>
        /// Gets fired before the ActiveFirmwareSignature property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ActiveFirmwareSignatureChanging;
    }
}
