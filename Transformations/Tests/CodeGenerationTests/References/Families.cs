//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.Families
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;


    /// <summary>
    /// The default implementation of the Family class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc/Families")]
    [XmlNamespacePrefixAttribute("f")]
    [ModelRepresentationClassAttribute("http://ttc/Families#//Family")]
    public partial class Family : ModelElement, IFamily, IModelElement
    {

        /// <summary>
        /// The backing field for the LastName property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _lastName;

        private static Lazy<ITypedElement> _lastNameAttribute = new Lazy<ITypedElement>(RetrieveLastNameAttribute);

        private static Lazy<ITypedElement> _fatherReference = new Lazy<ITypedElement>(RetrieveFatherReference);

        /// <summary>
        /// The backing field for the Father property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMember _father;

        private static Lazy<ITypedElement> _motherReference = new Lazy<ITypedElement>(RetrieveMotherReference);

        /// <summary>
        /// The backing field for the Mother property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMember _mother;

        private static Lazy<ITypedElement> _sonsReference = new Lazy<ITypedElement>(RetrieveSonsReference);

        /// <summary>
        /// The backing field for the Sons property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private FamilySonsCollection _sons;

        private static Lazy<ITypedElement> _daughtersReference = new Lazy<ITypedElement>(RetrieveDaughtersReference);

        /// <summary>
        /// The backing field for the Daughters property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private FamilyDaughtersCollection _daughters;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Family()
        {
            this._sons = new FamilySonsCollection(this);
            this._sons.CollectionChanging += this.SonsCollectionChanging;
            this._sons.CollectionChanged += this.SonsCollectionChanged;
            this._daughters = new FamilyDaughtersCollection(this);
            this._daughters.CollectionChanging += this.DaughtersCollectionChanging;
            this._daughters.CollectionChanged += this.DaughtersCollectionChanged;
        }

        /// <summary>
        /// The lastName property
        /// </summary>
        [DisplayNameAttribute("lastName")]
        [CategoryAttribute("Family")]
        [XmlElementNameAttribute("lastName")]
        [XmlAttributeAttribute(true)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    string old = this._lastName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastNameChanging(e);
                    this.OnPropertyChanging("LastName", e, _lastNameAttribute);
                    this._lastName = value;
                    this.OnLastNameChanged(e);
                    this.OnPropertyChanged("LastName", e, _lastNameAttribute);
                }
            }
        }

        /// <summary>
        /// The father property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("father")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyFather")]
        public IMember Father
        {
            get
            {
                return this._father;
            }
            set
            {
                if ((this._father != value))
                {
                    IMember old = this._father;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFatherChanging(e);
                    this.OnPropertyChanging("Father", e, _fatherReference);
                    this._father = value;
                    if ((old != null))
                    {
                        old.FamilyFather = null;
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetFather;
                    }
                    if ((value != null))
                    {
                        value.FamilyFather = this;
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFather;
                    }
                    this.OnFatherChanged(e);
                    this.OnPropertyChanged("Father", e, _fatherReference);
                }
            }
        }

        /// <summary>
        /// The mother property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("mother")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyMother")]
        public IMember Mother
        {
            get
            {
                return this._mother;
            }
            set
            {
                if ((this._mother != value))
                {
                    IMember old = this._mother;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMotherChanging(e);
                    this.OnPropertyChanging("Mother", e, _motherReference);
                    this._mother = value;
                    if ((old != null))
                    {
                        old.FamilyMother = null;
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMother;
                    }
                    if ((value != null))
                    {
                        value.FamilyMother = this;
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMother;
                    }
                    this.OnMotherChanged(e);
                    this.OnPropertyChanged("Mother", e, _motherReference);
                }
            }
        }

        /// <summary>
        /// The sons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sons")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familySon")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMember> Sons
        {
            get
            {
                return this._sons;
            }
        }

        /// <summary>
        /// The daughters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("daughters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyDaughter")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMember> Daughters
        {
            get
            {
                return this._daughters;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FamilyChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FamilyReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Families#//Family")));
                }
                return _classInstance;
            }
        }

        /// <summary>
        /// Gets fired when the LastName property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LastNameChanged;

        /// <summary>
        /// Gets fired before the LastName property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LastNameChanging;

        /// <summary>
        /// Gets fired before the Father property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FatherChanging;

        /// <summary>
        /// Gets fired when the Father property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FatherChanged;

        /// <summary>
        /// Gets fired before the Mother property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MotherChanging;

        /// <summary>
        /// Gets fired when the Mother property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> MotherChanged;

        private static ITypedElement RetrieveLastNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Family.ClassInstance)).Resolve("lastName")));
        }

        /// <summary>
        /// Raises the LastNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LastNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the LastNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LastNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        private static ITypedElement RetrieveFatherReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Family.ClassInstance)).Resolve("father")));
        }

        /// <summary>
        /// Raises the FatherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FatherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FatherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatherChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FatherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the Father property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFather(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Father))
            {
                this.Father = null;
            }
        }

        private static ITypedElement RetrieveMotherReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Family.ClassInstance)).Resolve("mother")));
        }

        /// <summary>
        /// Raises the MotherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MotherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the MotherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotherChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.MotherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the Mother property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMother(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Mother))
            {
                this.Mother = null;
            }
        }

        private static ITypedElement RetrieveSonsReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Family.ClassInstance)).Resolve("sons")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Sons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SonsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Sons", e, _sonsReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Sons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SonsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Sons", e, _sonsReference);
        }

        private static ITypedElement RetrieveDaughtersReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Family.ClassInstance)).Resolve("daughters")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Daughters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DaughtersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Daughters", e, _daughtersReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Daughters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DaughtersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Daughters", e, _daughtersReference);
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Father))
            {
                return ModelHelper.CreatePath("father");
            }
            if ((element == this.Mother))
            {
                return ModelHelper.CreatePath("mother");
            }
            int sonsIndex = ModelHelper.IndexOfReference(this.Sons, element);
            if ((sonsIndex != -1))
            {
                return ModelHelper.CreatePath("sons", sonsIndex);
            }
            int daughtersIndex = ModelHelper.IndexOfReference(this.Daughters, element);
            if ((daughtersIndex != -1))
            {
                return ModelHelper.CreatePath("daughters", daughtersIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FATHER"))
            {
                return this.Father;
            }
            if ((reference == "MOTHER"))
            {
                return this.Mother;
            }
            if ((reference == "SONS"))
            {
                if ((index < this.Sons.Count))
                {
                    return this.Sons[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DAUGHTERS"))
            {
                if ((index < this.Daughters.Count))
                {
                    return this.Daughters[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LASTNAME"))
            {
                return this.LastName;
            }
            return base.GetAttributeValue(attribute, index);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SONS"))
            {
                return this._sons;
            }
            if ((feature == "DAUGHTERS"))
            {
                return this._daughters;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FATHER"))
            {
                this.Father = ((IMember)(value));
                return;
            }
            if ((feature == "MOTHER"))
            {
                this.Mother = ((IMember)(value));
                return;
            }
            if ((feature == "LASTNAME"))
            {
                this.LastName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LASTNAME"))
            {
                return new LastNameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FATHER"))
            {
                return new FatherProxy(this);
            }
            if ((reference == "MOTHER"))
            {
                return new MotherProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._sons))
            {
                return "sons";
            }
            if ((container == this._daughters))
            {
                return "daughters";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Families#//Family")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the Family class
        /// </summary>
        public class FamilyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private Family _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FamilyChildrenCollection(Family parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Father != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mother != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Sons.Count);
                    count = (count + this._parent.Daughters.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.FatherChanged += this.PropagateValueChanges;
                this._parent.MotherChanged += this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.FatherChanged -= this.PropagateValueChanges;
                this._parent.MotherChanged -= this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Father == null))
                {
                    IMember fatherCasted = item.As<IMember>();
                    if ((fatherCasted != null))
                    {
                        this._parent.Father = fatherCasted;
                        return;
                    }
                }
                if ((this._parent.Mother == null))
                {
                    IMember motherCasted = item.As<IMember>();
                    if ((motherCasted != null))
                    {
                        this._parent.Mother = motherCasted;
                        return;
                    }
                }
                IMember sonsCasted = item.As<IMember>();
                if ((sonsCasted != null))
                {
                    this._parent.Sons.Add(sonsCasted);
                }
                IMember daughtersCasted = item.As<IMember>();
                if ((daughtersCasted != null))
                {
                    this._parent.Daughters.Add(daughtersCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Father = null;
                this._parent.Mother = null;
                this._parent.Sons.Clear();
                this._parent.Daughters.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Father))
                {
                    return true;
                }
                if ((item == this._parent.Mother))
                {
                    return true;
                }
                if (this._parent.Sons.Contains(item))
                {
                    return true;
                }
                if (this._parent.Daughters.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Father != null))
                {
                    array[arrayIndex] = this._parent.Father;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mother != null))
                {
                    array[arrayIndex] = this._parent.Mother;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> sonsEnumerator = this._parent.Sons.GetEnumerator();
                try
                {
                    for (
                    ; sonsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = sonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> daughtersEnumerator = this._parent.Daughters.GetEnumerator();
                try
                {
                    for (
                    ; daughtersEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = daughtersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    daughtersEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Father == item))
                {
                    this._parent.Father = null;
                    return true;
                }
                if ((this._parent.Mother == item))
                {
                    this._parent.Mother = null;
                    return true;
                }
                IMember memberItem = item.As<IMember>();
                if (((memberItem != null)
                            && this._parent.Sons.Remove(memberItem)))
                {
                    return true;
                }
                if (((memberItem != null)
                            && this._parent.Daughters.Remove(memberItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Father).Concat(this._parent.Mother).Concat(this._parent.Sons).Concat(this._parent.Daughters).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the Family class
        /// </summary>
        public class FamilyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private Family _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FamilyReferencedElementsCollection(Family parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Father != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mother != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Sons.Count);
                    count = (count + this._parent.Daughters.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.FatherChanged += this.PropagateValueChanges;
                this._parent.MotherChanged += this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.FatherChanged -= this.PropagateValueChanges;
                this._parent.MotherChanged -= this.PropagateValueChanges;
                this._parent.Sons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Daughters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Father == null))
                {
                    IMember fatherCasted = item.As<IMember>();
                    if ((fatherCasted != null))
                    {
                        this._parent.Father = fatherCasted;
                        return;
                    }
                }
                if ((this._parent.Mother == null))
                {
                    IMember motherCasted = item.As<IMember>();
                    if ((motherCasted != null))
                    {
                        this._parent.Mother = motherCasted;
                        return;
                    }
                }
                IMember sonsCasted = item.As<IMember>();
                if ((sonsCasted != null))
                {
                    this._parent.Sons.Add(sonsCasted);
                }
                IMember daughtersCasted = item.As<IMember>();
                if ((daughtersCasted != null))
                {
                    this._parent.Daughters.Add(daughtersCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Father = null;
                this._parent.Mother = null;
                this._parent.Sons.Clear();
                this._parent.Daughters.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Father))
                {
                    return true;
                }
                if ((item == this._parent.Mother))
                {
                    return true;
                }
                if (this._parent.Sons.Contains(item))
                {
                    return true;
                }
                if (this._parent.Daughters.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Father != null))
                {
                    array[arrayIndex] = this._parent.Father;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mother != null))
                {
                    array[arrayIndex] = this._parent.Mother;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> sonsEnumerator = this._parent.Sons.GetEnumerator();
                try
                {
                    for (
                    ; sonsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = sonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> daughtersEnumerator = this._parent.Daughters.GetEnumerator();
                try
                {
                    for (
                    ; daughtersEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = daughtersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    daughtersEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Father == item))
                {
                    this._parent.Father = null;
                    return true;
                }
                if ((this._parent.Mother == item))
                {
                    this._parent.Mother = null;
                    return true;
                }
                IMember memberItem = item.As<IMember>();
                if (((memberItem != null)
                            && this._parent.Sons.Remove(memberItem)))
                {
                    return true;
                }
                if (((memberItem != null)
                            && this._parent.Daughters.Remove(memberItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Father).Concat(this._parent.Mother).Concat(this._parent.Sons).Concat(this._parent.Daughters).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastName property
        /// </summary>
        private sealed class LastNameProxy : ModelPropertyChange<IFamily, string>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastNameProxy(IFamily modelElement) :
                    base(modelElement, "lastName")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LastName;
                }
                set
                {
                    this.ModelElement.LastName = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the father property
        /// </summary>
        private sealed class FatherProxy : ModelPropertyChange<IFamily, IMember>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FatherProxy(IFamily modelElement) :
                    base(modelElement, "father")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMember Value
            {
                get
                {
                    return this.ModelElement.Father;
                }
                set
                {
                    this.ModelElement.Father = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the mother property
        /// </summary>
        private sealed class MotherProxy : ModelPropertyChange<IFamily, IMember>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MotherProxy(IFamily modelElement) :
                    base(modelElement, "mother")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMember Value
            {
                get
                {
                    return this.ModelElement.Mother;
                }
                set
                {
                    this.ModelElement.Mother = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the Member class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc/Families")]
    [XmlNamespacePrefixAttribute("f")]
    [ModelRepresentationClassAttribute("http://ttc/Families#//Member")]
    public partial class Member : ModelElement, IMember, IModelElement
    {

        /// <summary>
        /// The backing field for the FirstName property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _firstName;

        private static Lazy<ITypedElement> _firstNameAttribute = new Lazy<ITypedElement>(RetrieveFirstNameAttribute);

        private static Lazy<ITypedElement> _familyFatherReference = new Lazy<ITypedElement>(RetrieveFamilyFatherReference);

        /// <summary>
        /// The backing field for the FamilyFather property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFamily _familyFather;

        private static Lazy<ITypedElement> _familyMotherReference = new Lazy<ITypedElement>(RetrieveFamilyMotherReference);

        /// <summary>
        /// The backing field for the FamilyMother property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFamily _familyMother;

        private static Lazy<ITypedElement> _familySonReference = new Lazy<ITypedElement>(RetrieveFamilySonReference);

        /// <summary>
        /// The backing field for the FamilySon property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFamily _familySon;

        private static Lazy<ITypedElement> _familyDaughterReference = new Lazy<ITypedElement>(RetrieveFamilyDaughterReference);

        /// <summary>
        /// The backing field for the FamilyDaughter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFamily _familyDaughter;

        private static IClass _classInstance;

        /// <summary>
        /// The firstName property
        /// </summary>
        [DisplayNameAttribute("firstName")]
        [CategoryAttribute("Member")]
        [XmlElementNameAttribute("firstName")]
        [XmlAttributeAttribute(true)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    string old = this._firstName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirstNameChanging(e);
                    this.OnPropertyChanging("FirstName", e, _firstNameAttribute);
                    this._firstName = value;
                    this.OnFirstNameChanged(e);
                    this.OnPropertyChanged("FirstName", e, _firstNameAttribute);
                }
            }
        }

        /// <summary>
        /// The familyFather property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyFather")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("father")]
        public IFamily FamilyFather
        {
            get
            {
                return this._familyFather;
            }
            set
            {
                if ((this._familyFather != value))
                {
                    IFamily old = this._familyFather;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFamilyFatherChanging(e);
                    this.OnPropertyChanging("FamilyFather", e, _familyFatherReference);
                    this._familyFather = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Father = null;
                    }
                    if ((value != null))
                    {
                        value.Father = this;
                    }
                    this.OnFamilyFatherChanged(e);
                    this.OnPropertyChanged("FamilyFather", e, _familyFatherReference);
                }
            }
        }

        /// <summary>
        /// The familyMother property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyMother")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("mother")]
        public IFamily FamilyMother
        {
            get
            {
                return this._familyMother;
            }
            set
            {
                if ((this._familyMother != value))
                {
                    IFamily old = this._familyMother;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFamilyMotherChanging(e);
                    this.OnPropertyChanging("FamilyMother", e, _familyMotherReference);
                    this._familyMother = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Mother = null;
                    }
                    if ((value != null))
                    {
                        value.Mother = this;
                    }
                    this.OnFamilyMotherChanged(e);
                    this.OnPropertyChanged("FamilyMother", e, _familyMotherReference);
                }
            }
        }

        /// <summary>
        /// The familySon property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familySon")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("sons")]
        public IFamily FamilySon
        {
            get
            {
                return this._familySon;
            }
            set
            {
                if ((this._familySon != value))
                {
                    IFamily old = this._familySon;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFamilySonChanging(e);
                    this.OnPropertyChanging("FamilySon", e, _familySonReference);
                    this._familySon = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Sons.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Sons.Add(this);
                    }
                    this.OnFamilySonChanged(e);
                    this.OnPropertyChanged("FamilySon", e, _familySonReference);
                }
            }
        }

        /// <summary>
        /// The familyDaughter property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyDaughter")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("daughters")]
        public IFamily FamilyDaughter
        {
            get
            {
                return this._familyDaughter;
            }
            set
            {
                if ((this._familyDaughter != value))
                {
                    IFamily old = this._familyDaughter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFamilyDaughterChanging(e);
                    this.OnPropertyChanging("FamilyDaughter", e, _familyDaughterReference);
                    this._familyDaughter = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Daughters.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Daughters.Add(this);
                    }
                    this.OnFamilyDaughterChanged(e);
                    this.OnPropertyChanged("FamilyDaughter", e, _familyDaughterReference);
                }
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MemberReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Families#//Member")));
                }
                return _classInstance;
            }
        }

        /// <summary>
        /// Gets fired when the FirstName property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FirstNameChanged;

        /// <summary>
        /// Gets fired before the FirstName property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FirstNameChanging;

        /// <summary>
        /// Gets fired before the FamilyFather property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyFatherChanging;

        /// <summary>
        /// Gets fired when the FamilyFather property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyFatherChanged;

        /// <summary>
        /// Gets fired before the FamilyMother property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyMotherChanging;

        /// <summary>
        /// Gets fired when the FamilyMother property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyMotherChanged;

        /// <summary>
        /// Gets fired before the FamilySon property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilySonChanging;

        /// <summary>
        /// Gets fired when the FamilySon property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilySonChanged;

        /// <summary>
        /// Gets fired before the FamilyDaughter property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyDaughterChanging;

        /// <summary>
        /// Gets fired when the FamilyDaughter property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FamilyDaughterChanged;

        private static ITypedElement RetrieveFirstNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Member.ClassInstance)).Resolve("firstName")));
        }

        /// <summary>
        /// Raises the FirstNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FirstNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FirstNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FirstNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        private static ITypedElement RetrieveFamilyFatherReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Member.ClassInstance)).Resolve("familyFather")));
        }

        /// <summary>
        /// Raises the FamilyFatherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyFatherChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyFatherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FamilyFatherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyFatherChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyFatherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the FamilyFather property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFamilyFather(object sender, EventArgs eventArgs)
        {
            if ((sender == this.FamilyFather))
            {
                this.FamilyFather = null;
            }
        }

        private static ITypedElement RetrieveFamilyMotherReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Member.ClassInstance)).Resolve("familyMother")));
        }

        /// <summary>
        /// Raises the FamilyMotherChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyMotherChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyMotherChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FamilyMotherChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyMotherChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyMotherChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the FamilyMother property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFamilyMother(object sender, EventArgs eventArgs)
        {
            if ((sender == this.FamilyMother))
            {
                this.FamilyMother = null;
            }
        }

        private static ITypedElement RetrieveFamilySonReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Member.ClassInstance)).Resolve("familySon")));
        }

        /// <summary>
        /// Raises the FamilySonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilySonChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilySonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FamilySonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilySonChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilySonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the FamilySon property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFamilySon(object sender, EventArgs eventArgs)
        {
            if ((sender == this.FamilySon))
            {
                this.FamilySon = null;
            }
        }

        private static ITypedElement RetrieveFamilyDaughterReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.Families.Member.ClassInstance)).Resolve("familyDaughter")));
        }

        /// <summary>
        /// Raises the FamilyDaughterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyDaughterChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyDaughterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Raises the FamilyDaughterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyDaughterChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FamilyDaughterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Handles the event that the FamilyDaughter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFamilyDaughter(object sender, EventArgs eventArgs)
        {
            if ((sender == this.FamilyDaughter))
            {
                this.FamilyDaughter = null;
            }
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FAMILYFATHER"))
            {
                return this.FamilyFather;
            }
            if ((reference == "FAMILYMOTHER"))
            {
                return this.FamilyMother;
            }
            if ((reference == "FAMILYSON"))
            {
                return this.FamilySon;
            }
            if ((reference == "FAMILYDAUGHTER"))
            {
                return this.FamilyDaughter;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FIRSTNAME"))
            {
                return this.FirstName;
            }
            return base.GetAttributeValue(attribute, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FAMILYFATHER"))
            {
                this.FamilyFather = ((IFamily)(value));
                return;
            }
            if ((feature == "FAMILYMOTHER"))
            {
                this.FamilyMother = ((IFamily)(value));
                return;
            }
            if ((feature == "FAMILYSON"))
            {
                this.FamilySon = ((IFamily)(value));
                return;
            }
            if ((feature == "FAMILYDAUGHTER"))
            {
                this.FamilyDaughter = ((IFamily)(value));
                return;
            }
            if ((feature == "FIRSTNAME"))
            {
                this.FirstName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FIRSTNAME"))
            {
                return new FirstNameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FAMILYFATHER"))
            {
                return new FamilyFatherProxy(this);
            }
            if ((reference == "FAMILYMOTHER"))
            {
                return new FamilyMotherProxy(this);
            }
            if ((reference == "FAMILYSON"))
            {
                return new FamilySonProxy(this);
            }
            if ((reference == "FAMILYDAUGHTER"))
            {
                return new FamilyDaughterProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc/Families#//Member")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the Member class
        /// </summary>
        public class MemberReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private Member _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MemberReferencedElementsCollection(Member parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FamilyFather != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FamilyMother != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FamilySon != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FamilyDaughter != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.FamilyFatherChanged += this.PropagateValueChanges;
                this._parent.FamilyMotherChanged += this.PropagateValueChanges;
                this._parent.FamilySonChanged += this.PropagateValueChanges;
                this._parent.FamilyDaughterChanged += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.FamilyFatherChanged -= this.PropagateValueChanges;
                this._parent.FamilyMotherChanged -= this.PropagateValueChanges;
                this._parent.FamilySonChanged -= this.PropagateValueChanges;
                this._parent.FamilyDaughterChanged -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FamilyFather == null))
                {
                    IFamily familyFatherCasted = item.As<IFamily>();
                    if ((familyFatherCasted != null))
                    {
                        this._parent.FamilyFather = familyFatherCasted;
                        return;
                    }
                }
                if ((this._parent.FamilyMother == null))
                {
                    IFamily familyMotherCasted = item.As<IFamily>();
                    if ((familyMotherCasted != null))
                    {
                        this._parent.FamilyMother = familyMotherCasted;
                        return;
                    }
                }
                if ((this._parent.FamilySon == null))
                {
                    IFamily familySonCasted = item.As<IFamily>();
                    if ((familySonCasted != null))
                    {
                        this._parent.FamilySon = familySonCasted;
                        return;
                    }
                }
                if ((this._parent.FamilyDaughter == null))
                {
                    IFamily familyDaughterCasted = item.As<IFamily>();
                    if ((familyDaughterCasted != null))
                    {
                        this._parent.FamilyDaughter = familyDaughterCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FamilyFather = null;
                this._parent.FamilyMother = null;
                this._parent.FamilySon = null;
                this._parent.FamilyDaughter = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FamilyFather))
                {
                    return true;
                }
                if ((item == this._parent.FamilyMother))
                {
                    return true;
                }
                if ((item == this._parent.FamilySon))
                {
                    return true;
                }
                if ((item == this._parent.FamilyDaughter))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FamilyFather != null))
                {
                    array[arrayIndex] = this._parent.FamilyFather;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FamilyMother != null))
                {
                    array[arrayIndex] = this._parent.FamilyMother;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FamilySon != null))
                {
                    array[arrayIndex] = this._parent.FamilySon;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FamilyDaughter != null))
                {
                    array[arrayIndex] = this._parent.FamilyDaughter;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FamilyFather == item))
                {
                    this._parent.FamilyFather = null;
                    return true;
                }
                if ((this._parent.FamilyMother == item))
                {
                    this._parent.FamilyMother = null;
                    return true;
                }
                if ((this._parent.FamilySon == item))
                {
                    this._parent.FamilySon = null;
                    return true;
                }
                if ((this._parent.FamilyDaughter == item))
                {
                    this._parent.FamilyDaughter = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FamilyFather).Concat(this._parent.FamilyMother).Concat(this._parent.FamilySon).Concat(this._parent.FamilyDaughter).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the firstName property
        /// </summary>
        private sealed class FirstNameProxy : ModelPropertyChange<IMember, string>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirstNameProxy(IMember modelElement) :
                    base(modelElement, "firstName")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FirstName;
                }
                set
                {
                    this.ModelElement.FirstName = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the familyFather property
        /// </summary>
        private sealed class FamilyFatherProxy : ModelPropertyChange<IMember, IFamily>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamilyFatherProxy(IMember modelElement) :
                    base(modelElement, "familyFather")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.FamilyFather;
                }
                set
                {
                    this.ModelElement.FamilyFather = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the familyMother property
        /// </summary>
        private sealed class FamilyMotherProxy : ModelPropertyChange<IMember, IFamily>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamilyMotherProxy(IMember modelElement) :
                    base(modelElement, "familyMother")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.FamilyMother;
                }
                set
                {
                    this.ModelElement.FamilyMother = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the familySon property
        /// </summary>
        private sealed class FamilySonProxy : ModelPropertyChange<IMember, IFamily>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamilySonProxy(IMember modelElement) :
                    base(modelElement, "familySon")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.FamilySon;
                }
                set
                {
                    this.ModelElement.FamilySon = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the familyDaughter property
        /// </summary>
        private sealed class FamilyDaughterProxy : ModelPropertyChange<IMember, IFamily>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamilyDaughterProxy(IMember modelElement) :
                    base(modelElement, "familyDaughter")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFamily Value
            {
                get
                {
                    return this.ModelElement.FamilyDaughter;
                }
                set
                {
                    this.ModelElement.FamilyDaughter = value;
                }
            }
        }
    }

    /// <summary>
    /// The public interface for Member
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Member))]
    [XmlDefaultImplementationTypeAttribute(typeof(Member))]
    [ModelRepresentationClassAttribute("http://ttc/Families#//Member")]
    public interface IMember : IModelElement
    {

        /// <summary>
        /// The firstName property
        /// </summary>
        [DisplayNameAttribute("firstName")]
        [CategoryAttribute("Member")]
        [XmlElementNameAttribute("firstName")]
        [XmlAttributeAttribute(true)]
        string FirstName
        {
            get;
            set;
        }

        /// <summary>
        /// The familyFather property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyFather")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("father")]
        IFamily FamilyFather
        {
            get;
            set;
        }

        /// <summary>
        /// The familyMother property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyMother")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("mother")]
        IFamily FamilyMother
        {
            get;
            set;
        }

        /// <summary>
        /// The familySon property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familySon")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("sons")]
        IFamily FamilySon
        {
            get;
            set;
        }

        /// <summary>
        /// The familyDaughter property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familyDaughter")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("daughters")]
        IFamily FamilyDaughter
        {
            get;
            set;
        }

        /// <summary>
        /// Gets fired when the FirstName property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FirstNameChanged;

        /// <summary>
        /// Gets fired before the FirstName property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FirstNameChanging;

        /// <summary>
        /// Gets fired before the FamilyFather property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyFatherChanging;

        /// <summary>
        /// Gets fired when the FamilyFather property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyFatherChanged;

        /// <summary>
        /// Gets fired before the FamilyMother property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyMotherChanging;

        /// <summary>
        /// Gets fired when the FamilyMother property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyMotherChanged;

        /// <summary>
        /// Gets fired before the FamilySon property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilySonChanging;

        /// <summary>
        /// Gets fired when the FamilySon property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilySonChanged;

        /// <summary>
        /// Gets fired before the FamilyDaughter property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyDaughterChanging;

        /// <summary>
        /// Gets fired when the FamilyDaughter property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FamilyDaughterChanged;
    }

    /// <summary>
    /// Denotes a class to implement the sons reference
    /// </summary>
    public class FamilySonsCollection : ObservableOppositeOrderedSet<IFamily, IMember>
    {

        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Family</param>
        public FamilySonsCollection(IFamily parent) :
                base(parent)
        {
        }

        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((IMember)(sender)));
            }
        }

        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(IMember item, IFamily newParent)
        {
            if ((newParent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.FamilySon = newParent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.FamilySon == this.Parent))
                {
                    item.FamilySon = newParent;
                }
            }
        }
    }

    /// <summary>
    /// Denotes a class to implement the daughters reference
    /// </summary>
    public class FamilyDaughtersCollection : ObservableOppositeOrderedSet<IFamily, IMember>
    {

        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Family</param>
        public FamilyDaughtersCollection(IFamily parent) :
                base(parent)
        {
        }

        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((IMember)(sender)));
            }
        }

        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(IMember item, IFamily newParent)
        {
            if ((newParent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.FamilyDaughter = newParent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.FamilyDaughter == this.Parent))
                {
                    item.FamilyDaughter = newParent;
                }
            }
        }
    }

    /// <summary>
    /// The public interface for Family
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Family))]
    [XmlDefaultImplementationTypeAttribute(typeof(Family))]
    [ModelRepresentationClassAttribute("http://ttc/Families#//Family")]
    public interface IFamily : IModelElement
    {

        /// <summary>
        /// The lastName property
        /// </summary>
        [DisplayNameAttribute("lastName")]
        [CategoryAttribute("Family")]
        [XmlElementNameAttribute("lastName")]
        [XmlAttributeAttribute(true)]
        string LastName
        {
            get;
            set;
        }

        /// <summary>
        /// The father property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("father")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyFather")]
        IMember Father
        {
            get;
            set;
        }

        /// <summary>
        /// The mother property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("mother")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyMother")]
        IMember Mother
        {
            get;
            set;
        }

        /// <summary>
        /// The sons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sons")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familySon")]
        [ConstantAttribute()]
        IOrderedSetExpression<IMember> Sons
        {
            get;
        }

        /// <summary>
        /// The daughters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("daughters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("familyDaughter")]
        [ConstantAttribute()]
        IOrderedSetExpression<IMember> Daughters
        {
            get;
        }

        /// <summary>
        /// Gets fired when the LastName property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LastNameChanged;

        /// <summary>
        /// Gets fired before the LastName property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> LastNameChanging;

        /// <summary>
        /// Gets fired before the Father property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FatherChanging;

        /// <summary>
        /// Gets fired when the Father property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> FatherChanged;

        /// <summary>
        /// Gets fired before the Mother property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MotherChanging;

        /// <summary>
        /// Gets fired when the Mother property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> MotherChanged;
    }
}
