//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemporaryGeneratedCode.ArchitectureCRA
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the ClassModel class
    /// </summary>
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//ClassModel")]
    [DebuggerDisplayAttribute("ClassModel {Name}")]
    public partial class ClassModel : NamedElement, IClassModel, IModelElement
    {
        
        private static Lazy<ITypedElement> _classesReference = new Lazy<ITypedElement>(RetrieveClassesReference);
        
        /// <summary>
        /// The backing field for the Classes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<TemporaryGeneratedCode.ArchitectureCRA.IClass> _classes;
        
        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);
        
        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IFeature> _features;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ClassModel()
        {
            this._classes = new ObservableCompositionOrderedSet<TemporaryGeneratedCode.ArchitectureCRA.IClass>(this);
            this._classes.CollectionChanging += this.ClassesCollectionChanging;
            this._classes.CollectionChanged += this.ClassesCollectionChanged;
            this._features = new ObservableCompositionOrderedSet<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }
        
        /// <summary>
        /// The classes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("classes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<TemporaryGeneratedCode.ArchitectureCRA.IClass> Classes
        {
            get
            {
                return this._classes;
            }
        }
        
        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassModelChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//ClassModel")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveClassesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.ClassModel.ClassInstance)).Resolve("classes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Classes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClassesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Classes", e, _classesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Classes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClassesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Classes", e, _classesReference);
        }
        
        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.ClassModel.ClassInstance)).Resolve("features")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int classesIndex = ModelHelper.IndexOfReference(this.Classes, element);
            if ((classesIndex != -1))
            {
                return ModelHelper.CreatePath("classes", classesIndex);
            }
            int featuresIndex = ModelHelper.IndexOfReference(this.Features, element);
            if ((featuresIndex != -1))
            {
                return ModelHelper.CreatePath("features", featuresIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASSES"))
            {
                if ((index < this.Classes.Count))
                {
                    return this.Classes[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FEATURES"))
            {
                if ((index < this.Features.Count))
                {
                    return this.Features[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CLASSES"))
            {
                return this._classes;
            }
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._classes))
            {
                return "classes";
            }
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//ClassModel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassModel class
        /// </summary>
        public class ClassModelChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassModelChildrenCollection(ClassModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Classes.Count);
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Classes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Classes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IClass classesCasted = item.As<TemporaryGeneratedCode.ArchitectureCRA.IClass>();
                if ((classesCasted != null))
                {
                    this._parent.Classes.Add(classesCasted);
                }
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Classes.Clear();
                this._parent.Features.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Classes.Contains(item))
                {
                    return true;
                }
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> classesEnumerator = this._parent.Classes.GetEnumerator();
                try
                {
                    for (
                    ; classesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = classesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    classesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IClass classItem = item.As<TemporaryGeneratedCode.ArchitectureCRA.IClass>();
                if (((classItem != null) 
                            && this._parent.Classes.Remove(classItem)))
                {
                    return true;
                }
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null) 
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Classes).Concat(this._parent.Features).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassModel class
        /// </summary>
        public class ClassModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassModelReferencedElementsCollection(ClassModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Classes.Count);
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Classes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Classes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IClass classesCasted = item.As<TemporaryGeneratedCode.ArchitectureCRA.IClass>();
                if ((classesCasted != null))
                {
                    this._parent.Classes.Add(classesCasted);
                }
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Classes.Clear();
                this._parent.Features.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Classes.Contains(item))
                {
                    return true;
                }
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> classesEnumerator = this._parent.Classes.GetEnumerator();
                try
                {
                    for (
                    ; classesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = classesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    classesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IClass classItem = item.As<TemporaryGeneratedCode.ArchitectureCRA.IClass>();
                if (((classItem != null) 
                            && this._parent.Classes.Remove(classItem)))
                {
                    return true;
                }
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null) 
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Classes).Concat(this._parent.Features).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Class class
    /// </summary>
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Class")]
    [DebuggerDisplayAttribute("Class {Name}")]
    public partial class Class : NamedElement, TemporaryGeneratedCode.ArchitectureCRA.IClass, IModelElement
    {
        
        private static Lazy<ITypedElement> _encapsulatesReference = new Lazy<ITypedElement>(RetrieveEncapsulatesReference);
        
        /// <summary>
        /// The backing field for the Encapsulates property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ClassEncapsulatesCollection _encapsulates;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Class()
        {
            this._encapsulates = new ClassEncapsulatesCollection(this);
            this._encapsulates.CollectionChanging += this.EncapsulatesCollectionChanging;
            this._encapsulates.CollectionChanged += this.EncapsulatesCollectionChanged;
        }
        
        /// <summary>
        /// The encapsulates property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("encapsulates")]
        [CategoryAttribute("Class")]
        [XmlElementNameAttribute("encapsulates")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("isEncapsulatedBy")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IFeature> Encapsulates
        {
            get
            {
                return this._encapsulates;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Class")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveEncapsulatesReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.Class.ClassInstance)).Resolve("encapsulates")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Encapsulates property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EncapsulatesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Encapsulates", e, _encapsulatesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Encapsulates property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EncapsulatesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Encapsulates", e, _encapsulatesReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ENCAPSULATES"))
            {
                if ((index < this.Encapsulates.Count))
                {
                    return this.Encapsulates[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENCAPSULATES"))
            {
                return this._encapsulates;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Class")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassReferencedElementsCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Encapsulates.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Encapsulates.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Encapsulates.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature encapsulatesCasted = item.As<IFeature>();
                if ((encapsulatesCasted != null))
                {
                    this._parent.Encapsulates.Add(encapsulatesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Encapsulates.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Encapsulates.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> encapsulatesEnumerator = this._parent.Encapsulates.GetEnumerator();
                try
                {
                    for (
                    ; encapsulatesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = encapsulatesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    encapsulatesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null) 
                            && this._parent.Encapsulates.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Encapsulates).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Attribute class
    /// </summary>
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Attribute")]
    [DebuggerDisplayAttribute("Attribute {Name}")]
    public partial class Attribute : Feature, TemporaryGeneratedCode.ArchitectureCRA.IAttribute, IModelElement
    {
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Attribute")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Attribute")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Method class
    /// </summary>
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Method")]
    [DebuggerDisplayAttribute("Method {Name}")]
    public partial class Method : Feature, IMethod, IModelElement
    {
        
        private static Lazy<ITypedElement> _dataDependencyReference = new Lazy<ITypedElement>(RetrieveDataDependencyReference);
        
        /// <summary>
        /// The backing field for the DataDependency property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<TemporaryGeneratedCode.ArchitectureCRA.IAttribute> _dataDependency;
        
        private static Lazy<ITypedElement> _functionalDependencyReference = new Lazy<ITypedElement>(RetrieveFunctionalDependencyReference);
        
        /// <summary>
        /// The backing field for the FunctionalDependency property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<IMethod> _functionalDependency;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Method()
        {
            this._dataDependency = new ObservableAssociationOrderedSet<TemporaryGeneratedCode.ArchitectureCRA.IAttribute>();
            this._dataDependency.CollectionChanging += this.DataDependencyCollectionChanging;
            this._dataDependency.CollectionChanged += this.DataDependencyCollectionChanged;
            this._functionalDependency = new ObservableAssociationOrderedSet<IMethod>();
            this._functionalDependency.CollectionChanging += this.FunctionalDependencyCollectionChanging;
            this._functionalDependency.CollectionChanged += this.FunctionalDependencyCollectionChanged;
        }
        
        /// <summary>
        /// The dataDependency property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("dataDependency")]
        [CategoryAttribute("Method")]
        [XmlElementNameAttribute("dataDependency")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<TemporaryGeneratedCode.ArchitectureCRA.IAttribute> DataDependency
        {
            get
            {
                return this._dataDependency;
            }
        }
        
        /// <summary>
        /// The functionalDependency property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("functionalDependency")]
        [CategoryAttribute("Method")]
        [XmlElementNameAttribute("functionalDependency")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMethod> FunctionalDependency
        {
            get
            {
                return this._functionalDependency;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MethodReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Method")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveDataDependencyReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.Method.ClassInstance)).Resolve("dataDependency")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DataDependency property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataDependencyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DataDependency", e, _dataDependencyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DataDependency property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataDependencyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DataDependency", e, _dataDependencyReference);
        }
        
        private static ITypedElement RetrieveFunctionalDependencyReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.Method.ClassInstance)).Resolve("functionalDependency")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FunctionalDependency property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FunctionalDependencyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FunctionalDependency", e, _functionalDependencyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FunctionalDependency property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FunctionalDependencyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FunctionalDependency", e, _functionalDependencyReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DATADEPENDENCY"))
            {
                if ((index < this.DataDependency.Count))
                {
                    return this.DataDependency[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FUNCTIONALDEPENDENCY"))
            {
                if ((index < this.FunctionalDependency.Count))
                {
                    return this.FunctionalDependency[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DATADEPENDENCY"))
            {
                return this._dataDependency;
            }
            if ((feature == "FUNCTIONALDEPENDENCY"))
            {
                return this._functionalDependency;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Method")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Method class
        /// </summary>
        public class MethodReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Method _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MethodReferencedElementsCollection(Method parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.DataDependency.Count);
                    count = (count + this._parent.FunctionalDependency.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.DataDependency.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FunctionalDependency.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.DataDependency.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FunctionalDependency.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IAttribute dataDependencyCasted = item.As<TemporaryGeneratedCode.ArchitectureCRA.IAttribute>();
                if ((dataDependencyCasted != null))
                {
                    this._parent.DataDependency.Add(dataDependencyCasted);
                }
                IMethod functionalDependencyCasted = item.As<IMethod>();
                if ((functionalDependencyCasted != null))
                {
                    this._parent.FunctionalDependency.Add(functionalDependencyCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DataDependency.Clear();
                this._parent.FunctionalDependency.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.DataDependency.Contains(item))
                {
                    return true;
                }
                if (this._parent.FunctionalDependency.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> dataDependencyEnumerator = this._parent.DataDependency.GetEnumerator();
                try
                {
                    for (
                    ; dataDependencyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dataDependencyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dataDependencyEnumerator.Dispose();
                }
                IEnumerator<IModelElement> functionalDependencyEnumerator = this._parent.FunctionalDependency.GetEnumerator();
                try
                {
                    for (
                    ; functionalDependencyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = functionalDependencyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    functionalDependencyEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                TemporaryGeneratedCode.ArchitectureCRA.IAttribute attributeItem = item.As<TemporaryGeneratedCode.ArchitectureCRA.IAttribute>();
                if (((attributeItem != null) 
                            && this._parent.DataDependency.Remove(attributeItem)))
                {
                    return true;
                }
                IMethod methodItem = item.As<IMethod>();
                if (((methodItem != null) 
                            && this._parent.FunctionalDependency.Remove(methodItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DataDependency).Concat(this._parent.FunctionalDependency).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Feature class
    /// </summary>
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Feature")]
    [DebuggerDisplayAttribute("Feature {Name}")]
    public abstract partial class Feature : NamedElement, IFeature, IModelElement
    {
        
        private static Lazy<ITypedElement> _isEncapsulatedByReference = new Lazy<ITypedElement>(RetrieveIsEncapsulatedByReference);
        
        /// <summary>
        /// The backing field for the IsEncapsulatedBy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TemporaryGeneratedCode.ArchitectureCRA.IClass _isEncapsulatedBy;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The isEncapsulatedBy property
        /// </summary>
        [DisplayNameAttribute("isEncapsulatedBy")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("isEncapsulatedBy")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("encapsulates")]
        public TemporaryGeneratedCode.ArchitectureCRA.IClass IsEncapsulatedBy
        {
            get
            {
                return this._isEncapsulatedBy;
            }
            set
            {
                if ((this._isEncapsulatedBy != value))
                {
                    TemporaryGeneratedCode.ArchitectureCRA.IClass old = this._isEncapsulatedBy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsEncapsulatedByChanging(e);
                    this.OnPropertyChanging("IsEncapsulatedBy", e, _isEncapsulatedByReference);
                    this._isEncapsulatedBy = value;
                    if ((old != null))
                    {
                        old.Encapsulates.Remove(this);
                        old.Deleted -= this.OnResetIsEncapsulatedBy;
                    }
                    if ((value != null))
                    {
                        value.Encapsulates.Add(this);
                        value.Deleted += this.OnResetIsEncapsulatedBy;
                    }
                    this.OnIsEncapsulatedByChanged(e);
                    this.OnPropertyChanged("IsEncapsulatedBy", e, _isEncapsulatedByReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Feature")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsEncapsulatedBy property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanging;
        
        /// <summary>
        /// Gets fired when the IsEncapsulatedBy property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanged;
        
        private static ITypedElement RetrieveIsEncapsulatedByReference()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.Feature.ClassInstance)).Resolve("isEncapsulatedBy")));
        }
        
        /// <summary>
        /// Raises the IsEncapsulatedByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEncapsulatedByChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsEncapsulatedByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsEncapsulatedByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEncapsulatedByChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsEncapsulatedByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IsEncapsulatedBy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIsEncapsulatedBy(object sender, EventArgs eventArgs)
        {
            if ((sender == this.IsEncapsulatedBy))
            {
                this.IsEncapsulatedBy = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ISENCAPSULATEDBY"))
            {
                return this.IsEncapsulatedBy;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISENCAPSULATEDBY"))
            {
                this.IsEncapsulatedBy = ((TemporaryGeneratedCode.ArchitectureCRA.IClass)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ISENCAPSULATEDBY"))
            {
                return new IsEncapsulatedByProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Feature")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Feature class
        /// </summary>
        public class FeatureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Feature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureReferencedElementsCollection(Feature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.IsEncapsulatedBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.IsEncapsulatedByChanged += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.IsEncapsulatedByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.IsEncapsulatedBy == null))
                {
                    TemporaryGeneratedCode.ArchitectureCRA.IClass isEncapsulatedByCasted = item.As<TemporaryGeneratedCode.ArchitectureCRA.IClass>();
                    if ((isEncapsulatedByCasted != null))
                    {
                        this._parent.IsEncapsulatedBy = isEncapsulatedByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IsEncapsulatedBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.IsEncapsulatedBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.IsEncapsulatedBy != null))
                {
                    array[arrayIndex] = this._parent.IsEncapsulatedBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.IsEncapsulatedBy == item))
                {
                    this._parent.IsEncapsulatedBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IsEncapsulatedBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isEncapsulatedBy property
        /// </summary>
        private sealed class IsEncapsulatedByProxy : ModelPropertyChange<IFeature, TemporaryGeneratedCode.ArchitectureCRA.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsEncapsulatedByProxy(IFeature modelElement) : 
                    base(modelElement, "isEncapsulatedBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override TemporaryGeneratedCode.ArchitectureCRA.IClass Value
            {
                get
                {
                    return this.ModelElement.IsEncapsulatedBy;
                }
                set
                {
                    this.ModelElement.IsEncapsulatedBy = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the NamedElement class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0")]
    [XmlNamespacePrefixAttribute("architectureCRA")]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//NamedElement")]
    [DebuggerDisplayAttribute("NamedElement {Name}")]
    public abstract partial class NamedElement : ModelElement, INamedElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//NamedElement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NameChanging;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TemporaryGeneratedCode.ArchitectureCRA.NamedElement.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//NamedElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(INamedElement modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for NamedElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(NamedElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(NamedElement))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//NamedElement")]
    public partial interface INamedElement : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> NameChanging;
    }
    
    /// <summary>
    /// The public interface for Feature
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Feature))]
    [XmlDefaultImplementationTypeAttribute(typeof(Feature))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Feature")]
    public partial interface IFeature : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The isEncapsulatedBy property
        /// </summary>
        [DisplayNameAttribute("isEncapsulatedBy")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("isEncapsulatedBy")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("encapsulates")]
        TemporaryGeneratedCode.ArchitectureCRA.IClass IsEncapsulatedBy
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the IsEncapsulatedBy property changes its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanging;
        
        /// <summary>
        /// Gets fired when the IsEncapsulatedBy property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanged;
    }
    
    /// <summary>
    /// The public interface for Method
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Method))]
    [XmlDefaultImplementationTypeAttribute(typeof(Method))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Method")]
    public partial interface IMethod : IModelElement, IFeature
    {
        
        /// <summary>
        /// The dataDependency property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("dataDependency")]
        [CategoryAttribute("Method")]
        [XmlElementNameAttribute("dataDependency")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<TemporaryGeneratedCode.ArchitectureCRA.IAttribute> DataDependency
        {
            get;
        }
        
        /// <summary>
        /// The functionalDependency property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("functionalDependency")]
        [CategoryAttribute("Method")]
        [XmlElementNameAttribute("functionalDependency")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<IMethod> FunctionalDependency
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Attribute
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Attribute))]
    [XmlDefaultImplementationTypeAttribute(typeof(Attribute))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Attribute")]
    public partial interface IAttribute : IModelElement, IFeature
    {
    }
    
    /// <summary>
    /// Denotes a class to implement the encapsulates reference
    /// </summary>
    public class ClassEncapsulatesCollection : ObservableOppositeOrderedSet<TemporaryGeneratedCode.ArchitectureCRA.IClass, IFeature>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent Class</param>
        public ClassEncapsulatesCollection(TemporaryGeneratedCode.ArchitectureCRA.IClass parent) : 
                base(parent)
        {
        }
        
        private void OnItemDeleted(object sender, EventArgs e)
        {
            this.Remove(((IFeature)(sender)));
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(IFeature item, TemporaryGeneratedCode.ArchitectureCRA.IClass newParent)
        {
            if ((newParent != null))
            {
                item.Deleted += this.OnItemDeleted;
                item.IsEncapsulatedBy = newParent;
            }
            else
            {
                item.Deleted -= this.OnItemDeleted;
                if ((item.IsEncapsulatedBy == this.Parent))
                {
                    item.IsEncapsulatedBy = newParent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Class
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Class))]
    [XmlDefaultImplementationTypeAttribute(typeof(Class))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//Class")]
    public partial interface IClass : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The encapsulates property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("encapsulates")]
        [CategoryAttribute("Class")]
        [XmlElementNameAttribute("encapsulates")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("isEncapsulatedBy")]
        [ConstantAttribute()]
        IOrderedSetExpression<IFeature> Encapsulates
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for ClassModel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ClassModel))]
    [XmlDefaultImplementationTypeAttribute(typeof(ClassModel))]
    [ModelRepresentationClassAttribute("http://momot.big.tuwien.ac.at/architectureCRA/1.0#//ClassModel")]
    public partial interface IClassModel : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The classes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("classes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<TemporaryGeneratedCode.ArchitectureCRA.IClass> Classes
        {
            get;
        }
        
        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IFeature> Features
        {
            get;
        }
    }
}
