//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:8.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using NMF.Models.Meta;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace NMF.AnyText.AnyMeta
{
    
    
    /// <summary>
    /// Denotes a class capable to parse the language anymeta
    /// </summary>
    public partial class AnyMetaGrammar : ReflectiveGrammar
    {
        
        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "anymeta";
            }
        }
        
        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<NamespaceRule>();
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Imports&apos;
        /// </summary>
        public partial class ImportsRule : QuoteRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveKeyword("import"), context.ResolveFormattedRule<NamespaceContextImportsFileRule>(FormattingInstruction.Newline)), FormattingInstruction.Newline);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Namespace&apos;
        /// </summary>
        public partial class NamespaceRule : ModelElementRule<Namespace>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<ImportsRule>(),
                        context.ResolveKeyword("namespace"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword("("),
                        context.ResolveFormattedRule<NamespacePrefixIdentifierRule>(),
                        context.ResolveKeyword(")"),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("="), context.ResolveFormattedRule<NamespaceUriUriRule>()), FormattingInstruction.Newline),
                        context.ResolveKeyword("{", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(new ChoiceRule(context.ResolveFormattedRule<NamespaceChildNamespacesNamespaceRule>(), context.ResolveFormattedRule<NamespaceTypesTypeRule>()), FormattingInstruction.Unindent, FormattingInstruction.Newline),
                        context.ResolveKeyword("}", FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Type&apos;
        /// </summary>
        public partial class TypeRule : ChoiceRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<ReferenceTypeRule>(),
                        context.ResolveRule<EnumerationRule>(),
                        context.ResolveRule<PrimitiveTypeRule>(),
                        context.ResolveRule<DataTypeRule>()};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;ReferenceType&apos;
        /// </summary>
        public partial class ReferenceTypeRule : ChoiceRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<ClassRule>(),
                        context.ResolveRule<ExtensionRule>()};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Documentation&apos;
        /// </summary>
        public partial class DocumentationRule : QuoteRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("#"), context.ResolveFormattedRule<MetaElementSummaryTextRule>(FormattingInstruction.Newline), RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("#"), context.ResolveFormattedRule<MetaElementRemarksTextRule>(FormattingInstruction.Newline)))));
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Class&apos;
        /// </summary>
        public partial class ClassRule : ModelElementRule<Class>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<ClassIsAbstractRule>()),
                        context.ResolveKeyword("class"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword(":"), context.ResolveFormattedRule<ClassBaseTypesClassRule>(FormattingInstruction.SupressSpace), RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveKeyword(","), context.ResolveFormattedRule<ClassBaseTypesClassRule>(FormattingInstruction.SupressSpace))))),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("instance"), context.ResolveKeyword("of"), context.ResolveFormattedRule<ClassInstanceOfClassRule>()), FormattingInstruction.Newline),
                        context.ResolveKeyword("{", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(new ChoiceRule(context.ResolveFormattedRule<StructuredTypeAttributesAttributeRule>(FormattingInstruction.Newline), context.ResolveFormattedRule<ReferenceTypeReferencesReferenceRule>(FormattingInstruction.Newline), context.ResolveFormattedRule<StructuredTypeOperationsOperationRule>(FormattingInstruction.Newline)), FormattingInstruction.Unindent),
                        context.ResolveKeyword("}", FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Extension&apos;
        /// </summary>
        public partial class ExtensionRule : ModelElementRule<Extension>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        context.ResolveKeyword("extension"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword("for"),
                        context.ResolveFormattedRule<ExtensionAdornedClassClassRule>(FormattingInstruction.Newline),
                        context.ResolveKeyword("{", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(new ChoiceRule(context.ResolveFormattedRule<StructuredTypeAttributesAttributeRule>(FormattingInstruction.Newline), context.ResolveFormattedRule<ReferenceTypeReferencesReferenceRule>(FormattingInstruction.Newline), context.ResolveFormattedRule<StructuredTypeOperationsOperationRule>(FormattingInstruction.Newline)), FormattingInstruction.Unindent),
                        context.ResolveKeyword("}", FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Attribute&apos;
        /// </summary>
        public partial class AttributeRule : ModelElementRule<NMF.Models.Meta.Attribute>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsUniqueRule>()),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsOrderedRule>()),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveFormattedRule<TypedElementTypeTypeRule>(),
                        context.ResolveFormattedRule<BoundsRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("refines"), context.ResolveFormattedRule<AttributeRefinesAttributeRule>()), FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Reference&apos;
        /// </summary>
        public partial class ReferenceRule : ModelElementRule<Reference>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<ReferenceIsContainmentRule>()),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsUniqueRule>()),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsOrderedRule>()),
                        context.ResolveKeyword("reference"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveFormattedRule<ReferenceReferenceTypeReferenceTypeRule>(),
                        context.ResolveFormattedRule<BoundsRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("refines"), context.ResolveFormattedRule<ReferenceRefinesReferenceRule>())),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("opposite"), context.ResolveFormattedRule<ReferenceOppositeReferenceRule>()), FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Operation&apos;
        /// </summary>
        public partial class OperationRule : ModelElementRule<Operation>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsUniqueRule>()),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<TypedElementIsOrderedRule>()),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword("("),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveFormattedRule<OperationParametersParameterRule>(FormattingInstruction.SupressSpace), RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveKeyword(","), context.ResolveFormattedRule<OperationParametersParameterRule>(FormattingInstruction.SupressSpace))))),
                        context.ResolveKeyword(")"),
                        context.ResolveKeyword(":"),
                        context.ResolveFormattedRule<TypedElementTypeTypeRule>(),
                        context.ResolveFormattedRule<BoundsRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("refines"), context.ResolveFormattedRule<OperationRefinesOperationRule>()), FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Parameter&apos;
        /// </summary>
        public partial class ParameterRule : ModelElementRule<Parameter>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveFormattedRule<TypedElementTypeTypeRule>(),
                        context.ResolveFormattedRule<BoundsRule>()};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Bounds&apos;
        /// </summary>
        public partial class BoundsRule : QuoteRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("[", FormattingInstruction.SupressSpace), new ChoiceRule(new SequenceRule(context.ResolveFormattedRule<TypedElementLowerBoundIntegerRule>(FormattingInstruction.SupressSpace), context.ResolveKeyword("..", FormattingInstruction.SupressSpace), context.ResolveFormattedRule<TypedElementUpperBoundBoundRule>(FormattingInstruction.SupressSpace)), context.ResolveFormattedRule<TypedElementUpperBoundBoundRule>(FormattingInstruction.SupressSpace)), context.ResolveKeyword("]")));
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Enumeration&apos;
        /// </summary>
        public partial class EnumerationRule : ModelElementRule<Enumeration>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        context.ResolveKeyword("enum"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(FormattingInstruction.Newline),
                        context.ResolveKeyword("{", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<EnumerationLiteralsLiteralRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent),
                        context.ResolveKeyword("}", FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Literal&apos;
        /// </summary>
        public partial class LiteralRule : ModelElementRule<Literal>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("="), context.ResolveFormattedRule<LiteralValueIntegerRule>()))};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;PrimitiveType&apos;
        /// </summary>
        public partial class PrimitiveTypeRule : ModelElementRule<PrimitiveType>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        context.ResolveKeyword("primitive"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(),
                        context.ResolveKeyword("as"),
                        context.ResolveFormattedRule<PrimitiveTypeSystemTypeSystemTypeStringRule>(FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;DataType&apos;
        /// </summary>
        public partial class DataTypeRule : ModelElementRule<DataType>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DocumentationRule>(),
                        context.ResolveKeyword("data"),
                        context.ResolveFormattedRule<MetaElementNameIdentifierRule>(FormattingInstruction.Newline),
                        context.ResolveKeyword("{", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<StructuredTypeAttributesAttributeRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline),
                        context.ResolveKeyword("}", FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Text&apos;
        /// </summary>
        public partial class TextRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^.+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Uri&apos;
        /// </summary>
        public partial class UriRule : ConvertRule<Uri>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[^{} ]+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;File&apos;
        /// </summary>
        public partial class FileRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[^{} ]+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Identifier&apos;
        /// </summary>
        public partial class IdentifierRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z_]\\w*", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;QualifiedIdentifier&apos;
        /// </summary>
        public partial class QualifiedIdentifierRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z_][\\w\\.]*", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;SystemTypeString&apos;
        /// </summary>
        public partial class SystemTypeStringRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z_]\\w*(\\.\\w+)*(\\[\\])?", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Integer&apos;
        /// </summary>
        public partial class IntegerRule : ConvertRule<int>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\d+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Bound&apos;
        /// </summary>
        public partial class BoundRule : EscapedConvertRule<int>
        {
            
            /// <summary>
            /// Escapes the given string
            /// </summary>
            /// <returns>the escaped string</returns>
            /// <param name="value">the unescaped string</param>
            public override string Escape(string value)
            {
                return value.Replace("-1", "*");
            }
            
            /// <summary>
            /// Unescapes the given string
            /// </summary>
            /// <returns>the unescaped string</returns>
            /// <param name="value">the escaped string</param>
            public override string Unescape(string value)
            {
                return value.Replace("*", "-1");
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\*|(\\d+)", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Types
        /// </summary>
        public partial class NamespaceTypesTypeRule : AddAssignRule<INamespace, IType>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Types";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<TypeRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IType> GetCollection(INamespace semanticElement, ParseContext context)
            {
                return semanticElement.Types;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to ChildNamespaces
        /// </summary>
        public partial class NamespaceChildNamespacesNamespaceRule : AddAssignRule<INamespace, INamespace>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "ChildNamespaces";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<NamespaceRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<INamespace> GetCollection(INamespace semanticElement, ParseContext context)
            {
                return semanticElement.ChildNamespaces;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Uri
        /// </summary>
        public partial class NamespaceUriUriRule : AssignRule<INamespace, Uri>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Uri";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<UriRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override Uri GetValue(INamespace semanticElement, ParseContext context)
            {
                return semanticElement.Uri;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(INamespace semanticElement, Uri propertyValue, ParseContext context)
            {
                semanticElement.Uri = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Prefix
        /// </summary>
        public partial class NamespacePrefixIdentifierRule : AssignRule<INamespace, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Prefix";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(INamespace semanticElement, ParseContext context)
            {
                return semanticElement.Prefix;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(INamespace semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Prefix = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Name
        /// </summary>
        public partial class MetaElementNameIdentifierRule : AssignRule<IMetaElement, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Name";
                }
            }
            
            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IMetaElement semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IMetaElement semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Operations
        /// </summary>
        public partial class StructuredTypeOperationsOperationRule : AddAssignRule<IStructuredType, IOperation>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Operations";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<OperationRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IOperation> GetCollection(IStructuredType semanticElement, ParseContext context)
            {
                return semanticElement.Operations;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to References
        /// </summary>
        public partial class ReferenceTypeReferencesReferenceRule : AddAssignRule<IReferenceType, IReference>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "References";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<ReferenceRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IReference> GetCollection(IReferenceType semanticElement, ParseContext context)
            {
                return semanticElement.References;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Attributes
        /// </summary>
        public partial class StructuredTypeAttributesAttributeRule : AddAssignRule<IStructuredType, IAttribute>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Attributes";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<AttributeRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IAttribute> GetCollection(IStructuredType semanticElement, ParseContext context)
            {
                return semanticElement.Attributes;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to InstanceOf
        /// </summary>
        public partial class ClassInstanceOfClassRule : AssignModelReferenceRule<IClass, IClass>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "InstanceOf";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<QualifiedIdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IClass GetValue(IClass semanticElement, ParseContext context)
            {
                return semanticElement.InstanceOf;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IClass semanticElement, IClass propertyValue, ParseContext context)
            {
                semanticElement.InstanceOf = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to BaseTypes
        /// </summary>
        public partial class ClassBaseTypesClassRule : AddAssignModelReferenceRule<IClass, IClass>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "BaseTypes";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<QualifiedIdentifierRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IClass> GetCollection(IClass semanticElement, ParseContext context)
            {
                return semanticElement.BaseTypes;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to IsAbstract
        /// </summary>
        public partial class ClassIsAbstractRule : ExistsAssignRule<IClass>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "IsAbstract";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("abstract");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(IClass semanticElement, ParseContext context)
            {
                return semanticElement.IsAbstract;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IClass semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsAbstract = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to AdornedClass
        /// </summary>
        public partial class ExtensionAdornedClassClassRule : AssignModelReferenceRule<IExtension, IClass>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "AdornedClass";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<QualifiedIdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IClass GetValue(IExtension semanticElement, ParseContext context)
            {
                return semanticElement.AdornedClass;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IExtension semanticElement, IClass propertyValue, ParseContext context)
            {
                semanticElement.AdornedClass = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Refines
        /// </summary>
        public partial class AttributeRefinesAttributeRule : AssignModelReferenceRule<IAttribute, IAttribute>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Refines";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IAttribute GetValue(IAttribute semanticElement, ParseContext context)
            {
                return semanticElement.Refines;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IAttribute semanticElement, IAttribute propertyValue, ParseContext context)
            {
                semanticElement.Refines = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Type
        /// </summary>
        public partial class TypedElementTypeTypeRule : AssignModelReferenceRule<ITypedElement, IType>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Type";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<QualifiedIdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IType GetValue(ITypedElement semanticElement, ParseContext context)
            {
                return semanticElement.Type;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITypedElement semanticElement, IType propertyValue, ParseContext context)
            {
                semanticElement.Type = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to IsOrdered
        /// </summary>
        public partial class TypedElementIsOrderedRule : ExistsAssignRule<ITypedElement>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "IsOrdered";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("ordered");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(ITypedElement semanticElement, ParseContext context)
            {
                return semanticElement.IsOrdered;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITypedElement semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsOrdered = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to IsUnique
        /// </summary>
        public partial class TypedElementIsUniqueRule : ExistsAssignRule<ITypedElement>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "IsUnique";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("unique");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(ITypedElement semanticElement, ParseContext context)
            {
                return semanticElement.IsUnique;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITypedElement semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsUnique = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Opposite
        /// </summary>
        public partial class ReferenceOppositeReferenceRule : AssignModelReferenceRule<IReference, IReference>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Opposite";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IReference GetValue(IReference semanticElement, ParseContext context)
            {
                return semanticElement.Opposite;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IReference semanticElement, IReference propertyValue, ParseContext context)
            {
                semanticElement.Opposite = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Refines
        /// </summary>
        public partial class ReferenceRefinesReferenceRule : AssignModelReferenceRule<IReference, IReference>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Refines";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IReference GetValue(IReference semanticElement, ParseContext context)
            {
                return semanticElement.Refines;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IReference semanticElement, IReference propertyValue, ParseContext context)
            {
                semanticElement.Refines = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to ReferenceType
        /// </summary>
        public partial class ReferenceReferenceTypeReferenceTypeRule : AssignModelReferenceRule<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "ReferenceType";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<QualifiedIdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IReferenceType GetValue(IReference semanticElement, ParseContext context)
            {
                return semanticElement.ReferenceType;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IReference semanticElement, IReferenceType propertyValue, ParseContext context)
            {
                semanticElement.ReferenceType = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to IsContainment
        /// </summary>
        public partial class ReferenceIsContainmentRule : ExistsAssignRule<IReference>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "IsContainment";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("composite");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(IReference semanticElement, ParseContext context)
            {
                return semanticElement.IsContainment;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IReference semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsContainment = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Refines
        /// </summary>
        public partial class OperationRefinesOperationRule : AssignModelReferenceRule<IOperation, IOperation>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Refines";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IOperation GetValue(IOperation semanticElement, ParseContext context)
            {
                return semanticElement.Refines;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IOperation semanticElement, IOperation propertyValue, ParseContext context)
            {
                semanticElement.Refines = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Parameters
        /// </summary>
        public partial class OperationParametersParameterRule : AddAssignRule<IOperation, IParameter>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Parameters";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<ParameterRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IParameter> GetCollection(IOperation semanticElement, ParseContext context)
            {
                return semanticElement.Parameters;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Literals
        /// </summary>
        public partial class EnumerationLiteralsLiteralRule : AddAssignRule<IEnumeration, ILiteral>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Literals";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<LiteralRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<ILiteral> GetCollection(IEnumeration semanticElement, ParseContext context)
            {
                return semanticElement.Literals;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Value
        /// </summary>
        public partial class LiteralValueIntegerRule : AssignRule<ILiteral, Nullable<int>>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Value";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IntegerRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override Nullable<int> GetValue(ILiteral semanticElement, ParseContext context)
            {
                return semanticElement.Value;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ILiteral semanticElement, Nullable<int> propertyValue, ParseContext context)
            {
                semanticElement.Value = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to SystemType
        /// </summary>
        public partial class PrimitiveTypeSystemTypeSystemTypeStringRule : AssignRule<IPrimitiveType, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "SystemType";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<SystemTypeStringRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IPrimitiveType semanticElement, ParseContext context)
            {
                return semanticElement.SystemType;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IPrimitiveType semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.SystemType = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to context.Imports
        /// </summary>
        public partial class NamespaceContextImportsFileRule : AddAssignRule<INamespace, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "context.Imports";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<FileRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<string> GetCollection(INamespace semanticElement, ParseContext context)
            {
                return context.Imports;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Remarks
        /// </summary>
        public partial class MetaElementRemarksTextRule : AssignRule<IMetaElement, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Remarks";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<TextRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IMetaElement semanticElement, ParseContext context)
            {
                return semanticElement.Remarks;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IMetaElement semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Remarks = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to Summary
        /// </summary>
        public partial class MetaElementSummaryTextRule : AssignRule<IMetaElement, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "Summary";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<TextRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IMetaElement semanticElement, ParseContext context)
            {
                return semanticElement.Summary;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IMetaElement semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Summary = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to UpperBound
        /// </summary>
        public partial class TypedElementUpperBoundBoundRule : AssignRule<ITypedElement, int>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "UpperBound";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<BoundRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override int GetValue(ITypedElement semanticElement, ParseContext context)
            {
                return semanticElement.UpperBound;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITypedElement semanticElement, int propertyValue, ParseContext context)
            {
                semanticElement.UpperBound = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to LowerBound
        /// </summary>
        public partial class TypedElementLowerBoundIntegerRule : AssignRule<ITypedElement, int>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "LowerBound";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the Metamodel file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IntegerRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override int GetValue(ITypedElement semanticElement, ParseContext context)
            {
                return semanticElement.LowerBound;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITypedElement semanticElement, int propertyValue, ParseContext context)
            {
                semanticElement.LowerBound = propertyValue;
            }
        }
    }
}
