//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnyText.Tests.UniversalVariability
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;


    /// <summary>
    /// The default implementation of the FeatureModel class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureModel")]
    public partial class FeatureModel : ModelElement, IFeatureModel, IModelElement
    {

        private static Lazy<ITypedElement> _constraintsReference = new Lazy<ITypedElement>(RetrieveConstraintsReference);

        /// <summary>
        /// The backing field for the Constraints property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IConstraint> _constraints;

        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);

        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeature> _features;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public FeatureModel()
        {
            this._constraints = new ObservableCompositionList<IConstraint>(this);
            this._constraints.CollectionChanging += this.ConstraintsCollectionChanging;
            this._constraints.CollectionChanged += this.ConstraintsCollectionChanged;
            this._features = new ObservableCompositionList<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }

        /// <summary>
        /// The constraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("constraints")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IConstraint> Constraints
        {
            get
            {
                return this._constraints;
            }
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FeatureModelChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureModelReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureModel")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveConstraintsReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.FeatureModel.ClassInstance)).Resolve("constraints")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Constraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstraintsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Constraints", e, _constraintsReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Constraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstraintsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Constraints", e, _constraintsReference);
        }

        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.FeatureModel.ClassInstance)).Resolve("features")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONSTRAINTS"))
            {
                return this._constraints;
            }
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._constraints))
            {
                return "constraints";
            }
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureModel")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the FeatureModel class
        /// </summary>
        public class FeatureModelChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private FeatureModel _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureModelChildrenCollection(FeatureModel parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Constraints.Count);
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Constraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Constraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IConstraint constraintsCasted = item.As<IConstraint>();
                if ((constraintsCasted != null))
                {
                    this._parent.Constraints.Add(constraintsCasted);
                }
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Constraints.Clear();
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Constraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> constraintsEnumerator = this._parent.Constraints.GetEnumerator();
                try
                {
                    for (
                    ; constraintsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = constraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    constraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null)
                            && this._parent.Constraints.Remove(constraintItem)))
                {
                    return true;
                }
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Constraints).Concat(this._parent.Features).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the FeatureModel class
        /// </summary>
        public class FeatureModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private FeatureModel _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureModelReferencedElementsCollection(FeatureModel parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Constraints.Count);
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Constraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Constraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IConstraint constraintsCasted = item.As<IConstraint>();
                if ((constraintsCasted != null))
                {
                    this._parent.Constraints.Add(constraintsCasted);
                }
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Constraints.Clear();
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Constraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> constraintsEnumerator = this._parent.Constraints.GetEnumerator();
                try
                {
                    for (
                    ; constraintsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = constraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    constraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null)
                            && this._parent.Constraints.Remove(constraintItem)))
                {
                    return true;
                }
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Constraints).Concat(this._parent.Features).GetEnumerator();
            }
        }
    }

    /// <summary>
    /// The default implementation of the Feature class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//Feature")]
    [DebuggerDisplayAttribute("Feature {Name}")]
    public partial class Feature : ModelElement, IFeature, IModelElement
    {

        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isAbstract;

        private static Lazy<ITypedElement> _isAbstractAttribute = new Lazy<ITypedElement>(RetrieveIsAbstractAttribute);

        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;

        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);

        private static Lazy<ITypedElement> _groupsReference = new Lazy<ITypedElement>(RetrieveGroupsReference);

        /// <summary>
        /// The backing field for the Groups property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeatureGroup> _groups;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Feature()
        {
            this._groups = new ObservableCompositionList<IFeatureGroup>(this);
            this._groups.CollectionChanging += this.GroupsCollectionChanging;
            this._groups.CollectionChanged += this.GroupsCollectionChanged;
        }

        /// <summary>
        /// The isAbstract property
        /// </summary>
        [DisplayNameAttribute("isAbstract")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("isAbstract")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    Nullable<bool> old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }

        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                    OnKeyChanged(e);
                }
            }
        }

        /// <summary>
        /// The groups property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("groups")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeatureGroup> Groups
        {
            get
            {
                return this._groups;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FeatureChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//Feature")));
                }
                return _classInstance;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }

        private static ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.Feature.ClassInstance)).Resolve("isAbstract")));
        }

        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.Feature.ClassInstance)).Resolve("name")));
        }

        private static ITypedElement RetrieveGroupsReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.Feature.ClassInstance)).Resolve("groups")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Groups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GroupsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Groups", e, _groupsReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Groups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GroupsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Groups", e, _groupsReference);
        }

        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GROUPS"))
            {
                return this._groups;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return Observable.Box(new IsAbstractProxy(this));
            }
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._groups))
            {
                return "groups";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//Feature")));
            }
            return _classInstance;
        }

        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }

        /// <summary>
        /// The collection class to to represent the children of the Feature class
        /// </summary>
        public class FeatureChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private Feature _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureChildrenCollection(Feature parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Groups.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Groups.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Groups.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeatureGroup groupsCasted = item.As<IFeatureGroup>();
                if ((groupsCasted != null))
                {
                    this._parent.Groups.Add(groupsCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Groups.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Groups.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> groupsEnumerator = this._parent.Groups.GetEnumerator();
                try
                {
                    for (
                    ; groupsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = groupsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    groupsEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeatureGroup featureGroupItem = item.As<IFeatureGroup>();
                if (((featureGroupItem != null)
                            && this._parent.Groups.Remove(featureGroupItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Groups).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the Feature class
        /// </summary>
        public class FeatureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private Feature _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureReferencedElementsCollection(Feature parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Groups.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Groups.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Groups.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeatureGroup groupsCasted = item.As<IFeatureGroup>();
                if ((groupsCasted != null))
                {
                    this._parent.Groups.Add(groupsCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Groups.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Groups.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> groupsEnumerator = this._parent.Groups.GetEnumerator();
                try
                {
                    for (
                    ; groupsEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = groupsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    groupsEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeatureGroup featureGroupItem = item.As<IFeatureGroup>();
                if (((featureGroupItem != null)
                            && this._parent.Groups.Remove(featureGroupItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Groups).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the isAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IFeature, Nullable<bool>>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IFeature modelElement) :
                    base(modelElement, "isAbstract")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IFeature, string>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IFeature modelElement) :
                    base(modelElement, "name")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the FeatureGroup class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureGroup")]
    public abstract partial class FeatureGroup : ModelElement, IFeatureGroup, IModelElement
    {

        private static IClass _classInstance;

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureGroup")));
                }
                return _classInstance;
            }
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureGroup")));
            }
            return _classInstance;
        }
    }

    /// <summary>
    /// The default implementation of the OrFeatureGroup class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//OrFeatureGroup")]
    public partial class OrFeatureGroup : FeatureGroup, IOrFeatureGroup, IModelElement
    {

        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);

        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeature> _features;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public OrFeatureGroup()
        {
            this._features = new ObservableCompositionList<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new OrFeatureGroupChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OrFeatureGroupReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OrFeatureGroup")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.OrFeatureGroup.ClassInstance)).Resolve("features")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OrFeatureGroup")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the OrFeatureGroup class
        /// </summary>
        public class OrFeatureGroupChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OrFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrFeatureGroupChildrenCollection(OrFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the OrFeatureGroup class
        /// </summary>
        public class OrFeatureGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OrFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrFeatureGroupReferencedElementsCollection(OrFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }
    }

    /// <summary>
    /// The default implementation of the MandatoryFeatureGroup class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//MandatoryFeatureGroup")]
    public partial class MandatoryFeatureGroup : FeatureGroup, IMandatoryFeatureGroup, IModelElement
    {

        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);

        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeature> _features;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public MandatoryFeatureGroup()
        {
            this._features = new ObservableCompositionList<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new MandatoryFeatureGroupChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MandatoryFeatureGroupReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//MandatoryFeatureGroup")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.MandatoryFeatureGroup.ClassInstance)).Resolve("features")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//MandatoryFeatureGroup")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the MandatoryFeatureGroup class
        /// </summary>
        public class MandatoryFeatureGroupChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private MandatoryFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MandatoryFeatureGroupChildrenCollection(MandatoryFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the MandatoryFeatureGroup class
        /// </summary>
        public class MandatoryFeatureGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private MandatoryFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MandatoryFeatureGroupReferencedElementsCollection(MandatoryFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }
    }

    /// <summary>
    /// The default implementation of the OptionalFeatureGroup class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//OptionalFeatureGroup")]
    public partial class OptionalFeatureGroup : FeatureGroup, IOptionalFeatureGroup, IModelElement
    {

        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);

        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeature> _features;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public OptionalFeatureGroup()
        {
            this._features = new ObservableCompositionList<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new OptionalFeatureGroupChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OptionalFeatureGroupReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OptionalFeatureGroup")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.OptionalFeatureGroup.ClassInstance)).Resolve("features")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OptionalFeatureGroup")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the OptionalFeatureGroup class
        /// </summary>
        public class OptionalFeatureGroupChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OptionalFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OptionalFeatureGroupChildrenCollection(OptionalFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the OptionalFeatureGroup class
        /// </summary>
        public class OptionalFeatureGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OptionalFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OptionalFeatureGroupReferencedElementsCollection(OptionalFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }
    }

    /// <summary>
    /// The default implementation of the AlternativeFeatureGroup class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//AlternativeFeatureGroup")]
    public partial class AlternativeFeatureGroup : FeatureGroup, IAlternativeFeatureGroup, IModelElement
    {

        private static Lazy<ITypedElement> _featuresReference = new Lazy<ITypedElement>(RetrieveFeaturesReference);

        /// <summary>
        /// The backing field for the Features property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IFeature> _features;

        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public AlternativeFeatureGroup()
        {
            this._features = new ObservableCompositionList<IFeature>(this);
            this._features.CollectionChanging += this.FeaturesCollectionChanging;
            this._features.CollectionChanged += this.FeaturesCollectionChanged;
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IFeature> Features
        {
            get
            {
                return this._features;
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AlternativeFeatureGroupChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AlternativeFeatureGroupReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//AlternativeFeatureGroup")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveFeaturesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.AlternativeFeatureGroup.ClassInstance)).Resolve("features")));
        }

        /// <summary>
        /// Forwards CollectionChanging notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Features", e, _featuresReference);
        }

        /// <summary>
        /// Forwards CollectionChanged notifications for the Features property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FeaturesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Features", e, _featuresReference);
        }

        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FEATURES"))
            {
                return this._features;
            }
            return base.GetCollectionForFeature(feature);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._features))
            {
                return "features";
            }
            return base.GetCompositionName(container);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//AlternativeFeatureGroup")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the AlternativeFeatureGroup class
        /// </summary>
        public class AlternativeFeatureGroupChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private AlternativeFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AlternativeFeatureGroupChildrenCollection(AlternativeFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the AlternativeFeatureGroup class
        /// </summary>
        public class AlternativeFeatureGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private AlternativeFeatureGroup _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AlternativeFeatureGroupReferencedElementsCollection(AlternativeFeatureGroup parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Features.Count);
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Features.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFeature featuresCasted = item.As<IFeature>();
                if ((featuresCasted != null))
                {
                    this._parent.Features.Add(featuresCasted);
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Features.Clear();
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Features.Contains(item))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> featuresEnumerator = this._parent.Features.GetEnumerator();
                try
                {
                    for (
                    ; featuresEnumerator.MoveNext();
                    )
                    {
                        array[arrayIndex] = featuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    featuresEnumerator.Dispose();
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFeature featureItem = item.As<IFeature>();
                if (((featureItem != null)
                            && this._parent.Features.Remove(featureItem)))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Features).GetEnumerator();
            }
        }
    }

    /// <summary>
    /// The default implementation of the Constraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//Constraint")]
    public partial class Constraint : ModelElement, IConstraint, IModelElement
    {

        private static IClass _classInstance;

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//Constraint")));
                }
                return _classInstance;
            }
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//Constraint")));
            }
            return _classInstance;
        }
    }

    /// <summary>
    /// The default implementation of the ImpliesConstraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//ImpliesConstraint")]
    public partial class ImpliesConstraint : Constraint, IImpliesConstraint, IModelElement
    {

        private static Lazy<ITypedElement> _consequenceReference = new Lazy<ITypedElement>(RetrieveConsequenceReference);

        /// <summary>
        /// The backing field for the Consequence property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _consequence;

        private static Lazy<ITypedElement> _givenReference = new Lazy<ITypedElement>(RetrieveGivenReference);

        /// <summary>
        /// The backing field for the Given property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _given;

        private static IClass _classInstance;

        /// <summary>
        /// The consequence property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("consequence")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Consequence
        {
            get
            {
                return this._consequence;
            }
            set
            {
                if ((this._consequence != value))
                {
                    IConstraint old = this._consequence;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Consequence", e, _consequenceReference);
                    this._consequence = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetConsequence;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetConsequence;
                    }
                    this.OnPropertyChanged("Consequence", e, _consequenceReference);
                }
            }
        }

        /// <summary>
        /// The given property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("given")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Given
        {
            get
            {
                return this._given;
            }
            set
            {
                if ((this._given != value))
                {
                    IConstraint old = this._given;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Given", e, _givenReference);
                    this._given = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetGiven;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetGiven;
                    }
                    this.OnPropertyChanged("Given", e, _givenReference);
                }
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ImpliesConstraintChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ImpliesConstraintReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//ImpliesConstraint")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveConsequenceReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.ImpliesConstraint.ClassInstance)).Resolve("consequence")));
        }

        /// <summary>
        /// Handles the event that the Consequence property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConsequence(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Consequence))
            {
                this.Consequence = null;
            }
        }

        private static ITypedElement RetrieveGivenReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.ImpliesConstraint.ClassInstance)).Resolve("given")));
        }

        /// <summary>
        /// Handles the event that the Given property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGiven(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Given))
            {
                this.Given = null;
            }
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Consequence))
            {
                return ModelHelper.CreatePath("consequence");
            }
            if ((element == this.Given))
            {
                return ModelHelper.CreatePath("given");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONSEQUENCE"))
            {
                return this.Consequence;
            }
            if ((reference == "GIVEN"))
            {
                return this.Given;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONSEQUENCE"))
            {
                this.Consequence = ((IConstraint)(value));
                return;
            }
            if ((feature == "GIVEN"))
            {
                this.Given = ((IConstraint)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CONSEQUENCE"))
            {
                return new ConsequenceProxy(this);
            }
            if ((reference == "GIVEN"))
            {
                return new GivenProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//ImpliesConstraint")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the ImpliesConstraint class
        /// </summary>
        public class ImpliesConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private ImpliesConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ImpliesConstraintChildrenCollection(ImpliesConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Consequence != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Given != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Consequence == null))
                {
                    IConstraint consequenceCasted = item.As<IConstraint>();
                    if ((consequenceCasted != null))
                    {
                        this._parent.Consequence = consequenceCasted;
                        return;
                    }
                }
                if ((this._parent.Given == null))
                {
                    IConstraint givenCasted = item.As<IConstraint>();
                    if ((givenCasted != null))
                    {
                        this._parent.Given = givenCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Consequence = null;
                this._parent.Given = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Consequence))
                {
                    return true;
                }
                if ((item == this._parent.Given))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Consequence != null))
                {
                    array[arrayIndex] = this._parent.Consequence;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Given != null))
                {
                    array[arrayIndex] = this._parent.Given;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Consequence == item))
                {
                    this._parent.Consequence = null;
                    return true;
                }
                if ((this._parent.Given == item))
                {
                    this._parent.Given = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Consequence).Concat(this._parent.Given).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the ImpliesConstraint class
        /// </summary>
        public class ImpliesConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private ImpliesConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ImpliesConstraintReferencedElementsCollection(ImpliesConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Consequence != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Given != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Consequence == null))
                {
                    IConstraint consequenceCasted = item.As<IConstraint>();
                    if ((consequenceCasted != null))
                    {
                        this._parent.Consequence = consequenceCasted;
                        return;
                    }
                }
                if ((this._parent.Given == null))
                {
                    IConstraint givenCasted = item.As<IConstraint>();
                    if ((givenCasted != null))
                    {
                        this._parent.Given = givenCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Consequence = null;
                this._parent.Given = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Consequence))
                {
                    return true;
                }
                if ((item == this._parent.Given))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Consequence != null))
                {
                    array[arrayIndex] = this._parent.Consequence;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Given != null))
                {
                    array[arrayIndex] = this._parent.Given;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Consequence == item))
                {
                    this._parent.Consequence = null;
                    return true;
                }
                if ((this._parent.Given == item))
                {
                    this._parent.Given = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Consequence).Concat(this._parent.Given).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the consequence property
        /// </summary>
        private sealed class ConsequenceProxy : ModelPropertyChange<IImpliesConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConsequenceProxy(IImpliesConstraint modelElement) :
                    base(modelElement, "consequence")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Consequence;
                }
                set
                {
                    this.ModelElement.Consequence = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the given property
        /// </summary>
        private sealed class GivenProxy : ModelPropertyChange<IImpliesConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GivenProxy(IImpliesConstraint modelElement) :
                    base(modelElement, "given")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Given;
                }
                set
                {
                    this.ModelElement.Given = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the AndConstraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//AndConstraint")]
    public partial class AndConstraint : Constraint, IAndConstraint, IModelElement
    {

        private static Lazy<ITypedElement> _rightReference = new Lazy<ITypedElement>(RetrieveRightReference);

        /// <summary>
        /// The backing field for the Right property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _right;

        private static Lazy<ITypedElement> _leftReference = new Lazy<ITypedElement>(RetrieveLeftReference);

        /// <summary>
        /// The backing field for the Left property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _left;

        private static IClass _classInstance;

        /// <summary>
        /// The right property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("right")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Right
        {
            get
            {
                return this._right;
            }
            set
            {
                if ((this._right != value))
                {
                    IConstraint old = this._right;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Right", e, _rightReference);
                    this._right = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetRight;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRight;
                    }
                    this.OnPropertyChanged("Right", e, _rightReference);
                }
            }
        }

        /// <summary>
        /// The left property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("left")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Left
        {
            get
            {
                return this._left;
            }
            set
            {
                if ((this._left != value))
                {
                    IConstraint old = this._left;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Left", e, _leftReference);
                    this._left = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetLeft;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetLeft;
                    }
                    this.OnPropertyChanged("Left", e, _leftReference);
                }
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AndConstraintChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AndConstraintReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//AndConstraint")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveRightReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.AndConstraint.ClassInstance)).Resolve("right")));
        }

        /// <summary>
        /// Handles the event that the Right property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRight(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Right))
            {
                this.Right = null;
            }
        }

        private static ITypedElement RetrieveLeftReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.AndConstraint.ClassInstance)).Resolve("left")));
        }

        /// <summary>
        /// Handles the event that the Left property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLeft(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Left))
            {
                this.Left = null;
            }
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Right))
            {
                return ModelHelper.CreatePath("right");
            }
            if ((element == this.Left))
            {
                return ModelHelper.CreatePath("left");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RIGHT"))
            {
                return this.Right;
            }
            if ((reference == "LEFT"))
            {
                return this.Left;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RIGHT"))
            {
                this.Right = ((IConstraint)(value));
                return;
            }
            if ((feature == "LEFT"))
            {
                this.Left = ((IConstraint)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RIGHT"))
            {
                return new RightProxy(this);
            }
            if ((reference == "LEFT"))
            {
                return new LeftProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//AndConstraint")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the AndConstraint class
        /// </summary>
        public class AndConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private AndConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AndConstraintChildrenCollection(AndConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Right != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Left != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Right == null))
                {
                    IConstraint rightCasted = item.As<IConstraint>();
                    if ((rightCasted != null))
                    {
                        this._parent.Right = rightCasted;
                        return;
                    }
                }
                if ((this._parent.Left == null))
                {
                    IConstraint leftCasted = item.As<IConstraint>();
                    if ((leftCasted != null))
                    {
                        this._parent.Left = leftCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Right = null;
                this._parent.Left = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Right))
                {
                    return true;
                }
                if ((item == this._parent.Left))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Right != null))
                {
                    array[arrayIndex] = this._parent.Right;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Left != null))
                {
                    array[arrayIndex] = this._parent.Left;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Right == item))
                {
                    this._parent.Right = null;
                    return true;
                }
                if ((this._parent.Left == item))
                {
                    this._parent.Left = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Right).Concat(this._parent.Left).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the AndConstraint class
        /// </summary>
        public class AndConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private AndConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AndConstraintReferencedElementsCollection(AndConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Right != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Left != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Right == null))
                {
                    IConstraint rightCasted = item.As<IConstraint>();
                    if ((rightCasted != null))
                    {
                        this._parent.Right = rightCasted;
                        return;
                    }
                }
                if ((this._parent.Left == null))
                {
                    IConstraint leftCasted = item.As<IConstraint>();
                    if ((leftCasted != null))
                    {
                        this._parent.Left = leftCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Right = null;
                this._parent.Left = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Right))
                {
                    return true;
                }
                if ((item == this._parent.Left))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Right != null))
                {
                    array[arrayIndex] = this._parent.Right;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Left != null))
                {
                    array[arrayIndex] = this._parent.Left;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Right == item))
                {
                    this._parent.Right = null;
                    return true;
                }
                if ((this._parent.Left == item))
                {
                    this._parent.Left = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Right).Concat(this._parent.Left).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the right property
        /// </summary>
        private sealed class RightProxy : ModelPropertyChange<IAndConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RightProxy(IAndConstraint modelElement) :
                    base(modelElement, "right")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Right;
                }
                set
                {
                    this.ModelElement.Right = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the left property
        /// </summary>
        private sealed class LeftProxy : ModelPropertyChange<IAndConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeftProxy(IAndConstraint modelElement) :
                    base(modelElement, "left")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Left;
                }
                set
                {
                    this.ModelElement.Left = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the OrConstraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//OrConstraint")]
    public partial class OrConstraint : Constraint, IOrConstraint, IModelElement
    {

        private static Lazy<ITypedElement> _rightReference = new Lazy<ITypedElement>(RetrieveRightReference);

        /// <summary>
        /// The backing field for the Right property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _right;

        private static Lazy<ITypedElement> _leftReference = new Lazy<ITypedElement>(RetrieveLeftReference);

        /// <summary>
        /// The backing field for the Left property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _left;

        private static IClass _classInstance;

        /// <summary>
        /// The right property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("right")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Right
        {
            get
            {
                return this._right;
            }
            set
            {
                if ((this._right != value))
                {
                    IConstraint old = this._right;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Right", e, _rightReference);
                    this._right = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetRight;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRight;
                    }
                    this.OnPropertyChanged("Right", e, _rightReference);
                }
            }
        }

        /// <summary>
        /// The left property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("left")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Left
        {
            get
            {
                return this._left;
            }
            set
            {
                if ((this._left != value))
                {
                    IConstraint old = this._left;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Left", e, _leftReference);
                    this._left = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetLeft;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetLeft;
                    }
                    this.OnPropertyChanged("Left", e, _leftReference);
                }
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new OrConstraintChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OrConstraintReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OrConstraint")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveRightReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.OrConstraint.ClassInstance)).Resolve("right")));
        }

        /// <summary>
        /// Handles the event that the Right property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRight(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Right))
            {
                this.Right = null;
            }
        }

        private static ITypedElement RetrieveLeftReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.OrConstraint.ClassInstance)).Resolve("left")));
        }

        /// <summary>
        /// Handles the event that the Left property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLeft(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Left))
            {
                this.Left = null;
            }
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Right))
            {
                return ModelHelper.CreatePath("right");
            }
            if ((element == this.Left))
            {
                return ModelHelper.CreatePath("left");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RIGHT"))
            {
                return this.Right;
            }
            if ((reference == "LEFT"))
            {
                return this.Left;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RIGHT"))
            {
                this.Right = ((IConstraint)(value));
                return;
            }
            if ((feature == "LEFT"))
            {
                this.Left = ((IConstraint)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RIGHT"))
            {
                return new RightProxy(this);
            }
            if ((reference == "LEFT"))
            {
                return new LeftProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//OrConstraint")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the OrConstraint class
        /// </summary>
        public class OrConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OrConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrConstraintChildrenCollection(OrConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Right != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Left != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Right == null))
                {
                    IConstraint rightCasted = item.As<IConstraint>();
                    if ((rightCasted != null))
                    {
                        this._parent.Right = rightCasted;
                        return;
                    }
                }
                if ((this._parent.Left == null))
                {
                    IConstraint leftCasted = item.As<IConstraint>();
                    if ((leftCasted != null))
                    {
                        this._parent.Left = leftCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Right = null;
                this._parent.Left = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Right))
                {
                    return true;
                }
                if ((item == this._parent.Left))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Right != null))
                {
                    array[arrayIndex] = this._parent.Right;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Left != null))
                {
                    array[arrayIndex] = this._parent.Left;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Right == item))
                {
                    this._parent.Right = null;
                    return true;
                }
                if ((this._parent.Left == item))
                {
                    this._parent.Left = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Right).Concat(this._parent.Left).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the OrConstraint class
        /// </summary>
        public class OrConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private OrConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrConstraintReferencedElementsCollection(OrConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Right != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Left != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Right == null))
                {
                    IConstraint rightCasted = item.As<IConstraint>();
                    if ((rightCasted != null))
                    {
                        this._parent.Right = rightCasted;
                        return;
                    }
                }
                if ((this._parent.Left == null))
                {
                    IConstraint leftCasted = item.As<IConstraint>();
                    if ((leftCasted != null))
                    {
                        this._parent.Left = leftCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Right = null;
                this._parent.Left = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Right))
                {
                    return true;
                }
                if ((item == this._parent.Left))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Right != null))
                {
                    array[arrayIndex] = this._parent.Right;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Left != null))
                {
                    array[arrayIndex] = this._parent.Left;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Right == item))
                {
                    this._parent.Right = null;
                    return true;
                }
                if ((this._parent.Left == item))
                {
                    this._parent.Left = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Right).Concat(this._parent.Left).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the right property
        /// </summary>
        private sealed class RightProxy : ModelPropertyChange<IOrConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RightProxy(IOrConstraint modelElement) :
                    base(modelElement, "right")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Right;
                }
                set
                {
                    this.ModelElement.Right = value;
                }
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the left property
        /// </summary>
        private sealed class LeftProxy : ModelPropertyChange<IOrConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeftProxy(IOrConstraint modelElement) :
                    base(modelElement, "left")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Left;
                }
                set
                {
                    this.ModelElement.Left = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the FeatureConstraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureConstraint")]
    public partial class FeatureConstraint : Constraint, IFeatureConstraint, IModelElement
    {

        private static Lazy<ITypedElement> _featureReference = new Lazy<ITypedElement>(RetrieveFeatureReference);

        /// <summary>
        /// The backing field for the Feature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFeature _feature;

        private static IClass _classInstance;

        /// <summary>
        /// The feature property
        /// </summary>
        [DisplayNameAttribute("feature")]
        [CategoryAttribute("FeatureConstraint")]
        [XmlElementNameAttribute("feature")]
        [XmlAttributeAttribute(true)]
        public IFeature Feature
        {
            get
            {
                return this._feature;
            }
            set
            {
                if ((this._feature != value))
                {
                    IFeature old = this._feature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Feature", e, _featureReference);
                    this._feature = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFeature;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFeature;
                    }
                    this.OnPropertyChanged("Feature", e, _featureReference);
                }
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureConstraintReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureConstraint")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveFeatureReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.FeatureConstraint.ClassInstance)).Resolve("feature")));
        }

        /// <summary>
        /// Handles the event that the Feature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFeature(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Feature))
            {
                this.Feature = null;
            }
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FEATURE"))
            {
                return this.Feature;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FEATURE"))
            {
                this.Feature = ((IFeature)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FEATURE"))
            {
                return new FeatureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//FeatureConstraint")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the FeatureConstraint class
        /// </summary>
        public class FeatureConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private FeatureConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureConstraintReferencedElementsCollection(FeatureConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Feature != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Feature == null))
                {
                    IFeature featureCasted = item.As<IFeature>();
                    if ((featureCasted != null))
                    {
                        this._parent.Feature = featureCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Feature = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Feature))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Feature != null))
                {
                    array[arrayIndex] = this._parent.Feature;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Feature == item))
                {
                    this._parent.Feature = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Feature).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the feature property
        /// </summary>
        private sealed class FeatureProxy : ModelPropertyChange<IFeatureConstraint, IFeature>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeatureProxy(IFeatureConstraint modelElement) :
                    base(modelElement, "feature")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFeature Value
            {
                get
                {
                    return this.ModelElement.Feature;
                }
                set
                {
                    this.ModelElement.Feature = value;
                }
            }
        }
    }

    /// <summary>
    /// The default implementation of the NotConstraint class
    /// </summary>
    [XmlNamespaceAttribute("anytext:uvl")]
    [XmlNamespacePrefixAttribute("uvl")]
    [ModelRepresentationClassAttribute("anytext:uvl#//NotConstraint")]
    public partial class NotConstraint : Constraint, INotConstraint, IModelElement
    {

        private static Lazy<ITypedElement> _innerReference = new Lazy<ITypedElement>(RetrieveInnerReference);

        /// <summary>
        /// The backing field for the Inner property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConstraint _inner;

        private static IClass _classInstance;

        /// <summary>
        /// The inner property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inner")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IConstraint Inner
        {
            get
            {
                return this._inner;
            }
            set
            {
                if ((this._inner != value))
                {
                    IConstraint old = this._inner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Inner", e, _innerReference);
                    this._inner = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetInner;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetInner;
                    }
                    this.OnPropertyChanged("Inner", e, _innerReference);
                }
            }
        }

        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new NotConstraintChildrenCollection(this));
            }
        }

        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NotConstraintReferencedElementsCollection(this));
            }
        }

        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//NotConstraint")));
                }
                return _classInstance;
            }
        }

        private static ITypedElement RetrieveInnerReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.UniversalVariability.NotConstraint.ClassInstance)).Resolve("inner")));
        }

        /// <summary>
        /// Handles the event that the Inner property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInner(object sender, EventArgs eventArgs)
        {
            if ((sender == this.Inner))
            {
                this.Inner = null;
            }
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Inner))
            {
                return ModelHelper.CreatePath("inner");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INNER"))
            {
                return this.Inner;
            }
            return base.GetModelElementForReference(reference, index);
        }

        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INNER"))
            {
                this.Inner = ((IConstraint)(value));
                return;
            }
            base.SetFeature(feature, value);
        }

        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INNER"))
            {
                return new InnerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("anytext:uvl#//NotConstraint")));
            }
            return _classInstance;
        }

        /// <summary>
        /// The collection class to to represent the children of the NotConstraint class
        /// </summary>
        public class NotConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private NotConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NotConstraintChildrenCollection(NotConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Inner != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Inner == null))
                {
                    IConstraint innerCasted = item.As<IConstraint>();
                    if ((innerCasted != null))
                    {
                        this._parent.Inner = innerCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Inner = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Inner))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Inner != null))
                {
                    array[arrayIndex] = this._parent.Inner;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Inner == item))
                {
                    this._parent.Inner = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Inner).GetEnumerator();
            }
        }

        /// <summary>
        /// The collection class to to represent the children of the NotConstraint class
        /// </summary>
        public class NotConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {

            private NotConstraint _parent;

            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NotConstraintReferencedElementsCollection(NotConstraint parent)
            {
                this._parent = parent;
            }

            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Inner != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }

            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }

            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Inner == null))
                {
                    IConstraint innerCasted = item.As<IConstraint>();
                    if ((innerCasted != null))
                    {
                        this._parent.Inner = innerCasted;
                        return;
                    }
                }
            }

            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Inner = null;
            }

            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Inner))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Inner != null))
                {
                    array[arrayIndex] = this._parent.Inner;
                    arrayIndex = (arrayIndex + 1);
                }
            }

            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Inner == item))
                {
                    this._parent.Inner = null;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Inner).GetEnumerator();
            }
        }

        /// <summary>
        /// Represents a proxy to represent an incremental access to the inner property
        /// </summary>
        private sealed class InnerProxy : ModelPropertyChange<INotConstraint, IConstraint>
        {

            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InnerProxy(INotConstraint modelElement) :
                    base(modelElement, "inner")
            {
            }

            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConstraint Value
            {
                get
                {
                    return this.ModelElement.Inner;
                }
                set
                {
                    this.ModelElement.Inner = value;
                }
            }
        }
    }

    /// <summary>
    /// The public interface for NotConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(NotConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(NotConstraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//NotConstraint")]
    public partial interface INotConstraint : IModelElement, IConstraint
    {

        /// <summary>
        /// The inner property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inner")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Inner
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The public interface for FeatureConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FeatureConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(FeatureConstraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureConstraint")]
    public partial interface IFeatureConstraint : IModelElement, IConstraint
    {

        /// <summary>
        /// The feature property
        /// </summary>
        [DisplayNameAttribute("feature")]
        [CategoryAttribute("FeatureConstraint")]
        [XmlElementNameAttribute("feature")]
        [XmlAttributeAttribute(true)]
        IFeature Feature
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The public interface for OrConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OrConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(OrConstraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//OrConstraint")]
    public partial interface IOrConstraint : IModelElement, IConstraint
    {

        /// <summary>
        /// The right property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("right")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Right
        {
            get;
            set;
        }

        /// <summary>
        /// The left property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("left")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Left
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The public interface for AndConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AndConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(AndConstraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//AndConstraint")]
    public partial interface IAndConstraint : IModelElement, IConstraint
    {

        /// <summary>
        /// The right property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("right")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Right
        {
            get;
            set;
        }

        /// <summary>
        /// The left property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("left")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Left
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The public interface for ImpliesConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ImpliesConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(ImpliesConstraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//ImpliesConstraint")]
    public partial interface IImpliesConstraint : IModelElement, IConstraint
    {

        /// <summary>
        /// The consequence property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("consequence")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Consequence
        {
            get;
            set;
        }

        /// <summary>
        /// The given property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("given")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Given
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The public interface for Constraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Constraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(Constraint))]
    [ModelRepresentationClassAttribute("anytext:uvl#//Constraint")]
    public partial interface IConstraint : IModelElement
    {
    }

    /// <summary>
    /// The public interface for AlternativeFeatureGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AlternativeFeatureGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(AlternativeFeatureGroup))]
    [ModelRepresentationClassAttribute("anytext:uvl#//AlternativeFeatureGroup")]
    public partial interface IAlternativeFeatureGroup : IModelElement, IFeatureGroup
    {

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeature> Features
        {
            get;
        }
    }

    /// <summary>
    /// The public interface for OptionalFeatureGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OptionalFeatureGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(OptionalFeatureGroup))]
    [ModelRepresentationClassAttribute("anytext:uvl#//OptionalFeatureGroup")]
    public partial interface IOptionalFeatureGroup : IModelElement, IFeatureGroup
    {

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeature> Features
        {
            get;
        }
    }

    /// <summary>
    /// The public interface for MandatoryFeatureGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MandatoryFeatureGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(MandatoryFeatureGroup))]
    [ModelRepresentationClassAttribute("anytext:uvl#//MandatoryFeatureGroup")]
    public partial interface IMandatoryFeatureGroup : IModelElement, IFeatureGroup
    {

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeature> Features
        {
            get;
        }
    }

    /// <summary>
    /// The public interface for OrFeatureGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OrFeatureGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(OrFeatureGroup))]
    [ModelRepresentationClassAttribute("anytext:uvl#//OrFeatureGroup")]
    public partial interface IOrFeatureGroup : IModelElement, IFeatureGroup
    {

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeature> Features
        {
            get;
        }
    }

    /// <summary>
    /// The public interface for FeatureGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FeatureGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(FeatureGroup))]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureGroup")]
    public partial interface IFeatureGroup : IModelElement
    {
    }

    /// <summary>
    /// The public interface for Feature
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Feature))]
    [XmlDefaultImplementationTypeAttribute(typeof(Feature))]
    [ModelRepresentationClassAttribute("anytext:uvl#//Feature")]
    public partial interface IFeature : IModelElement
    {

        /// <summary>
        /// The isAbstract property
        /// </summary>
        [DisplayNameAttribute("isAbstract")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("isAbstract")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsAbstract
        {
            get;
            set;
        }

        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The groups property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("groups")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeatureGroup> Groups
        {
            get;
        }
    }

    /// <summary>
    /// The public interface for FeatureModel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FeatureModel))]
    [XmlDefaultImplementationTypeAttribute(typeof(FeatureModel))]
    [ModelRepresentationClassAttribute("anytext:uvl#//FeatureModel")]
    public partial interface IFeatureModel : IModelElement
    {

        /// <summary>
        /// The constraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("constraints")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IConstraint> Constraints
        {
            get;
        }

        /// <summary>
        /// The features property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("features")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IFeature> Features
        {
            get;
        }
    }
}
