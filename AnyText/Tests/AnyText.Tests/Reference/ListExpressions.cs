//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace AnyText.Tests.ListExpressions
{


    /// <summary>
    /// Denotes a class capable to parse the language lists
    /// </summary>
    public partial class ListExpressionsGrammar : ReflectiveGrammar
    {

        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "lists";
            }
        }

        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<ValueRule>();
        }

        /// <summary>
        /// A rule class representing the rule &apos;Value&apos;
        /// </summary>
        public partial class ValueRule : ChoiceRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<ListRule>(),
                        context.ResolveRule<SimpleValueRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;List&apos;
        /// </summary>
        public partial class ListRule : ModelElementRule<List>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<ListValuesSimpleValueRule>(),
                        RuleFormatter.OneOrMore(new SequenceRule(context.ResolveKeyword(","), context.ResolveFormattedRule<ListValuesSimpleValueRule>()))};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;SimpleValue&apos;
        /// </summary>
        public partial class SimpleValueRule : ChoiceRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<NumericalRule>(),
                        context.ResolveRule<TextRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Numerical&apos;
        /// </summary>
        public partial class NumericalRule : ChoiceRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<DoubleNumberRule>(),
                        context.ResolveRule<PercentageRule>(),
                        context.ResolveRule<IntegerNumberRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;DoubleNumber&apos;
        /// </summary>
        public partial class DoubleNumberRule : ModelElementRule<DoubleNumber>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<DoubleNumberValueDoubleRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Percentage&apos;
        /// </summary>
        public partial class PercentageRule : ModelElementRule<Percentage>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<PercentageValueNumericalRule>(),
                        context.ResolveKeyword("%")};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;IntegerNumber&apos;
        /// </summary>
        public partial class IntegerNumberRule : ModelElementRule<IntegerNumber>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<IntegerNumberValueIntegerRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Text&apos;
        /// </summary>
        public partial class TextRule : ModelElementRule<Text>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<TextValueStringOrAltStringRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Integer&apos;
        /// </summary>
        public partial class IntegerRule : ConvertRule<long>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[-+]?\\d+", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Double&apos;
        /// </summary>
        public partial class DoubleRule : ConvertRule<double>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[-+]?\\d+\\.\\d+", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;String&apos;
        /// </summary>
        public partial class StringRule : EscapedConvertRule<string>
        {

            /// <summary>
            /// Escapes the given string
            /// </summary>
            /// <returns>the escaped string</returns>
            /// <param name="value">the unescaped string</param>
            public override string Escape(string value)
            {
                return (("\"" + value.Replace("\'", "\\\""))
                            + "\"");
            }

            /// <summary>
            /// Unescapes the given string
            /// </summary>
            /// <returns>the unescaped string</returns>
            /// <param name="value">the escaped string</param>
            public override string Unescape(string value)
            {
                return value.Substring(1, (value.Length - 2)).Replace("\\\"", "\'");
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\".*\"", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;AltString&apos;
        /// </summary>
        public partial class AltStringRule : EscapedConvertRule<string>
        {

            /// <summary>
            /// Escapes the given string
            /// </summary>
            /// <returns>the escaped string</returns>
            /// <param name="value">the unescaped string</param>
            public override string Escape(string value)
            {
                return (("\'" + value.Replace("\'", "\\\'"))
                            + "\'");
            }

            /// <summary>
            /// Unescapes the given string
            /// </summary>
            /// <returns>the unescaped string</returns>
            /// <param name="value">the escaped string</param>
            public override string Unescape(string value)
            {
                return value.Substring(1, (value.Length - 2)).Replace("\\\'", "\'");
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\'.*\'", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to values
        /// </summary>
        public partial class ListValuesSimpleValueRule : AddAssignRule<IList, ISimpleValue>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "values";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<SimpleValueRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<ISimpleValue> GetCollection(IList semanticElement, ParseContext context)
            {
                return semanticElement.Values;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to value
        /// </summary>
        public partial class DoubleNumberValueDoubleRule : AssignRule<IDoubleNumber, double>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "value";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<DoubleRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override double GetValue(IDoubleNumber semanticElement, ParseContext context)
            {
                return semanticElement.Value;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IDoubleNumber semanticElement, double propertyValue, ParseContext context)
            {
                semanticElement.Value = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to value
        /// </summary>
        public partial class PercentageValueNumericalRule : AssignRule<IPercentage, INumerical>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "value";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<NumericalRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override INumerical GetValue(IPercentage semanticElement, ParseContext context)
            {
                return semanticElement.Value;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IPercentage semanticElement, INumerical propertyValue, ParseContext context)
            {
                semanticElement.Value = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to value
        /// </summary>
        public partial class IntegerNumberValueIntegerRule : AssignRule<IIntegerNumber, long>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "value";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IntegerRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override long GetValue(IIntegerNumber semanticElement, ParseContext context)
            {
                return semanticElement.Value;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IIntegerNumber semanticElement, long propertyValue, ParseContext context)
            {
                semanticElement.Value = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to value
        /// </summary>
        public partial class TextValueStringOrAltStringRule : AssignRule<IText, string>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "value";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = new ChoiceRule(context.ResolveFormattedRule<StringRule>(), context.ResolveFormattedRule<AltStringRule>());
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IText semanticElement, ParseContext context)
            {
                return semanticElement.Value;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IText semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Value = propertyValue;
            }
        }
    }
}
