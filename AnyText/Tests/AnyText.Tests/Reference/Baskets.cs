//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AnyText.Test.Metamodel.Baskets;
using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace AnyText.Tests.BasketsGrammar
{


    /// <summary>
    /// Denotes a class capable to parse the language basket
    /// </summary>
    public partial class BasketsGrammar : ReflectiveGrammar
    {

        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "basket";
            }
        }

        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<BasketsRule>();
        }

        /// <summary>
        /// A rule class representing the rule &apos;Baskets&apos;
        /// </summary>
        public partial class BasketsRule : ModelElementRule<Baskets>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<BasketsBasketsBasketRule>())};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Basket&apos;
        /// </summary>
        public partial class BasketRule : ModelElementRule<Basket>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("basket"),
                        context.ResolveFormattedRule<BasketNameIdentifierRule>(FormattingInstruction.SupressSpace),
                        context.ResolveKeyword(":"),
                        context.ResolveFormattedRule<BasketItemsRule>(FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;BasketItems&apos;
        /// </summary>
        public partial class BasketItemsRule : QuoteRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = new SequenceRule(RuleFormatter.ZeroOrOne(new SequenceRule(RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveFormattedRule<BasketItemsIdentifierRule>(FormattingInstruction.SupressSpace), context.ResolveKeyword(","))), context.ResolveFormattedRule<BasketItemsIdentifierRule>(), context.ResolveKeyword("and"))), context.ResolveFormattedRule<BasketItemsIdentifierRule>());
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Identifier&apos;
        /// </summary>
        public partial class IdentifierRule : NMF.AnyText.Rules.RegexRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\w+", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to baskets
        /// </summary>
        public partial class BasketsBasketsBasketRule : AddAssignRule<IBaskets, IBasket>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "baskets";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<BasketRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IBasket> GetCollection(IBaskets semanticElement, ParseContext context)
            {
                return semanticElement.Baskets_;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to name
        /// </summary>
        public partial class BasketNameIdentifierRule : AssignRule<IBasket, string>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "name";
                }
            }

            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IdentifierRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IBasket semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IBasket semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to items
        /// </summary>
        public partial class BasketItemsIdentifierRule : AddAssignRule<IBasket, string>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "items";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IdentifierRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<string> GetCollection(IBasket semanticElement, ParseContext context)
            {
                return semanticElement.Items;
            }
        }
    }
}
