//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace AnyText.Tests.UniversalVariability
{


    /// <summary>
    /// Denotes a class capable to parse the language uvl
    /// </summary>
    public partial class UniversalVariabilityGrammar : ReflectiveGrammar
    {

        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "uvl";
            }
        }

        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<FeatureModelRule>();
        }

        /// <summary>
        /// A rule class representing the rule &apos;FeatureModel&apos;
        /// </summary>
        public partial class FeatureModelRule : ModelElementRule<FeatureModel>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("features", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<FeatureModelFeaturesFeatureRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline),
                        context.ResolveKeyword("constraints", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<FeatureModelConstraintsConstraintRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Feature&apos;
        /// </summary>
        public partial class FeatureRule : ModelElementRule<Feature>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        new NegativeLookaheadRule(context.ResolveKeyword("mandatory")),
                        new NegativeLookaheadRule(context.ResolveKeyword("optional")),
                        new NegativeLookaheadRule(context.ResolveKeyword("constraints")),
                        new NegativeLookaheadRule(context.ResolveKeyword("alternative")),
                        new NegativeLookaheadRule(context.ResolveKeyword("or")),
                        context.ResolveFormattedRule<FeatureNameFeatureNameRule>(),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<FeatureIsAbstractRule>(), FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.ZeroOrMore(context.ResolveFormattedRule<FeatureGroupsFeatureGroupRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;FeatureGroup&apos;
        /// </summary>
        public partial class FeatureGroupRule : ChoiceRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<MandatoryFeatureGroupRule>(),
                        context.ResolveRule<OptionalFeatureGroupRule>(),
                        context.ResolveRule<OrFeatureGroupRule>(),
                        context.ResolveRule<AlternativeFeatureGroupRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;OrFeatureGroup&apos;
        /// </summary>
        public partial class OrFeatureGroupRule : ModelElementRule<OrFeatureGroup>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("or", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.OneOrMore(context.ResolveFormattedRule<OrFeatureGroupFeaturesFeatureRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;MandatoryFeatureGroup&apos;
        /// </summary>
        public partial class MandatoryFeatureGroupRule : ModelElementRule<MandatoryFeatureGroup>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("mandatory", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.OneOrMore(context.ResolveFormattedRule<MandatoryFeatureGroupFeaturesFeatureRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;OptionalFeatureGroup&apos;
        /// </summary>
        public partial class OptionalFeatureGroupRule : ModelElementRule<OptionalFeatureGroup>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("optional", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.OneOrMore(context.ResolveFormattedRule<OptionalFeatureGroupFeaturesFeatureRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;AlternativeFeatureGroup&apos;
        /// </summary>
        public partial class AlternativeFeatureGroupRule : ModelElementRule<AlternativeFeatureGroup>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("alternative", FormattingInstruction.Indent, FormattingInstruction.Newline),
                        RuleFormatter.OneOrMore(context.ResolveFormattedRule<AlternativeFeatureGroupFeaturesFeatureRule>(FormattingInstruction.Newline), FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;Constraint&apos;
        /// </summary>
        public partial class ConstraintRule : ChoiceRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Alternatives = new FormattedRule[] {
                        context.ResolveRule<ImpliesConstraintRule>(),
                        context.ResolveRule<AndConstraintRule>(),
                        context.ResolveRule<OrConstraintRule>(),
                        context.ResolveRule<NotConstraintRule>(),
                        context.ResolveRule<ParenthesesConstraintRule>(),
                        context.ResolveRule<FeatureConstraintRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;ParenthesesConstraint&apos;
        /// </summary>
        public partial class ParenthesesConstraintRule : ParanthesesRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("(", FormattingInstruction.SupressSpace),
                        context.ResolveFormattedRule<ConstraintRule>(FormattingInstruction.SupressSpace),
                        context.ResolveKeyword(")")};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;ImpliesConstraint&apos;
        /// </summary>
        public partial class ImpliesConstraintRule : ModelElementRule<ImpliesConstraint>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<ImpliesConstraintGivenConstraintRule>(),
                        context.ResolveKeyword("=>"),
                        context.ResolveFormattedRule<ImpliesConstraintConsequenceConstraintRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;AndConstraint&apos;
        /// </summary>
        public partial class AndConstraintRule : ModelElementRule<AndConstraint>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<AndConstraintLeftConstraintRule>(),
                        context.ResolveKeyword("&"),
                        context.ResolveFormattedRule<AndConstraintRightConstraintRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;OrConstraint&apos;
        /// </summary>
        public partial class OrConstraintRule : ModelElementRule<OrConstraint>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<OrConstraintLeftConstraintRule>(),
                        context.ResolveKeyword("|"),
                        context.ResolveFormattedRule<OrConstraintRightConstraintRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;FeatureConstraint&apos;
        /// </summary>
        public partial class FeatureConstraintRule : ModelElementRule<FeatureConstraint>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<FeatureConstraintFeatureFeatureRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;NotConstraint&apos;
        /// </summary>
        public partial class NotConstraintRule : ModelElementRule<NotConstraint>
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("!", FormattingInstruction.SupressSpace),
                        context.ResolveFormattedRule<NotConstraintInnerConstraintRule>()};
            }
        }

        /// <summary>
        /// A rule class representing the rule &apos;FeatureName&apos;
        /// </summary>
        public partial class FeatureNameRule : NMF.AnyText.Rules.RegexRule
        {

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\w+|\"\\w+\"", RegexOptions.Compiled);
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to constraints
        /// </summary>
        public partial class FeatureModelConstraintsConstraintRule : AddAssignRule<IFeatureModel, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "constraints";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IConstraint> GetCollection(IFeatureModel semanticElement, ParseContext context)
            {
                return semanticElement.Constraints;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to features
        /// </summary>
        public partial class FeatureModelFeaturesFeatureRule : AddAssignRule<IFeatureModel, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "features";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeature> GetCollection(IFeatureModel semanticElement, ParseContext context)
            {
                return semanticElement.Features;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to groups
        /// </summary>
        public partial class FeatureGroupsFeatureGroupRule : AddAssignRule<IFeature, IFeatureGroup>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "groups";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureGroupRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeatureGroup> GetCollection(IFeature semanticElement, ParseContext context)
            {
                return semanticElement.Groups;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to isAbstract
        /// </summary>
        public partial class FeatureIsAbstractRule : ExistsAssignRule<IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "isAbstract";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("{abstract}");
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(IFeature semanticElement, ParseContext context)
            {
                return semanticElement.IsAbstract.GetValueOrDefault();
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IFeature semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsAbstract = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to name
        /// </summary>
        public partial class FeatureNameFeatureNameRule : AssignRule<IFeature, string>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "name";
                }
            }

            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureNameRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IFeature semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IFeature semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to features
        /// </summary>
        public partial class OrFeatureGroupFeaturesFeatureRule : AddAssignRule<IOrFeatureGroup, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "features";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeature> GetCollection(IOrFeatureGroup semanticElement, ParseContext context)
            {
                return semanticElement.Features;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to features
        /// </summary>
        public partial class MandatoryFeatureGroupFeaturesFeatureRule : AddAssignRule<IMandatoryFeatureGroup, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "features";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeature> GetCollection(IMandatoryFeatureGroup semanticElement, ParseContext context)
            {
                return semanticElement.Features;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to features
        /// </summary>
        public partial class OptionalFeatureGroupFeaturesFeatureRule : AddAssignRule<IOptionalFeatureGroup, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "features";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeature> GetCollection(IOptionalFeatureGroup semanticElement, ParseContext context)
            {
                return semanticElement.Features;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to features
        /// </summary>
        public partial class AlternativeFeatureGroupFeaturesFeatureRule : AddAssignRule<IAlternativeFeatureGroup, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "features";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureRule>();
            }

            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IFeature> GetCollection(IAlternativeFeatureGroup semanticElement, ParseContext context)
            {
                return semanticElement.Features;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to consequence
        /// </summary>
        public partial class ImpliesConstraintConsequenceConstraintRule : AssignRule<IImpliesConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "consequence";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IImpliesConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Consequence;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IImpliesConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Consequence = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to given
        /// </summary>
        public partial class ImpliesConstraintGivenConstraintRule : AssignRule<IImpliesConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "given";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IImpliesConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Given;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IImpliesConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Given = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to right
        /// </summary>
        public partial class AndConstraintRightConstraintRule : AssignRule<IAndConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "right";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IAndConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Right;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IAndConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Right = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to left
        /// </summary>
        public partial class AndConstraintLeftConstraintRule : AssignRule<IAndConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "left";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IAndConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Left;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IAndConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Left = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to right
        /// </summary>
        public partial class OrConstraintRightConstraintRule : AssignRule<IOrConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "right";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IOrConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Right;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IOrConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Right = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to left
        /// </summary>
        public partial class OrConstraintLeftConstraintRule : AssignRule<IOrConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "left";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(IOrConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Left;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IOrConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Left = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to feature
        /// </summary>
        public partial class FeatureConstraintFeatureFeatureRule : AssignModelReferenceRule<IFeatureConstraint, IFeature>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "feature";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<FeatureNameRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IFeature GetValue(IFeatureConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Feature;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IFeatureConstraint semanticElement, IFeature propertyValue, ParseContext context)
            {
                semanticElement.Feature = propertyValue;
            }
        }

        /// <summary>
        /// Rule to assign the contents of the inner rule to inner
        /// </summary>
        public partial class NotConstraintInnerConstraintRule : AssignRule<INotConstraint, IConstraint>
        {

            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "inner";
                }
            }

            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<ConstraintRule>();
            }

            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IConstraint GetValue(INotConstraint semanticElement, ParseContext context)
            {
                return semanticElement.Inner;
            }

            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(INotConstraint semanticElement, IConstraint propertyValue, ParseContext context)
            {
                semanticElement.Inner = propertyValue;
            }
        }
    }
}
