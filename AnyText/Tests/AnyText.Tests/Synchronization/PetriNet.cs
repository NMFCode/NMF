//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnyText.Tests.Synchronization.Metamodel.PetriNet
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the PetriNet class
    /// </summary>
    [XmlIdentifierAttribute("id")]
    [XmlNamespaceAttribute("anytext:petrinet")]
    [XmlNamespacePrefixAttribute("petrinet")]
    [DebuggerDisplayAttribute("PetriNet {Id}")]
    public partial class PetriNet : ModelElement, IPetriNet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        private static Lazy<ITypedElement> _placesReference = new Lazy<ITypedElement>(RetrievePlacesReference);
        
        /// <summary>
        /// The backing field for the Places property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IPlace> _places;
        
        private static Lazy<ITypedElement> _transitionsReference = new Lazy<ITypedElement>(RetrieveTransitionsReference);
        
        /// <summary>
        /// The backing field for the Transitions property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<ITransition> _transitions;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public PetriNet()
        {
            this._places = new ObservableCompositionList<IPlace>(this);
            this._places.CollectionChanging += this.PlacesCollectionChanging;
            this._places.CollectionChanged += this.PlacesCollectionChanged;
            this._transitions = new ObservableCompositionList<ITransition>(this);
            this._transitions.CollectionChanging += this.TransitionsCollectionChanging;
            this._transitions.CollectionChanged += this.TransitionsCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("PetriNet")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnPropertyChanged("Id", e, _idAttribute);
                    OnKeyChanged(e);
                }
            }
        }
        
        /// <summary>
        /// The places property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("places")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IPlace> Places
        {
            get
            {
                return this._places;
            }
        }
        
        /// <summary>
        /// The transitions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transitions")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<ITransition> Transitions
        {
            get
            {
                return this._transitions;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PetriNetChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PetriNetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.PetriNet.ClassInstance)).Resolve("id")));
        }
        
        private static ITypedElement RetrievePlacesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.PetriNet.ClassInstance)).Resolve("places")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Places property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PlacesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Places", e, _placesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Places property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PlacesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Places", e, _placesReference);
        }
        
        private static ITypedElement RetrieveTransitionsReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.PetriNet.ClassInstance)).Resolve("transitions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transitions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Transitions", e, _transitionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transitions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transitions", e, _transitionsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PLACES"))
            {
                return this._places;
            }
            if ((feature == "TRANSITIONS"))
            {
                return this._transitions;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IdProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._places))
            {
                return "places";
            }
            if ((container == this._transitions))
            {
                return "transitions";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("PetriNet does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Id == null))
            {
                return null;
            }
            return this.Id.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PetriNet class
        /// </summary>
        public class PetriNetChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PetriNet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PetriNetChildrenCollection(PetriNet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Places.Count);
                    count = (count + this._parent.Transitions.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Places.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Transitions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Places.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Transitions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPlace placesCasted = item.As<IPlace>();
                if ((placesCasted != null))
                {
                    this._parent.Places.Add(placesCasted);
                }
                ITransition transitionsCasted = item.As<ITransition>();
                if ((transitionsCasted != null))
                {
                    this._parent.Transitions.Add(transitionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Places.Clear();
                this._parent.Transitions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Places.Contains(item))
                {
                    return true;
                }
                if (this._parent.Transitions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> placesEnumerator = this._parent.Places.GetEnumerator();
                try
                {
                    for (
                    ; placesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = placesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    placesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> transitionsEnumerator = this._parent.Transitions.GetEnumerator();
                try
                {
                    for (
                    ; transitionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPlace placeItem = item.As<IPlace>();
                if (((placeItem != null) 
                            && this._parent.Places.Remove(placeItem)))
                {
                    return true;
                }
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transitions.Remove(transitionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Places).Concat(this._parent.Transitions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PetriNet class
        /// </summary>
        public class PetriNetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PetriNet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PetriNetReferencedElementsCollection(PetriNet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Places.Count);
                    count = (count + this._parent.Transitions.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Places.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Transitions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Places.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Transitions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPlace placesCasted = item.As<IPlace>();
                if ((placesCasted != null))
                {
                    this._parent.Places.Add(placesCasted);
                }
                ITransition transitionsCasted = item.As<ITransition>();
                if ((transitionsCasted != null))
                {
                    this._parent.Transitions.Add(transitionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Places.Clear();
                this._parent.Transitions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Places.Contains(item))
                {
                    return true;
                }
                if (this._parent.Transitions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> placesEnumerator = this._parent.Places.GetEnumerator();
                try
                {
                    for (
                    ; placesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = placesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    placesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> transitionsEnumerator = this._parent.Transitions.GetEnumerator();
                try
                {
                    for (
                    ; transitionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPlace placeItem = item.As<IPlace>();
                if (((placeItem != null) 
                            && this._parent.Places.Remove(placeItem)))
                {
                    return true;
                }
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transitions.Remove(transitionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Places).Concat(this._parent.Transitions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IPetriNet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IPetriNet modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Place class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("anytext:petrinet")]
    [XmlNamespacePrefixAttribute("petrinet")]
    [DebuggerDisplayAttribute("Place {Name}")]
    public partial class Place : ModelElement, IPlace, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TokenCount property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _tokenCount;
        
        private static Lazy<ITypedElement> _tokenCountAttribute = new Lazy<ITypedElement>(RetrieveTokenCountAttribute);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The tokenCount property
        /// </summary>
        [DisplayNameAttribute("tokenCount")]
        [CategoryAttribute("Place")]
        [XmlElementNameAttribute("tokenCount")]
        [XmlAttributeAttribute(true)]
        public string TokenCount
        {
            get
            {
                return this._tokenCount;
            }
            set
            {
                if ((this._tokenCount != value))
                {
                    string old = this._tokenCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("TokenCount", e, _tokenCountAttribute);
                    this._tokenCount = value;
                    this.OnPropertyChanged("TokenCount", e, _tokenCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Place")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                    OnKeyChanged(e);
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        private static ITypedElement RetrieveTokenCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.Place.ClassInstance)).Resolve("tokenCount")));
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.Place.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TOKENCOUNT"))
            {
                return this.TokenCount;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOKENCOUNT"))
            {
                this.TokenCount = ((string)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TOKENCOUNT"))
            {
                return new TokenCountProxy(this);
            }
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("Place does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tokenCount property
        /// </summary>
        private sealed class TokenCountProxy : ModelPropertyChange<IPlace, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TokenCountProxy(IPlace modelElement) : 
                    base(modelElement, "tokenCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TokenCount;
                }
                set
                {
                    this.ModelElement.TokenCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IPlace, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IPlace modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("anytext:petrinet")]
    [XmlNamespacePrefixAttribute("petrinet")]
    public partial class Transition : ModelElement, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Input property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _input;
        
        private static Lazy<ITypedElement> _inputAttribute = new Lazy<ITypedElement>(RetrieveInputAttribute);
        
        private static Lazy<ITypedElement> _toReference = new Lazy<ITypedElement>(RetrieveToReference);
        
        /// <summary>
        /// The backing field for the To property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationList<IPlace> _to;
        
        private static Lazy<ITypedElement> _fromReference = new Lazy<ITypedElement>(RetrieveFromReference);
        
        /// <summary>
        /// The backing field for the From property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationList<IPlace> _from;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Transition()
        {
            this._to = new ObservableAssociationList<IPlace>();
            this._to.CollectionChanging += this.ToCollectionChanging;
            this._to.CollectionChanged += this.ToCollectionChanged;
            this._from = new ObservableAssociationList<IPlace>();
            this._from.CollectionChanging += this.FromCollectionChanging;
            this._from.CollectionChanged += this.FromCollectionChanged;
        }
        
        /// <summary>
        /// The input property
        /// </summary>
        [DisplayNameAttribute("input")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        public string Input
        {
            get
            {
                return this._input;
            }
            set
            {
                if ((this._input != value))
                {
                    string old = this._input;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Input", e, _inputAttribute);
                    this._input = value;
                    this.OnPropertyChanged("Input", e, _inputAttribute);
                }
            }
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("to")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("to")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<IPlace> To
        {
            get
            {
                return this._to;
            }
        }
        
        /// <summary>
        /// The from property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("from")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("from")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<IPlace> From
        {
            get
            {
                return this._from;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        private static ITypedElement RetrieveInputAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.Transition.ClassInstance)).Resolve("input")));
        }
        
        private static ITypedElement RetrieveToReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.Transition.ClassInstance)).Resolve("to")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the To property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("To", e, _toReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the To property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("To", e, _toReference);
        }
        
        private static ITypedElement RetrieveFromReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.PetriNet.Transition.ClassInstance)).Resolve("from")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the From property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("From", e, _fromReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the From property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("From", e, _fromReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INPUT"))
            {
                return this.Input;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TO"))
            {
                return this._to;
            }
            if ((feature == "FROM"))
            {
                return this._from;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INPUT"))
            {
                this.Input = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INPUT"))
            {
                return new InputProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("Transition does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.To.Count);
                    count = (count + this._parent.From.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.To.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.From.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.To.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.From.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPlace toCasted = item.As<IPlace>();
                if ((toCasted != null))
                {
                    this._parent.To.Add(toCasted);
                }
                IPlace fromCasted = item.As<IPlace>();
                if ((fromCasted != null))
                {
                    this._parent.From.Add(fromCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.To.Clear();
                this._parent.From.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.To.Contains(item))
                {
                    return true;
                }
                if (this._parent.From.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> toEnumerator = this._parent.To.GetEnumerator();
                try
                {
                    for (
                    ; toEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toEnumerator.Dispose();
                }
                IEnumerator<IModelElement> fromEnumerator = this._parent.From.GetEnumerator();
                try
                {
                    for (
                    ; fromEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fromEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fromEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPlace placeItem = item.As<IPlace>();
                if (((placeItem != null) 
                            && this._parent.To.Remove(placeItem)))
                {
                    return true;
                }
                if (((placeItem != null) 
                            && this._parent.From.Remove(placeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.To).Concat(this._parent.From).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the input property
        /// </summary>
        private sealed class InputProxy : ModelPropertyChange<ITransition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputProxy(ITransition modelElement) : 
                    base(modelElement, "input")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Input;
                }
                set
                {
                    this.ModelElement.Input = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Transition
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Transition))]
    [XmlDefaultImplementationTypeAttribute(typeof(Transition))]
    public partial interface ITransition : IModelElement
    {
        
        /// <summary>
        /// The input property
        /// </summary>
        [DisplayNameAttribute("input")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        string Input
        {
            get;
            set;
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("to")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("to")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ICollectionExpression<IPlace> To
        {
            get;
        }
        
        /// <summary>
        /// The from property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("from")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("from")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ICollectionExpression<IPlace> From
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Place
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Place))]
    [XmlDefaultImplementationTypeAttribute(typeof(Place))]
    public partial interface IPlace : IModelElement
    {
        
        /// <summary>
        /// The tokenCount property
        /// </summary>
        [DisplayNameAttribute("tokenCount")]
        [CategoryAttribute("Place")]
        [XmlElementNameAttribute("tokenCount")]
        [XmlAttributeAttribute(true)]
        string TokenCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Place")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// The public interface for PetriNet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PetriNet))]
    [XmlDefaultImplementationTypeAttribute(typeof(PetriNet))]
    public partial interface IPetriNet : IModelElement
    {
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("PetriNet")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The places property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("places")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IPlace> Places
        {
            get;
        }
        
        /// <summary>
        /// The transitions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transitions")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<ITransition> Transitions
        {
            get;
        }
    }
}
