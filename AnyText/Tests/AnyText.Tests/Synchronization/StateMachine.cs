//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnyText.Tests.Synchronization.Metamodel.StateMachine
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    
    
    /// <summary>
    /// The default implementation of the StateMachine class
    /// </summary>
    [XmlIdentifierAttribute("id")]
    [XmlNamespaceAttribute("anytext:statemachine")]
    [XmlNamespacePrefixAttribute("statemachine")]
    [DebuggerDisplayAttribute("StateMachine {Id}")]
    public partial class StateMachine : ModelElement, IStateMachine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        private static Lazy<ITypedElement> _transitionsReference = new Lazy<ITypedElement>(RetrieveTransitionsReference);
        
        /// <summary>
        /// The backing field for the Transitions property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<ITransition> _transitions;
        
        private static Lazy<ITypedElement> _statesReference = new Lazy<ITypedElement>(RetrieveStatesReference);
        
        /// <summary>
        /// The backing field for the States property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionList<IState> _states;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public StateMachine()
        {
            this._transitions = new ObservableCompositionList<ITransition>(this);
            this._transitions.CollectionChanging += this.TransitionsCollectionChanging;
            this._transitions.CollectionChanged += this.TransitionsCollectionChanged;
            this._states = new ObservableCompositionList<IState>(this);
            this._states.CollectionChanging += this.StatesCollectionChanging;
            this._states.CollectionChanged += this.StatesCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnPropertyChanged("Id", e, _idAttribute);
                    OnKeyChanged(e);
                }
            }
        }
        
        /// <summary>
        /// The transitions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transitions")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<ITransition> Transitions
        {
            get
            {
                return this._transitions;
            }
        }
        
        /// <summary>
        /// The states property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("states")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ICollectionExpression<IState> States
        {
            get
            {
                return this._states;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StateMachineChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StateMachineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.StateMachine.ClassInstance)).Resolve("id")));
        }
        
        private static ITypedElement RetrieveTransitionsReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.StateMachine.ClassInstance)).Resolve("transitions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transitions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Transitions", e, _transitionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transitions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transitions", e, _transitionsReference);
        }
        
        private static ITypedElement RetrieveStatesReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.StateMachine.ClassInstance)).Resolve("states")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the States property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StatesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("States", e, _statesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the States property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StatesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("States", e, _statesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSITIONS"))
            {
                return this._transitions;
            }
            if ((feature == "STATES"))
            {
                return this._states;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IdProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._transitions))
            {
                return "transitions";
            }
            if ((container == this._states))
            {
                return "states";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("StateMachine does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Id == null))
            {
                return null;
            }
            return this.Id.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StateMachine class
        /// </summary>
        public class StateMachineChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateMachineChildrenCollection(StateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Transitions.Count);
                    count = (count + this._parent.States.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Transitions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.States.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Transitions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.States.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransition transitionsCasted = item.As<ITransition>();
                if ((transitionsCasted != null))
                {
                    this._parent.Transitions.Add(transitionsCasted);
                }
                IState statesCasted = item.As<IState>();
                if ((statesCasted != null))
                {
                    this._parent.States.Add(statesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Transitions.Clear();
                this._parent.States.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Transitions.Contains(item))
                {
                    return true;
                }
                if (this._parent.States.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> transitionsEnumerator = this._parent.Transitions.GetEnumerator();
                try
                {
                    for (
                    ; transitionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> statesEnumerator = this._parent.States.GetEnumerator();
                try
                {
                    for (
                    ; statesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = statesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    statesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transitions.Remove(transitionItem)))
                {
                    return true;
                }
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.States.Remove(stateItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Transitions).Concat(this._parent.States).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StateMachine class
        /// </summary>
        public class StateMachineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateMachineReferencedElementsCollection(StateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Transitions.Count);
                    count = (count + this._parent.States.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Transitions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.States.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Transitions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.States.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransition transitionsCasted = item.As<ITransition>();
                if ((transitionsCasted != null))
                {
                    this._parent.Transitions.Add(transitionsCasted);
                }
                IState statesCasted = item.As<IState>();
                if ((statesCasted != null))
                {
                    this._parent.States.Add(statesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Transitions.Clear();
                this._parent.States.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Transitions.Contains(item))
                {
                    return true;
                }
                if (this._parent.States.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> transitionsEnumerator = this._parent.Transitions.GetEnumerator();
                try
                {
                    for (
                    ; transitionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> statesEnumerator = this._parent.States.GetEnumerator();
                try
                {
                    for (
                    ; statesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = statesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    statesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transitions.Remove(transitionItem)))
                {
                    return true;
                }
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.States.Remove(stateItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Transitions).Concat(this._parent.States).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IStateMachine, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IStateMachine modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the State class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("anytext:statemachine")]
    [XmlNamespacePrefixAttribute("statemachine")]
    [DebuggerDisplayAttribute("State {Name}")]
    public partial class State : ModelElement, IState, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the IsStartState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isStartState;
        
        private static Lazy<ITypedElement> _isStartStateAttribute = new Lazy<ITypedElement>(RetrieveIsStartStateAttribute);
        
        /// <summary>
        /// The backing field for the IsEndState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isEndState;
        
        private static Lazy<ITypedElement> _isEndStateAttribute = new Lazy<ITypedElement>(RetrieveIsEndStateAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                    OnKeyChanged(e);
                }
            }
        }
        
        /// <summary>
        /// The isStartState property
        /// </summary>
        [DisplayNameAttribute("isStartState")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("isStartState")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsStartState
        {
            get
            {
                return this._isStartState;
            }
            set
            {
                if ((this._isStartState != value))
                {
                    Nullable<bool> old = this._isStartState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsStartState", e, _isStartStateAttribute);
                    this._isStartState = value;
                    this.OnPropertyChanged("IsStartState", e, _isStartStateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isEndState property
        /// </summary>
        [DisplayNameAttribute("isEndState")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("isEndState")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsEndState
        {
            get
            {
                return this._isEndState;
            }
            set
            {
                if ((this._isEndState != value))
                {
                    Nullable<bool> old = this._isEndState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsEndState", e, _isEndStateAttribute);
                    this._isEndState = value;
                    this.OnPropertyChanged("IsEndState", e, _isEndStateAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.State.ClassInstance)).Resolve("name")));
        }
        
        private static ITypedElement RetrieveIsStartStateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.State.ClassInstance)).Resolve("isStartState")));
        }
        
        private static ITypedElement RetrieveIsEndStateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.State.ClassInstance)).Resolve("isEndState")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "ISSTARTSTATE"))
            {
                return this.IsStartState;
            }
            if ((attribute == "ISENDSTATE"))
            {
                return this.IsEndState;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "ISSTARTSTATE"))
            {
                this.IsStartState = ((bool)(value));
                return;
            }
            if ((feature == "ISENDSTATE"))
            {
                this.IsEndState = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "ISSTARTSTATE"))
            {
                return Observable.Box(new IsStartStateProxy(this));
            }
            if ((attribute == "ISENDSTATE"))
            {
                return Observable.Box(new IsEndStateProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("State does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IState, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IState modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isStartState property
        /// </summary>
        private sealed class IsStartStateProxy : ModelPropertyChange<IState, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsStartStateProxy(IState modelElement) : 
                    base(modelElement, "isStartState")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsStartState;
                }
                set
                {
                    this.ModelElement.IsStartState = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isEndState property
        /// </summary>
        private sealed class IsEndStateProxy : ModelPropertyChange<IState, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsEndStateProxy(IState modelElement) : 
                    base(modelElement, "isEndState")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsEndState;
                }
                set
                {
                    this.ModelElement.IsEndState = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("anytext:statemachine")]
    [XmlNamespacePrefixAttribute("statemachine")]
    public partial class Transition : ModelElement, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Input property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _input;
        
        private static Lazy<ITypedElement> _inputAttribute = new Lazy<ITypedElement>(RetrieveInputAttribute);
        
        private static Lazy<ITypedElement> _endStateReference = new Lazy<ITypedElement>(RetrieveEndStateReference);
        
        /// <summary>
        /// The backing field for the EndState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IState _endState;
        
        private static Lazy<ITypedElement> _startStateReference = new Lazy<ITypedElement>(RetrieveStartStateReference);
        
        /// <summary>
        /// The backing field for the StartState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IState _startState;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The input property
        /// </summary>
        [DisplayNameAttribute("input")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        public string Input
        {
            get
            {
                return this._input;
            }
            set
            {
                if ((this._input != value))
                {
                    string old = this._input;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Input", e, _inputAttribute);
                    this._input = value;
                    this.OnPropertyChanged("Input", e, _inputAttribute);
                }
            }
        }
        
        /// <summary>
        /// The endState property
        /// </summary>
        [DisplayNameAttribute("endState")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("endState")]
        [XmlAttributeAttribute(true)]
        public IState EndState
        {
            get
            {
                return this._endState;
            }
            set
            {
                if ((this._endState != value))
                {
                    IState old = this._endState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("EndState", e, _endStateReference);
                    this._endState = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEndState;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEndState;
                    }
                    this.OnPropertyChanged("EndState", e, _endStateReference);
                }
            }
        }
        
        /// <summary>
        /// The startState property
        /// </summary>
        [DisplayNameAttribute("startState")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("startState")]
        [XmlAttributeAttribute(true)]
        public IState StartState
        {
            get
            {
                return this._startState;
            }
            set
            {
                if ((this._startState != value))
                {
                    IState old = this._startState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("StartState", e, _startStateReference);
                    this._startState = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStartState;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStartState;
                    }
                    this.OnPropertyChanged("StartState", e, _startStateReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        private static ITypedElement RetrieveInputAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.Transition.ClassInstance)).Resolve("input")));
        }
        
        private static ITypedElement RetrieveEndStateReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.Transition.ClassInstance)).Resolve("endState")));
        }
        
        /// <summary>
        /// Handles the event that the EndState property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndState(object sender, EventArgs eventArgs)
        {
            if ((sender == this.EndState))
            {
                this.EndState = null;
            }
        }
        
        private static ITypedElement RetrieveStartStateReference()
        {
            return ((ITypedElement)(((ModelElement)(AnyText.Tests.Synchronization.Metamodel.StateMachine.Transition.ClassInstance)).Resolve("startState")));
        }
        
        /// <summary>
        /// Handles the event that the StartState property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartState(object sender, EventArgs eventArgs)
        {
            if ((sender == this.StartState))
            {
                this.StartState = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ENDSTATE"))
            {
                return this.EndState;
            }
            if ((reference == "STARTSTATE"))
            {
                return this.StartState;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INPUT"))
            {
                return this.Input;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENDSTATE"))
            {
                this.EndState = ((IState)(value));
                return;
            }
            if ((feature == "STARTSTATE"))
            {
                this.StartState = ((IState)(value));
                return;
            }
            if ((feature == "INPUT"))
            {
                this.Input = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INPUT"))
            {
                return new InputProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ENDSTATE"))
            {
                return new EndStateProxy(this);
            }
            if ((reference == "STARTSTATE"))
            {
                return new StartStateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException("Transition does not have an absolute URI and therefore cannot be resolved.");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EndState != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StartState != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EndState == null))
                {
                    IState endStateCasted = item.As<IState>();
                    if ((endStateCasted != null))
                    {
                        this._parent.EndState = endStateCasted;
                        return;
                    }
                }
                if ((this._parent.StartState == null))
                {
                    IState startStateCasted = item.As<IState>();
                    if ((startStateCasted != null))
                    {
                        this._parent.StartState = startStateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EndState = null;
                this._parent.StartState = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EndState))
                {
                    return true;
                }
                if ((item == this._parent.StartState))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EndState != null))
                {
                    array[arrayIndex] = this._parent.EndState;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StartState != null))
                {
                    array[arrayIndex] = this._parent.StartState;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EndState == item))
                {
                    this._parent.EndState = null;
                    return true;
                }
                if ((this._parent.StartState == item))
                {
                    this._parent.StartState = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EndState).Concat(this._parent.StartState).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the input property
        /// </summary>
        private sealed class InputProxy : ModelPropertyChange<ITransition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputProxy(ITransition modelElement) : 
                    base(modelElement, "input")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Input;
                }
                set
                {
                    this.ModelElement.Input = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the endState property
        /// </summary>
        private sealed class EndStateProxy : ModelPropertyChange<ITransition, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndStateProxy(ITransition modelElement) : 
                    base(modelElement, "endState")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.EndState;
                }
                set
                {
                    this.ModelElement.EndState = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startState property
        /// </summary>
        private sealed class StartStateProxy : ModelPropertyChange<ITransition, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartStateProxy(ITransition modelElement) : 
                    base(modelElement, "startState")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.StartState;
                }
                set
                {
                    this.ModelElement.StartState = value;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Transition
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Transition))]
    [XmlDefaultImplementationTypeAttribute(typeof(Transition))]
    public partial interface ITransition : IModelElement
    {
        
        /// <summary>
        /// The input property
        /// </summary>
        [DisplayNameAttribute("input")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        string Input
        {
            get;
            set;
        }
        
        /// <summary>
        /// The endState property
        /// </summary>
        [DisplayNameAttribute("endState")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("endState")]
        [XmlAttributeAttribute(true)]
        IState EndState
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startState property
        /// </summary>
        [DisplayNameAttribute("startState")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("startState")]
        [XmlAttributeAttribute(true)]
        IState StartState
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// The public interface for State
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(State))]
    [XmlDefaultImplementationTypeAttribute(typeof(State))]
    public partial interface IState : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isStartState property
        /// </summary>
        [DisplayNameAttribute("isStartState")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("isStartState")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsStartState
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isEndState property
        /// </summary>
        [DisplayNameAttribute("isEndState")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("isEndState")]
        [XmlAttributeAttribute(true)]
        Nullable<bool> IsEndState
        {
            get;
            set;
        }
    }
    
    /// <summary>
    /// The public interface for StateMachine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StateMachine))]
    [XmlDefaultImplementationTypeAttribute(typeof(StateMachine))]
    public partial interface IStateMachine : IModelElement
    {
        
        /// <summary>
        /// The id property
        /// </summary>
        [DisplayNameAttribute("id")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The transitions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transitions")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<ITransition> Transitions
        {
            get;
        }
        
        /// <summary>
        /// The states property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("states")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IState> States
        {
            get;
        }
    }
}
