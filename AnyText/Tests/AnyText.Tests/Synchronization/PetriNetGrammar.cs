//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AnyText.Tests.Synchronization.Metamodel.PetriNet;
using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace AnyText.Tests.Synchronization.Grammar
{
    
    
    /// <summary>
    /// Denotes a class capable to parse the language pn
    /// </summary>
    public partial class PetriNetGrammar : ReflectiveGrammar
    {
        
        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "pn";
            }
        }
        
        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<PetriNetRule>();
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;PetriNet&apos;
        /// </summary>
        public partial class PetriNetRule : ModelElementRule<PetriNet>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("petrinet"),
                        context.ResolveFormattedRule<PetriNetIdIDRule>(FormattingInstruction.SupressSpace),
                        context.ResolveKeyword(":", FormattingInstruction.Newline, FormattingInstruction.Indent),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("transitions:", FormattingInstruction.Newline, FormattingInstruction.Indent), RuleFormatter.OneOrMore(context.ResolveFormattedRule<PetriNetTransitionsTransitionRule>(), FormattingInstruction.Unindent)), FormattingInstruction.Unindent, FormattingInstruction.Newline, FormattingInstruction.Indent),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("places:", FormattingInstruction.Newline, FormattingInstruction.Indent), RuleFormatter.OneOrMore(context.ResolveFormattedRule<PetriNetPlacesPlaceRule>(), FormattingInstruction.Unindent)), FormattingInstruction.Unindent, FormattingInstruction.Newline, FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Place&apos;
        /// </summary>
        public partial class PlaceRule : ModelElementRule<Place>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("place"),
                        context.ResolveFormattedRule<PlaceNameIDRule>(),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("tokens"), context.ResolveFormattedRule<PlaceTokenCountINTRule>()), FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Transition&apos;
        /// </summary>
        public partial class TransitionRule : ModelElementRule<Transition>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("transition", FormattingInstruction.SupressSpace),
                        context.ResolveKeyword(":", FormattingInstruction.Newline, FormattingInstruction.Indent),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("input"), context.ResolveFormattedRule<TransitionInputIDRule>(FormattingInstruction.Newline))),
                        context.ResolveKeyword("from", FormattingInstruction.SupressSpace),
                        context.ResolveKeyword("["),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveFormattedRule<TransitionFromPlaceRule>(), RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveKeyword(","), context.ResolveFormattedRule<TransitionFromPlaceRule>())))),
                        context.ResolveKeyword("]", FormattingInstruction.Newline),
                        context.ResolveKeyword("to", FormattingInstruction.SupressSpace),
                        context.ResolveKeyword("["),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveFormattedRule<TransitionToPlaceRule>(), RuleFormatter.ZeroOrMore(new SequenceRule(context.ResolveKeyword(","), context.ResolveFormattedRule<TransitionToPlaceRule>())))),
                        context.ResolveKeyword("]", FormattingInstruction.Unindent, FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;ID&apos;
        /// </summary>
        public partial class IDRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z]\\w*", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;INT&apos;
        /// </summary>
        public partial class INTRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\d+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to places
        /// </summary>
        public partial class PetriNetPlacesPlaceRule : AddAssignRule<IPetriNet, IPlace>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "places";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<PlaceRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IPlace> GetCollection(IPetriNet semanticElement, ParseContext context)
            {
                return semanticElement.Places;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to transitions
        /// </summary>
        public partial class PetriNetTransitionsTransitionRule : AddAssignRule<IPetriNet, ITransition>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "transitions";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<TransitionRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<ITransition> GetCollection(IPetriNet semanticElement, ParseContext context)
            {
                return semanticElement.Transitions;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to id
        /// </summary>
        public partial class PetriNetIdIDRule : AssignRule<IPetriNet, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "id";
                }
            }
            
            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IPetriNet semanticElement, ParseContext context)
            {
                return semanticElement.Id;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IPetriNet semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Id = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to tokenCount
        /// </summary>
        public partial class PlaceTokenCountINTRule : AssignRule<IPlace, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "tokenCount";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<INTRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IPlace semanticElement, ParseContext context)
            {
                return semanticElement.TokenCount;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IPlace semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.TokenCount = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to name
        /// </summary>
        public partial class PlaceNameIDRule : AssignRule<IPlace, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "name";
                }
            }
            
            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IPlace semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IPlace semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to to
        /// </summary>
        public partial class TransitionToPlaceRule : AddAssignModelReferenceRule<ITransition, IPlace>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "to";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IPlace> GetCollection(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.To;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to from
        /// </summary>
        public partial class TransitionFromPlaceRule : AddAssignModelReferenceRule<ITransition, IPlace>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "from";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IPlace> GetCollection(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.From;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to input
        /// </summary>
        public partial class TransitionInputIDRule : AssignRule<ITransition, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "input";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.Input;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITransition semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Input = propertyValue;
            }
        }
    }
}
