//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AnyText.Tests.Synchronization.Metamodel.StateMachine;
using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Model;
using NMF.AnyText.PrettyPrinting;
using NMF.AnyText.Rules;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace AnyText.Tests.Synchronization.Grammar
{
    
    
    /// <summary>
    /// Denotes a class capable to parse the language sm
    /// </summary>
    public partial class StateMachineGrammar : ReflectiveGrammar
    {
        
        /// <summary>
        /// Gets the language id for this grammar
        /// </summary>
        public override string LanguageId
        {
            get
            {
                return "sm";
            }
        }
        
        /// <summary>
        /// Gets the root rule
        /// </summary>
        /// <returns>the root rule for this grammar</returns>
        /// <param name="context">a context to resolve the root rule</param>
        protected override Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<StateMachineRule>();
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;StateMachine&apos;
        /// </summary>
        public partial class StateMachineRule : ModelElementRule<StateMachine>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveKeyword("statemachine"),
                        context.ResolveFormattedRule<StateMachineIdIDRule>(FormattingInstruction.SupressSpace),
                        context.ResolveKeyword(":", FormattingInstruction.Newline, FormattingInstruction.Indent),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("states:", FormattingInstruction.Newline, FormattingInstruction.Indent), RuleFormatter.OneOrMore(context.ResolveFormattedRule<StateMachineStatesStateRule>(), FormattingInstruction.Unindent)), FormattingInstruction.Unindent, FormattingInstruction.Newline, FormattingInstruction.Indent),
                        RuleFormatter.ZeroOrOne(new SequenceRule(context.ResolveKeyword("transitions:", FormattingInstruction.Newline, FormattingInstruction.Indent), RuleFormatter.OneOrMore(context.ResolveFormattedRule<StateMachineTransitionsTransitionRule>(), FormattingInstruction.Unindent)), FormattingInstruction.Unindent, FormattingInstruction.Newline, FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;State&apos;
        /// </summary>
        public partial class StateRule : ModelElementRule<State>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<StateIsEndStateRule>()),
                        RuleFormatter.ZeroOrOne(context.ResolveFormattedRule<StateIsStartStateRule>()),
                        context.ResolveKeyword("state"),
                        context.ResolveFormattedRule<StateNameIdentifierRule>(FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Transition&apos;
        /// </summary>
        public partial class TransitionRule : ModelElementRule<Transition>
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Rules = new FormattedRule[] {
                        context.ResolveFormattedRule<TransitionStartStateStateRule>(),
                        context.ResolveKeyword("--("),
                        context.ResolveFormattedRule<TransitionInputIDRule>(),
                        context.ResolveKeyword(")-->"),
                        context.ResolveFormattedRule<TransitionEndStateStateRule>(FormattingInstruction.Newline)};
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;ID&apos;
        /// </summary>
        public partial class IDRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z]\\w*", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// A rule class representing the rule &apos;Identifier&apos;
        /// </summary>
        public partial class IdentifierRule : NMF.AnyText.Rules.RegexRule
        {
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^\\w+", RegexOptions.Compiled);
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to transitions
        /// </summary>
        public partial class StateMachineTransitionsTransitionRule : AddAssignRule<IStateMachine, ITransition>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "transitions";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<TransitionRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<ITransition> GetCollection(IStateMachine semanticElement, ParseContext context)
            {
                return semanticElement.Transitions;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to states
        /// </summary>
        public partial class StateMachineStatesStateRule : AddAssignRule<IStateMachine, IState>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "states";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<StateRule>();
            }
            
            /// <summary>
            /// Obtains the child collection
            /// </summary>
            /// <returns>a collection of values</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parse context in which the collection is obtained</param>
            public override ICollection<IState> GetCollection(IStateMachine semanticElement, ParseContext context)
            {
                return semanticElement.States;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to id
        /// </summary>
        public partial class StateMachineIdIDRule : AssignRule<IStateMachine, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "id";
                }
            }
            
            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IStateMachine semanticElement, ParseContext context)
            {
                return semanticElement.Id;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IStateMachine semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Id = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to name
        /// </summary>
        public partial class StateNameIdentifierRule : AssignRule<IState, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "name";
                }
            }
            
            /// <summary>
            /// Gets the first contained rule application that represents an identifier
            /// </summary>
            public override bool IsIdentifier
            {
                get
                {
                    return true;
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(IState semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IState semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to isStartState
        /// </summary>
        public partial class StateIsStartStateRule : ExistsAssignRule<IState>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "isStartState";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("start");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(IState semanticElement, ParseContext context)
            {
                return semanticElement.IsStartState.GetValueOrDefault();
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IState semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsStartState = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to isEndState
        /// </summary>
        public partial class StateIsEndStateRule : ExistsAssignRule<IState>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "isEndState";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveKeyword("end");
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override bool GetValue(IState semanticElement, ParseContext context)
            {
                return semanticElement.IsEndState.GetValueOrDefault();
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(IState semanticElement, bool propertyValue, ParseContext context)
            {
                semanticElement.IsEndState = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to endState
        /// </summary>
        public partial class TransitionEndStateStateRule : AssignModelReferenceRule<ITransition, IState>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "endState";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IState GetValue(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.EndState;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITransition semanticElement, IState propertyValue, ParseContext context)
            {
                semanticElement.EndState = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to input
        /// </summary>
        public partial class TransitionInputIDRule : AssignRule<ITransition, string>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "input";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IDRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override string GetValue(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.Input;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITransition semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Input = propertyValue;
            }
        }
        
        /// <summary>
        /// Rule to assign the contents of the inner rule to startState
        /// </summary>
        public partial class TransitionStartStateStateRule : AssignModelReferenceRule<ITransition, IState>
        {
            
            /// <summary>
            /// Gets the name of the feature that is assigned
            /// </summary>
            protected override string Feature
            {
                get
                {
                    return "startState";
                }
            }
            
            /// <summary>
            /// Initializes the current grammar rule
            /// </summary>
            /// <param name="context">the grammar context in which the rule is initialized</param>
            /// <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveFormattedRule<IdentifierRule>();
            }
            
            /// <summary>
            /// Gets the value of the given property
            /// </summary>
            /// <returns>the property value</returns>
            /// <param name="semanticElement">the context element</param>
            /// <param name="context">the parsing context</param>
            protected override IState GetValue(ITransition semanticElement, ParseContext context)
            {
                return semanticElement.StartState;
            }
            
            /// <summary>
            /// Assigns the value to the given semantic element
            /// </summary>
            /// <param name="semanticElement">the context element</param>
            /// <param name="propertyValue">the value to assign</param>
            /// <param name="context">the parsing context</param>
            protected override void SetValue(ITransition semanticElement, IState propertyValue, ParseContext context)
            {
                semanticElement.StartState = propertyValue;
            }
        }
    }
}
