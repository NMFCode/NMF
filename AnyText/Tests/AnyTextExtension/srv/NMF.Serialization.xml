<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.Serialization</name>
    </assembly>
    <members>
        <member name="T:NMF.Serialization.AlternativeNamespaceAttribute">
            <summary>
            Denotes that a class may also occur under a different namespace
            </summary>
        </member>
        <member name="P:NMF.Serialization.AlternativeNamespaceAttribute.AlternativeNamespace">
            <summary>
            Gets the alternative namespace URI
            </summary>
        </member>
        <member name="M:NMF.Serialization.AlternativeNamespaceAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="alternativeNamespace">the alternative namespace URI</param>
        </member>
        <member name="T:NMF.Serialization.ConverterExceptionEventArgs">
            <summary>
            Denotes event data if a converter caused an exception
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.TextValue">
            <summary>
            Gets or sets the text value
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.Value">
            <summary>
            Gets or sets the object value
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.Exception">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.Context">
            <summary>
            Gets the element for which the exception occured
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.Type">
            <summary>
            Gets the type that was attempted to (de-)serialize
            </summary>
        </member>
        <member name="P:NMF.Serialization.ConverterExceptionEventArgs.Handled">
            <summary>
            Gets or sets a flag indicating that the exception has been handled
            </summary>
        </member>
        <member name="M:NMF.Serialization.ConverterExceptionEventArgs.#ctor(System.String,System.Object,System.Exception,NMF.Serialization.XmlSerializationContext,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Creates a new instance
            </summary>
            <param name="textValue">the text value</param>
            <param name="value">the object value</param>
            <param name="exception">the exception</param>
            <param name="context">the element for which the exception occured</param>
            <param name="type">the type that was attempted to (de-)serialize</param>
        </member>
        <member name="T:NMF.Serialization.Serializer">
            <summary>
            Denotes the base class for a serializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor">
            <summary>
            Creates a new XmlSerializer with default settings and no preloaded types
            </summary>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer with default settings
            </summary>
            <param name="additionalTypes">Set of types to preload into the serializer</param>
            <remarks>Types will be loaded with default settings</remarks>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmlSerializer with the specified settings
            </summary>
            <param name="settings">Serializer-settings for the serializer. Can be null or Nothing in Visual Basic. In this case, the default settings will be used.</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer with the specified settings and the given preloaded types
            </summary>
            <param name="additionalTypes">Set of types to load into the serializer</param>
            <param name="settings">The settings to use for the serializer</param>
            <remarks>The types will be loaded with the specified settings</remarks>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(NMF.Serialization.Serializer)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(NMF.Serialization.Serializer,NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">New settings</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.#ctor(NMF.Serialization.Serializer,NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">New settings</param>
            <param name="additionalTypes">Set of types to load into the serializer</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.SelectRoot(System.Object,System.Boolean)">
            <summary>
            Gets the serialization root element
            </summary>
            <param name="graph">The base element that should be serialized</param>
            <param name="fragment">A value indicating whether only a fragment should be written</param>
            <returns>The root element for serialization</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.CreateSerializationContext(System.Object)">
            <summary>
            Creates a serialization context for the given root element
            </summary>
            <param name="root">The root element of the serialization</param>
            <returns>A serialization context</returns>
        </member>
        <member name="P:NMF.Serialization.Serializer.Settings">
            <summary>
            The settings to be used in the serializer
            </summary>
        </member>
        <member name="P:NMF.Serialization.Serializer.KnownTypes">
            <summary>
            The set of types that are known to the serializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.Serializer.RegisterNamespace(NMF.Serialization.ITypeSerializationInfo,System.String)">
            <summary>
            Registers the given type serialization info for a namespace lookup
            </summary>
            <param name="info">the type serialization info</param>
            <param name="ns">the namespace for which the type should be registered</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.GetTypeInfo(System.String,System.String)">
            <summary>
            Gets the type serialization info corresponding to the provided pair of namespace and local name
            </summary>
            <param name="ns">the namespace of the type</param>
            <param name="localName">the local name of the type</param>
            <returns>the type serialization info</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.CreateTypeSerializationInfoFor(System.Type)">
            <summary>
            Creates the type serialization information for the given type
            </summary>
            <param name="type">the system type for which the serialization information should be created</param>
            <returns>a type serialization info</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.InitializeTypeSerializationInfo(System.Type,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Initializes the given type serialization information for the given type
            </summary>
            <param name="type">the system type</param>
            <param name="serializationInfo">the serialization information object</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.ConvertString(System.String,NMF.Serialization.IPropertySerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Converts the given string to a value
            </summary>
            <param name="text">the string that needs to be parsed</param>
            <param name="info">the property for which the string is parsed</param>
            <param name="context">the context in which the string is parsed</param>
            <returns>the parsed object</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.GetAttributeValue(System.Object,NMF.Serialization.ITypeSerializationInfo,System.Boolean,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Gets the serialization of the given attribute value
            </summary>
            <param name="value">The value of the attribute</param>
            <param name="info">The serialization information of the type</param>
            <param name="isCollection">True, if the value is added to a collection, otherwise false</param>
            <param name="context">The serialization context</param>
            <returns>The serialized value of the attribute</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.OnConverterException(NMF.Serialization.ConverterExceptionEventArgs)">
            <summary>
            Gets called when the <see cref="E:NMF.Serialization.Serializer.ConverterException"/> event should be raised
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.HandleUnknownType(NMF.Serialization.IPropertySerializationInfo,System.String,System.String)">
            <summary>
            Handles the case that the type of the element is not known
            </summary>
            <param name="property">The property for which the type was requested</param>
            <param name="ns">The namespace at the current position</param>
            <param name="localName">The local name of the type</param>
            <returns>The type serialization information received for this type or null, if no type could be resolved</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.OnUnknownElement(NMF.Serialization.UnknownElementEventArgs)">
            <summary>
            Fires the UnknownElement event
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.OnUnknownAttribute(NMF.Serialization.UnknownAttributeEventArgs)">
            <summary>
            Fires the UnknownAttribute event
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.OnUnknownType(NMF.Serialization.UnknownTypeEventArgs)">
            <summary>
            Handles the UnknownType event
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="E:NMF.Serialization.Serializer.UnknownElement">
            <summary>
            Gets raised when the serializer finds an element that is not known
            </summary>
        </member>
        <member name="E:NMF.Serialization.Serializer.UnknownAttribute">
            <summary>
            Get raised when the serializer finds an attribute that is not known
            </summary>
        </member>
        <member name="E:NMF.Serialization.Serializer.UnknownType">
            <summary>
            Gets raised when the serializer finds a type that is not known
            </summary>
        </member>
        <member name="E:NMF.Serialization.Serializer.ConverterException">
            <summary>
            Gets raised when a converter used by the serializer ran into an exception
            </summary>
        </member>
        <member name="M:NMF.Serialization.Serializer.GetSerializationInfoForInstance(System.Object,System.Boolean)">
            <summary>
            Gets the serialization information for the provided instance
            </summary>
            <param name="instance">The instance</param>
            <param name="createIfNecessary">If true, the serialization information is added if missing</param>
            <returns>The type serialization information</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.GetSerializationInfo(System.Type,System.Boolean)">
            <summary>
            Gets the serialization information for the given type
            </summary>
            <param name="type">The type</param>
            <param name="createIfNecessary">If true, the serialization information is added if missing</param>
            <returns>The type serialization information</returns>
        </member>
        <member name="M:NMF.Serialization.Serializer.CreateAddToPropertyDelay(NMF.Serialization.IPropertySerializationInfo,System.Object,System.String,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Adds a delay to add an item to a property collection
            </summary>
            <param name="property">the property for which the item is added</param>
            <param name="obj">the target object</param>
            <param name="text">the original text in the JSON document</param>
            <param name="context">the context in which the deserialization is done</param>
        </member>
        <member name="M:NMF.Serialization.Serializer.CreateSetPropertyDelay(NMF.Serialization.IPropertySerializationInfo,System.Object,System.String,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Adds a delay to set a property directly from a resolved text
            </summary>
            <param name="property">the property that should be set, </param>
            <param name="obj">the target object</param>
            <param name="text">the original text in the JSON document</param>
            <param name="context">the context in which the deserialization is done</param>
        </member>
        <member name="T:NMF.Serialization.SerializerTypeCollection">
            <summary>
            Defines a collection of types known to a XmlSerializer
            </summary>
            <remarks>This collection is only a wrapper for an internal collection of type serialization information</remarks>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.#ctor(NMF.Serialization.Serializer)">
            <summary>
            Creates a new typecollection for the given XmlSerializer
            </summary>
            <param name="serializer">The XmlSerializer that will work with this set of types</param>
        </member>
        <member name="P:NMF.Serialization.SerializerTypeCollection.Serializer">
            <summary>
            The corresponding XmlSerializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.Add(System.Type)">
            <summary>
            Imports the given type to the XmlSerializer
            </summary>
            <param name="type">The type to import</param>
            <remarks>Note that importing a type will also import all the property types of this type, if they aren't already imported</remarks>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.Clear">
            <summary>
            Clears the set of types known to the XmlSerializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.Contains(System.Type)">
            <summary>
            Gets a value that indicates whether the given type is already known to the XmlSerializer
            </summary>
            <param name="item">The type to look for</param>
            <returns>True, if the type is already known to the XmlSerializer, otherwise False</returns>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.CopyTo(System.Type[],System.Int32)">
            <summary>
            Copies the known types into an array
            </summary>
            <param name="array">The array to copy to</param>
            <param name="arrayIndex">The destination start index</param>
        </member>
        <member name="P:NMF.Serialization.SerializerTypeCollection.Count">
            <summary>
            Gives the amount of types known to the XmlSerializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.Remove(System.Type)">
            <summary>
            Removes the given type from the set
            </summary>
            <param name="item">The type to remove</param>
            <returns>A value indicating whether removal was successful</returns>
        </member>
        <member name="M:NMF.Serialization.SerializerTypeCollection.GetEnumerator">
            <summary>
            Gets an enumerator to go through the collection
            </summary>
            <returns>An IEnumerator object</returns>
        </member>
        <member name="T:NMF.Serialization.TypeConversion">
            <summary>
            Denotes a helper class for type conversion
            </summary>
        </member>
        <member name="M:NMF.Serialization.TypeConversion.GetTypeConverter(System.Type)">
            <summary>
            Gets a type converter for the given type
            </summary>
            <param name="type">The type for which a converter is needed</param>
            <returns>The type converter</returns>
        </member>
        <member name="M:NMF.Serialization.TypeConversion.ParseJson(System.String)">
            <summary>
            Parses the given string as JSON
            </summary>
            <param name="json">A JSON string</param>
            <returns>If the provided string is a valid JSON object, then the result is a dictionary of the properties and provided values (which might be JSON strings themselves). Otherwise, null is returned</returns>
        </member>
        <member name="T:NMF.Serialization.UnknownAttributeEventArgs">
            <summary>
            Denotes event arguments for an unknown attribute
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownAttributeEventArgs.Context">
            <summary>
            The context object
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownAttributeEventArgs.Namespace">
            <summary>
            The namespace of the attribute
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownAttributeEventArgs.Name">
            <summary>
            The local name of the attribute
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownAttributeEventArgs.Value">
            <summary>
            The attribute value
            </summary>
        </member>
        <member name="M:NMF.Serialization.UnknownAttributeEventArgs.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="context">The context object</param>
            <param name="ns">The namespace of the attribute</param>
            <param name="name">The local name of the attribute</param>
            <param name="value">The attribute value</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either is null</exception>
        </member>
        <member name="T:NMF.Serialization.UnknownElementEventArgs">
            <summary>
            Denotes event arguments for an unknown element
            </summary>
        </member>
        <member name="M:NMF.Serialization.UnknownElementEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="context">The context object</param>
            <param name="propertyXml">The outer XML of the unknown element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either is null</exception>
        </member>
        <member name="P:NMF.Serialization.UnknownElementEventArgs.Context">
            <summary>
            The context object
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownElementEventArgs.PropertyXml">
            <summary>
            The outer XML of the unknown element
            </summary>
        </member>
        <member name="T:NMF.Serialization.UnknownTypeEventArgs">
            <summary>
            Event args for the event that the serializer encounters an unknown type
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownTypeEventArgs.Property">
            <summary>
            The property for which the type is needed
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownTypeEventArgs.Namespace">
            <summary>
            The namespace of the element
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownTypeEventArgs.LocalName">
            <summary>
            The local name of the element
            </summary>
        </member>
        <member name="P:NMF.Serialization.UnknownTypeEventArgs.Type">
            <summary>
            Gets or sets the resolved type
            </summary>
        </member>
        <member name="M:NMF.Serialization.UnknownTypeEventArgs.#ctor(NMF.Serialization.IPropertySerializationInfo,System.String,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="property">The property for which the type is needed</param>
            <param name="ns">The namespace of the element</param>
            <param name="localName">The local name of the element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if local name is null</exception>
        </member>
        <member name="T:NMF.Serialization.Xmi.XmiArtificialIdAttribute">
            <summary>
            Denotes an artificially introduced XMI Id attribute
            </summary>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.Instance">
            <summary>
            Denotes the default instance
            </summary>
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.ShallCreateInstance">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.ElementName">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.Namespace">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.NamespacePrefix">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.ShouldSerializeValue(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.GetValue(System.Object,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.SetValue(System.Object,System.Object,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.IsIdentifier">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.IdentificationMode">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.IsStringConvertible">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.ConvertFromString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.ConvertToString(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.AddToCollection(System.Object,System.Object,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiArtificialIdAttribute.Initialize(System.Object,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.Opposite">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.PropertyMinType">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.RequiresInitialization">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiArtificialIdAttribute.DefaultValue">
            <inheritdoc />
        </member>
        <member name="T:NMF.Serialization.Xmi.XmiSerializationContext">
            <summary>
            Denotes a deserialization context for XMI
            </summary>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializationContext.#ctor(System.Object)">
            <summary>
            Creates a new instance
            </summary>
            <param name="root">the root object of the deserialization</param>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializationContext.GetId(System.Object)">
            <summary>
            Gets the identifier of the given object
            </summary>
            <param name="input">the object</param>
            <returns>the objects identifier</returns>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializationContext.SetId(System.Object,System.String)">
            <summary>
            Sets the identifier of the given object
            </summary>
            <param name="input">the object</param>
            <param name="id">the identifier</param>
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiSerializationContext.IDs">
            <summary>
            Gets the stored identfiers
            </summary>
        </member>
        <member name="T:NMF.Serialization.Xmi.XmiSerializer">
            <summary>
            Denotes a serializer implementation that serializes objects to XMI
            </summary>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor">
            <summary>
            Creates a new XmiSerializer with default settings and no preloaded types
            </summary>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmiSerializer with default settings
            </summary>
            <param name="additionalTypes">Set of types to preload into the serializer</param>
            <remarks>Types will be loaded with default settings</remarks>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmiSerializer with the specified settings
            </summary>
            <param name="settings">Serializer-settings for the serializer. Can be null or Nothing in Visual Basic. In this case, the default settings will be used.</param>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmiSerializer with the specified settings and the given preloaded types
            </summary>
            <param name="additionalTypes">Set of types to load into the serializer</param>
            <param name="settings">The settings to use for the serializer</param>
            <remarks>The types will be loaded with the specified settings</remarks>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor(NMF.Serialization.XmlSerializer)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.#ctor(NMF.Serialization.XmlSerializer,NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">New settings</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="F:NMF.Serialization.Xmi.XmiSerializer.XMLSchemaInstanceNamespace">
            <summary>
            Denotes the namespace for XML schema instance
            </summary>
        </member>
        <member name="F:NMF.Serialization.Xmi.XmiSerializer.XMLSchemaInstancePrefix">
            <summary>
            Denotes the standard prefix to use for the XML schema instance namespace
            </summary>
        </member>
        <member name="F:NMF.Serialization.Xmi.XmiSerializer.XMIPrefix">
            <summary>
            Denotes the standard prefix for the XMI namespace
            </summary>
        </member>
        <member name="F:NMF.Serialization.Xmi.XmiSerializer.XMINamespace">
            <summary>
            Denotes the XMI namespace
            </summary>
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiSerializer.RootPrefix">
            <summary>
            Gets or sets the root prefix
            </summary>
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.GoToPropertyContent(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.CreateSerializationContext(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.GetElementTypeInfo(System.Xml.XmlReader,NMF.Serialization.IPropertySerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteBeginElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteEndElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteBeginRootElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteEndRootElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteIdentifiedObject(System.Xml.XmlWriter,System.Object,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.WriteElementProperties(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.InitializeElementProperties(System.Xml.XmlReader,System.Object@,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.OverrideIdentifiedObject(System.Object,System.Xml.XmlReader,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.HandleUnknownAttribute(System.Xml.XmlReader,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.Xmi.XmiSerializer.InitializeTypeSerializationInfo(System.Type,NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.Xmi.XmiSerializer.IdAttribute">
            <summary>
            Gets the attribute used for identifiers
            </summary>
        </member>
        <member name="T:NMF.Serialization.IPropertySerializationInfo">
            <summary>
            Denotes the serialization information for a property
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.ElementName">
            <summary>
            The element name that should be serialized
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.Namespace">
            <summary>
            The namespace to which the element should be serialized or null
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.NamespacePrefix">
            <summary>
            The namespace prefix that should be used for serialization or null
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.RequiresInitialization">
            <summary>
            True, if the property requires initialization, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.Initialize(System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initializes the property for the given element
            </summary>
            <param name="input">The object instance for which the property should be initialized</param>
            <param name="context">The deserialization context</param>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.AddToCollection(System.Object,System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Adds the given object to the collection
            </summary>
            <param name="input">The context object</param>
            <param name="item">The item that should be added</param>
            <param name="context">The deserialization context</param>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.ShallCreateInstance">
            <summary>
            Determines whether the instance should be created explicitly
            </summary>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.ShouldSerializeValue(System.Object,System.Object)">
            <summary>
            Determines whether the provided value should be serialized
            </summary>
            <param name="obj">The context object</param>
            <param name="value">The value in question</param>
            <returns>True, if the value should be serialized, otherwise False</returns>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.IsReadOnly">
            <summary>
            True, if the property is read-only, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.DefaultValue">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.GetValue(System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Gets the value of this property for the given input object
            </summary>
            <param name="input">The context object</param>
            <param name="context">The serialization context</param>
            <returns></returns>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.SetValue(System.Object,System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Sets the value for the property
            </summary>
            <param name="input">The context object</param>
            <param name="value">The value of the property</param>
            <param name="context">The deserialization context</param>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.IsIdentifier">
            <summary>
            True, if the property is an identifier, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.IdentificationMode">
            <summary>
            Gets the identification mode of the property
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.PropertyType">
            <summary>
            Gets the property type
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.PropertyMinType">
            <summary>
            Gets the minimum type system type of the property
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.Opposite">
            <summary>
            Gets the opposite property or null
            </summary>
        </member>
        <member name="P:NMF.Serialization.IPropertySerializationInfo.IsStringConvertible">
            <summary>
            True, if the value of this property allows roundtrip-serialization to string
            </summary>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.ConvertFromString(System.String)">
            <summary>
            Deserializes the provided text
            </summary>
            <param name="text">the text</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:NMF.Serialization.IPropertySerializationInfo.ConvertToString(System.Object)">
            <summary>
            Converts the provided object to a string
            </summary>
            <param name="input">The object to convert</param>
            <returns>A string representation</returns>
        </member>
        <member name="T:NMF.Serialization.ITypeSerializationInfo">
            <summary>
            Denotes abstract information necessary for serialization
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.ElementName">
            <summary>
            Gets the element name of the type
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.Namespace">
            <summary>
            Gets the namespace of the type or null
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.NamespacePrefix">
            <summary>
            Gets the namespace prefix of the type or null
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.MappedType">
            <summary>
            Gets the system type this type serialization is mapped to
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.DefaultProperty">
            <summary>
            Gets the default property of this type
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.AttributeProperties">
            <summary>
            Gets a collection of properties serialized as attributes
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.ElementProperties">
            <summary>
            Gets a collection of properties serialized as elements
            </summary>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.IsAssignableFrom(NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Determines whether an instance of the given more concrete type can be assigned to this type
            </summary>
            <param name="specializedType">the more concrete type</param>
            <returns>True, if the type is assignable, otherwise False</returns>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.IsInstanceOf(System.Object)">
            <summary>
            Determines whether the given object is an instance of this type
            </summary>
            <param name="instance">the instance</param>
            <returns>True, if the object is an instance of the serialization type, otherwise False</returns>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.IsExplicitTypeInformationRequired(NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Determines whether the serializer should render explicit type information
            </summary>
            <param name="itemType">The type of the item</param>
            <returns>True, if explicit type information should be rendered, otherwise false</returns>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.ConstructorProperties">
            <summary>
            Gets the properties required for constructor calls
            </summary>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.CreateObject(System.Object[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="args">The constructor parameters</param>
            <returns></returns>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.IsIdentified">
            <summary>
            True, if instances of this type are identified
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.IdentifierProperty">
            <summary>
            Gets the property used as identifier
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.IsCollection">
            <summary>
            True, if this type is a collection
            </summary>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.CollectionItemType">
            <summary>
            Gets the element type of a collection
            </summary>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.AddToCollection(System.Object,System.Object)">
            <summary>
            Adds the given item to the collection
            </summary>
            <param name="collection">the collection</param>
            <param name="item">the item to add</param>
        </member>
        <member name="P:NMF.Serialization.ITypeSerializationInfo.IsStringConvertible">
            <summary>
            True, if the items can be converted to string
            </summary>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.ConvertFromString(System.String)">
            <summary>
            Deserializes the given text into an object
            </summary>
            <param name="text">the textual representation</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:NMF.Serialization.ITypeSerializationInfo.ConvertToString(System.Object)">
            <summary>
            Serializes the given object into a string
            </summary>
            <param name="input">the object</param>
            <returns>a textual representation</returns>
        </member>
        <member name="T:NMF.Serialization.XmlAttributeAttribute">
            <summary>
            Attribute to decide whether the specified property should be serialized as attribute.
            </summary>
            <remarks>A property can only be serialized as attribute, if the property Type supports conversion to and from string</remarks>
        </member>
        <member name="M:NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a XmlAttributeAttribute
            </summary>
            <param name="serializeAsAttribute">Value that indicates if the element should be serialized as Xml-attribute</param>
        </member>
        <member name="P:NMF.Serialization.XmlAttributeAttribute.SerializeAsAttribute">
            <summary>
            Value that indicates whether the element should be serialized as Xml-Attribute
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlCaseType">
            <summary>
            Enumeration of the different case types for serialization
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.AsInput">
            <summary>
            No changes in characters cases
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.CamelCase">
            <summary>
            The first character will be converted to lower case, the remaining characters stay on their case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.PascalCase">
            <summary>
            The first character will be converted to upper case, the remaining characters stay on their case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.Upper">
            <summary>
            All characters are converted to upper case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.Lower">
            <summary>
            All characters are converted to lower case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.UpperInvariant">
            <summary>
            All characters are converted to their culture invariant upper case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.LowerInvariant">
            <summary>
            All characters are converted to their culture invariant lower case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.CamelCaseInvariant">
            <summary>
            The first character will be converted to culture invariant lower case, other characters stay on their case
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlCaseType.PascalCaseInvariant">
            <summary>
            The first character will be converted to culture invariant upper case, other characters stay on their case
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlConstructorAttribute">
            <summary>
            Defines an attribute to set the serializer to use a different constructor than the default constructor.
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlConstructorAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new XmlConstructorAttribute to get the serializer to use a different constructor than the default constructor
            </summary>
            <param name="parameterCount">The amount of parameters to use</param>
        </member>
        <member name="P:NMF.Serialization.XmlConstructorAttribute.ParameterCount">
            <summary>
            Gets the amount of constructor parameters
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlConstructorParameterAttribute">
            <summary>
            Defines an attribute to mark a property being used for the constructor of an object
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlConstructorParameterAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new XmlConstructorParameterAttribute to mark a property being used for a constructor
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:NMF.Serialization.XmlConstructorParameterAttribute.Index">
            <summary>
            Gets the index, the property is used in the constructor
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlDefaultImplementationTypeAttribute">
            <summary>
            Denotes the default implementation for an interface
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlDefaultImplementationTypeAttribute.DefaultImplementationType">
            <summary>
            Gets the default implementation type
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlDefaultImplementationTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="implementationType">the default implementation type</param>
        </member>
        <member name="T:NMF.Serialization.XmlDefaultPropertyAttribute">
            <summary>
            Marks a property as default property
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlDefaultPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="isDefault">True, if the annotated property is the default property, otherwise False</param>
        </member>
        <member name="P:NMF.Serialization.XmlDefaultPropertyAttribute.IsDefault">
            <summary>
            Gets a value indicating whether this is the default property or not
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlElementNameAttribute">
            <summary>
            Attribute to provide the serialization name for the specified element. This persistance name can be changed by the serialization setting (various case types)
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlElementNameAttribute.#ctor(System.String)">
            <summary>
            Creates a XmlElementNameAttribute
            </summary>
            <param name="elementName">The name to use in serialization for the specified element</param>
        </member>
        <member name="P:NMF.Serialization.XmlElementNameAttribute.ElementName">
            <summary>
            The name for serialization of the specified element
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlIdentificationMode">
            <summary>
            Defines states how to handle with identification of instances
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlIdentificationMode.AsNeeded">
            <summary>
            Let the Serializer decide
            </summary>
            <remarks>This will lead the serializer to write the full object on first occurence and uses of references afterwards</remarks>
        </member>
        <member name="F:NMF.Serialization.XmlIdentificationMode.Identifier">
            <summary>
            Use the identifier only
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlIdentificationMode.FullObject">
            <summary>
            Write the full object
            </summary>
            <remarks>If this attribute appears somewhere else in the resulting Xml-file, be sure that every property before this one is marked to use identifiers!</remarks>
        </member>
        <member name="T:NMF.Serialization.XmlIdentificationModeAttribute">
            <summary>
            Can set the identification mode of a property
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlIdentificationModeAttribute.#ctor(NMF.Serialization.XmlIdentificationMode)">
            <summary>
            Creates a new XmlIdentificationModeAttribute with the given identification mode
            </summary>
            <param name="mode">The mode for identification</param>
        </member>
        <member name="P:NMF.Serialization.XmlIdentificationModeAttribute.Mode">
            <summary>
            The mode for identification
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlIdentifierAttribute">
            <summary>
            Specifies which property is used as identifier
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlIdentifierAttribute.#ctor(System.String)">
            <summary>
            Creates a new XmlIdentifierAttribute with the given identifier
            </summary>
            <param name="identifier">The property to identify instances for this class</param>
        </member>
        <member name="P:NMF.Serialization.XmlIdentifierAttribute.Identifier">
            <summary>
            Gets the identifier to identify the instances of this class
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlIgnorePropertyAttribute">
            <summary>
            Attribute to hide a property from serialization
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlIgnorePropertyAttribute.#ctor(System.String)">
            <summary>
            Creates a XmlIgnorePropertyAttribute
            </summary>
            <param name="property">Name of the property that should be hidden for serialization</param>
        </member>
        <member name="P:NMF.Serialization.XmlIgnorePropertyAttribute.Property">
            <summary>
            Name of the property that should be hidden for serialization
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlKnownTypeAttribute">
            <summary>
            Instructs the serializer to explicitly read the provided type
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlKnownTypeAttribute.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlKnownTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="type">the known type</param>
        </member>
        <member name="T:NMF.Serialization.XmlNamespaceAttribute">
            <summary>
            Attribute to provide the Xml-namespace to use in Xml-serialization for the specified element
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlNamespaceAttribute.#ctor(System.String)">
            <summary>
            Creates a XmlNamespaceAttribute
            </summary>
            <param name="nameSpace">Xml-namespace to use in serialization</param>
        </member>
        <member name="P:NMF.Serialization.XmlNamespaceAttribute.Namespace">
            <summary>
            The Xml-namespace to use in serialization in Xml
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlNamespacePrefixAttribute">
            <summary>
            Attribute to provide the Xml-namespace prefix to use in Xml-serialization for the specified element
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlNamespacePrefixAttribute.#ctor(System.String)">
            <summary>
            Creates a XmlNamespacePrefixAttribute
            </summary>
            <param name="nameSpacePrefix">Xml-namespace prefix to use in serialization</param>
        </member>
        <member name="P:NMF.Serialization.XmlNamespacePrefixAttribute.NamespacePrefix">
            <summary>
            The Xml-namespace prefix to use in serialization in Xml
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlOppositeAttribute">
            <summary>
            Specifies that the given different property is an opposite
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlOppositeAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="oppositeProperty">the name of the opposite property</param>
        </member>
        <member name="M:NMF.Serialization.XmlOppositeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="oppositeProperty">the name of the opposite property</param>
            <param name="oppositeType">the opposite type</param>
        </member>
        <member name="P:NMF.Serialization.XmlOppositeAttribute.OppositeType">
            <summary>
            Gets the opposite type
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlOppositeAttribute.OppositeProperty">
            <summary>
            Gets the name of the opposite property
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlSerializationContext">
            <summary>
            Denotes the context of a XML deserialization
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.#ctor(System.Object)">
            <summary>
            Creates a new context for a deserialization
            </summary>
            <param name="root">The root object</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.Cleanup">
            <summary>
            Ends the deserialization
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.RegisterId(System.String,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Registers an object for the given id
            </summary>
            <param name="id">The id that is registered</param>
            <param name="value">The object that is registered</param>
            <param name="type">The type for which the value is registered</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.ContainsId(System.String,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Determines whether the context knows an element of the given id
            </summary>
            <param name="id">The id of the element</param>
            <param name="type">The expected type of the element</param>
            <returns>True, if the id can be found, otherwise False</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.OnNameClash(System.String,NMF.Serialization.ITypeSerializationInfo,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>
            Gets called when there is a name clash
            </summary>
            <param name="id">The id that was requested</param>
            <param name="type">The type</param>
            <param name="candidates">The candidates</param>
            <param name="source">The source</param>
            <returns>The object that should be chosen in the case of a clash</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.Resolve(System.String,NMF.Serialization.ITypeSerializationInfo,System.Type,System.Boolean,System.Object)">
            <summary>
            Resolves the given id
            </summary>
            <param name="id">The id that is resolved</param>
            <param name="type">The expected type</param>
            <param name="minType">The minimum type that is required</param>
            <param name="failOnConflict">If false, the method will return null in case of a conflict, otherwise conflict resolution is applied</param>
            <param name="source"></param>
            <returns>The resolved object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.IsBlocked(System.Object,NMF.Serialization.IPropertySerializationInfo)">
            <summary>
            Determines whether the given property is blocked for the given instance
            </summary>
            <param name="instance">the instance</param>
            <param name="property">the property</param>
            <returns>True, if the property is blocked, which means that it should be ignored for the deserialization</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationContext.BlockProperty(System.Object,NMF.Serialization.IPropertySerializationInfo)">
            <summary>
            Blocks the given property for the given instance
            </summary>
            <param name="value">the instance</param>
            <param name="property">the property</param>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationContext.Root">
            <summary>
            Gets the deserialization root
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlResolveNameClashException">
            <summary>
            Denotes the exception that an identifier has clashed
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlResolveNameClashException.#ctor(System.String,NMF.Serialization.ITypeSerializationInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new instance
            </summary>
            <param name="id">the id</param>
            <param name="type">theexpected type of elements</param>
            <param name="candidates">The objects with the given id</param>
        </member>
        <member name="P:NMF.Serialization.XmlResolveNameClashException.Candidates">
            <summary>
            The objects with the given id
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlResolveNameClashException.Id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlResolveNameClashException.Type">
            <summary>
            The expected type of elements
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlSerializationSettings">
            <summary>
            Class to represent the serialization settings for a XmlSerializer
            </summary>
        </member>
        <member name="F:NMF.Serialization.XmlSerializationSettings.isFixed">
            <summary>
            Denotes whether the settings object is fixed and therefore any property change should be disallowed
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.Default">
            <summary>
            Default settings used for the XmlSerializer
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationSettings.Fix">
            <summary>
            Create a fixed version of these settings
            </summary>
            <returns>A new instance of serialization settings where changes are not allowed any more</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationSettings.CreateXmlWriterSettings">
            <summary>
            Creates the settings to write XML documents
            </summary>
            <returns>An instance of XmlWriterSettings</returns>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.Encoding">
            <summary>
            Gets or sets the encoding of the Xml file
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.DefaultNamespace">
            <summary>
            Gets or sets the default location
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.ResolveMissingAttributesAsElements">
            <summary>
            True, if the serializer should check element properties if an attribute cannot be resolved
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.Indent">
            <summary>
            Indicates whether the XmlSerializer should indent new Xml elements for more readable formatting
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.CaseSensitive">
            <summary>
            Indicates whether the deserialization is case sensitive
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.SerializeDefaultValues">
            <summary>
            Indicates whether properties should be serialized even if the values match the defaults
            </summary>
        </member>
        <member name="P:NMF.Serialization.XmlSerializationSettings.NameCase">
            <summary>
            The strategy for converting character cases for serialization
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationSettings.GetPersistanceString(System.String)">
            <summary>
            Gets the persistance form of the given identifier
            </summary>
            <param name="input">The original identifier</param>
            <returns>The identifier that should be persisted</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializationSettings.TreatAsEqual(System.String,System.String)">
            <summary>
            Determines whether the two strings should be treated as equal given the current settings
            </summary>
            <param name="arg1">the first string</param>
            <param name="arg2">the second string</param>
            <returns>true, if they should be treated as equal, otherwise false</returns>
        </member>
        <member name="T:NMF.Serialization.XmlSerializer">
            <summary>
            Class to serialize objects in a Xml-format.
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor">
            <summary>
            Creates a new XmlSerializer with default settings and no preloaded types
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer with default settings
            </summary>
            <param name="additionalTypes">Set of types to preload into the serializer</param>
            <remarks>Types will be loaded with default settings</remarks>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmlSerializer with the specified settings
            </summary>
            <param name="settings">Serializer-settings for the serializer. Can be null or Nothing in Visual Basic. In this case, the default settings will be used.</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer with the specified settings and the given preloaded types
            </summary>
            <param name="additionalTypes">Set of types to load into the serializer</param>
            <param name="settings">The settings to use for the serializer</param>
            <remarks>The types will be loaded with the specified settings</remarks>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(NMF.Serialization.XmlSerializer)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(NMF.Serialization.XmlSerializer,NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">New settings</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.#ctor(NMF.Serialization.XmlSerializer,NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new XmlSerializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">New settings</param>
            <param name="additionalTypes">Set of types to load into the serializer</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.String,System.Boolean)">
            <summary>
            Serializes the given object
            </summary>
            <param name="path">The path for the resulting Xml-file</param>
            <param name="obj">The object to be serialized</param>
            <param name="fragment">A value that indicates whether the serializer should write a document definition</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.IO.Stream,System.Boolean)">
            <summary>
            Serializes the given object
            </summary>
            <param name="stream">The stream for the resulting Xml-code</param>
            <param name="source">The object to be serialized</param>
            <param name="fragment">A value that indicates whether the serializer should write a document definition</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the given object
            </summary>
            <param name="writer">The TextWriter to write the Xml-code on</param>
            <param name="source">The object to be serialized</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serializes the given object
            </summary>
            <param name="writer">The XmlWriter to write the Xml-code on</param>
            <param name="source">The object to be serialized</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.IO.TextWriter,System.Boolean)">
            <summary>
            Serializes the given object
            </summary>
            <param name="target">The TextWriter to write the Xml-code on</param>
            <param name="fragment">A value that indicates whether the serializer should write a document definition</param>
            <param name="source">The object to be serialized</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serializes the given object
            </summary>
            <param name="target">The XmlWriter to write the Xml-code on</param>
            <param name="fragment">A value that indicates whether the serializer should write a document definition</param>
            <param name="source">The object to be serialized</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.XmlWriter,NMF.Serialization.IPropertySerializationInfo,System.Boolean,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Serializes the given object
            </summary>
            <param name="writer">The XmlWriter to write the Xml-code on</param>
            <param name="writeInstance">A value that indicates whether the serializer should write the element definition</param>
            <param name="obj">The object to be serialized</param>
            <param name="property">The property for which the object is serialized</param>
            <param name="context">The serialization context</param>
            <param name="identificationMode">A value indicating whether it is allowed to the serializer to use identifier</param>
            <remarks>If a converter is provided that is able to convert the object to string and convert the string back to this object, just the string-conversion is printed out</remarks>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteBeginRootElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Writes the root element to the given writer
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="root">The root element</param>
            <param name="info">The serialization information of the objects type</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteBeginElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Writes the beginning of an element
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteConstructorProperties(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the properties necessary for the constrctor call of this element
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteAttributeProperties(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the attribute properties of the given object
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteAttributeValue(System.Xml.XmlWriter,System.Object,System.Object,NMF.Serialization.IPropertySerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the attribute value to the given writer
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="context">The serialization context</param>
            <param name="value">The value of the attribute</param>
            <param name="property">The property serialization information</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteElementProperties(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the element properties of the given object to the provided writer
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteCollectionMembers(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the elements of the given collection to the provided writer
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteEndElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Completes the current element for the provided object
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteEndRootElement(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo)">
            <summary>
            Completes the root element
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="root">The element</param>
            <param name="info">The serialization information of the objects type</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.WriteIdentifiedObject(System.Xml.XmlWriter,System.Object,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Writes the provided identified object
            </summary>
            <param name="writer">The xml writer to write to</param>
            <param name="obj">The element</param>
            <param name="info">The serialization information of the objects type</param>
            <param name="context">The serialization context</param>
            <param name="identificationMode">The identification mode for the current object</param>
            <returns>true, if the object could be written as identified object, otherwise false</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Deserialize(System.String)">
            <summary>
            Deserializes an Xml-representation of an object back to the corresponding object
            </summary>
            <param name="path">The path to the Xml file containg the Xml code</param>
            <returns>The corresponding object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an Xml-representation of an object back to the corresponding object
            </summary>
            <param name="stream">The stream containg the Xml code</param>
            <returns>The corresponding object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes an Xml-representation of an object back to the corresponding object
            </summary>
            <param name="reader">A TextReader containg the Xml code</param>
            <returns>The corresponding object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes an Xml-representation of an object back to the corresponding object
            </summary>
            <param name="reader">A XmlReader containing the Xml code</param>
            <returns>The corresponding object</returns>
            <remarks>The function will deserialize the object at the XmlReaders current position</remarks>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.CreateRoot(System.Xml.XmlReader)">
            <summary>
            Creates the root element
            </summary>
            <param name="reader">The xml reader</param>
            <returns>The root element</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.GetElementTypeInfo(System.Xml.XmlReader,NMF.Serialization.IPropertySerializationInfo)">
            <summary>
            Gets the type information for the current property
            </summary>
            <param name="reader">The xml reader</param>
            <param name="property">The current property</param>
            <returns>The type serialization info that should be used in the remainder</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.GetRootElementTypeInfo(System.Xml.XmlReader)">
            <summary>
            Gets the type information for the root element
            </summary>
            <param name="reader">The xml reader</param>
            <returns>The type serialization info for the root element</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.CreateObject(System.Xml.XmlReader,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Creates the object for the current position
            </summary>
            <param name="reader">the xml reader</param>
            <param name="tsi">the type serialization information</param>
            <param name="context">the serialization context</param>
            <returns>the deserialized object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.InitializeProperty(System.Xml.XmlReader,NMF.Serialization.IPropertySerializationInfo,System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initialized the property from the reader
            </summary>
            <param name="reader">the xml reader</param>
            <param name="property">the property</param>
            <param name="obj">the object</param>
            <param name="context">the serialization context</param>
            <returns>true, if the initialization was successful, otherwise false</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.GoToPropertyContent(System.Xml.XmlReader)">
            <summary>
            Moves the reader to the content of the property
            </summary>
            <param name="reader">the Xml reader</param>
            <returns>true, if the reader could be moved sucessfully, otherwise false</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.InitializePropertyFromText(NMF.Serialization.IPropertySerializationInfo,System.Object,System.String,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initializes the given property from the provided text
            </summary>
            <param name="property">The property</param>
            <param name="obj">The object</param>
            <param name="text">The input text</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.Initialize(System.Xml.XmlReader,System.Object,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initializes the given object with the xml code at the current position of the XmlReader
            </summary>
            <param name="reader">The XmlReader with the Xml code</param>
            <param name="obj">The object to initialize</param>
            <param name="context">The serialization context</param>
            <returns>The initialized object</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.OverrideIdentifiedObject(System.Object,System.Xml.XmlReader,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Determines whether the already identified element should be overridden
            </summary>
            <param name="obj">The object that would be overridden</param>
            <param name="reader">The current reader position</param>
            <param name="context">The serialization context</param>
            <returns>true, if the element shall be overridden, otherwise false</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.InitializeElementProperties(System.Xml.XmlReader,System.Object@,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initializes the element properties from the xml reader position
            </summary>
            <param name="reader">the xml reader</param>
            <param name="obj">the element</param>
            <param name="info">the type serialization information</param>
            <param name="context">the serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.HandleUnknownAttribute(System.Xml.XmlReader,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Handles an attribute that was not known to the serializer
            </summary>
            <param name="reader">The current reader position</param>
            <param name="obj">The object that is currently deserialized</param>
            <param name="info">The type serialization information of the object</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.HandleUnknownElement(System.Xml.XmlReader,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Handles an element that was not known to the serializer
            </summary>
            <param name="reader">The current reader position</param>
            <param name="obj">The object that is currently deserialized</param>
            <param name="info">The type serialization information of the object</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.IsPropertyElement(System.Xml.XmlReader,NMF.Serialization.IPropertySerializationInfo)">
            <summary>
            Determines whether the element at the current reader position refers to the given property
            </summary>
            <param name="reader">The reader position</param>
            <param name="property">The property that should be tested</param>
            <returns>true, if the element is about the property, otherwise false</returns>
        </member>
        <member name="M:NMF.Serialization.XmlSerializer.InitializeAttributeProperties(System.Xml.XmlReader,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <summary>
            Initializes the attribute properties from the current reader position
            </summary>
            <param name="reader">the xml reader</param>
            <param name="obj">the object</param>
            <param name="info">the type serialization information</param>
            <param name="context">the serialization context</param>
        </member>
        <member name="T:NMF.Serialization.XmlStringTypeConverter">
            <summary>
            Defines a string converter to prevent non xml valid documents
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlStringTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlStringTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlStringTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlStringTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Serialization.XmlTypeConverterAttribute">
            <summary>
            Attribute to override a TypeConverter for Xml serialization
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlTypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Creates a new XmlTypeConverterAttribute using the provided type
            </summary>
            <param name="type">The type to use as TypeConverter</param>
        </member>
        <member name="P:NMF.Serialization.XmlTypeConverterAttribute.Type">
            <summary>
            The converter type to use in serialization
            </summary>
        </member>
        <member name="T:NMF.Serialization.XmlTypeSerializationInfo">
            <summary>
            Denotes the default type serialization info read through reflection
            </summary>
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.#ctor(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="type">The type that is read</param>
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.DeclaredAttributeProperties">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.DeclaredElementProperties">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.BaseTypes">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.Type">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.ConstructorProperties">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.ConstructorParameterCount">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.HasConstructorParameters">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.Constructor">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.ElementName">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.CollectionType">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.IsCollection">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.IsStaticCollection">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.Namespace">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.NamespacePrefix">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.IsIdentified">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.IdentifierProperty">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.AddToCollection(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.AttributeProperties">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.ElementProperties">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.CollectionItemType">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.CollectionItemRawType">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.IsStringConvertible">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.ConvertFromString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.ConvertToString(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.DefaultProperty">
            <inheritdoc />
        </member>
        <member name="P:NMF.Serialization.XmlTypeSerializationInfo.MappedType">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.CreateCollectionAddMethod">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.CreateObject(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.IsAssignableFrom(NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.IsInstanceOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Serialization.XmlTypeSerializationInfo.IsExplicitTypeInformationRequired(NMF.Serialization.ITypeSerializationInfo)">
            <inheritdoc />
        </member>
    </members>
</doc>
