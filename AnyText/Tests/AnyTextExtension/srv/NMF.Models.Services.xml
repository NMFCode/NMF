<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.Models.Services</name>
    </assembly>
    <members>
        <member name="T:NMF.Models.Services.IModelServer">
            <summary>
            Denotes an abstract interface for a model server
            </summary>
        </member>
        <member name="M:NMF.Models.Services.IModelServer.GetOrCreateSession(System.Uri,System.String)">
            <summary>
            Gets or creates a session for the given model uri
            </summary>
            <param name="uri">The path to the model on the file system</param>
            <param name="path">The path to the model on the file system</param>
            <returns>The session created for this model element</returns>
        </member>
        <member name="M:NMF.Models.Services.IModelServer.GetOrCreateSession(System.Uri)">
            <summary>
            Gets or creates a session for the given model uri
            </summary>
            <param name="uri">The path to the model on the file system</param>
            <returns>The session created for this model element</returns>
        </member>
        <member name="P:NMF.Models.Services.IModelServer.SelectedElements">
            <summary>
            Gets the selected elements from this server
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelServer.ActiveSession">
            <summary>
            Gets the active session, i.e., the session that caused the current selection
            </summary>
        </member>
        <member name="E:NMF.Models.Services.IModelServer.SelectedElementChanged">
            <summary>
            Gets raised when the selected element changed
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelServer.Repository">
            <summary>
            Gets the model repository for this server
            </summary>
        </member>
        <member name="T:NMF.Models.Services.IModelSession">
            <summary>
            Denotes a working session for a model of a given type
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.Root">
            <summary>
            The root element
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.Model">
            <summary>
            Gets the model represented by this session
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.CanRedo">
            <summary>
            True, if a redo operation is currently available, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.CanUndo">
            <summary>
            True, if an undo operation is currently available, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.IsDirty">
            <summary>
            True, if there are unsaved changes for this session, otherwise False
            </summary>
        </member>
        <member name="E:NMF.Models.Services.IModelSession.IsDirtyChanged">
            <summary>
            Raised when the propery IsDirty changes
            </summary>
        </member>
        <member name="E:NMF.Models.Services.IModelSession.PerformedOperation">
            <summary>
            Raised when an operation was performed
            </summary>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.PerformOperation(System.Action)">
            <summary>
            Performs the given operation on the model stored in this session
            </summary>
            <param name="operation">The operation that should be performed</param>
            <returns>true, if the operation had an effect that can be undone, otherwise false</returns>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.PerformOperationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Performs the given operation on the model stored in this session
            </summary>
            <param name="operation">The operation that should be performed</param>
            <returns>true, if the operation had an effect that can be undone, otherwise false</returns>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.Redo">
            <summary>
            Performs a redo operation
            </summary>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.Save">
            <summary>
            Saves the current state of the model
            </summary>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.Save(System.Uri)">
            <summary>
            Saves the current state of the model
            </summary>
            <param name="target">the target where to save the model</param>
        </member>
        <member name="M:NMF.Models.Services.IModelSession.Undo">
            <summary>
            Performs an undo operation
            </summary>
        </member>
        <member name="P:NMF.Models.Services.IModelSession.SelectedElements">
            <summary>
            Gets or sets the selected element in this session
            </summary>
        </member>
        <member name="E:NMF.Models.Services.IModelSession.SelectedElementChanged">
            <summary>
            Raised when the selected element changed
            </summary>
        </member>
        <member name="T:NMF.Models.Services.JsonModelSerializer">
            <summary>
            Denotes a serializer that serializes models to JSON
            </summary>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.#ctor">
            <summary>
            Creates a new model serializer
            </summary>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new model serializer
            </summary>
            <param name="settings">The serialization settings</param>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.#ctor(NMF.Serialization.Serializer)">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.#ctor(NMF.Serialization.Serializer,NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">The serialization settings</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">The serialization settings</param>
            <param name="knownTypes">A collection of known types</param>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.CreateSerializationContext(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.DeserializeFragment(NMF.Serialization.Json.Utf8JsonStreamReader@,NMF.Models.Repository.IModelRepository,NMF.Models.Model)">
            <summary>
            Deserializes the contents from the given reader
            </summary>
            <param name="reader">the JSON reader to read from</param>
            <param name="repository">the repository in the scope of which the fragment is resolved</param>
            <param name="resolveModel">the model in which relative Uris are resolved</param>
            <returns>the object contained in the JSON format</returns>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.SelectRoot(System.Object,System.Boolean)">
            <summary>
            Gets the serialization root element
            </summary>
            <param name="graph">The base element that should be serialized</param>
            <param name="fragment">A value indicating whether only a fragment should be written</param>
            <returns>The root element for serialization</returns>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.GetAttributeValue(System.Object,NMF.Serialization.ITypeSerializationInfo,System.Boolean,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.CreateModelForRoot(System.Object)">
            <summary>
            Creates the model for the given root element
            </summary>
            <param name="root">The root element</param>
            <returns>The model instance</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if root is not a model element</exception>
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.Deserialize(System.IO.Stream,System.Uri,NMF.Models.Repository.IModelRepository,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.Serialize(NMF.Models.Model,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.JsonModelSerializer.SerializeFragment(NMF.Models.ModelElement,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Services.ModelServer">
            <summary>
            Denotes the standard implementation of a model server
            </summary>
        </member>
        <member name="E:NMF.Models.Services.ModelServer.SelectedElementChanged">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelServer.GetOrCreateSession(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelServer.GetOrCreateSession(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Services.ModelServer.Repository">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Services.ModelServer.SelectedElements">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelServer.Select(System.Collections.Generic.IEnumerable{NMF.Models.IModelElement},NMF.Models.Services.IModelSession)">
            <summary>
            Selects the given elements
            </summary>
            <param name="elements">The elements</param>
            <param name="session">The session that provides the elements</param>
        </member>
        <member name="P:NMF.Models.Services.ModelServer.ActiveSession">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Services.ModelServerSession">
            <summary>
            Denotes a model session at a model server
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelServerSession.#ctor(NMF.Models.Services.ModelServer,NMF.Models.IModelElement,NMF.Models.Model,System.String)">
            <summary>
            Creates a new model session for the given server
            </summary>
            <param name="server">The model server</param>
            <param name="element">The element for which the session is opened</param>
            <param name="path">The file system path</param>
            <param name="model">The encapsulated model</param>
        </member>
        <member name="M:NMF.Models.Services.ModelServerSession.OnModelChanged">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Services.ModelServerSession.Path">
            <summary>
            Gets the path of the model
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelServerSession.Save(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelServerSession.OnElementSelect(System.Collections.Generic.IEnumerable{NMF.Models.IModelElement})">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Services.ModelSession">
            <summary>
            Denotes the standard implementation for a model session
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.#ctor(NMF.Models.IModelElement,NMF.Models.Model)">
            <summary>
            Creates a new model session for the given server
            </summary>
            <param name="element">The element for which the session is opened</param>
            <param name="model">The encapsulated model</param>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.Undo">
            <summary>
            Performs an undo operation
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.Redo">
            <summary>
            Performs a redo operation
            </summary>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.CanUndo">
            <summary>
            True, if an undo operation is currently available, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.CanRedo">
            <summary>
            True, if a redo operation is currently available, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.PerformOperation(System.Action)">
            <summary>
            Performs the given operation on the model stored in this session
            </summary>
            <param name="operation">The operation that should be performed</param>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.OnModelChanged">
            <summary>
            Gets called when a change of the model neeeds to be propagated
            </summary>
        </member>
        <member name="M:NMF.Models.Services.ModelSession.Save(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelSession.Save">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelSession.PerformOperationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Performs the given operation on the model stored in this session
            </summary>
            <param name="operation">The operation that should be performed</param>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.Root">
            <summary>
            The root element of this session
            </summary>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.IsDirty">
            <summary>
            True, if there are unsaved changes for this session, otherwise False
            </summary>
        </member>
        <member name="E:NMF.Models.Services.ModelSession.PerformedOperation">
            <summary>
            Raised when an operation was performed
            </summary>
        </member>
        <member name="E:NMF.Models.Services.ModelSession.IsDirtyChanged">
            <summary>
            Raised when the propery IsDirty changes
            </summary>
        </member>
        <member name="E:NMF.Models.Services.ModelSession.RootElementChanged">
            <summary>
            Raised when the root element changes
            </summary>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.SelectedElements">
            <summary>
            Gets or sets the selected element in this session
            </summary>
        </member>
        <member name="P:NMF.Models.Services.ModelSession.Model">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Services.ModelSession.OnElementSelect(System.Collections.Generic.IEnumerable{NMF.Models.IModelElement})">
            <summary>
            Gets called when an element is selected
            </summary>
            <param name="selected">the selected elements</param>
        </member>
        <member name="E:NMF.Models.Services.ModelSession.SelectedElementChanged">
            <summary>
            Raised when the selected element changed
            </summary>
        </member>
        <member name="T:NMF.Models.Services.TransactionUndoStack">
            <summary>
            Denotes an undo/redo stack based on model changes
            </summary>
        </member>
        <member name="M:NMF.Models.Services.TransactionUndoStack.Notify(NMF.Models.Changes.ModelChangeSet)">
            <summary>
            Notifies that the given change was performed
            </summary>
            <param name="changeSet"></param>
        </member>
        <member name="P:NMF.Models.Services.TransactionUndoStack.CanUndo">
            <summary>
            True, if an undo operation can be performed, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Models.Services.TransactionUndoStack.CanRedo">
            <summary>
            True, if a redo operation can be performed, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Models.Services.TransactionUndoStack.Undo">
            <summary>
            Performs an undo operation
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if no undo operation can be performed</exception>
        </member>
        <member name="M:NMF.Models.Services.TransactionUndoStack.Redo">
            <summary>
            Performs a redo-operation
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if no redo operation can be performed</exception>
        </member>
    </members>
</doc>
