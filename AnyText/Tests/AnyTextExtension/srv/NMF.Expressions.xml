<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.Expressions</name>
    </assembly>
    <members>
        <member name="T:NMF.Expressions.ApplyParametersVisitor">
            <summary>
            Denotes a vistor implementation that applies values to an expression tree
            </summary>
        </member>
        <member name="M:NMF.Expressions.ApplyParametersVisitor.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance
            </summary>
            <param name="parameterMappings">A dictionary with mappings for parameters based on parameter names</param>
        </member>
        <member name="M:NMF.Expressions.ApplyParametersVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.BinaryHeap`1">
            <summary>
            A binary heap, useful for sorting data and priority queues.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="P:NMF.Expressions.BinaryHeap`1.Count">
            <summary>
            Gets the number of values in the heap. 
            </summary>
        </member>
        <member name="P:NMF.Expressions.BinaryHeap`1.Capacity">
            <summary>
            Gets or sets the capacity of the heap.
            </summary>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.#ctor">
            <summary>
            Creates a new binary heap
            </summary>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="comparer">The comparer used to compare the items</param>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Peek">
            <summary>
            Gets the first value in the heap without removing it.
            </summary>
            <returns>The lowest value of type TValue.</returns>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Clear">
            <summary>
            Removes all items from the heap.
            </summary>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Add(`0)">
            <summary>
            Adds a key and value to the heap.
            </summary>
            <param name="item">The item to add to the heap.</param>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Remove">
            <summary>
            Removes and returns the first item in the heap.
            </summary>
            <returns>The next value in the heap.</returns>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Copy">
            <summary>
            Creates a new instance of an identical binary heap.
            </summary>
            <returns>A BinaryHeap.</returns>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.GetEnumerator">
            <summary>
            Gets an enumerator for the binary heap.
            </summary>
            <returns>An IEnumerator of type T.</returns>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Contains(`0)">
            <summary>
            Checks to see if the binary heap contains the specified item.
            </summary>
            <param name="item">The item to search the binary heap for.</param>
            <returns>A boolean, true if binary heap contains item.</returns>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the binary heap to an array at the specified index.
            </summary>
            <param name="array">One dimensional array that is the destination of the copied elements.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="P:NMF.Expressions.BinaryHeap`1.IsReadOnly">
            <summary>
            Gets whether or not the binary heap is readonly.
            </summary>
        </member>
        <member name="M:NMF.Expressions.BinaryHeap`1.Remove(`0)">
            <summary>
            Removes an item from the binary heap. This utilizes the type T's Comparer and will not remove duplicates.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Boolean true if the item was removed.</returns>
        </member>
        <member name="T:NMF.Expressions.Cell`1">
            <summary>
            Denotes an atomic mutable value
            </summary>
            <typeparam name="T">The type of the cell</typeparam>
        </member>
        <member name="P:NMF.Expressions.Cell`1.CanBeConstant">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.IsConstant">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.IsParameterFree">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.ValueObject">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.Value">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Cell`1.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Gets called when the value of this cell is about to change
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="M:NMF.Expressions.Cell`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Gets called when the value of this cell changed
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="P:NMF.Expressions.Cell`1.IsReversable">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.Successors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Cell`1.ExecutionMetaData">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.Cell`1.ValueChanged">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.Cell`1.ValueChanging">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Cell`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Cell`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Cell`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Cell`1.Reduce">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ConstantAttribute">
            <summary>
            Defines that a method result is constant for a given parameter
            </summary>
        </member>
        <member name="T:NMF.Expressions.ICollectionChangedNotificationResult">
            <summary>
            Denotes a notification result for a collection
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.IsReset">
            <summary>
            True, if the collection was reset, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.AddedItems">
            <summary>
            Gets a list of added items
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems">
            <summary>
            Gets a list of removed items
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.MovedItems">
            <summary>
            Gets a list of moved items
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex">
            <summary>
            Gets the first index of old items or -1
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex">
            <summary>
            Gets the first index of new items or -1
            </summary>
        </member>
        <member name="T:NMF.Expressions.ICollectionChangedNotificationResult`1">
            <summary>
            Denotes a notification result for a collection
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems">
            <summary>
            Gets a list of added items
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems">
            <summary>
            Gets a list of moved items
            </summary>
        </member>
        <member name="P:NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems">
            <summary>
            Gets a list of removed items
            </summary>
        </member>
        <member name="T:NMF.Expressions.CollectionChangedNotificationResult`1">
            <summary>
            Denotes the standard implementation of a collection result
            </summary>
            <typeparam name="T">the type of elements</typeparam>
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.Changed">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.Source">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.IsReset">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.Create(NMF.Expressions.INotifiable,System.Boolean)">
            <summary>
            Creates a new instance of a collection notification
            </summary>
            <param name="source">the source DDG node</param>
            <param name="isReset">True, if this is a reset, otherwise False</param>
            <returns>A collection notification instance</returns>
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset">
            <summary>
            Turns this notification into a reset
            </summary>
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.Transfer(NMF.Expressions.ICollectionChangedNotificationResult,NMF.Expressions.INotifiable)">
            <summary>
            Transfers the provided notification to a new change source
            </summary>
            <param name="oldResult">The old notification</param>
            <param name="newSource">The new change source</param>
            <returns>An updated notification</returns>
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex(System.Int32)">
            <summary>
            Updates the old start index
            </summary>
            <param name="startIndex">the new start index of old items</param>
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex(System.Int32)">
            <summary>
            Updates the new start index
            </summary>
            <param name="startIndex">the new start index of new items</param>
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.CollectionChangeListener`1">
            <summary>
            Denotes a class that listenes for collection changes
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="P:NMF.Expressions.CollectionChangeListener`1.Node">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.CollectionChangeListener`1.#ctor(NMF.Expressions.INotifiable)">
            <summary>
            Create a new instance
            </summary>
            <param name="node">the target node</param>
        </member>
        <member name="M:NMF.Expressions.CollectionChangeListener`1.Subscribe(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Subscribe to changes of the collection
            </summary>
            <param name="collection">The target collection</param>
        </member>
        <member name="M:NMF.Expressions.CollectionChangeListener`1.Unsubscribe">
            <summary>
            Unsubscribe changes
            </summary>
        </member>
        <member name="M:NMF.Expressions.CollectionChangeListener`1.AggregateChanges">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ExecutionEngine">
            <summary>
            Deotes an execution engine for incremental computation
            </summary>
        </member>
        <member name="P:NMF.Expressions.ExecutionEngine.TransactionActive">
            <summary>
            Indicates whether the system is in a transaction
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.BeginTransaction">
            <summary>
            Starts a new change transaction
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.CommitTransaction">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.RollbackTransaction">
            <summary>
            Rolls back the transaction
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.InvalidateNode(NMF.Expressions.INotifiable)">
            <summary>
            Invalidates the given DDG node
            </summary>
            <param name="node">The DDG node</param>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.ExecuteSingle(NMF.Expressions.INotifiable)">
            <summary>
            Propagates the changes of a single DDG node
            </summary>
            <param name="source">The changed DDG node</param>
        </member>
        <member name="M:NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})">
            <summary>
            Propagates changes of the given DDG nodes
            </summary>
            <param name="nodes">The changed DDG nodes</param>
        </member>
        <member name="P:NMF.Expressions.ExecutionEngine.Current">
            <summary>
            Gets or sets the current execution engine
            </summary>
        </member>
        <member name="T:NMF.Expressions.ExecutionMetaData">
            <summary>
            Denotes metadata for change propagation
            </summary>
        </member>
        <member name="F:NMF.Expressions.ExecutionMetaData.Results">
            <summary>
            Gets the last results
            </summary>
        </member>
        <member name="T:NMF.Expressions.IChangeListener">
            <summary>
            Denotes an interface for objects watching for changes
            </summary>
        </member>
        <member name="P:NMF.Expressions.IChangeListener.Node">
            <summary>
            Gets the target dependency graph node
            </summary>
        </member>
        <member name="M:NMF.Expressions.IChangeListener.AggregateChanges">
            <summary>
            Aggregates the changes
            </summary>
            <returns>A notification result aggregating the changes since the last propagation</returns>
        </member>
        <member name="T:NMF.Expressions.INotificationResult">
            <summary>
            Denotes the interface for a propagation result
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotificationResult.Source">
            <summary>
            The source of this result
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotificationResult.Changed">
            <summary>
            True, if there were changes, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)">
            <summary>
            Increases the reference counter
            </summary>
            <param name="references">The number of references</param>
        </member>
        <member name="M:NMF.Expressions.INotificationResult.FreeReference">
            <summary>
            Frees a reference
            </summary>
        </member>
        <member name="T:NMF.Expressions.NotificationResultCollection">
            <summary>
            Denotes a collection of results
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotificationResultCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotificationResultCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotificationResultCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.Add(NMF.Expressions.INotificationResult)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.UnsafeAdd(NMF.Expressions.INotificationResult)">
            <summary>
            Add an item not threadsafe
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.Contains(NMF.Expressions.INotificationResult)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.Remove(NMF.Expressions.INotificationResult)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.IndexOf(NMF.Expressions.INotificationResult)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.Insert(System.Int32,NMF.Expressions.INotificationResult)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotificationResultCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ParallelExecutionEngine">
            <summary>
            Denotes an incrementalization system where changes are propagated in parallel
            </summary>
        </member>
        <member name="M:NMF.Expressions.ParallelExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.PropertyChangeListener">
            <summary>
            Denotes a listener for property changes
            </summary>
        </member>
        <member name="P:NMF.Expressions.PropertyChangeListener.Node">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.PropertyChangeListener.#ctor(NMF.Expressions.INotifiable)">
            <summary>
            Creates a new instance
            </summary>
            <param name="node">The target node</param>
        </member>
        <member name="M:NMF.Expressions.PropertyChangeListener.Subscribe(System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Subscribe to the property change events
            </summary>
            <param name="element">The element</param>
            <param name="propertyName">The property name</param>
        </member>
        <member name="M:NMF.Expressions.PropertyChangeListener.Unsubscribe">
            <summary>
            Removes a subscription
            </summary>
        </member>
        <member name="M:NMF.Expressions.PropertyChangeListener.AggregateChanges">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.SequentialExecutionEngine">
            <summary>
            Denotes a standard sequential execution engine
            </summary>
        </member>
        <member name="M:NMF.Expressions.SequentialExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.UnchangedNotificationResult">
            <summary>
            Denotes a notification result that represents the fact that the value did not change
            </summary>
        </member>
        <member name="P:NMF.Expressions.UnchangedNotificationResult.Instance">
            <summary>
            Gets the default instance
            </summary>
        </member>
        <member name="P:NMF.Expressions.UnchangedNotificationResult.Changed">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.UnchangedNotificationResult.Source">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.UnchangedNotificationResult.IncreaseReferences(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.UnchangedNotificationResult.FreeReference">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.IValueChangedNotificationResult">
            <summary>
            Denotes the notification that a value was changed
            </summary>
        </member>
        <member name="P:NMF.Expressions.IValueChangedNotificationResult.OldValue">
            <summary>
            Gets the old value
            </summary>
        </member>
        <member name="P:NMF.Expressions.IValueChangedNotificationResult.NewValue">
            <summary>
            Gets the new value
            </summary>
        </member>
        <member name="T:NMF.Expressions.IValueChangedNotificationResult`1">
            <summary>
            Denotes the notification that a value was changed
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:NMF.Expressions.IValueChangedNotificationResult`1.OldValue">
            <summary>
            Gets the old value
            </summary>
        </member>
        <member name="P:NMF.Expressions.IValueChangedNotificationResult`1.NewValue">
            <summary>
            Gets the new value
            </summary>
        </member>
        <member name="T:NMF.Expressions.ValueChangedNotificationResult`1">
            <summary>
            Denotes the default implementation of a value change result
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:NMF.Expressions.ValueChangedNotificationResult`1.Changed">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.ValueChangedNotificationResult`1.Source">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.ValueChangedNotificationResult`1.OldValue">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.ValueChangedNotificationResult`1.NewValue">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ValueChangedNotificationResult`1.#ctor(NMF.Expressions.INotifiable,`0,`0)">
            <summary>
            Creates a new notification result
            </summary>
            <param name="source">The source DDG node</param>
            <param name="oldValue">The old value</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="T:NMF.Expressions.ExpressionAnalyzer">
            <summary>
            Denotes an analyzer to analyzer whether a lambda expression is stateless
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExpressionAnalyzer.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExpressionAnalyzer.IsStateless(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Determines whether the given lambda expression is stateless
            </summary>
            <param name="lambdaExpression">The lambda expression</param>
            <returns>True, if stateless, otherwise False</returns>
        </member>
        <member name="M:NMF.Expressions.ExpressionAnalyzer.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionAnalyzer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ExpressionCompileRewriter">
            <summary>
            Represents a visitor that rewrites a lamba expression for compilation by interpreting ExpressionCompileRewriter attributes
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExpressionCompileRewriter.Compile``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Optimizes the given expression and compiles it
            </summary>
            <typeparam name="T">The type of the lambda expression</typeparam>
            <param name="lambda">The lambda expression to optimize and compile</param>
            <returns>The compiled and optimized expression</returns>
        </member>
        <member name="M:NMF.Expressions.ExpressionCompileRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ExpressionCompileRewriterAttribute">
            <summary>
            Denotes an attribute to specify a compile rewriter method
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExpressionCompileRewriterAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="methodName">The name of the proxy method</param>
        </member>
        <member name="M:NMF.Expressions.ExpressionCompileRewriterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="hostType">The hosting type of the proxy method</param>
            <param name="methodName">The name of the proxy method</param>
        </member>
        <member name="T:NMF.Expressions.ProxyMethodAttribute">
            <summary>
            Denotes an attribute that denotes the definition of a proxy method
            </summary>
        </member>
        <member name="M:NMF.Expressions.ProxyMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="proxyType">The type of the proxy</param>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:NMF.Expressions.ProxyMethodAttribute.InitializeProxyMethod(System.Reflection.MethodInfo,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Finds the proxy method for the given source method
            </summary>
            <param name="sourceMethod">The method for which a proxy is needed</param>
            <param name="parameterTypes">The desired parameter types</param>
            <param name="proxyMethod">The proxy method</param>
            <returns>True, if a suitable method was found, otherwise False</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if parameterTypes is null</exception>
        </member>
        <member name="P:NMF.Expressions.ProxyMethodAttribute.ProxyType">
            <summary>
            The type in which the proxy method is defined
            </summary>
        </member>
        <member name="P:NMF.Expressions.ProxyMethodAttribute.MethodName">
            <summary>
            The name of the method used as a proxy
            </summary>
        </member>
        <member name="T:NMF.Expressions.SetExpressionRewriter">
            <summary>
            An expression visitor that turns getter functions into setters
            </summary>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.CreateSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create a setter for the given getter expression
            </summary>
            <typeparam name="TValue">The return type of the getter expression</typeparam>
            <param name="getter">The getter expression</param>
            <returns>An expression that corresponds to the setter of the given getter</returns>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Create a setter for the given getter expression
            </summary>
            <typeparam name="T">The type of the first parameter</typeparam>
            <typeparam name="TValue">The return type of the getter expression</typeparam>
            <param name="getter">The getter expression</param>
            <returns>An expression that corresponds to the setter of the given getter</returns>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.CreateSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Create a setter for the given getter expression
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="TValue">The return type of the getter expression</typeparam>
            <param name="getter">The getter expression</param>
            <returns>An expression that corresponds to the setter of the given getter</returns>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.CreateSetter(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Create a setter for the given getter expression
            </summary>
            <param name="getter">The getter expression</param>
            <returns>An expression that corresponds to the setter of the given getter</returns>
        </member>
        <member name="P:NMF.Expressions.SetExpressionRewriter.Value">
            <summary>
            Gets the value of the rewrite
            </summary>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Create a new instance
            </summary>
            <param name="value">The expression that is going to be inverted</param>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.SetExpressionRewriterAttribute">
            <summary>
            Denotes an attribute to specify a proxy method to rewrite a method to a lens
            </summary>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriterAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="methodName">The name of the rewriter method</param>
        </member>
        <member name="M:NMF.Expressions.SetExpressionRewriterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="proxyType">The type that hosts the rewriter method</param>
            <param name="methodName">The name of the rewriter method</param>
        </member>
        <member name="T:NMF.Expressions.ExpressionVisitorBase">
            <summary>
            Denotes a base class for customized expression visitors
            </summary>
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitTry(System.Linq.Expressions.TryExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ExpressionVisitorBase.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ConstantValue`1">
            <summary>
            Denotes a constant value
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="M:NMF.Expressions.ConstantValue`1.#ctor(`0)">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="P:NMF.Expressions.ConstantValue`1.Dependencies">
            <inheritdoc/>
        </member>
        <member name="E:NMF.Expressions.ConstantValue`1.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.ConstantValue`1.Successors">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.ConstantValue`1.ExecutionMetaData">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.ConstantValue`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.ConstantValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.ConstantValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`2">
            <summary>
            Represents an observable expression with 1 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Func{`0,`1})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.#ctor(NMF.Expressions.INotifyExpression{`1},System.Func{`0,`1},System.Boolean,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.Evaluate(`0)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.Observe(`0)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1}})~NMF.Expressions.ObservingFunc{`0,`1}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`2.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`2.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`2.Expression">
            <summary>
            Represents the DDG template of this function
            </summary>
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`3">
            <summary>
            Represents an observable expression with 2 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}},System.Func{`0,`1,`2})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.#ctor(NMF.Expressions.INotifyExpression{`2},System.Func{`0,`1,`2},System.Boolean,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.Evaluate(`0,`1)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.Observe(`0,`1)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.InvokeReversable(`0,`1)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})~NMF.Expressions.ObservingFunc{`0,`1,`2}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`3.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`3.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`4">
            <summary>
            Represents an observable expression with 3 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Func{`0,`1,`2,`3})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.#ctor(NMF.Expressions.INotifyExpression{`3},System.Func{`0,`1,`2,`3},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`4.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`4.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`5">
            <summary>
            Represents an observable expression with 4 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}},System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.#ctor(NMF.Expressions.INotifyExpression{`4},System.Func{`0,`1,`2,`3,`4},System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.Evaluate(`0,`1,`2,`3)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.Observe(`0,`1,`2,`3)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.InvokeReversable(`0,`1,`2,`3)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`5.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`5.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`6">
            <summary>
            Represents an observable expression with 5 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}},System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.#ctor(NMF.Expressions.INotifyExpression{`5},System.Func{`0,`1,`2,`3,`4,`5},System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.Evaluate(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.Observe(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.InvokeReversable(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`6.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`6.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`7">
            <summary>
            Represents an observable expression with 6 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}},System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.#ctor(NMF.Expressions.INotifyExpression{`6},System.Func{`0,`1,`2,`3,`4,`5,`6},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.Evaluate(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.Observe(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.InvokeReversable(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`7.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`7.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`8">
            <summary>
            Represents an observable expression with 7 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.#ctor(NMF.Expressions.INotifyExpression{`7},System.Func{`0,`1,`2,`3,`4,`5,`6,`7},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.Evaluate(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.Observe(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.InvokeReversable(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`8.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`8.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`9">
            <summary>
            Represents an observable expression with 8 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.#ctor(NMF.Expressions.INotifyExpression{`8},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.Observe(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`9.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`9.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`10">
            <summary>
            Represents an observable expression with 9 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.#ctor(NMF.Expressions.INotifyExpression{`9},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`10.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`10.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`11">
            <summary>
            Represents an observable expression with 10 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.#ctor(NMF.Expressions.INotifyExpression{`10},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`11.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`11.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`12">
            <summary>
            Represents an observable expression with 11 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.#ctor(NMF.Expressions.INotifyExpression{`11},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
            <param name="parameter11Name">The name of the 11th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`12.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`12.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`13">
            <summary>
            Represents an observable expression with 12 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.#ctor(NMF.Expressions.INotifyExpression{`12},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
            <param name="parameter11Name">The name of the 11th parameter</param>
            <param name="parameter12Name">The name of the 12th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`13.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`13.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`14">
            <summary>
            Represents an observable expression with 13 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.#ctor(NMF.Expressions.INotifyExpression{`13},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
            <param name="parameter11Name">The name of the 11th parameter</param>
            <param name="parameter12Name">The name of the 12th parameter</param>
            <param name="parameter13Name">The name of the 13th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`14.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`14.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`15">
            <summary>
            Represents an observable expression with 14 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="T14">The type of the input parameter 14</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.#ctor(NMF.Expressions.INotifyExpression{`14},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
            <param name="parameter11Name">The name of the 11th parameter</param>
            <param name="parameter12Name">The name of the 12th parameter</param>
            <param name="parameter13Name">The name of the 13th parameter</param>
            <param name="parameter14Name">The name of the 14th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`15.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`15.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ObservingFunc`16">
            <summary>
            Represents an observable expression with 15 input parameters
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="T14">The type of the input parameter 14</typeparam>
            <typeparam name="T15">The type of the input parameter 15</typeparam>
            <typeparam name="TResult">The result type of the observing func</typeparam>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.#ctor(NMF.Expressions.INotifyExpression{`15},System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="compiled">The precompiled form of the function</param>
            <param name="isParameterFree">True, if the function is free of parameters, otherwise False</param>
            <param name="parameter1Name">The name of the 1st parameter</param>
            <param name="parameter2Name">The name of the 2nd parameter</param>
            <param name="parameter3Name">The name of the 3rd parameter</param>
            <param name="parameter4Name">The name of the 4th parameter</param>
            <param name="parameter5Name">The name of the 5th parameter</param>
            <param name="parameter6Name">The name of the 6th parameter</param>
            <param name="parameter7Name">The name of the 7th parameter</param>
            <param name="parameter8Name">The name of the 8th parameter</param>
            <param name="parameter9Name">The name of the 9th parameter</param>
            <param name="parameter10Name">The name of the 10th parameter</param>
            <param name="parameter11Name">The name of the 11th parameter</param>
            <param name="parameter12Name">The name of the 12th parameter</param>
            <param name="parameter13Name">The name of the 13th parameter</param>
            <param name="parameter14Name">The name of the 14th parameter</param>
            <param name="parameter15Name">The name of the 15th parameter</param>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13},NMF.Expressions.INotifyValue{`14})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})">
            <summary>
            Invokes the expression partially
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13},NMF.Expressions.INotifyValue{`14})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}">
            <summary>
            Creates a new observable expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}})">
            <summary>
            Creates a new observable expression from the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <returns>An observable function</returns>
        </member>
        <member name="P:NMF.Expressions.ObservingFunc`16.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservingFunc`16.ToString">
            <inheritdoc cref="T:System.Object" />
        </member>
        <member name="T:NMF.Expressions.ImmutableMethodAttribute">
            <summary>
            Marks a method as immutable
            </summary>
        </member>
        <member name="T:NMF.Expressions.INotifiable">
            <summary>
            Represents a node in a graph which can notify its successors
            and gets notified by its dependencies.
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifiable.Successors">
            <summary>
            The nodes that will get notified by this node.
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifiable.Dependencies">
            <summary>
            Nodes that notify this node.
            </summary>
        </member>
        <member name="M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <summary>
            Gets called when one of the dependencies signals a notification.
            </summary>
            <param name="sources">Contains information about what triggered this notification.</param>
            <returns>An object describing the changes that happened in this notification.</returns>
        </member>
        <member name="P:NMF.Expressions.INotifiable.ExecutionMetaData">
            <summary>
            Used by the execution engine during incremental execution.
            </summary>
        </member>
        <member name="T:NMF.Expressions.Notifiable">
            <summary>
            Represents a node in a graph which can notify its successors
            and gets notified by its dependencies.
            </summary>
        </member>
        <member name="P:NMF.Expressions.Notifiable.Successors">
            <summary>
            The nodes that will get notified by this node.
            </summary>
        </member>
        <member name="P:NMF.Expressions.Notifiable.Dependencies">
            <summary>
            Nodes that notify this node.
            </summary>
        </member>
        <member name="M:NMF.Expressions.Notifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <summary>
            Gets called when one of the dependencies signals a notification.
            </summary>
            <param name="sources">Contains information about what triggered this notification.</param>
            <returns>An object describing the changes that happened in this notification.</returns>
        </member>
        <member name="M:NMF.Expressions.Notifiable.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.Attach">
            <summary>
            Gets called when there is a client
            </summary>
        </member>
        <member name="M:NMF.Expressions.Notifiable.Detach">
            <summary>
            Gets called when there is no client any more
            </summary>
        </member>
        <member name="P:NMF.Expressions.Notifiable.ExecutionMetaData">
            <summary>
            Used by the execution engine during incremental execution.
            </summary>
        </member>
        <member name="P:NMF.Expressions.Notifiable.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Notifiable.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Notifiable.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Notifiable.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.Notifiable.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.Notifiable.Attached">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.Notifiable.Detached">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.UnsetAll">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.Notifiable.GetSuccessor(System.Int32)">
            <summary>
            Gets the successor with the given index
            </summary>
            <param name="index">the index</param>
            <returns>the succesor DDG node with the given index</returns>
        </member>
        <member name="T:NMF.Expressions.INotifyExpression">
            <summary>
            Represents an expression with additional information on the program flow
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifyExpression.CanBeConstant">
            <summary>
            Determines whether the expression can be replaced by a constant expression
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifyExpression.IsConstant">
            <summary>
            Determines whether the current expression is a constant
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifyExpression.IsParameterFree">
            <summary>
            Determines whether the current expression contains parameters
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifyExpression.ValueObject">
            <summary>
            Gets the current value as object
            </summary>
        </member>
        <member name="M:NMF.Expressions.INotifyExpression.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <summary>
            Applies the given set of parameters to the expression
            </summary>
            <param name="parameters">A set of parameter values</param>
            <param name="trace">A trace to make sure parameters are only applied once for every DDG node</param>
            <returns>A new expression with all parameter placeholders replaced with the parameter values</returns>
            <remarks>In case that the current expression is parameter free, it simply returns itself</remarks>
        </member>
        <member name="T:NMF.Expressions.INotifyExpression`1">
            <summary>
            Represents a typed expression with additional information on the program flow
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
        </member>
        <member name="M:NMF.Expressions.INotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <summary>
            Applies the given set of parameters to the expression
            </summary>
            <param name="parameters">A set of parameter values</param>
            <param name="trace">A trace to make sure parameters are only applied once for every DDG node</param>
            <returns>A new expression with all parameter placeholders replaced with the parameter values</returns>
            <remarks>In case that the current expression is parameter free, it simply returns itself</remarks>
        </member>
        <member name="M:NMF.Expressions.INotifyExpression`1.Reduce">
            <summary>
            Simplifies the current expression
            </summary>
            <returns>A simpler expression repüresenting the same incremental value (e.g. a constant if this expression can be constant), otherwise itself</returns>
        </member>
        <member name="T:NMF.Expressions.INotifyReversableExpression`1">
            <summary>
            Represents an incremental reversable expression
            </summary>
            <typeparam name="T">The expression type</typeparam>
        </member>
        <member name="T:NMF.Expressions.INotifySystem">
            <summary>
            Represents an incremental computation system
            </summary>
        </member>
        <member name="M:NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameters">The parameters of the expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="M:NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameters">The parameters of the expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="M:NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <param name="parameters">The parameters of the expression</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="T:NMF.Expressions.INotifyValue`1">
            <summary>
            Represents a simple incremental value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NMF.Expressions.INotifyValue`1.Value">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="E:NMF.Expressions.INotifyValue`1.ValueChanged">
            <summary>
            Gets fired when the value changed
            </summary>
        </member>
        <member name="T:NMF.Expressions.INotifyReversableValue`1">
            <summary>
            Represents a reversable incremental value
            </summary>
            <typeparam name="T">The value type</typeparam>
        </member>
        <member name="P:NMF.Expressions.INotifyReversableValue`1.Value">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:NMF.Expressions.INotifyReversableValue`1.IsReversable">
            <summary>
            Checks whether it is allowed to set values
            </summary>
        </member>
        <member name="T:NMF.Expressions.InstructionLevelNotifySystem">
            <summary>
            Represents an implementation of an incremental computation system on instruction level
            </summary>
        </member>
        <member name="M:NMF.Expressions.InstructionLevelNotifySystem.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Expressions.InstructionLevelNotifySystem.Instance">
            <summary>
            Gets the default instruction-level-incremental system
            </summary>
        </member>
        <member name="M:NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)">
            <summary>
            Creates a local variable expression for the given expression and the given local variable
            </summary>
            <typeparam name="T">The type of the expression whose scope should be used to create the local variable</typeparam>
            <typeparam name="TVar">The type of the variable</typeparam>
            <param name="inner">The expression for which the local variable should be created</param>
            <param name="localVariable">The local variable</param>
            <param name="paramName">Returns a parameter name under which the local variable can be referenced</param>
            <returns>The inner expression withthe local variable attached to it</returns>
        </member>
        <member name="M:NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <param name="parameters">The parameters of the expression</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="M:NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <param name="parameters">The parameters of the expression</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="M:NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <param name="parameters">The parameters of the expression</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="T:NMF.Expressions.ISuccessorList">
            <summary>
            Denotes an interface for a list of subsequent dependency graph nodes
            </summary>
        </member>
        <member name="P:NMF.Expressions.ISuccessorList.Count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="M:NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)">
            <summary>
            Gets the successor at the given index
            </summary>
            <param name="index">The index</param>
            <returns>The DDG node with the given index</returns>
        </member>
        <member name="P:NMF.Expressions.ISuccessorList.HasSuccessors">
            <summary>
            True, if there is any successor, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Expressions.ISuccessorList.IsAttached">
            <summary>
            True, if successors are attached, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)">
            <summary>
            Add the given DDG node to the list
            </summary>
            <param name="node">The DDG node to add</param>
        </member>
        <member name="M:NMF.Expressions.ISuccessorList.SetDummy">
            <summary>
            Sets a dummy
            </summary>
        </member>
        <member name="M:NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <summary>
            Unset the given DDG node as successor
            </summary>
            <param name="node">the DDG node</param>
            <param name="leaveDummy">True, to leave the dummy in operation, otherwise False</param>
        </member>
        <member name="M:NMF.Expressions.ISuccessorList.UnsetAll">
            <summary>
            Clear the list
            </summary>
        </member>
        <member name="T:NMF.Expressions.LensPutAttribute">
            <summary>
            Denotes an attribute to specify a proxy method for a lens put operation
            </summary>
        </member>
        <member name="M:NMF.Expressions.LensPutAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="methodName">The name of the method representing the lens put operation</param>
        </member>
        <member name="M:NMF.Expressions.LensPutAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="proxyType">The type that hosts the lens put operation</param>
            <param name="methodName">The name of the method representing the lens put operation</param>
        </member>
        <member name="T:NMF.Expressions.MultiSuccessorList">
            <summary>
            Denotes a default implementation of a successor list
            </summary>
        </member>
        <member name="P:NMF.Expressions.MultiSuccessorList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.MultiSuccessorList.HasSuccessors">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.MultiSuccessorList.IsAttached">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.MultiSuccessorList.Count">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Expressions.MultiSuccessorList.AllSuccessors">
            <inheritdoc/>
        </member>
        <member name="E:NMF.Expressions.MultiSuccessorList.Attached">
            <inheritdoc/>
        </member>
        <member name="E:NMF.Expressions.MultiSuccessorList.Detached">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.MultiSuccessorList.Set(NMF.Expressions.INotifiable)">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.MultiSuccessorList.SetDummy">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.MultiSuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.MultiSuccessorList.UnsetAll">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Expressions.MultiSuccessorList.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.NotifyExpression`1">
            <summary>
            The common base class for incremental expressions
            </summary>
            <typeparam name="T">The element type of the expression</typeparam>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.#ctor(`0)">
            <summary>
            Creates a new incremental expression with the given initial value
            </summary>
            <param name="value">The initial value</param>
        </member>
        <member name="E:NMF.Expressions.NotifyExpression`1.ValueChanged">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.Value">
            <summary>
            Gets the current value of this expression
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.ValueObject">
            <summary>
            Gets the current value as object
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.Type">
            <summary>
            Gets the type of this incremental expression
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.CanReduce">
            <summary>
            Determines whether this expression can be reduced
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.CanBeConstant">
            <summary>
            Returns whether the current expression can be constant
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.GetValue">
            <summary>
            Gets the value of the current incremental expression
            </summary>
            <returns>The current value</returns>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.IsParameterFree">
            <summary>
            Returns whether this expression is parameter free
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.IsConstant">
            <summary>
            Returns whether this expression is a constant value
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.Successors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.ExecutionMetaData">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.OnAttach">
            <summary>
            Occurs when this node gets (re)attached to another node for the first time
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.OnDetach">
            <summary>
            Occurs when the last successor of this node gets removed
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.Reduce">
            <summary>
            Simplifies the current expression
            </summary>
            <returns>A simpler expression representing the same incremental value (e.g. a constant if this expression can be constant), otherwise itself</returns>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.BaseReduce">
            <summary>
            Simplifies the current expression
            </summary>
            <returns>A simpler expression representing the same incremental value (e.g. a constant if this expression can be constant), otherwise itself</returns>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.OnValueChanged(`0,`0)">
            <summary>
            Gets called when the value of the current expression changes
            </summary>
            <param name="oldVal">The old value</param>
            <param name="newVal">The new value</param>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <summary>
            Refreshes the current value
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <summary>
            Applies the given set of parameters to the expression
            </summary>
            <param name="parameters">A set of parameter values</param>
            <param name="trace">A trace to make sure parameters are only applied once for every DDG node</param>
            <returns>A new expression with all parameter placeholders replaced with the parameter values</returns>
            <remarks>In case that the current expression is parameter free, it simply returns itself</remarks>
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.ApplyParametersCore(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <summary>
            Applies the given set of parameters to the expression
            </summary>
            <param name="parameters">A set of parameter values</param>
            <param name="trace">A trace to make sure parameters are only applied once for every DDG node</param>
            <returns>A new expression with all parameter placeholders replaced with the parameter values</returns>
            <remarks>In case that the current expression is parameter free, it simply returns itself</remarks>
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyExpression`1.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.UnsetAll">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyExpression`1.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.NotifyExpressionBase">
            <summary>
            Base class for incremental expressions
            </summary>
            <remarks>The purpose of this class is only to be able to both shadow and override the inherited Reduce method</remarks>
        </member>
        <member name="M:NMF.Expressions.NotifyExpressionBase.Reduce">
            <summary>
            Expression reduce method
            </summary>
            <returns></returns>
        </member>
        <member name="M:NMF.Expressions.NotifyExpressionBase.BaseReduce">
            <summary>
            Rerouted inherited reduce method
            </summary>
            <returns></returns>
        </member>
        <member name="T:NMF.Expressions.NotifySystem">
            <summary>
            This class encapsulates a default incremental system
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifySystem.DefaultSystem">
            <summary>
            Gets or sets the incremental computation system to be used by default
            </summary>
            <remarks>This property can never be set to a null value</remarks>
        </member>
        <member name="M:NMF.Expressions.NotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameters">The parameters of the expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="M:NMF.Expressions.NotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates an incremental expression for the given code expression
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The expression from which to create an incremental expression</param>
            <param name="parameterMappings">A given mapping of parameters</param>
            <param name="parameters">The parameters of the expression</param>
            <returns>An incremental expression object</returns>
        </member>
        <member name="T:NMF.Expressions.NotifyValue`1">
            <summary>
            Abstract base implementation of notify value
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.Value">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.Successors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.ExecutionMetaData">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.NotifyValue`1.ValueChanged">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Gets called when the value changed
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)">
            <summary>
            Raises the ValueChanged event
            </summary>
            <param name="oldValue">old value</param>
            <param name="newValue">new value</param>
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Attach">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Detach">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyValue`1.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.UnsetAll">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyValue`1.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.NotifyReversableValue`1">
            <summary>
            base implementation of a reversable notify value
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.Value">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.NotifyReversableValue`1.ValueChanged">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.NotifyReversableValue`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.Successors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance
            </summary>
            <param name="expression">The underlying expression</param>
            <param name="parameterMappings">Parameter mappings</param>
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.IsReversable">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.OnValueChanged(`0,`0)">
            <summary>
            Gets called when the value changed
            </summary>
            <param name="oldValue">old value</param>
            <param name="newValue">new value</param>
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged
            </summary>
            <param name="propertyName">the name of the property</param>
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.OnAttach">
            <summary>
            Occurs when this node gets (re)attached to another node for the first time
            </summary>
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.OnDetach">
            <summary>
            Occurs when the last successor of this node gets removed
            </summary>
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.NotifyReversableValue`1.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.UnsetAll">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.NotifyReversableValue`1.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.ReversableProxyValue`2.OnAttach">
            <summary>
            Occurs when this node gets (re)attached to another node for the first time
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableProxyValue`2.OnDetach">
            <summary>
            Occurs when the last successor of this node gets removed
            </summary>
        </member>
        <member name="T:NMF.Expressions.Observable">
            <summary>
            This is a facade class that exposes the functionality of NMF Expressions compactly
            </summary>
            <summary>
            This is a facade class that exposes the functionality of NMF Expressions compactly
            </summary>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="T14">The type of the argument 14</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="T14">The type of the argument 14</typeparam>
            <typeparam name="T15">The type of the argument 15</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="T14">The type of the argument 14</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
            </summary>
            <typeparam name="T1">The type of the argument 1</typeparam>
            <typeparam name="T2">The type of the argument 2</typeparam>
            <typeparam name="T3">The type of the argument 3</typeparam>
            <typeparam name="T4">The type of the argument 4</typeparam>
            <typeparam name="T5">The type of the argument 5</typeparam>
            <typeparam name="T6">The type of the argument 6</typeparam>
            <typeparam name="T7">The type of the argument 7</typeparam>
            <typeparam name="T8">The type of the argument 8</typeparam>
            <typeparam name="T9">The type of the argument 9</typeparam>
            <typeparam name="T10">The type of the argument 10</typeparam>
            <typeparam name="T11">The type of the argument 11</typeparam>
            <typeparam name="T12">The type of the argument 12</typeparam>
            <typeparam name="T13">The type of the argument 13</typeparam>
            <typeparam name="T14">The type of the argument 14</typeparam>
            <typeparam name="T15">The type of the argument 15</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The LINQ Expression tree</param>
            <param name="updateHandler">The update handler</param>
            <returns>An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``2(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``3(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``4(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``5(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``6(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="T5">The type of function argument 5</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``7(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="T5">The type of function argument 5</typeparam>
            <typeparam name="T6">The type of function argument 6</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``8(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="T5">The type of function argument 5</typeparam>
            <typeparam name="T6">The type of function argument 6</typeparam>
            <typeparam name="T7">The type of function argument 7</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``9(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="T5">The type of function argument 5</typeparam>
            <typeparam name="T6">The type of function argument 6</typeparam>
            <typeparam name="T7">The type of function argument 7</typeparam>
            <typeparam name="T8">The type of function argument 8</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Recurse``10(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Recurses the given function
            </summary>
            <typeparam name="T1">The type of function argument 1</typeparam>
            <typeparam name="T2">The type of function argument 2</typeparam>
            <typeparam name="T3">The type of function argument 3</typeparam>
            <typeparam name="T4">The type of function argument 4</typeparam>
            <typeparam name="T5">The type of function argument 5</typeparam>
            <typeparam name="T6">The type of function argument 6</typeparam>
            <typeparam name="T7">The type of function argument 7</typeparam>
            <typeparam name="T8">The type of function argument 8</typeparam>
            <typeparam name="T9">The type of function argument 9</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="innerFunc">The inner function</param>
            <returns>An observing function that runs the given function recursively</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create an observable expression from the given LINQ Expression, i.e. the expression updates its value according to model changes
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The LINQ Expression tree of the expression</param>
            <returns>A notify value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Reversable``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a reversable and observable expression from the given LINQ expression, i.e. the expression updates its value according to model changes and any changes to the expression are propagated back to the model
            </summary>
            <typeparam name="T">The type of the expression</typeparam>
            <param name="expression">The LINQ Expression tree of the expression</param>
            <returns>A reversable notify value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Acesses the given array index of the given incremental array
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="array">The incremental array</param>
            <param name="index">The incremental index</param>
            <returns>An incremental expression for the array index</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Acesses the given array index of the given incremental array
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="array">The incremental array</param>
            <param name="index">The incremental index</param>
            <returns>An incremental expression for the array index</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.ArrayInitialization``1(System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}})">
            <summary>
            Initilaizes an array incrementally
            </summary>
            <typeparam name="T">The array element type</typeparam>
            <param name="elements">The elements of the array</param>
            <returns>An incremental array</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Coalesces the given value with the given alternative
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="value">The incremental value that should be coalesced</param>
            <param name="ifNull">The incremental coalesce value</param>
            <returns>An incremental coalesced value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyReversableExpression{``0},NMF.Expressions.INotifyReversableExpression{``0})">
            <summary>
            Coalesces the given value with the given alternative
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="value">The incremental value that should be coalesced</param>
            <param name="ifNull">The incremental coalesce value</param>
            <returns>An incremental coalesced value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Boxes the given incremental value
            </summary>
            <typeparam name="T">The type of the box</typeparam>
            <param name="value">The inner incremental value expression</param>
            <returns>An incremental value of type object</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyReversableExpression{``0})">
            <summary>
            Boxes the given incremental value
            </summary>
            <typeparam name="T">The type of the box</typeparam>
            <param name="value">The inner incremental value expression</param>
            <returns>An incremental value of type object</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Conditional``1(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Creates an incremental conditional
            </summary>
            <typeparam name="T">The type of the conditional</typeparam>
            <param name="test">An incremental value determing the test</param>
            <param name="ifTrue">The conditional value if the test is true</param>
            <param name="ifFalse">The conditional value if the test is false</param>
            <returns>An incremental conditional</returns>
            <remarks>The incremental value not used for the conditional is automatically detached</remarks>
        </member>
        <member name="M:NMF.Expressions.Observable.Constant``1(``0)">
            <summary>
            Creates an incremental constant value
            </summary>
            <typeparam name="T">The type of the constant</typeparam>
            <param name="value">The value of the constant</param>
            <returns>An incremental constant</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Creates an incremental 1-dimensional array with the given bounds
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="bounds">The bounds of the array (dimension 0)</param>
            <returns>An incremental array</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Creates an incremental 2-dimensional array with the given bounds
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="bounds1">The bounds of the array (dimension 0)</param>
            <param name="bounds2">The bounds of the array (dimension 1)</param>
            <returns>An incremental array</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Creates an incremental 3-dimensional array with the given bounds
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="bounds1">The bounds of the array (dimension 0)</param>
            <param name="bounds2">The bounds of the array (dimension 1)</param>
            <param name="bounds3">The bounds of the array (dimension 2)</param>
            <returns>An incremental array</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression{System.Object},System.Type)">
            <summary>
            Incrementally tests whether the given incremental value is an instance of the given type
            </summary>
            <param name="inner">The value that should be tested for the given type</param>
            <param name="type">The type for which should be tested</param>
            <returns>An incremental value whether the object is of the given type</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.As``2(NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Casts the given object to the given type or returns null if not successful
            </summary>
            <typeparam name="TInner">The type of the object that is already known</typeparam>
            <typeparam name="TOuter">The type to which the object should be casted</typeparam>
            <param name="value">The incremental value to cast</param>
            <returns>An incremental valuen with the new type or null</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Convert``2(NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Converts the given object to the given type incrementally
            </summary>
            <typeparam name="TSource">The current type of the object</typeparam>
            <typeparam name="TTarget">The conversion type</typeparam>
            <param name="source">The incrementalk value that should be converted</param>
            <returns>An incremental value with the conversion result</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs a bitwise and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise and of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Performs a bitwise and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise and of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Performs a bitwise and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise and of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Performs a bitwise and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise and of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs a bitwise or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise or of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Performs a bitwise or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise or of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Performs a bitwise or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise or of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Performs a bitwise or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise or of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs a bitwise xor operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise xor of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Performs a bitwise xor operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise xor of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Performs a bitwise xor operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise xor of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Performs a bitwise xor operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the bitwise xor of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a logic and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the logic and of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a logic or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the logic or of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a logic xor operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the logic xor of the operators</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a shorthand logic and operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the logic and of the operators</returns>
            <remarks>While the left operand returns false, the right operand is detached from the model</remarks>
        </member>
        <member name="M:NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a shorthand logic or operation on the given incremental values
            </summary>
            <param name="left">The left operator</param>
            <param name="right">The right operator</param>
            <returns>An incremental value with the logic or of the operators</returns>
            <remarks>While the left operand returns true, the right operand is detached from the model</remarks>
        </member>
        <member name="M:NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression{System.Boolean})">
            <summary>
            Performs a logic not on the given incremental value
            </summary>
            <param name="inner">The incremental value</param>
            <returns>An incremental inversed value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Computes the ones complement of the given incremental value
            </summary>
            <param name="inner">The inner incremental value</param>
            <returns>An incremental value with the ones complement</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Computes the ones complement of the given incremental value
            </summary>
            <param name="inner">The inner incremental value</param>
            <returns>An incremental value with the ones complement</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Computes the ones complement of the given incremental value
            </summary>
            <param name="inner">The inner incremental value</param>
            <returns>An incremental value with the ones complement</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Computes the ones complement of the given incremental value
            </summary>
            <param name="inner">The inner incremental value</param>
            <returns>An incremental value with the ones complement</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Gets the negation of the given value
            </summary>
            <param name="inner">The incremental value which should be negated</param>
            <returns>An incremental negated value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Gets the negation of the given value
            </summary>
            <param name="inner">The incremental value which should be negated</param>
            <returns>An incremental negated value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Gets the negation of the given value
            </summary>
            <param name="inner">The incremental value which should be negated</param>
            <returns>An incremental negated value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Gets the negation of the given value
            </summary>
            <param name="inner">The incremental value which should be negated</param>
            <returns>An incremental negated value</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Divides the given dividor by the given divident incrementally
            </summary>
            <param name="left">The divisor</param>
            <param name="right">The divident</param>
            <returns>The incremnetal division</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Subtracts the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental difference</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.String},NMF.Expressions.INotifyExpression{System.String})">
            <summary>
            Adds the given values incrementally
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental sum</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Multiplies the given values incrementally
            </summary>
            <param name="left">The left factor</param>
            <param name="right">The right factor</param>
            <returns>The incremental product</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})">
            <summary>
            Computes an incremental modulo of the operands
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The incremental modulo</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental right shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental right shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental right shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental right shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental left shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental left shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental left shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})">
            <summary>
            Performs an incremental left shift
            </summary>
            <param name="left">The value to be shifted</param>
            <param name="right">The shift</param>
            <returns>An incremental shift</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.GreatherThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the left value is greather than the right value
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the left operand is greather than the right operand</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.GreatherThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the left value is greather than or equals to the right value
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the left operand is greather than or equals to the right operand</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LessThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the left value is less than the right value
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the left operand is less than the right operand</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.LessThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the left value is less than or equals the right value
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the left operand is less than or equals the right operand</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.Equals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the given values are equal
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the given values are equal</returns>
        </member>
        <member name="M:NMF.Expressions.Observable.NotEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})">
            <summary>
            Incrementally determines whether the given values are not equal
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>An incremental value determing whether the given values are not equal</returns>
        </member>
        <member name="T:NMF.Expressions.ObservableProxyAttribute">
            <summary>
            Denotes an attribute to specify an explicit incrementalization of a method
            </summary>
        </member>
        <member name="P:NMF.Expressions.ObservableProxyAttribute.IsRecursive">
            <summary>
            True, if the incrementalized method is recursive, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Expressions.ObservableProxyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="methodName">The name of the incrementalized method</param>
            <param name="isRecursive">True, if the incrementalized method is recursive, otherwise False</param>
        </member>
        <member name="M:NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="proxyType">The type that hosts the incrementalized method</param>
            <param name="methodName">The name of the incrementalized method</param>
            <param name="isRecursive">True, if the incrementalized method is recursive, otherwise False</param>
        </member>
        <member name="T:NMF.Expressions.ParameterDataflowAttribute">
            <summary>
            Specifies a dataflow between parameters
            </summary>
        </member>
        <member name="F:NMF.Expressions.ParameterDataflowAttribute.TargetObjectIndex">
            <summary>
            A constant to specify the index for the target of a method
            </summary>
        </member>
        <member name="P:NMF.Expressions.ParameterDataflowAttribute.SourceIndex">
            <summary>
            The index of the parameter that is the source of the dependency
            </summary>
        </member>
        <member name="P:NMF.Expressions.ParameterDataflowAttribute.FunctionIndex">
            <summary>
            The index of the function to which the source element flows
            </summary>
        </member>
        <member name="P:NMF.Expressions.ParameterDataflowAttribute.FunctionParameterIndex">
            <summary>
            The index of the parameter for which the source is used
            </summary>
        </member>
        <member name="M:NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies that elements of a source parameter are used as argument for a function given in another parameter
            </summary>
            <param name="functionIndex">The index of the function to which the source element flows</param>
            <param name="functionParameterIndex">The index of the parameter for which the source is used</param>
            <param name="source">The index of the parameter that is the source of the dependency</param>
        </member>
        <member name="T:NMF.Expressions.ReversableExtensions">
            <summary>
            Describes extensions to support reversable operations
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})">
            <summary>
            Turns the given value into a reversable by providing an explicit put operation
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="value">The incremental value</param>
            <param name="reversableHandler">The put operation</param>
            <returns>A reversable incremental value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if reversableHandler is null</exception>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`2">
            <summary>
            Represents an observable expression with 1 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`2.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Action{`0,`1})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(`0)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`2.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`3">
            <summary>
            Represents an observable expression with 2 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`3.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}},System.Action{`0,`1,`2})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`3.InvokeReversable(`0,`1)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`3.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`3.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`4">
            <summary>
            Represents an observable expression with 3 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`4.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Action{`0,`1,`2,`3})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(`0,`1,`2)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`4.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`5">
            <summary>
            Represents an observable expression with 4 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`5.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}},System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`5.InvokeReversable(`0,`1,`2,`3)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`5.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`5.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`6">
            <summary>
            Represents an observable expression with 5 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`6.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}},System.Action{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`6.InvokeReversable(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`6.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`6.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`7">
            <summary>
            Represents an observable expression with 6 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`7.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}},System.Action{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`7.InvokeReversable(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`7.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`7.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`8">
            <summary>
            Represents an observable expression with 7 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`8.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`8.InvokeReversable(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`8.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`8.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`9">
            <summary>
            Represents an observable expression with 8 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`9.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`9.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`9.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`9.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`9.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`10">
            <summary>
            Represents an observable expression with 9 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`10.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`10.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`10.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`10.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`10.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`11">
            <summary>
            Represents an observable expression with 10 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`11.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`11.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`11.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`11.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`11.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`12">
            <summary>
            Represents an observable expression with 11 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`12.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`12.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`12.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`12.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`12.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`13">
            <summary>
            Represents an observable expression with 12 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`13.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`13.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`13.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`13.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`13.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`14">
            <summary>
            Represents an observable expression with 13 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`14.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`14.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`14.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`14.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`15">
            <summary>
            Represents an observable expression with 14 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="T14">The type of the input parameter 14</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`15.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`15.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`15.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`15.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.ReversableObservingFunc`16">
            <summary>
            Represents an observable expression with 15 input parameters and a custom update handler
            </summary>
            <typeparam name="T1">The type of the input parameter 1</typeparam>
            <typeparam name="T2">The type of the input parameter 2</typeparam>
            <typeparam name="T3">The type of the input parameter 3</typeparam>
            <typeparam name="T4">The type of the input parameter 4</typeparam>
            <typeparam name="T5">The type of the input parameter 5</typeparam>
            <typeparam name="T6">The type of the input parameter 6</typeparam>
            <typeparam name="T7">The type of the input parameter 7</typeparam>
            <typeparam name="T8">The type of the input parameter 8</typeparam>
            <typeparam name="T9">The type of the input parameter 9</typeparam>
            <typeparam name="T10">The type of the input parameter 10</typeparam>
            <typeparam name="T11">The type of the input parameter 11</typeparam>
            <typeparam name="T12">The type of the input parameter 12</typeparam>
            <typeparam name="T13">The type of the input parameter 13</typeparam>
            <typeparam name="T14">The type of the input parameter 14</typeparam>
            <typeparam name="T15">The type of the input parameter 15</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`16.UpdateHandler">
            <summary>
            The method that handles value updates for this func
            </summary>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`16.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}},System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Creates a new observable expression for the given expression
            </summary>
            <param name="expression">The expression that is to be observed</param>
            <param name="updateHandler">A function that is executed when the result is changed</param>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`16.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="M:NMF.Expressions.ReversableObservingFunc`16.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13},NMF.Expressions.INotifyValue{`14})">
            <summary>
            Invokes the expression
            </summary>
            <param name="in1">The input parameter 1</param>
            <param name="in2">The input parameter 2</param>
            <param name="in3">The input parameter 3</param>
            <param name="in4">The input parameter 4</param>
            <param name="in5">The input parameter 5</param>
            <param name="in6">The input parameter 6</param>
            <param name="in7">The input parameter 7</param>
            <param name="in8">The input parameter 8</param>
            <param name="in9">The input parameter 9</param>
            <param name="in10">The input parameter 10</param>
            <param name="in11">The input parameter 11</param>
            <param name="in12">The input parameter 12</param>
            <param name="in13">The input parameter 13</param>
            <param name="in14">The input parameter 14</param>
            <param name="in15">The input parameter 15</param>
            <returns>An observable value that keeps track of any changes</returns>
        </member>
        <member name="P:NMF.Expressions.ReversableObservingFunc`16.IsReversable">
            <summary>
            Gets a value indicating whether this function can be reversed
            </summary>
        </member>
        <member name="T:NMF.Expressions.SingleSuccessorList">
            <summary>
            Denotes a class optimized for a single element
            </summary>
        </member>
        <member name="P:NMF.Expressions.SingleSuccessorList.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingleSuccessorList.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingleSuccessorList.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingleSuccessorList.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.SingleSuccessorList.Attached">
            <inheritdoc />
        </member>
        <member name="E:NMF.Expressions.SingleSuccessorList.Detached">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingleSuccessorList.UnsetAll">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.SingletonSuccessorList">
            <summary>
            Denotes a successor list for a constant
            </summary>
        </member>
        <member name="P:NMF.Expressions.SingletonSuccessorList.Instance">
            <summary>
            The static instance
            </summary>
        </member>
        <member name="P:NMF.Expressions.SingletonSuccessorList.HasSuccessors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingletonSuccessorList.IsAttached">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingletonSuccessorList.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Expressions.SingletonSuccessorList.AllSuccessors">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingletonSuccessorList.Set(NMF.Expressions.INotifiable)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingletonSuccessorList.SetDummy">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingletonSuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingletonSuccessorList.UnsetAll">
            <inheritdoc />
        </member>
        <member name="M:NMF.Expressions.SingletonSuccessorList.GetSuccessor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Expressions.ValueChangedEventArgs">
            <summary>
            Represents the event data when the value of an incremental expression has changed
            </summary>
        </member>
        <member name="M:NMF.Expressions.ValueChangedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Creates a valuechanged event for the given old value and new value
            </summary>
            <param name="oldValue">The old value</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="P:NMF.Expressions.ValueChangedEventArgs.OldValue">
            <summary>
            The old value
            </summary>
        </member>
        <member name="P:NMF.Expressions.ValueChangedEventArgs.NewValue">
            <summary>
            The new value
            </summary>
        </member>
    </members>
</doc>
