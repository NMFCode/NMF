<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.AnyText.AnyMeta</name>
    </assembly>
    <members>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar">
            <summary>
            Denotes a class capable to parse the language anymeta
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.LanguageId">
            <summary>
            Gets the language id for this grammar
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.GetRootRule(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Gets the root rule
            </summary>
            <returns>the root rule for this grammar</returns>
            <param name="context">a context to resolve the root rule</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ImportsRule">
            <summary>
            A rule class representing the rule &apos;Imports&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ImportsRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceRule">
            <summary>
            A rule class representing the rule &apos;Namespace&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypeRule">
            <summary>
            A rule class representing the rule &apos;Type&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeRule">
            <summary>
            A rule class representing the rule &apos;ReferenceType&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.DocumentationRule">
            <summary>
            A rule class representing the rule &apos;Documentation&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.DocumentationRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassRule">
            <summary>
            A rule class representing the rule &apos;Class&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionRule">
            <summary>
            A rule class representing the rule &apos;Extension&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRule">
            <summary>
            A rule class representing the rule &apos;Attribute&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRule">
            <summary>
            A rule class representing the rule &apos;Reference&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRule">
            <summary>
            A rule class representing the rule &apos;Operation&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ParameterRule">
            <summary>
            A rule class representing the rule &apos;Parameter&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ParameterRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundsRule">
            <summary>
            A rule class representing the rule &apos;Bounds&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundsRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationRule">
            <summary>
            A rule class representing the rule &apos;Enumeration&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralRule">
            <summary>
            A rule class representing the rule &apos;Literal&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeRule">
            <summary>
            A rule class representing the rule &apos;PrimitiveType&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.DataTypeRule">
            <summary>
            A rule class representing the rule &apos;DataType&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.DataTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TextRule">
            <summary>
            A rule class representing the rule &apos;Text&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TextRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.UriRule">
            <summary>
            A rule class representing the rule &apos;Uri&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.UriRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.FileRule">
            <summary>
            A rule class representing the rule &apos;File&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.FileRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.IdentifierRule">
            <summary>
            A rule class representing the rule &apos;Identifier&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.IdentifierRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.QualifiedIdentifierRule">
            <summary>
            A rule class representing the rule &apos;QualifiedIdentifier&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.QualifiedIdentifierRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.SystemTypeStringRule">
            <summary>
            A rule class representing the rule &apos;SystemTypeString&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.SystemTypeStringRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.IntegerRule">
            <summary>
            A rule class representing the rule &apos;Integer&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.IntegerRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundRule">
            <summary>
            A rule class representing the rule &apos;Bound&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundRule.Escape(System.String)">
            <summary>
            Escapes the given string
            </summary>
            <returns>the escaped string</returns>
            <param name="value">the unescaped string</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundRule.Unescape(System.String)">
            <summary>
            Unescapes the given string
            </summary>
            <returns>the unescaped string</returns>
            <param name="value">the escaped string</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.BoundRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceTypesTypeRule">
            <summary>
            Rule to assign the contents of the inner rule to Types
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceTypesTypeRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceTypesTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceTypesTypeRule.GetCollection(NMF.Models.Meta.INamespace,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceChildNamespacesNamespaceRule">
            <summary>
            Rule to assign the contents of the inner rule to ChildNamespaces
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceChildNamespacesNamespaceRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceChildNamespacesNamespaceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceChildNamespacesNamespaceRule.GetCollection(NMF.Models.Meta.INamespace,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceUriUriRule">
            <summary>
            Rule to assign the contents of the inner rule to Uri
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceUriUriRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceUriUriRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceUriUriRule.GetValue(NMF.Models.Meta.INamespace,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceUriUriRule.SetValue(NMF.Models.Meta.INamespace,System.Uri,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespacePrefixIdentifierRule">
            <summary>
            Rule to assign the contents of the inner rule to Prefix
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespacePrefixIdentifierRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespacePrefixIdentifierRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespacePrefixIdentifierRule.GetValue(NMF.Models.Meta.INamespace,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespacePrefixIdentifierRule.SetValue(NMF.Models.Meta.INamespace,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule">
            <summary>
            Rule to assign the contents of the inner rule to Name
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule.IsIdentifier">
            <summary>
            Gets the first contained rule application that represents an identifier
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule.GetValue(NMF.Models.Meta.IMetaElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementNameIdentifierRule.SetValue(NMF.Models.Meta.IMetaElement,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeOperationsOperationRule">
            <summary>
            Rule to assign the contents of the inner rule to Operations
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeOperationsOperationRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeOperationsOperationRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeOperationsOperationRule.GetCollection(NMF.Models.Meta.IStructuredType,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeReferencesReferenceRule">
            <summary>
            Rule to assign the contents of the inner rule to References
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeReferencesReferenceRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeReferencesReferenceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceTypeReferencesReferenceRule.GetCollection(NMF.Models.Meta.IReferenceType,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeAttributesAttributeRule">
            <summary>
            Rule to assign the contents of the inner rule to Attributes
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeAttributesAttributeRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeAttributesAttributeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.StructuredTypeAttributesAttributeRule.GetCollection(NMF.Models.Meta.IStructuredType,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassInstanceOfClassRule">
            <summary>
            Rule to assign the contents of the inner rule to InstanceOf
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassInstanceOfClassRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassInstanceOfClassRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassInstanceOfClassRule.GetValue(NMF.Models.Meta.IClass,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassInstanceOfClassRule.SetValue(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassBaseTypesClassRule">
            <summary>
            Rule to assign the contents of the inner rule to BaseTypes
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassBaseTypesClassRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassBaseTypesClassRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassBaseTypesClassRule.GetCollection(NMF.Models.Meta.IClass,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassIsAbstractRule">
            <summary>
            Rule to assign the contents of the inner rule to IsAbstract
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassIsAbstractRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassIsAbstractRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassIsAbstractRule.GetValue(NMF.Models.Meta.IClass,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ClassIsAbstractRule.SetValue(NMF.Models.Meta.IClass,System.Boolean,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionAdornedClassClassRule">
            <summary>
            Rule to assign the contents of the inner rule to AdornedClass
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionAdornedClassClassRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionAdornedClassClassRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionAdornedClassClassRule.GetValue(NMF.Models.Meta.IExtension,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ExtensionAdornedClassClassRule.SetValue(NMF.Models.Meta.IExtension,NMF.Models.Meta.IClass,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRefinesAttributeRule">
            <summary>
            Rule to assign the contents of the inner rule to Refines
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRefinesAttributeRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRefinesAttributeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRefinesAttributeRule.GetValue(NMF.Models.Meta.IAttribute,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.AttributeRefinesAttributeRule.SetValue(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IAttribute,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementTypeTypeRule">
            <summary>
            Rule to assign the contents of the inner rule to Type
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementTypeTypeRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementTypeTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementTypeTypeRule.GetValue(NMF.Models.Meta.ITypedElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementTypeTypeRule.SetValue(NMF.Models.Meta.ITypedElement,NMF.Models.Meta.IType,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsOrderedRule">
            <summary>
            Rule to assign the contents of the inner rule to IsOrdered
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsOrderedRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsOrderedRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsOrderedRule.GetValue(NMF.Models.Meta.ITypedElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsOrderedRule.SetValue(NMF.Models.Meta.ITypedElement,System.Boolean,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsUniqueRule">
            <summary>
            Rule to assign the contents of the inner rule to IsUnique
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsUniqueRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsUniqueRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsUniqueRule.GetValue(NMF.Models.Meta.ITypedElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementIsUniqueRule.SetValue(NMF.Models.Meta.ITypedElement,System.Boolean,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceOppositeReferenceRule">
            <summary>
            Rule to assign the contents of the inner rule to Opposite
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceOppositeReferenceRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceOppositeReferenceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceOppositeReferenceRule.GetValue(NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceOppositeReferenceRule.SetValue(NMF.Models.Meta.IReference,NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRefinesReferenceRule">
            <summary>
            Rule to assign the contents of the inner rule to Refines
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRefinesReferenceRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRefinesReferenceRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRefinesReferenceRule.GetValue(NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceRefinesReferenceRule.SetValue(NMF.Models.Meta.IReference,NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceReferenceTypeReferenceTypeRule">
            <summary>
            Rule to assign the contents of the inner rule to ReferenceType
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceReferenceTypeReferenceTypeRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceReferenceTypeReferenceTypeRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceReferenceTypeReferenceTypeRule.GetValue(NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceReferenceTypeReferenceTypeRule.SetValue(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceIsContainmentRule">
            <summary>
            Rule to assign the contents of the inner rule to IsContainment
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceIsContainmentRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceIsContainmentRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceIsContainmentRule.GetValue(NMF.Models.Meta.IReference,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.ReferenceIsContainmentRule.SetValue(NMF.Models.Meta.IReference,System.Boolean,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRefinesOperationRule">
            <summary>
            Rule to assign the contents of the inner rule to Refines
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRefinesOperationRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRefinesOperationRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRefinesOperationRule.GetValue(NMF.Models.Meta.IOperation,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationRefinesOperationRule.SetValue(NMF.Models.Meta.IOperation,NMF.Models.Meta.IOperation,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationParametersParameterRule">
            <summary>
            Rule to assign the contents of the inner rule to Parameters
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationParametersParameterRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationParametersParameterRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.OperationParametersParameterRule.GetCollection(NMF.Models.Meta.IOperation,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationLiteralsLiteralRule">
            <summary>
            Rule to assign the contents of the inner rule to Literals
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationLiteralsLiteralRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationLiteralsLiteralRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.EnumerationLiteralsLiteralRule.GetCollection(NMF.Models.Meta.IEnumeration,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralValueIntegerRule">
            <summary>
            Rule to assign the contents of the inner rule to Value
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralValueIntegerRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralValueIntegerRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralValueIntegerRule.GetValue(NMF.Models.Meta.ILiteral,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.LiteralValueIntegerRule.SetValue(NMF.Models.Meta.ILiteral,System.Nullable{System.Int32},NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeSystemTypeSystemTypeStringRule">
            <summary>
            Rule to assign the contents of the inner rule to SystemType
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeSystemTypeSystemTypeStringRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeSystemTypeSystemTypeStringRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeSystemTypeSystemTypeStringRule.GetValue(NMF.Models.Meta.IPrimitiveType,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.PrimitiveTypeSystemTypeSystemTypeStringRule.SetValue(NMF.Models.Meta.IPrimitiveType,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceContextImportsFileRule">
            <summary>
            Rule to assign the contents of the inner rule to context.Imports
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceContextImportsFileRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceContextImportsFileRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.NamespaceContextImportsFileRule.GetCollection(NMF.Models.Meta.INamespace,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementRemarksTextRule">
            <summary>
            Rule to assign the contents of the inner rule to Remarks
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementRemarksTextRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementRemarksTextRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementRemarksTextRule.GetValue(NMF.Models.Meta.IMetaElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementRemarksTextRule.SetValue(NMF.Models.Meta.IMetaElement,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementSummaryTextRule">
            <summary>
            Rule to assign the contents of the inner rule to Summary
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementSummaryTextRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementSummaryTextRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementSummaryTextRule.GetValue(NMF.Models.Meta.IMetaElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.MetaElementSummaryTextRule.SetValue(NMF.Models.Meta.IMetaElement,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementUpperBoundBoundRule">
            <summary>
            Rule to assign the contents of the inner rule to UpperBound
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementUpperBoundBoundRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementUpperBoundBoundRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementUpperBoundBoundRule.GetValue(NMF.Models.Meta.ITypedElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementUpperBoundBoundRule.SetValue(NMF.Models.Meta.ITypedElement,System.Int32,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementLowerBoundIntegerRule">
            <summary>
            Rule to assign the contents of the inner rule to LowerBound
            </summary>
        </member>
        <member name="P:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementLowerBoundIntegerRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementLowerBoundIntegerRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementLowerBoundIntegerRule.GetValue(NMF.Models.Meta.ITypedElement,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.TypedElementLowerBoundIntegerRule.SetValue(NMF.Models.Meta.ITypedElement,System.Int32,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.AnyMeta.AnyMetaGrammar.CreateParseContext">
            <inheritdoc />
        </member>
    </members>
</doc>
