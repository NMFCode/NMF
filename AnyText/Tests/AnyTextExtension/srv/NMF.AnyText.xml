<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.AnyText</name>
    </assembly>
    <members>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar">
            <summary>
            Denotes a class capable to parse the language anytext
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.LanguageId">
            <summary>
            Gets the language id for this grammar
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GetRootRule(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Gets the root rule
            </summary>
            <returns>the root rule for this grammar</returns>
            <param name="context">a context to resolve the root rule</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRule">
            <summary>
            A rule class representing the rule &apos;Grammar&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.CommentRuleRule">
            <summary>
            A rule class representing the rule &apos;CommentRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.CommentRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleRule">
            <summary>
            A rule class representing the rule &apos;SinglelineCommentRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleRule">
            <summary>
            A rule class representing the rule &apos;MultilineCommentRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportRule">
            <summary>
            A rule class representing the rule &apos;MetamodelImport&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleRule">
            <summary>
            A rule class representing the rule &apos;Rule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ClassRuleRule">
            <summary>
            A rule class representing the rule &apos;ClassRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ClassRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleRule">
            <summary>
            A rule class representing the rule &apos;InheritanceRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleRule">
            <summary>
            A rule class representing the rule &apos;ModelRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRule">
            <summary>
            A rule class representing the rule &apos;DataRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleRule">
            <summary>
            A rule class representing the rule &apos;EscapeRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleRule">
            <summary>
            A rule class representing the rule &apos;FragmentRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleRule">
            <summary>
            A rule class representing the rule &apos;ParanthesisRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleRule">
            <summary>
            A rule class representing the rule &apos;EnumRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleRule">
            <summary>
            A rule class representing the rule &apos;LiteralRule&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeFragmentRule">
            <summary>
            A rule class representing the rule &apos;RuleTypeFragment&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeFragmentRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FormattingInstructionFragmentRule">
            <summary>
            A rule class representing the rule &apos;FormattingInstructionFragment&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FormattingInstructionFragmentRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FormattingInstructionRule">
            <summary>
            A rule class representing the rule &apos;FormattingInstruction&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FormattingInstructionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionRule">
            <summary>
            A rule class representing the rule &apos;ParserExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ConjunctiveParserExpressionRule">
            <summary>
            A rule class representing the rule &apos;ConjunctiveParserExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ConjunctiveParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.BasicParserExpressionRule">
            <summary>
            A rule class representing the rule &apos;BasicParserExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.BasicParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisExpressionRule">
            <summary>
            A rule class representing the rule &apos;ParanthesisExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionRule">
            <summary>
            A rule class representing the rule &apos;SequenceExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.PlusExpressionRule">
            <summary>
            A rule class representing the rule &apos;PlusExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.PlusExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.StarExpressionRule">
            <summary>
            A rule class representing the rule &apos;StarExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.StarExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MaybeExpressionRule">
            <summary>
            A rule class representing the rule &apos;MaybeExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MaybeExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionRule">
            <summary>
            A rule class representing the rule &apos;KeywordExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionRule">
            <summary>
            A rule class representing the rule &apos;ChoiceExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.AssignExpressionRule">
            <summary>
            A rule class representing the rule &apos;AssignExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.AssignExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.AddAssignExpressionRule">
            <summary>
            A rule class representing the rule &apos;AddAssignExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.AddAssignExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ExistsAssignExpressionRule">
            <summary>
            A rule class representing the rule &apos;ExistsAssignExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ExistsAssignExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.NegativeLookaheadExpressionRule">
            <summary>
            A rule class representing the rule &apos;NegativeLookaheadExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.NegativeLookaheadExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRule">
            <summary>
            A rule class representing the rule &apos;RuleExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionRule">
            <summary>
            A rule class representing the rule &apos;ReferenceExpression&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.IdOrContextRefRule">
            <summary>
            A rule class representing the rule &apos;IdOrContextRef&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.IdOrContextRefRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.IDRule">
            <summary>
            A rule class representing the rule &apos;ID&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.IDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.KeywordRule">
            <summary>
            A rule class representing the rule &apos;Keyword&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordRule.Escape(System.String)">
            <summary>
            Escapes the given string
            </summary>
            <returns>the escaped string</returns>
            <param name="value">the unescaped string</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordRule.Unescape(System.String)">
            <summary>
            Unescapes the given string
            </summary>
            <returns>the unescaped string</returns>
            <param name="value">the escaped string</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RegexRule">
            <summary>
            A rule class representing the rule &apos;Regex&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RegexRule.Escape(System.String)">
            <summary>
            Escapes the given string
            </summary>
            <returns>the escaped string</returns>
            <param name="value">the unescaped string</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RegexRule.Unescape(System.String)">
            <summary>
            Unescapes the given string
            </summary>
            <returns>the unescaped string</returns>
            <param name="value">the escaped string</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RegexRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.UriRule">
            <summary>
            A rule class representing the rule &apos;Uri&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.UriRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.CharRule">
            <summary>
            A rule class representing the rule &apos;Char&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.CharRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRulesRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Rules
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRulesRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRulesRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarRulesRuleRule.GetCollection(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarCommentsCommentRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Comments
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarCommentsCommentRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarCommentsCommentRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarCommentsCommentRuleRule.GetCollection(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarImportsMetamodelImportRule">
            <summary>
            Rule to assign the contents of the inner rule to Imports
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarImportsMetamodelImportRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarImportsMetamodelImportRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarImportsMetamodelImportRule.GetCollection(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarStartRuleClassRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to StartRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarStartRuleClassRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarStartRuleClassRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarStartRuleClassRuleRule.GetValue(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarStartRuleClassRuleRule.SetValue(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.Metamodel.IClassRule,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarLanguageIdIDRule">
            <summary>
            Rule to assign the contents of the inner rule to LanguageId
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarLanguageIdIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarLanguageIdIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarLanguageIdIDRule.GetValue(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarLanguageIdIDRule.SetValue(NMF.AnyText.Metamodel.IGrammar,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule">
            <summary>
            Rule to assign the contents of the inner rule to Name
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule.IsIdentifier">
            <summary>
            Gets the first contained rule application that represents an identifier
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule.GetValue(NMF.AnyText.Metamodel.IGrammar,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.GrammarNameIDRule.SetValue(NMF.AnyText.Metamodel.IGrammar,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleStartKeywordRule">
            <summary>
            Rule to assign the contents of the inner rule to Start
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleStartKeywordRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleStartKeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleStartKeywordRule.GetValue(NMF.AnyText.Metamodel.ISinglelineCommentRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineCommentRuleStartKeywordRule.SetValue(NMF.AnyText.Metamodel.ISinglelineCommentRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleEndKeywordRule">
            <summary>
            Rule to assign the contents of the inner rule to End
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleEndKeywordRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleEndKeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleEndKeywordRule.GetValue(NMF.AnyText.Metamodel.IMultilineCommentRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleEndKeywordRule.SetValue(NMF.AnyText.Metamodel.IMultilineCommentRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleStartKeywordRule">
            <summary>
            Rule to assign the contents of the inner rule to Start
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleStartKeywordRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleStartKeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleStartKeywordRule.GetValue(NMF.AnyText.Metamodel.IMultilineCommentRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineCommentRuleStartKeywordRule.SetValue(NMF.AnyText.Metamodel.IMultilineCommentRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportFileUriRule">
            <summary>
            Rule to assign the contents of the inner rule to File
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportFileUriRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportFileUriRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportFileUriRule.GetValue(NMF.AnyText.Metamodel.IMetamodelImport,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportFileUriRule.SetValue(NMF.AnyText.Metamodel.IMetamodelImport,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportPrefixIDRule">
            <summary>
            Rule to assign the contents of the inner rule to Prefix
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportPrefixIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportPrefixIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportPrefixIDRule.GetValue(NMF.AnyText.Metamodel.IMetamodelImport,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MetamodelImportPrefixIDRule.SetValue(NMF.AnyText.Metamodel.IMetamodelImport,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleSubtypesClassRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Subtypes
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleSubtypesClassRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleSubtypesClassRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.InheritanceRuleSubtypesClassRuleRule.GetCollection(NMF.AnyText.Metamodel.IInheritanceRule,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule">
            <summary>
            Rule to assign the contents of the inner rule to Name
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule.IsIdentifier">
            <summary>
            Gets the first contained rule application that represents an identifier
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule.GetValue(NMF.AnyText.Metamodel.IRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleNameIDRule.SetValue(NMF.AnyText.Metamodel.IRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleExpressionParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Expression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleExpressionParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleExpressionParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleExpressionParserExpressionRule.GetValue(NMF.AnyText.Metamodel.IModelRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ModelRuleExpressionParserExpressionRule.SetValue(NMF.AnyText.Metamodel.IModelRule,NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleEscapeRulesEscapeRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to EscapeRules
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleEscapeRulesEscapeRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleEscapeRulesEscapeRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleEscapeRulesEscapeRuleRule.GetCollection(NMF.AnyText.Metamodel.IDataRule,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleSurroundCharacterCharRule">
            <summary>
            Rule to assign the contents of the inner rule to SurroundCharacter
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleSurroundCharacterCharRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleSurroundCharacterCharRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleSurroundCharacterCharRule.GetValue(NMF.AnyText.Metamodel.IDataRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleSurroundCharacterCharRule.SetValue(NMF.AnyText.Metamodel.IDataRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRegexRegexRule">
            <summary>
            Rule to assign the contents of the inner rule to Regex
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRegexRegexRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRegexRegexRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRegexRegexRule.GetValue(NMF.AnyText.Metamodel.IDataRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.DataRuleRegexRegexRule.SetValue(NMF.AnyText.Metamodel.IDataRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleEscapeKeywordRule">
            <summary>
            Rule to assign the contents of the inner rule to Escape
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleEscapeKeywordRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleEscapeKeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleEscapeKeywordRule.GetValue(NMF.AnyText.Metamodel.IEscapeRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleEscapeKeywordRule.SetValue(NMF.AnyText.Metamodel.IEscapeRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleCharacterCharRule">
            <summary>
            Rule to assign the contents of the inner rule to Character
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleCharacterCharRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleCharacterCharRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleCharacterCharRule.GetValue(NMF.AnyText.Metamodel.IEscapeRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EscapeRuleCharacterCharRule.SetValue(NMF.AnyText.Metamodel.IEscapeRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleExpressionParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Expression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleExpressionParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleExpressionParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleExpressionParserExpressionRule.GetValue(NMF.AnyText.Metamodel.IFragmentRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FragmentRuleExpressionParserExpressionRule.SetValue(NMF.AnyText.Metamodel.IFragmentRule,NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeNameIDRule">
            <summary>
            Rule to assign the contents of the inner rule to TypeName
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeNameIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeNameIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeNameIDRule.GetValue(NMF.AnyText.Metamodel.IRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleTypeNameIDRule.SetValue(NMF.AnyText.Metamodel.IRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RulePrefixIDRule">
            <summary>
            Rule to assign the contents of the inner rule to Prefix
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.RulePrefixIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RulePrefixIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RulePrefixIDRule.GetValue(NMF.AnyText.Metamodel.IRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RulePrefixIDRule.SetValue(NMF.AnyText.Metamodel.IRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleClosingParanthesisKeywordExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to ClosingParanthesis
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleClosingParanthesisKeywordExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleClosingParanthesisKeywordExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleClosingParanthesisKeywordExpressionRule.GetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleClosingParanthesisKeywordExpressionRule.SetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.Metamodel.IKeywordExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleInnerRuleClassRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to InnerRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleInnerRuleClassRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleInnerRuleClassRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleInnerRuleClassRuleRule.GetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleInnerRuleClassRuleRule.SetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.Metamodel.IClassRule,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleOpeningParanthesisKeywordExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to OpeningParanthesis
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleOpeningParanthesisKeywordExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleOpeningParanthesisKeywordExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleOpeningParanthesisKeywordExpressionRule.GetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParanthesisRuleOpeningParanthesisKeywordExpressionRule.SetValue(NMF.AnyText.Metamodel.IParanthesisRule,NMF.AnyText.Metamodel.IKeywordExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleLiteralsLiteralRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Literals
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleLiteralsLiteralRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleLiteralsLiteralRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.EnumRuleLiteralsLiteralRuleRule.GetCollection(NMF.AnyText.Metamodel.IEnumRule,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleKeywordParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Keyword
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleKeywordParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleKeywordParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleKeywordParserExpressionRule.GetValue(NMF.AnyText.Metamodel.ILiteralRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleKeywordParserExpressionRule.SetValue(NMF.AnyText.Metamodel.ILiteralRule,NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleLiteralIDRule">
            <summary>
            Rule to assign the contents of the inner rule to Literal
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleLiteralIDRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleLiteralIDRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleLiteralIDRule.GetValue(NMF.AnyText.Metamodel.ILiteralRule,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.LiteralRuleLiteralIDRule.SetValue(NMF.AnyText.Metamodel.ILiteralRule,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionInnerExpressionsConjunctiveParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to InnerExpressions
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionInnerExpressionsConjunctiveParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionInnerExpressionsConjunctiveParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SequenceExpressionInnerExpressionsConjunctiveParserExpressionRule.GetCollection(NMF.AnyText.Metamodel.ISequenceExpression,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.UnaryParserExpressionInnerBasicParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Inner
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.UnaryParserExpressionInnerBasicParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.UnaryParserExpressionInnerBasicParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.UnaryParserExpressionInnerBasicParserExpressionRule.GetValue(NMF.AnyText.Metamodel.IUnaryParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.UnaryParserExpressionInnerBasicParserExpressionRule.SetValue(NMF.AnyText.Metamodel.IUnaryParserExpression,NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionKeywordKeywordRule">
            <summary>
            Rule to assign the contents of the inner rule to Keyword
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionKeywordKeywordRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionKeywordKeywordRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionKeywordKeywordRule.GetValue(NMF.AnyText.Metamodel.IKeywordExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.KeywordExpressionKeywordKeywordRule.SetValue(NMF.AnyText.Metamodel.IKeywordExpression,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionAlternativesConjunctiveParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Alternatives
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionAlternativesConjunctiveParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionAlternativesConjunctiveParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ChoiceExpressionAlternativesConjunctiveParserExpressionRule.GetCollection(NMF.AnyText.Metamodel.IChoiceExpression,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionAssignedBasicParserExpressionRule">
            <summary>
            Rule to assign the contents of the inner rule to Assigned
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionAssignedBasicParserExpressionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionAssignedBasicParserExpressionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionAssignedBasicParserExpressionRule.GetValue(NMF.AnyText.Metamodel.IFeatureExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionAssignedBasicParserExpressionRule.SetValue(NMF.AnyText.Metamodel.IFeatureExpression,NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionFeatureIdOrContextRefRule">
            <summary>
            Rule to assign the contents of the inner rule to Feature
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionFeatureIdOrContextRefRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionFeatureIdOrContextRefRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionFeatureIdOrContextRefRule.GetValue(NMF.AnyText.Metamodel.IFeatureExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.FeatureExpressionFeatureIdOrContextRefRule.SetValue(NMF.AnyText.Metamodel.IFeatureExpression,System.String,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRuleRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Rule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRuleRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRuleRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRuleRuleRule.GetValue(NMF.AnyText.Metamodel.IRuleExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.RuleExpressionRuleRuleRule.SetValue(NMF.AnyText.Metamodel.IRuleExpression,NMF.AnyText.Metamodel.IRule,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionFormatDataRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to Format
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionFormatDataRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionFormatDataRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionFormatDataRuleRule.GetValue(NMF.AnyText.Metamodel.IReferenceExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionFormatDataRuleRule.SetValue(NMF.AnyText.Metamodel.IReferenceExpression,NMF.AnyText.Metamodel.IDataRule,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionReferencedRuleRuleRule">
            <summary>
            Rule to assign the contents of the inner rule to ReferencedRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionReferencedRuleRuleRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionReferencedRuleRuleRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionReferencedRuleRuleRule.GetValue(NMF.AnyText.Metamodel.IReferenceExpression,NMF.AnyText.ParseContext)">
            <summary>
            Gets the value of the given property
            </summary>
            <returns>the property value</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ReferenceExpressionReferencedRuleRuleRule.SetValue(NMF.AnyText.Metamodel.IReferenceExpression,NMF.AnyText.Metamodel.IClassRule,NMF.AnyText.ParseContext)">
            <summary>
            Assigns the value to the given semantic element
            </summary>
            <param name="semanticElement">the context element</param>
            <param name="propertyValue">the value to assign</param>
            <param name="context">the parsing context</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionFormattingInstructionsFormattingInstructionRule">
            <summary>
            Rule to assign the contents of the inner rule to FormattingInstructions
            </summary>
        </member>
        <member name="P:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionFormattingInstructionsFormattingInstructionRule.Feature">
            <summary>
            Gets the name of the feature that is assigned
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionFormattingInstructionsFormattingInstructionRule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.ParserExpressionFormattingInstructionsFormattingInstructionRule.GetCollection(NMF.AnyText.Metamodel.IParserExpression,NMF.AnyText.ParseContext)">
            <summary>
            Obtains the child collection
            </summary>
            <returns>a collection of values</returns>
            <param name="semanticElement">the context element</param>
            <param name="context">the parse context in which the collection is obtained</param>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineComment1Rule">
            <summary>
            Denotes a rule to parse single-line comments starting with &apos;//&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.SinglelineComment1Rule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextGrammar.MultilineComment1Rule">
            <summary>
            Denotes a rule to parse multi-line comments starting with &apos;/*&apos; and ending with &apos;*/&apos;
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextGrammar.MultilineComment1Rule.Initialize(NMF.AnyText.Grammars.GrammarContext)">
            <summary>
            Initializes the current grammar rule
            </summary>
            <param name="context">the grammar context in which the rule is initialized</param>
            <remarks>Do not modify the contents of this method as it will be overridden as the contents of the AnyText file change.</remarks>
        </member>
        <member name="T:NMF.AnyText.Grammars.AnyTextSerializer">
            <summary>
            Denotes a serializer using AnyText
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextSerializer.#ctor(NMF.AnyText.Grammars.Grammar)">
            <summary>
            Creates a new instance
            </summary>
            <param name="grammar">the underlying grammar</param>
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextSerializer.Deserialize(System.IO.Stream,System.Uri,NMF.Models.Repository.IModelRepository,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextSerializer.Serialize(NMF.Models.Model,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.Grammars.AnyTextSerializer.SerializeFragment(NMF.Models.ModelElement,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:NMF.AnyText.Grammars.ReflectiveGrammar">
            <summary>
            Denotes a grammar that resolves rules by nested public classes, allowing rule instantiation
            </summary>
        </member>
        <member name="M:NMF.AnyText.Grammars.ReflectiveGrammar.CreateTypedRules">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.Grammars.ReflectiveGrammar.CreateCustomRules">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.Grammars.ReflectiveGrammar.CreateDefaultRules">
            <summary>
            Creates a collection of default rules
            </summary>
            <returns>a collection of rules</returns>
        </member>
        <member name="M:NMF.AnyText.Grammars.ReflectiveGrammar.CreateParseContext">
            <inheritdoc />
        </member>
        <member name="T:NMF.AnyText.Metamodel.AddAssignExpression">
            <summary>
            The default implementation of the AddAssignExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.AddAssignExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.AddAssignExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.AssignExpression">
            <summary>
            The default implementation of the AssignExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.AssignExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.AssignExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ChoiceExpression">
            <summary>
            The default implementation of the ChoiceExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ChoiceExpression._alternatives">
            <summary>
            The backing field for the Alternatives property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.Alternatives">
            <summary>
            The Alternatives property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.AlternativesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Alternatives property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.AlternativesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Alternatives property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection">
            <summary>
            The collection class to to represent the children of the ChoiceExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.#ctor(NMF.AnyText.Metamodel.ChoiceExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ChoiceExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.ChoiceExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ChoiceExpression.ChoiceExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ClassRule">
            <summary>
            The default implementation of the ClassRule class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ClassRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ClassRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.CommentRule">
            <summary>
            The default implementation of the CommentRule class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.CommentRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.CommentRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.DataRule">
            <summary>
            The default implementation of the DataRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.DataRule._regex">
            <summary>
            The backing field for the Regex property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.DataRule._surroundCharacter">
            <summary>
            The backing field for the SurroundCharacter property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.DataRule._escapeRules">
            <summary>
            The backing field for the EscapeRules property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.Regex">
            <summary>
            The Regex property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.SurroundCharacter">
            <summary>
            The SurroundCharacter property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.EscapeRules">
            <summary>
            The EscapeRules property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.EscapeRulesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the EscapeRules property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.EscapeRulesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the EscapeRules property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the DataRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.DataRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the DataRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.DataRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.DataRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.DataRule.RegexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Regex property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.RegexProxy.#ctor(NMF.AnyText.Metamodel.IDataRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.RegexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.DataRule.SurroundCharacterProxy">
            <summary>
            Represents a proxy to represent an incremental access to the SurroundCharacter property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.DataRule.SurroundCharacterProxy.#ctor(NMF.AnyText.Metamodel.IDataRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.DataRule.SurroundCharacterProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EnumRule">
            <summary>
            The default implementation of the EnumRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.EnumRule._literals">
            <summary>
            The backing field for the Literals property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.Literals">
            <summary>
            The Literals property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.LiteralsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Literals property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.LiteralsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Literals property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the EnumRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.EnumRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the EnumRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.EnumRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EnumRule.EnumRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EscapeRule">
            <summary>
            The default implementation of the EscapeRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.EscapeRule._character">
            <summary>
            The backing field for the Character property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.EscapeRule._escape">
            <summary>
            The backing field for the Escape property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EscapeRule.Character">
            <summary>
            The Character property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EscapeRule.Escape">
            <summary>
            The Escape property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EscapeRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EscapeRule.CharacterProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Character property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.CharacterProxy.#ctor(NMF.AnyText.Metamodel.IEscapeRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EscapeRule.CharacterProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.EscapeRule.EscapeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Escape property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.EscapeRule.EscapeProxy.#ctor(NMF.AnyText.Metamodel.IEscapeRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.EscapeRule.EscapeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ExistsAssignExpression">
            <summary>
            The default implementation of the ExistsAssignExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ExistsAssignExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ExistsAssignExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FeatureExpression">
            <summary>
            The default implementation of the FeatureExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.FeatureExpression._feature">
            <summary>
            The backing field for the Feature property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.FeatureExpression._assigned">
            <summary>
            The backing field for the Assigned property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.Feature">
            <summary>
            The Feature property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.Assigned">
            <summary>
            The Assigned property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.OnResetAssigned(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Assigned property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection">
            <summary>
            The collection class to to represent the children of the FeatureExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.#ctor(NMF.AnyText.Metamodel.FeatureExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the FeatureExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.FeatureExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FeatureExpression.FeatureProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Feature property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.FeatureProxy.#ctor(NMF.AnyText.Metamodel.IFeatureExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.FeatureProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FeatureExpression.AssignedProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Assigned property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FeatureExpression.AssignedProxy.#ctor(NMF.AnyText.Metamodel.IFeatureExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FeatureExpression.AssignedProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FragmentRule">
            <summary>
            The default implementation of the FragmentRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.FragmentRule._expression">
            <summary>
            The backing field for the Expression property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.Expression">
            <summary>
            The Expression property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.OnResetExpression(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Expression property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the FragmentRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.FragmentRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the FragmentRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.FragmentRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.FragmentRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.FragmentRule.ExpressionProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Expression property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.FragmentRule.ExpressionProxy.#ctor(NMF.AnyText.Metamodel.IFragmentRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.FragmentRule.ExpressionProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar">
            <summary>
            The default implementation of the Grammar class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._name">
            <summary>
            The backing field for the Name property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._languageId">
            <summary>
            The backing field for the LanguageId property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._imports">
            <summary>
            The backing field for the Imports property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._comments">
            <summary>
            The backing field for the Comments property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._rules">
            <summary>
            The backing field for the Rules property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Grammar._startRule">
            <summary>
            The backing field for the StartRule property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.LanguageId">
            <summary>
            The LanguageId property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.Imports">
            <summary>
            The Imports property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.Comments">
            <summary>
            The Comments property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.Rules">
            <summary>
            The Rules property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.StartRule">
            <summary>
            The StartRule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.IsIdentified">
            <summary>
            Gets a value indicating whether the current model element can be identified by an attribute value
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.ImportsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Imports property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.ImportsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Imports property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.CommentsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Comments property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.CommentsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Comments property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.RulesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Rules property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.RulesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Rules property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.OnResetStartRule(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the StartRule property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.ToIdentifierString">
            <summary>
            Gets the identifier string for this model element
            </summary>
            <returns>The identifier string</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection">
            <summary>
            The collection class to to represent the children of the Grammar class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.#ctor(NMF.AnyText.Metamodel.Grammar)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Grammar class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.Grammar)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.GrammarReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar.NameProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Name property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.NameProxy.#ctor(NMF.AnyText.Metamodel.IGrammar)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.NameProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar.LanguageIdProxy">
            <summary>
            Represents a proxy to represent an incremental access to the LanguageId property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.LanguageIdProxy.#ctor(NMF.AnyText.Metamodel.IGrammar)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.LanguageIdProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Grammar.StartRuleProxy">
            <summary>
            Represents a proxy to represent an incremental access to the StartRule property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Grammar.StartRuleProxy.#ctor(NMF.AnyText.Metamodel.IGrammar)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Grammar.StartRuleProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IAddAssignExpression">
            <summary>
            The public interface for AddAssignExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IAssignExpression">
            <summary>
            The public interface for AssignExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IChoiceExpression">
            <summary>
            The public interface for ChoiceExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IChoiceExpression.Alternatives">
            <summary>
            The Alternatives property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IClassRule">
            <summary>
            The public interface for ClassRule
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ICommentRule">
            <summary>
            The public interface for CommentRule
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IDataRule">
            <summary>
            The public interface for DataRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IDataRule.Regex">
            <summary>
            The Regex property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IDataRule.SurroundCharacter">
            <summary>
            The SurroundCharacter property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IDataRule.EscapeRules">
            <summary>
            The EscapeRules property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IEnumRule">
            <summary>
            The public interface for EnumRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IEnumRule.Literals">
            <summary>
            The Literals property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IEscapeRule">
            <summary>
            The public interface for EscapeRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IEscapeRule.Character">
            <summary>
            The Character property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IEscapeRule.Escape">
            <summary>
            The Escape property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IExistsAssignExpression">
            <summary>
            The public interface for ExistsAssignExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IFeatureExpression">
            <summary>
            The public interface for FeatureExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IFeatureExpression.Feature">
            <summary>
            The Feature property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IFeatureExpression.Assigned">
            <summary>
            The Assigned property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IFragmentRule">
            <summary>
            The public interface for FragmentRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IFragmentRule.Expression">
            <summary>
            The Expression property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IGrammar">
            <summary>
            The public interface for Grammar
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.LanguageId">
            <summary>
            The LanguageId property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.Imports">
            <summary>
            The Imports property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.Comments">
            <summary>
            The Comments property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.Rules">
            <summary>
            The Rules property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IGrammar.StartRule">
            <summary>
            The StartRule property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IInheritanceRule">
            <summary>
            The public interface for InheritanceRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IInheritanceRule.Subtypes">
            <summary>
            The Subtypes property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IKeywordExpression">
            <summary>
            The public interface for KeywordExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IKeywordExpression.Keyword">
            <summary>
            The Keyword property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ILiteralRule">
            <summary>
            The public interface for LiteralRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ILiteralRule.Literal">
            <summary>
            The Literal property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ILiteralRule.Value">
            <summary>
            The Value property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ILiteralRule.Keyword">
            <summary>
            The Keyword property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IMaybeExpression">
            <summary>
            The public interface for MaybeExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IMetamodelImport">
            <summary>
            The public interface for MetamodelImport
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IMetamodelImport.File">
            <summary>
            The File property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IMetamodelImport.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IModelRule">
            <summary>
            The public interface for ModelRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IModelRule.Expression">
            <summary>
            The Expression property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IMultilineCommentRule">
            <summary>
            The public interface for MultilineCommentRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IMultilineCommentRule.Start">
            <summary>
            The Start property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IMultilineCommentRule.End">
            <summary>
            The End property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.INegativeLookaheadExpression">
            <summary>
            The public interface for NegativeLookaheadExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.InheritanceRule">
            <summary>
            The default implementation of the InheritanceRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.InheritanceRule._subtypes">
            <summary>
            The backing field for the Subtypes property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.InheritanceRule.Subtypes">
            <summary>
            The Subtypes property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.InheritanceRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.InheritanceRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.SubtypesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Subtypes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.SubtypesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Subtypes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the InheritanceRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.InheritanceRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.InheritanceRule.InheritanceRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IParanthesisRule">
            <summary>
            The public interface for ParanthesisRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IParanthesisRule.OpeningParanthesis">
            <summary>
            The OpeningParanthesis property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IParanthesisRule.InnerRule">
            <summary>
            The InnerRule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IParanthesisRule.ClosingParanthesis">
            <summary>
            The ClosingParanthesis property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IParserExpression">
            <summary>
            The public interface for ParserExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IParserExpression.FormattingInstructions">
            <summary>
            The FormattingInstructions property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IPlusExpression">
            <summary>
            The public interface for PlusExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IReferenceExpression">
            <summary>
            The public interface for ReferenceExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IReferenceExpression.ReferencedRule">
            <summary>
            The ReferencedRule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IReferenceExpression.Format">
            <summary>
            The Format property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IRule">
            <summary>
            The public interface for Rule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IRule.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IRule.TypeName">
            <summary>
            The TypeName property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IRule.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IRuleExpression">
            <summary>
            The public interface for RuleExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IRuleExpression.Rule">
            <summary>
            The Rule property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ISequenceExpression">
            <summary>
            The public interface for SequenceExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ISequenceExpression.InnerExpressions">
            <summary>
            The InnerExpressions property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ISinglelineCommentRule">
            <summary>
            The public interface for SinglelineCommentRule
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ISinglelineCommentRule.Start">
            <summary>
            The Start property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IStarExpression">
            <summary>
            The public interface for StarExpression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.IUnaryParserExpression">
            <summary>
            The public interface for UnaryParserExpression
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.IUnaryParserExpression.Inner">
            <summary>
            The Inner property
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.KeywordExpression">
            <summary>
            The default implementation of the KeywordExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.KeywordExpression._keyword">
            <summary>
            The backing field for the Keyword property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.KeywordExpression.Keyword">
            <summary>
            The Keyword property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.KeywordExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.KeywordExpression.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.KeywordExpression.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.KeywordExpression.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.KeywordExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.KeywordExpression.KeywordProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Keyword property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.KeywordExpression.KeywordProxy.#ctor(NMF.AnyText.Metamodel.IKeywordExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.KeywordExpression.KeywordProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule">
            <summary>
            The default implementation of the LiteralRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.LiteralRule._literal">
            <summary>
            The backing field for the Literal property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.LiteralRule._value">
            <summary>
            The backing field for the Value property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.LiteralRule._keyword">
            <summary>
            The backing field for the Keyword property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.Literal">
            <summary>
            The Literal property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.Value">
            <summary>
            The Value property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.Keyword">
            <summary>
            The Keyword property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.OnResetKeyword(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Keyword property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the LiteralRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.LiteralRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the LiteralRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.LiteralRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule.LiteralProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Literal property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.LiteralProxy.#ctor(NMF.AnyText.Metamodel.ILiteralRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.LiteralProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule.ValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Value property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.ValueProxy.#ctor(NMF.AnyText.Metamodel.ILiteralRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.ValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.LiteralRule.KeywordProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Keyword property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.LiteralRule.KeywordProxy.#ctor(NMF.AnyText.Metamodel.ILiteralRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.LiteralRule.KeywordProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MaybeExpression">
            <summary>
            The default implementation of the MaybeExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MaybeExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MaybeExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MetamodelImport">
            <summary>
            The default implementation of the MetamodelImport class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.MetamodelImport._file">
            <summary>
            The backing field for the File property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.MetamodelImport._prefix">
            <summary>
            The backing field for the Prefix property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MetamodelImport.File">
            <summary>
            The File property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MetamodelImport.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MetamodelImport.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MetamodelImport.FileProxy">
            <summary>
            Represents a proxy to represent an incremental access to the File property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.FileProxy.#ctor(NMF.AnyText.Metamodel.IMetamodelImport)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MetamodelImport.FileProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MetamodelImport.PrefixProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Prefix property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MetamodelImport.PrefixProxy.#ctor(NMF.AnyText.Metamodel.IMetamodelImport)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MetamodelImport.PrefixProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ModelRule">
            <summary>
            The default implementation of the ModelRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ModelRule._expression">
            <summary>
            The backing field for the Expression property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.Expression">
            <summary>
            The Expression property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.OnResetExpression(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Expression property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the ModelRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.ModelRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ModelRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.ModelRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ModelRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ModelRule.ExpressionProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Expression property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ModelRule.ExpressionProxy.#ctor(NMF.AnyText.Metamodel.IModelRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ModelRule.ExpressionProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MultilineCommentRule">
            <summary>
            The default implementation of the MultilineCommentRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.MultilineCommentRule._start">
            <summary>
            The backing field for the Start property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.MultilineCommentRule._end">
            <summary>
            The backing field for the End property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MultilineCommentRule.Start">
            <summary>
            The Start property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MultilineCommentRule.End">
            <summary>
            The End property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MultilineCommentRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MultilineCommentRule.StartProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Start property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.StartProxy.#ctor(NMF.AnyText.Metamodel.IMultilineCommentRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MultilineCommentRule.StartProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.MultilineCommentRule.EndProxy">
            <summary>
            Represents a proxy to represent an incremental access to the End property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.MultilineCommentRule.EndProxy.#ctor(NMF.AnyText.Metamodel.IMultilineCommentRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.MultilineCommentRule.EndProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.NegativeLookaheadExpression">
            <summary>
            The default implementation of the NegativeLookaheadExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.NegativeLookaheadExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.NegativeLookaheadExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule">
            <summary>
            The default implementation of the ParanthesisRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ParanthesisRule._openingParanthesis">
            <summary>
            The backing field for the OpeningParanthesis property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ParanthesisRule._innerRule">
            <summary>
            The backing field for the InnerRule property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ParanthesisRule._closingParanthesis">
            <summary>
            The backing field for the ClosingParanthesis property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.OpeningParanthesis">
            <summary>
            The OpeningParanthesis property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.InnerRule">
            <summary>
            The InnerRule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ClosingParanthesis">
            <summary>
            The ClosingParanthesis property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.OnResetOpeningParanthesis(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the OpeningParanthesis property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.OnResetInnerRule(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the InnerRule property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.OnResetClosingParanthesis(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the ClosingParanthesis property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection">
            <summary>
            The collection class to to represent the children of the ParanthesisRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.#ctor(NMF.AnyText.Metamodel.ParanthesisRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ParanthesisRule class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.ParanthesisRule)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ParanthesisRuleReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule.OpeningParanthesisProxy">
            <summary>
            Represents a proxy to represent an incremental access to the OpeningParanthesis property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.OpeningParanthesisProxy.#ctor(NMF.AnyText.Metamodel.IParanthesisRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.OpeningParanthesisProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule.InnerRuleProxy">
            <summary>
            Represents a proxy to represent an incremental access to the InnerRule property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.InnerRuleProxy.#ctor(NMF.AnyText.Metamodel.IParanthesisRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.InnerRuleProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParanthesisRule.ClosingParanthesisProxy">
            <summary>
            Represents a proxy to represent an incremental access to the ClosingParanthesis property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParanthesisRule.ClosingParanthesisProxy.#ctor(NMF.AnyText.Metamodel.IParanthesisRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParanthesisRule.ClosingParanthesisProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ParserExpression">
            <summary>
            The default implementation of the ParserExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ParserExpression._formattingInstructions">
            <summary>
            The backing field for the FormattingInstructions property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParserExpression.FormattingInstructions">
            <summary>
            The FormattingInstructions property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ParserExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.FormattingInstructionsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the FormattingInstructions property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.FormattingInstructionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the FormattingInstructions property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ParserExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.PlusExpression">
            <summary>
            The default implementation of the PlusExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.PlusExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.PlusExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ReferenceExpression">
            <summary>
            The default implementation of the ReferenceExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ReferenceExpression._referencedRule">
            <summary>
            The backing field for the ReferencedRule property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.ReferenceExpression._format">
            <summary>
            The backing field for the Format property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.ReferencedRule">
            <summary>
            The ReferencedRule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.Format">
            <summary>
            The Format property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.OnResetReferencedRule(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the ReferencedRule property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.OnResetFormat(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Format property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ReferenceExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.ReferenceExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferenceExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ReferenceExpression.ReferencedRuleProxy">
            <summary>
            Represents a proxy to represent an incremental access to the ReferencedRule property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.ReferencedRuleProxy.#ctor(NMF.AnyText.Metamodel.IReferenceExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.ReferencedRuleProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.ReferenceExpression.FormatProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Format property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.ReferenceExpression.FormatProxy.#ctor(NMF.AnyText.Metamodel.IReferenceExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.ReferenceExpression.FormatProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Rule">
            <summary>
            The default implementation of the Rule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Rule._name">
            <summary>
            The backing field for the Name property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Rule._typeName">
            <summary>
            The backing field for the TypeName property
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.Rule._prefix">
            <summary>
            The backing field for the Prefix property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.TypeName">
            <summary>
            The TypeName property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.IsIdentified">
            <summary>
            Gets a value indicating whether the current model element can be identified by an attribute value
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.ToIdentifierString">
            <summary>
            Gets the identifier string for this model element
            </summary>
            <returns>The identifier string</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Rule.NameProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Name property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.NameProxy.#ctor(NMF.AnyText.Metamodel.IRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.NameProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Rule.TypeNameProxy">
            <summary>
            Represents a proxy to represent an incremental access to the TypeName property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.TypeNameProxy.#ctor(NMF.AnyText.Metamodel.IRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.TypeNameProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.Rule.PrefixProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Prefix property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.Rule.PrefixProxy.#ctor(NMF.AnyText.Metamodel.IRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.Rule.PrefixProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.RuleExpression">
            <summary>
            The default implementation of the RuleExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.RuleExpression._rule">
            <summary>
            The backing field for the Rule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.RuleExpression.Rule">
            <summary>
            The Rule property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.RuleExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.RuleExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.OnResetRule(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Rule property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the RuleExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.RuleExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.RuleExpression.RuleProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Rule property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.RuleExpression.RuleProxy.#ctor(NMF.AnyText.Metamodel.IRuleExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.RuleExpression.RuleProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.SequenceExpression">
            <summary>
            The default implementation of the SequenceExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.SequenceExpression._innerExpressions">
            <summary>
            The backing field for the InnerExpressions property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.InnerExpressions">
            <summary>
            The InnerExpressions property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.InnerExpressionsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the InnerExpressions property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.InnerExpressionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the InnerExpressions property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection">
            <summary>
            The collection class to to represent the children of the SequenceExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.#ctor(NMF.AnyText.Metamodel.SequenceExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the SequenceExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.SequenceExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SequenceExpression.SequenceExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.SinglelineCommentRule">
            <summary>
            The default implementation of the SinglelineCommentRule class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.SinglelineCommentRule._start">
            <summary>
            The backing field for the Start property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SinglelineCommentRule.Start">
            <summary>
            The Start property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SinglelineCommentRule.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SinglelineCommentRule.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SinglelineCommentRule.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SinglelineCommentRule.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SinglelineCommentRule.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.SinglelineCommentRule.StartProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Start property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.SinglelineCommentRule.StartProxy.#ctor(NMF.AnyText.Metamodel.ISinglelineCommentRule)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.SinglelineCommentRule.StartProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.StarExpression">
            <summary>
            The default implementation of the StarExpression class
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.StarExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.StarExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.UnaryParserExpression">
            <summary>
            The default implementation of the UnaryParserExpression class
            </summary>
        </member>
        <member name="F:NMF.AnyText.Metamodel.UnaryParserExpression._inner">
            <summary>
            The backing field for the Inner property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.Inner">
            <summary>
            The Inner property
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.OnResetInner(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Inner property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection">
            <summary>
            The collection class to to represent the children of the UnaryParserExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.#ctor(NMF.AnyText.Metamodel.UnaryParserExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the UnaryParserExpression class
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.#ctor(NMF.AnyText.Metamodel.UnaryParserExpression)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.UnaryParserExpressionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.AnyText.Metamodel.UnaryParserExpression.InnerProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Inner property
            </summary>
        </member>
        <member name="M:NMF.AnyText.Metamodel.UnaryParserExpression.InnerProxy.#ctor(NMF.AnyText.Metamodel.IUnaryParserExpression)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.AnyText.Metamodel.UnaryParserExpression.InnerProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.AnyText.ModelParseContext">
            <summary>
            Denotes a parse context using model
            </summary>
        </member>
        <member name="M:NMF.AnyText.ModelParseContext.#ctor(NMF.AnyText.Grammars.Grammar,System.StringComparison)">
            <summary>
            Creates a new instance
            </summary>
            <param name="grammar">the grammar for this context</param>
            <param name="stringComparison">the string comparison mode</param>
        </member>
        <member name="M:NMF.AnyText.ModelParseContext.#ctor(NMF.AnyText.Grammars.Grammar,NMF.AnyText.Matcher,System.StringComparison)">
            <summary>
            Creates a new instance
            </summary>
            <param name="grammar">the grammar for this context</param>
            <param name="matcher">the matcher for the context</param>
            <param name="stringComparison">the string comparison mode</param>
        </member>
        <member name="M:NMF.AnyText.ModelParseContext.TryResolveReference``1(System.Object,System.String,``0@)">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.ModelParseContext.GetPotentialReferences``1(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:NMF.AnyText.Model.AddAssignModelReferenceRule`2">
            <summary>
            Denotes the abstract class for a rule that represents a model reference assigned to a collection
            </summary>
            <typeparam name="TSemanticElement">the type of the semantic element</typeparam>
            <typeparam name="TReference">the type of the reference</typeparam>
        </member>
        <member name="M:NMF.AnyText.Model.AddAssignModelReferenceRule`2.GetReferenceString(`1,System.Object,NMF.AnyText.ParseContext)">
            <inheritdoc />
        </member>
        <member name="T:NMF.AnyText.Model.AssignModelReferenceRule`2">
            <summary>
            Denotes the abstract class for a rule that represents a model reference
            </summary>
            <typeparam name="TSemanticElement">the type of the semantic element</typeparam>
            <typeparam name="TReference">the type of the reference</typeparam>
        </member>
        <member name="M:NMF.AnyText.Model.AssignModelReferenceRule`2.GetReferenceString(`1,System.Object,NMF.AnyText.ParseContext)">
            <inheritdoc />
        </member>
        <member name="T:NMF.AnyText.Model.ModelElementRule`1">
            <summary>
            Denotes a rule that is used to create model elements
            </summary>
            <typeparam name="TElement">the type of elements to create</typeparam>
        </member>
        <member name="M:NMF.AnyText.Model.ModelElementRule`1.GetReferenceString(`0,NMF.AnyText.ParseContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.AnyText.Model.ModelElementRule`1.Validate(System.Func{`0,System.String},NMF.AnyText.DiagnosticSeverity)">
            <summary>
            Instructs the rule to validate elements using the given validator method, revalidating after every parse run
            </summary>
            <param name="validator">a function to validate elements</param>
            <param name="severity">the severity of errors</param>
        </member>
        <member name="M:NMF.AnyText.Model.ModelElementRule`1.ValidateIncrementally(System.Linq.Expressions.Expression{System.Func{`0,System.String}},NMF.AnyText.DiagnosticSeverity)">
            <summary>
            Instructs the rule to validate elements using the given validator method incrementally
            </summary>
            <param name="validatorExpression">a function to validate elements</param>
            <param name="severity">the severity of errors</param>
        </member>
        <member name="M:NMF.AnyText.Model.ModelElementRule`1.Validate(`0,NMF.AnyText.Rules.RuleApplication,NMF.AnyText.ParseContext)">
            <inheritdoc />
        </member>
    </members>
</doc>
