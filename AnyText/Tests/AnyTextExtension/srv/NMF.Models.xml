<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.Models</name>
    </assembly>
    <members>
        <member name="T:NMF.Models.AnchorAttribute">
            <summary>
            Denotes that the annotated reference is anchored at the given type
            </summary>
        </member>
        <member name="P:NMF.Models.AnchorAttribute.AnchorType">
            <summary>
            Gets the type of the anchor
            </summary>
        </member>
        <member name="M:NMF.Models.AnchorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="anchorType">the type of the anchor</param>
        </member>
        <member name="T:NMF.Models.ContainmentAttribute">
            <summary>
            Marks a reference as a containment
            </summary>
        </member>
        <member name="P:NMF.Models.ContainmentAttribute.IsContainment">
            <summary>
            Indicates whether the reference is a containment
            </summary>
        </member>
        <member name="M:NMF.Models.ContainmentAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="isContainment">true, if the reference is a containment, otherwise false</param>
        </member>
        <member name="M:NMF.Models.ContainmentAttribute.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:NMF.Models.IdAttribute">
            <summary>
            Marks a property as an id
            </summary>
        </member>
        <member name="P:NMF.Models.IdAttribute.IsId">
            <summary>
            true, if the property is an id, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Models.IdAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="isId">true, if the property is an id, otherwise false</param>
        </member>
        <member name="M:NMF.Models.IdAttribute.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:NMF.Models.LowerBoundAttribute">
            <summary>
            Denotes the lower bound for a given collection
            </summary>
        </member>
        <member name="P:NMF.Models.LowerBoundAttribute.LowerBound">
            <summary>
            Gets the assigned lower bound
            </summary>
        </member>
        <member name="M:NMF.Models.LowerBoundAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="lowerBound">the lower bound</param>
        </member>
        <member name="T:NMF.Models.OppositeAttribute">
            <summary>
            Specifies the opposite of a given property
            </summary>
        </member>
        <member name="P:NMF.Models.OppositeAttribute.Property">
            <summary>
            The opposite property
            </summary>
        </member>
        <member name="M:NMF.Models.OppositeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="oppositeType">the type where the opposite property is defined</param>
            <param name="propertyName">the name of the opposite property</param>
            <exception cref="T:System.ArgumentNullException">thrown if either oppositeType or propertyName is null</exception>
        </member>
        <member name="T:NMF.Models.UpperBoundAttribute">
            <summary>
            Denotes that the underlying collection has an upper bound
            </summary>
        </member>
        <member name="P:NMF.Models.UpperBoundAttribute.UpperBound">
            <summary>
            Gets the upper bound
            </summary>
        </member>
        <member name="M:NMF.Models.UpperBoundAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="upperBound">the upper bound</param>
        </member>
        <member name="T:NMF.Models.BubbledChangeEventArgs">
            <summary>
            Describes that an elementary change in the model elements containment hierarchy has happened
            </summary>
        </member>
        <member name="P:NMF.Models.BubbledChangeEventArgs.Element">
            <summary>
            The original model element directly affected by this change
            </summary>
        </member>
        <member name="P:NMF.Models.BubbledChangeEventArgs.Feature">
            <summary>
            Gets the feature that was affected from the change or null, if not applicable or could not be loaded
            </summary>
        </member>
        <member name="P:NMF.Models.BubbledChangeEventArgs.PropertyName">
            <summary>
            The name of the affected property or null, if no specific property was affected
            </summary>
        </member>
        <member name="P:NMF.Models.BubbledChangeEventArgs.OriginalEventArgs">
            <summary>
            The original event arguments
            </summary>
        </member>
        <member name="P:NMF.Models.BubbledChangeEventArgs.ChangeType">
            <summary>
            Gets the type of change that occured. This defines the type of OriginalEventArgs
            and whether PropertyName is used.
            </summary>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.PropertyChanging(NMF.Models.IModelElement,System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Create an instance of BubbledChangeEventArgs describing an upcoming change of a property value.
            </summary>
            <param name="source">The model element containing the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="eventArgs">The event data of the original event</param>
            <param name="feature">The affected feature</param>
            <returns>The complete event data</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.PropertyChanged(NMF.Models.IModelElement,System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing a change of a property value.
            </summary>
            <param name="source">The model element containing the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="args">The event data of the original event</param>
            <param name="feature">The affected feature</param>
            <returns>The complete event data</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.CollectionChanging(NMF.Models.IModelElement,System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing an upcoming change in a collection.
            </summary>
            <param name="source">The model element containing the collection.</param>
            <param name="propertyName">The name of the collection property.</param>
            <param name="args">The event data of the original event</param>
            <param name="feature">The affected feature</param>
            <returns>The complete event data</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.CollectionChanged(NMF.Models.IModelElement,System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing a change in a collection.
            </summary>
            <param name="source">The model element containing the collection.</param>
            <param name="propertyName">The name of the collection property.</param>
            <param name="args">The event data of the original event</param>
            <param name="feature">The affected feature</param>
            <returns>The complete event data</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.OperationCalling(NMF.Models.IModelElement,NMF.Models.Meta.IOperation,NMF.Models.OperationCallEventArgs)">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing that an operation is being called
            </summary>
            <param name="source">The model element that is the target for the call</param>
            <param name="operation">The operation that is called</param>
            <param name="args">The event arguments, including parameters of the call</param>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.OperationCalled(NMF.Models.IModelElement,NMF.Models.Meta.IOperation,NMF.Models.OperationCallEventArgs)">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing that an operation is being called
            </summary>
            <param name="source">The model element that is the target for the call</param>
            <param name="operation">The operation that is called</param>
            <param name="args">The event arguments, including parameters of the call</param>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.ElementDeleted(NMF.Models.ModelElement,NMF.Models.UriChangedEventArgs)">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing that an element in the tree has been deleted
            </summary>
            <param name="source">The element that has been deleted</param>
            <param name="e">The original event data</param>
            <returns>A BubbledChange event data container</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.ElementCreated(NMF.Models.IModelElement,NMF.Models.UriChangedEventArgs)">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing that an element in the tree has been created
            </summary>
            <param name="child">The child that has been created</param>
            <param name="e">The original event data</param>
            <returns>A BubbledChange event data container</returns>
        </member>
        <member name="M:NMF.Models.BubbledChangeEventArgs.UriChanged(NMF.Models.ModelElement,NMF.Models.UriChangedEventArgs)">
            <summary>
            Creates an instance of BubbledChangeEventArgs describing that the Uri of an element has changed
            </summary>
            <param name="modelElement">The model element whose uri has changed</param>
            <param name="e">The original event data</param>
            <returns>A BubbledChange event data container</returns>
        </member>
        <member name="T:NMF.Models.UriChangedEventArgs">
            <summary>
            Denotes event data that the uri of a model element has changed
            </summary>
        </member>
        <member name="M:NMF.Models.UriChangedEventArgs.#ctor(System.Uri)">
            <summary>
            Creates a new instance
            </summary>
            <param name="oldUri">The old uri</param>
        </member>
        <member name="P:NMF.Models.UriChangedEventArgs.OldUri">
            <summary>
            Gets the old uri of the model element
            </summary>
        </member>
        <member name="T:NMF.Models.ChangeType">
            <summary>
            Describes what kind of change a BubbledChangeEvent wraps.
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.PropertyChanging">
            <summary>
            Denotes that the value of a property is about to change
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.PropertyChanged">
            <summary>
            Denotes that the value of a property has been changed
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.CollectionChanging">
            <summary>
            Denotes that a collection is about to change
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.CollectionChanged">
            <summary>
            Denotes that a collection has changed
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.ElementDeleted">
            <summary>
            Denotes that an element has been deleted
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.ElementCreated">
            <summary>
            Denotes that an element has been created
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.UriChanged">
            <summary>
            Denotes that the uri of a model element has changed
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.OperationCalling">
            <summary>
            Denotes that an operation is about to be called
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.OperationCalled">
            <summary>
            Denotes that an operation has been called
            </summary>
        </member>
        <member name="F:NMF.Models.ChangeType.UnlockRequest">
            <summary>
            Denotes a request to unlock the model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ModelChange">
            <summary>
            The default implementation of the ModelChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChange.Apply">
            <summary>
            Applies the change
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChange.Invert">
            <summary>
            Calculates changes that invert the current change
            </summary>
            <returns>A collection of model changes that invert the current change</returns>
        </member>
        <member name="P:NMF.Models.Changes.ModelChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationPropertyChange">
            <summary>
            The default implementation of the AssociationPropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AssociationPropertyChange._newValue">
            <summary>
            The backing field for the NewValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AssociationPropertyChange._oldValue">
            <summary>
            The backing field for the OldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationPropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationPropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationPropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationPropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.OnNewValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.OnNewValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.OnOldValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.OnOldValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AssociationPropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.AssociationPropertyChange)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.AssociationPropertyChangeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.AssociationPropertyChange.NewValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the newValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.NewValueProxy.#ctor(NMF.Models.Changes.IAssociationPropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.NewValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationPropertyChange.OldValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the oldValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.OldValueProxy.#ctor(NMF.Models.Changes.IAssociationPropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationPropertyChange.OldValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationPropertyChange.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionPropertyChange">
            <summary>
            The default implementation of the CompositionPropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionPropertyChange._newValue">
            <summary>
            The backing field for the NewValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionPropertyChange._oldValue">
            <summary>
            The backing field for the OldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionPropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionPropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionPropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionPropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.OnNewValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.OnNewValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.OnOldValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.OnOldValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionPropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.#ctor(NMF.Models.Changes.CompositionPropertyChange)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionPropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionPropertyChange)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.CompositionPropertyChangeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionPropertyChange.NewValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the newValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.NewValueProxy.#ctor(NMF.Models.Changes.ICompositionPropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.NewValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionPropertyChange.OldValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the oldValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.OldValueProxy.#ctor(NMF.Models.Changes.ICompositionPropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionPropertyChange.OldValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionPropertyChange.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributePropertyChange">
            <summary>
            The default implementation of the AttributePropertyChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AttributePropertyChange._newValue">
            <summary>
            The backing field for the NewValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AttributePropertyChange._oldValue">
            <summary>
            The backing field for the OldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributePropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributePropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributePropertyChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributePropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributePropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributePropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributePropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.OnNewValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.OnNewValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.OnOldValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.OnOldValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributePropertyChange.NewValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the newValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.NewValueProxy.#ctor(NMF.Models.Changes.IAttributePropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributePropertyChange.NewValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributePropertyChange.OldValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the oldValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.OldValueProxy.#ctor(NMF.Models.Changes.IAttributePropertyChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributePropertyChange.OldValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributePropertyChange.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.ChangeTransaction">
            <summary>
            The default implementation of the ChangeTransaction class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.ChangeTransaction._sourceChange">
            <summary>
            The backing field for the SourceChange property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ChangeTransaction._nestedChanges">
            <summary>
            The backing field for the NestedChanges property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.SourceChange">
            <summary>
            The sourceChange property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.NestedChanges">
            <summary>
            The nestedChanges property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ChangeTransaction.SourceChangeChanging">
            <summary>
            Gets fired before the SourceChange property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ChangeTransaction.SourceChangeChanged">
            <summary>
            Gets fired when the SourceChange property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.OnSourceChangeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChangeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.OnSourceChangeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChangeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.OnResetSourceChange(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the SourceChange property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.NestedChangesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the NestedChanges property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.NestedChangesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the NestedChanges property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection">
            <summary>
            The collection class to to represent the children of the ChangeTransaction class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.#ctor(NMF.Models.Changes.ChangeTransaction)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ChangeTransaction class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.#ctor(NMF.Models.Changes.ChangeTransaction)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.ChangeTransactionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.ChangeTransaction.SourceChangeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the sourceChange property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.SourceChangeProxy.#ctor(NMF.Models.Changes.IChangeTransaction)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.ChangeTransaction.SourceChangeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ChangeTransaction.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionDeletion">
            <summary>
            The default implementation of the AssociationCollectionDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AssociationCollectionDeletion._deletedElement">
            <summary>
            The backing field for the DeletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionDeletion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.OnDeletedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.OnDeletedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AssociationCollectionDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.#ctor(NMF.Models.Changes.AssociationCollectionDeletion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.AssociationCollectionDeletionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElementProxy.#ctor(NMF.Models.Changes.IAssociationCollectionDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionDeletion.DeletedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionInsertion">
            <summary>
            The default implementation of the AssociationCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AssociationCollectionInsertion._addedElement">
            <summary>
            The backing field for the AddedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionInsertion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationCollectionInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationCollectionInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.OnAddedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.OnAddedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AssociationCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.#ctor(NMF.Models.Changes.AssociationCollectionInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.DetachCore">
            <inheritdoc />  
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AssociationCollectionInsertionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionInsertion.AddedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.AddedElementProxy.#ctor(NMF.Models.Changes.IAssociationCollectionInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionInsertion.AddedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AssociationCollectionReset">
            <summary>
            The default implementation of the AssociationCollectionReset class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionReset.Apply">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Changes.AssociationCollectionReset.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionReset.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationCollectionReset.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AssociationListDeletion">
            <summary>
            The default implementation of the AssociationListDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AssociationListDeletion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AssociationListDeletion._deletedElement">
            <summary>
            The backing field for the DeletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.OnDeletedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.OnDeletedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AssociationListDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.#ctor(NMF.Models.Changes.AssociationListDeletion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.AssociationListDeletionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListDeletion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.IndexProxy.#ctor(NMF.Models.Changes.IAssociationListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListDeletion.DeletedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.DeletedElementProxy.#ctor(NMF.Models.Changes.IAssociationListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListDeletion.DeletedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AssociationListInsertion">
            <summary>
            The default implementation of the AssociationListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AssociationListInsertion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AssociationListInsertion._addedElement">
            <summary>
            The backing field for the AddedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AssociationListInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.OnAddedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.OnAddedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AssociationListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.#ctor(NMF.Models.Changes.AssociationListInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AssociationListInsertionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListInsertion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.IndexProxy.#ctor(NMF.Models.Changes.IAssociationListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationListInsertion.AddedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.AddedElementProxy.#ctor(NMF.Models.Changes.IAssociationListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AssociationListInsertion.AddedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationListInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionDeletion">
            <summary>
            The default implementation of the CompositionCollectionDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionCollectionDeletion._deletedElement">
            <summary>
            The backing field for the DeletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionDeletion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.OnDeletedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.OnDeletedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionCollectionDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionCollectionDeletion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.CompositionCollectionDeletionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElementProxy.#ctor(NMF.Models.Changes.ICompositionCollectionDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionDeletion.DeletedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionInsertion">
            <summary>
            The default implementation of the CompositionCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionCollectionInsertion._addedElement">
            <summary>
            The backing field for the AddedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionCollectionInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionCollectionInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.OnAddedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.OnAddedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.#ctor(NMF.Models.Changes.CompositionCollectionInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionCollectionInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.CompositionCollectionInsertionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionInsertion.AddedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.AddedElementProxy.#ctor(NMF.Models.Changes.ICompositionCollectionInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionInsertion.AddedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionCollectionReset">
            <summary>
            The default implementation of the CompositionCollectionReset class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionReset.Apply">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Changes.CompositionCollectionReset.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionReset.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionCollectionReset.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionListDeletion">
            <summary>
            The default implementation of the CompositionListDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionListDeletion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionListDeletion._deletedElement">
            <summary>
            The backing field for the DeletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.OnDeletedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.OnDeletedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionListDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionListDeletion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.CompositionListDeletionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListDeletion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.IndexProxy.#ctor(NMF.Models.Changes.ICompositionListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListDeletion.DeletedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.DeletedElementProxy.#ctor(NMF.Models.Changes.ICompositionListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListDeletion.DeletedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionListInsertion">
            <summary>
            The default implementation of the CompositionListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionListInsertion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionListInsertion._addedElement">
            <summary>
            The backing field for the AddedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionListInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.OnAddedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.OnAddedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.#ctor(NMF.Models.Changes.CompositionListInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionListInsertion)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.CompositionListInsertionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListInsertion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.IndexProxy.#ctor(NMF.Models.Changes.ICompositionListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionListInsertion.AddedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.AddedElementProxy.#ctor(NMF.Models.Changes.ICompositionListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionListInsertion.AddedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionListInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty">
            <summary>
            The default implementation of the CompositionMoveIntoProperty class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveIntoProperty._newValue">
            <summary>
            The backing field for the NewValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveIntoProperty._oldValue">
            <summary>
            The backing field for the OldValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveIntoProperty._origin">
            <summary>
            The backing field for the Origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveIntoProperty.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnNewValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnNewValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NewValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnOldValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnOldValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OldValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnOriginChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnOriginChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OnResetOrigin(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Origin property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveIntoProperty class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.#ctor(NMF.Models.Changes.CompositionMoveIntoProperty)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveIntoProperty class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionMoveIntoProperty)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.CompositionMoveIntoPropertyReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty.NewValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the newValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.NewValueProxy.#ctor(NMF.Models.Changes.ICompositionMoveIntoProperty)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.NewValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty.OldValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the oldValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OldValueProxy.#ctor(NMF.Models.Changes.ICompositionMoveIntoProperty)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.OldValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveIntoProperty.OriginProxy">
            <summary>
            Represents a proxy to represent an incremental access to the origin property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.OriginProxy.#ctor(NMF.Models.Changes.ICompositionMoveIntoProperty)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveIntoProperty.OriginProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveIntoProperty.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToCollection">
            <summary>
            The default implementation of the CompositionMoveToCollection class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveToCollection._movedElement">
            <summary>
            The backing field for the MovedElement property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveToCollection._origin">
            <summary>
            The backing field for the Origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.MovedElement">
            <summary>
            The movedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToCollection.MovedElementChanging">
            <summary>
            Gets fired before the MovedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToCollection.MovedElementChanged">
            <summary>
            Gets fired when the MovedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToCollection.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToCollection.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OnMovedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the MovedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OnMovedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the MovedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OnOriginChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OnOriginChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OnResetOrigin(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Origin property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveToCollection class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.#ctor(NMF.Models.Changes.CompositionMoveToCollection)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveToCollection class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionMoveToCollection)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.CompositionMoveToCollectionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToCollection.MovedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the movedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.MovedElementProxy.#ctor(NMF.Models.Changes.ICompositionMoveToCollection)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.MovedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToCollection.OriginProxy">
            <summary>
            Represents a proxy to represent an incremental access to the origin property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.OriginProxy.#ctor(NMF.Models.Changes.ICompositionMoveToCollection)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToCollection.OriginProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToCollection.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList">
            <summary>
            The default implementation of the CompositionMoveToList class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveToList._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveToList._movedElement">
            <summary>
            The backing field for the MovedElement property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.CompositionMoveToList._origin">
            <summary>
            The backing field for the Origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.MovedElement">
            <summary>
            The movedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.MovedElementChanging">
            <summary>
            Gets fired before the MovedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.MovedElementChanged">
            <summary>
            Gets fired when the MovedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.CompositionMoveToList.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnMovedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the MovedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnMovedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the MovedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnOriginChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnOriginChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OriginChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OnResetOrigin(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Origin property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveToList class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.#ctor(NMF.Models.Changes.CompositionMoveToList)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the CompositionMoveToList class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.#ctor(NMF.Models.Changes.CompositionMoveToList)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.CompositionMoveToListReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.IndexProxy.#ctor(NMF.Models.Changes.ICompositionMoveToList)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList.MovedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the movedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.MovedElementProxy.#ctor(NMF.Models.Changes.ICompositionMoveToList)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.MovedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionMoveToList.OriginProxy">
            <summary>
            Represents a proxy to represent an incremental access to the origin property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.OriginProxy.#ctor(NMF.Models.Changes.ICompositionMoveToList)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.CompositionMoveToList.OriginProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionMoveToList.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributeCollectionDeletion">
            <summary>
            The default implementation of the AttributeCollectionDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AttributeCollectionDeletion._deletedValue">
            <summary>
            The backing field for the DeletedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValue">
            <summary>
            The deletedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValueChanging">
            <summary>
            Gets fired before the DeletedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValueChanged">
            <summary>
            Gets fired when the DeletedValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.OnDeletedValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.OnDeletedValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValueProxy.#ctor(NMF.Models.Changes.IAttributeCollectionDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionDeletion.DeletedValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributeCollectionInsertion">
            <summary>
            The default implementation of the AttributeCollectionInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AttributeCollectionInsertion._addedValue">
            <summary>
            The backing field for the AddedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionInsertion.AddedValue">
            <summary>
            The addedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeCollectionInsertion.AddedValueChanging">
            <summary>
            Gets fired before the AddedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeCollectionInsertion.AddedValueChanged">
            <summary>
            Gets fired when the AddedValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.OnAddedValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.OnAddedValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeCollectionInsertion.AddedValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.AddedValueProxy.#ctor(NMF.Models.Changes.IAttributeCollectionInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionInsertion.AddedValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributeCollectionReset">
            <summary>
            The default implementation of the AttributeCollectionReset class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionReset.Apply">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Changes.AttributeCollectionReset.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionReset.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeCollectionReset.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributeListDeletion">
            <summary>
            The default implementation of the AttributeListDeletion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AttributeListDeletion._deletedValue">
            <summary>
            The backing field for the DeletedValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AttributeListDeletion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListDeletion.DeletedValue">
            <summary>
            The deletedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListDeletion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListDeletion.DeletedValueChanging">
            <summary>
            Gets fired before the DeletedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListDeletion.DeletedValueChanged">
            <summary>
            Gets fired when the DeletedValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.OnDeletedValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.OnDeletedValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeletedValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeListDeletion.DeletedValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the deletedValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.DeletedValueProxy.#ctor(NMF.Models.Changes.IAttributeListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListDeletion.DeletedValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeListDeletion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.IndexProxy.#ctor(NMF.Models.Changes.IAttributeListDeletion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListDeletion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListDeletion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.AttributeListInsertion">
            <summary>
            The default implementation of the AttributeListInsertion class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.Apply">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.AttributeListInsertion._index">
            <summary>
            The backing field for the Index property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.AttributeListInsertion._addedValue">
            <summary>
            The backing field for the AddedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListInsertion.AddedValue">
            <summary>
            The addedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListInsertion.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListInsertion.AddedValueChanging">
            <summary>
            Gets fired before the AddedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.AttributeListInsertion.AddedValueChanged">
            <summary>
            Gets fired when the AddedValue property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.OnIndexChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.OnIndexChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IndexChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.OnAddedValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.OnAddedValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AddedValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeListInsertion.IndexProxy">
            <summary>
            Represents a proxy to represent an incremental access to the index property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.IndexProxy.#ctor(NMF.Models.Changes.IAttributeListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListInsertion.IndexProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeListInsertion.AddedValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the addedValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.AddedValueProxy.#ctor(NMF.Models.Changes.IAttributeListInsertion)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.AttributeListInsertion.AddedValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeListInsertion.Invert">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Changes.OperationCall">
            <summary>
            The default implementation of the OperationCall class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.Apply">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.Invert">
            <inheritdoc />
        </member>
        <member name="F:NMF.Models.Changes.OperationCall._operation">
            <summary>
            The backing field for the Operation property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.OperationCall._targetElement">
            <summary>
            The backing field for the TargetElement property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.OperationCall._arguments">
            <summary>
            The backing field for the Arguments property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.Operation">
            <summary>
            The operation property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.TargetElement">
            <summary>
            The targetElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.Arguments">
            <summary>
            The arguments property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationCall.OperationChanging">
            <summary>
            Gets fired before the Operation property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationCall.OperationChanged">
            <summary>
            Gets fired when the Operation property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationCall.TargetElementChanging">
            <summary>
            Gets fired before the TargetElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationCall.TargetElementChanged">
            <summary>
            Gets fired when the TargetElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnOperationChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OperationChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnOperationChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OperationChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnResetOperation(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Operation property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnTargetElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TargetElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnTargetElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TargetElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OnResetTargetElement(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the TargetElement property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.ArgumentsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Arguments property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.ArgumentsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Arguments property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the OperationCall class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.#ctor(NMF.Models.Changes.OperationCall)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationCallReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.OperationCall.OperationProxy">
            <summary>
            Represents a proxy to represent an incremental access to the operation property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.OperationProxy.#ctor(NMF.Models.Changes.IOperationCall)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.OperationProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.OperationCall.TargetElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the targetElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationCall.TargetElementProxy.#ctor(NMF.Models.Changes.IOperationCall)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.OperationCall.TargetElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AssociationChange">
            <summary>
            The default implementation of the AssociationChange class
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AssociationChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AssociationChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.AttributeChange">
            <summary>
            The default implementation of the AttributeChange class
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.AttributeChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.AttributeChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.CompositionChange">
            <summary>
            The default implementation of the CompositionChange class
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.CompositionChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.CompositionChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ElementaryChange">
            <summary>
            The default implementation of the ElementaryChange class
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ElementaryChange._affectedElement">
            <summary>
            The backing field for the AffectedElement property
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ElementaryChange._feature">
            <summary>
            The backing field for the Feature property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.AffectedElement">
            <summary>
            The affectedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.Feature">
            <summary>
            The feature property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ElementaryChange.AffectedElementChanging">
            <summary>
            Gets fired before the AffectedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ElementaryChange.AffectedElementChanged">
            <summary>
            Gets fired when the AffectedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ElementaryChange.FeatureChanging">
            <summary>
            Gets fired before the Feature property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ElementaryChange.FeatureChanged">
            <summary>
            Gets fired when the Feature property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnAffectedElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AffectedElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnAffectedElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AffectedElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnResetAffectedElement(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the AffectedElement property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnFeatureChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the FeatureChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnFeatureChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the FeatureChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.OnResetFeature(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Feature property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ElementaryChange class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.#ctor(NMF.Models.Changes.ElementaryChange)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.ElementaryChangeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.ElementaryChange.AffectedElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the affectedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.AffectedElementProxy.#ctor(NMF.Models.Changes.IElementaryChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.AffectedElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ElementaryChange.FeatureProxy">
            <summary>
            Represents a proxy to represent an incremental access to the feature property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ElementaryChange.FeatureProxy.#ctor(NMF.Models.Changes.IElementaryChange)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.ElementaryChange.FeatureProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationChange">
            <summary>
            The public interface for AssociationChange
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationCollectionDeletion">
            <summary>
            The public interface for AssociationCollectionDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationCollectionDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationCollectionDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationCollectionDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationCollectionInsertion">
            <summary>
            The public interface for AssociationCollectionInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationCollectionInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationCollectionInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationCollectionInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationCollectionReset">
            <summary>
            The public interface for AssociationCollectionReset
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationListDeletion">
            <summary>
            The public interface for AssociationListDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationListDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationListInsertion">
            <summary>
            The public interface for AssociationListInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationListInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationListInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAssociationPropertyChange">
            <summary>
            The public interface for AssociationPropertyChange
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationPropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAssociationPropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationPropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationPropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationPropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAssociationPropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeChange">
            <summary>
            The public interface for AttributeChange
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeCollectionDeletion">
            <summary>
            The public interface for AttributeCollectionDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeCollectionDeletion.DeletedValue">
            <summary>
            The deletedValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeCollectionDeletion.DeletedValueChanging">
            <summary>
            Gets fired before the DeletedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeCollectionDeletion.DeletedValueChanged">
            <summary>
            Gets fired when the DeletedValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeCollectionInsertion">
            <summary>
            The public interface for AttributeCollectionInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeCollectionInsertion.AddedValue">
            <summary>
            The addedValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeCollectionInsertion.AddedValueChanging">
            <summary>
            Gets fired before the AddedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeCollectionInsertion.AddedValueChanged">
            <summary>
            Gets fired when the AddedValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeCollectionReset">
            <summary>
            The public interface for AttributeCollectionReset
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeListDeletion">
            <summary>
            The public interface for AttributeListDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeListDeletion.DeletedValue">
            <summary>
            The deletedValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListDeletion.DeletedValueChanging">
            <summary>
            Gets fired before the DeletedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListDeletion.DeletedValueChanged">
            <summary>
            Gets fired when the DeletedValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributeListInsertion">
            <summary>
            The public interface for AttributeListInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributeListInsertion.AddedValue">
            <summary>
            The addedValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListInsertion.AddedValueChanging">
            <summary>
            Gets fired before the AddedValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributeListInsertion.AddedValueChanged">
            <summary>
            Gets fired when the AddedValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IAttributePropertyChange">
            <summary>
            The public interface for AttributePropertyChange
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributePropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IAttributePropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributePropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributePropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributePropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IAttributePropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IChangeTransaction">
            <summary>
            The public interface for ChangeTransaction
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IChangeTransaction.SourceChange">
            <summary>
            The sourceChange property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IChangeTransaction.NestedChanges">
            <summary>
            The nestedChanges property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IChangeTransaction.SourceChangeChanging">
            <summary>
            Gets fired before the SourceChange property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IChangeTransaction.SourceChangeChanged">
            <summary>
            Gets fired when the SourceChange property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionChange">
            <summary>
            The public interface for CompositionChange
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionCollectionDeletion">
            <summary>
            The public interface for CompositionCollectionDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionCollectionDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionCollectionDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionCollectionDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionCollectionInsertion">
            <summary>
            The public interface for CompositionCollectionInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionCollectionInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionCollectionInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionCollectionInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionCollectionReset">
            <summary>
            The public interface for CompositionCollectionReset
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionListDeletion">
            <summary>
            The public interface for CompositionListDeletion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionListDeletion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionListDeletion.DeletedElement">
            <summary>
            The deletedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListDeletion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListDeletion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListDeletion.DeletedElementChanging">
            <summary>
            Gets fired before the DeletedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListDeletion.DeletedElementChanged">
            <summary>
            Gets fired when the DeletedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionListInsertion">
            <summary>
            The public interface for CompositionListInsertion
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionListInsertion.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionListInsertion.AddedElement">
            <summary>
            The addedElement property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListInsertion.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListInsertion.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListInsertion.AddedElementChanging">
            <summary>
            Gets fired before the AddedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionListInsertion.AddedElementChanged">
            <summary>
            Gets fired when the AddedElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionMoveIntoProperty">
            <summary>
            The public interface for CompositionMoveIntoProperty
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveIntoProperty.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveIntoProperty.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveIntoProperty.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveIntoProperty.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionMoveToCollection">
            <summary>
            The public interface for CompositionMoveToCollection
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveToCollection.MovedElement">
            <summary>
            The movedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveToCollection.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToCollection.MovedElementChanging">
            <summary>
            Gets fired before the MovedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToCollection.MovedElementChanged">
            <summary>
            Gets fired when the MovedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToCollection.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToCollection.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionMoveToList">
            <summary>
            The public interface for CompositionMoveToList
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveToList.Index">
            <summary>
            The index property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveToList.MovedElement">
            <summary>
            The movedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionMoveToList.Origin">
            <summary>
            The origin property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.IndexChanging">
            <summary>
            Gets fired before the Index property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.IndexChanged">
            <summary>
            Gets fired when the Index property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.MovedElementChanging">
            <summary>
            Gets fired before the MovedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.MovedElementChanged">
            <summary>
            Gets fired when the MovedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.OriginChanging">
            <summary>
            Gets fired before the Origin property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionMoveToList.OriginChanged">
            <summary>
            Gets fired when the Origin property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ICompositionPropertyChange">
            <summary>
            The public interface for CompositionPropertyChange
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionPropertyChange.NewValue">
            <summary>
            The newValue property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ICompositionPropertyChange.OldValue">
            <summary>
            The oldValue property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionPropertyChange.NewValueChanging">
            <summary>
            Gets fired before the NewValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionPropertyChange.NewValueChanged">
            <summary>
            Gets fired when the NewValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionPropertyChange.OldValueChanging">
            <summary>
            Gets fired before the OldValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ICompositionPropertyChange.OldValueChanged">
            <summary>
            Gets fired when the OldValue property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IElementaryChange">
            <summary>
            The public interface for ElementaryChange
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IElementaryChange.AffectedElement">
            <summary>
            The affectedElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IElementaryChange.Feature">
            <summary>
            The feature property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IElementaryChange.AffectedElementChanging">
            <summary>
            Gets fired before the AffectedElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IElementaryChange.AffectedElementChanged">
            <summary>
            Gets fired when the AffectedElement property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IElementaryChange.FeatureChanging">
            <summary>
            Gets fired before the Feature property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IElementaryChange.FeatureChanged">
            <summary>
            Gets fired when the Feature property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IModelChange">
            <summary>
            The public interface for ModelChange
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.IModelChange.Apply">
            <summary>
            Applies the change
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.IModelChange.Invert">
            <summary>
            Inverts the change
            </summary>
            <returns>A collection of changes that represent the inversion of the change</returns>
        </member>
        <member name="T:NMF.Models.Changes.IModelChangeSet">
            <summary>
            The public interface for ModelChangeSet
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IModelChangeSet.Changes">
            <summary>
            The changes property
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IOperationArgument">
            <summary>
            The public interface for OperationArgument
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IOperationArgument.Name">
            <summary>
            The name property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationArgument.NameChanging">
            <summary>
            Gets fired before the Name property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationArgument.NameChanged">
            <summary>
            Gets fired when the Name property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IOperationCall">
            <summary>
            The public interface for OperationCall
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IOperationCall.Operation">
            <summary>
            The operation property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IOperationCall.TargetElement">
            <summary>
            The targetElement property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IOperationCall.Arguments">
            <summary>
            The arguments property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationCall.OperationChanging">
            <summary>
            Gets fired before the Operation property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationCall.OperationChanged">
            <summary>
            Gets fired when the Operation property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationCall.TargetElementChanging">
            <summary>
            Gets fired before the TargetElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IOperationCall.TargetElementChanged">
            <summary>
            Gets fired when the TargetElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IReferenceArgument">
            <summary>
            The public interface for ReferenceArgument
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IReferenceArgument.Value">
            <summary>
            The value property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IReferenceArgument.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IReferenceArgument.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.IValueArgument">
            <summary>
            The public interface for ValueArgument
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.IValueArgument.Value">
            <summary>
            The value property
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IValueArgument.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.IValueArgument.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ModelChangeRecorder">
            <summary>
            Represents a recorder for changes to a model.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="isInvertible">ignored</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeRecorder.IsRecording">
            <summary>
            Checks whether the recorder is attached to a model element.
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeRecorder.AttachedElement">
            <summary>
            Gets the attached model element or null, if the recorder is not attached.
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeRecorder.AttachedElements">
            <summary>
            Gets the attached model elements
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Start(NMF.Models.IModelElement)">
            <summary>
            Attaches the recorder to the given model element. The recorder will track all
            changes made to the given element and every element further down in the
            containment hierarchy.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Start">
            <summary>
            Starts recording
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the recorder is already recording</exception>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Attach(NMF.Models.IModelElement)">
            <summary>
            Attaches the recorder to the given model element. The recorder will track all
            changes made to the given element and every element further down in the
            containment hierarchy.
            </summary>
            <param name="element">The model element to attach to</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Attach(NMF.Models.IModelElement,System.Boolean)">
            <summary>
            Attaches the recorder to the given model element. The recorder will track all
            changes made to the given element and every element further down in the
            containment hierarchy.
            </summary>
            <param name="element">The model element to attach to</param>
            <param name="serializable">True, if the recoirder should support serialization, otherwise false</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Detach(NMF.Models.IModelElement)">
            <summary>
            Detaches from the given model element
            </summary>
            <param name="element">The element to detach from</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Detach(NMF.Models.IModelElement,System.Boolean)">
            <summary>
            Detaches from the given model element
            </summary>
            <param name="element">The element to detach from</param>
            <param name="serializable">True, if the recoirder should support serialization, otherwise false</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.DetachAll">
            <summary>
            Detaches from all attached model elements
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.DetachAll(System.Boolean)">
            <summary>
            Detaches from all attached model elements
            </summary>
            <param name="serializable">True, if the recoirder should support serialization, otherwise false</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Reset">
            <summary>
            Resets the model change recorder such that it can be started again
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the recorder is already recording</exception>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.Stop(System.Boolean)">
            <summary>
            Detaches the recorder, stopping the change tracking.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.GetModelChangesAsync">
            <summary>
            Returns previously recorded changes in a tree hierarchy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeRecorder.GetModelChanges">
            <summary>
            Returns previously recorded changes in a tree hierarchy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NMF.Models.Changes.ModelChangeSet">
            <summary>
            The default implementation of the ModelChangeSet class
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ModelChangeSet._changes">
            <summary>
            The backing field for the Changes property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.Changes">
            <summary>
            The changes property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ChangesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Changes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ChangesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Changes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection">
            <summary>
            The collection class to to represent the children of the ModelChangeSet class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.#ctor(NMF.Models.Changes.ModelChangeSet)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ModelChangeSet class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.#ctor(NMF.Models.Changes.ModelChangeSet)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.ModelChangeSetReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.Apply">
            <summary>
            Applies the change set
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.Invert">
            <summary>
            Inverts the change set
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ModelChangeSet.CreateInvertedChangeSet">
            <summary>
            Creates a model change set that represents the inversion of this change set
            </summary>
            <returns>a model change set that represents the inversion of this change set</returns>
        </member>
        <member name="T:NMF.Models.Changes.OperationArgument">
            <summary>
            The default implementation of the OperationArgument class
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.OperationArgument._name">
            <summary>
            The backing field for the Name property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationArgument.Name">
            <summary>
            The name property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.OperationArgument.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationArgument.NameChanging">
            <summary>
            Gets fired before the Name property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.OperationArgument.NameChanged">
            <summary>
            Gets fired when the Name property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NameChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NameChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.OperationArgument.NameProxy">
            <summary>
            Represents a proxy to represent an incremental access to the name property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.OperationArgument.NameProxy.#ctor(NMF.Models.Changes.IOperationArgument)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.OperationArgument.NameProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ReferenceArgument">
            <summary>
            The default implementation of the ReferenceArgument class
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ReferenceArgument._value">
            <summary>
            The backing field for the Value property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ReferenceArgument.Value">
            <summary>
            The value property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ReferenceArgument.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ReferenceArgument.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ReferenceArgument.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ReferenceArgument.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ReferenceArgument class
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.#ctor(NMF.Models.Changes.ReferenceArgument)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ReferenceArgumentReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Changes.ReferenceArgument.ValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the value property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ReferenceArgument.ValueProxy.#ctor(NMF.Models.Changes.IReferenceArgument)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.ReferenceArgument.ValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ValueArgument">
            <summary>
            The default implementation of the ValueArgument class
            </summary>
        </member>
        <member name="F:NMF.Models.Changes.ValueArgument._value">
            <summary>
            The backing field for the Value property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ValueArgument.Value">
            <summary>
            The value property
            </summary>
        </member>
        <member name="P:NMF.Models.Changes.ValueArgument.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ValueArgument.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Changes.ValueArgument.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Changes.ValueArgument.ValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the value property
            </summary>
        </member>
        <member name="M:NMF.Models.Changes.ValueArgument.ValueProxy.#ctor(NMF.Models.Changes.IValueArgument)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Changes.ValueArgument.ValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Collections.AssociationList`1">
            <summary>
            Denotes a collection to store associated elements
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.AssociationList`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationList`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationList`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationList`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableAssociationList`1">
            <summary>
            An observable collection to store associated model elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationList`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationList`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationList`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationList`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.AssociationOrderedSet`1">
            <summary>
            Denotes an ordered set implementation to store associated elements
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.AssociationOrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationOrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationOrderedSet`1.Remove(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableAssociationOrderedSet`1">
            <summary>
            Denotes an observable ordered set to store associated elements
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationOrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationOrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationOrderedSet`1.Remove(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.AssociationSet`1">
            <summary>
            Denotes a set to store associated elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NMF.Models.Collections.AssociationSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.AssociationSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableAssociationSet`1">
            <summary>
            Denotes an observable set to store associated elements
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableAssociationSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.CompositionList`1">
            <summary>
            Denotes the base class for a composition list
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="P:NMF.Models.Collections.CompositionList`1.Parent">
            <summary>
            Gets the parent model element
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.CompositionList`1.#ctor(NMF.Models.ModelElement)">
            <summary>
            Create a new instance
            </summary>
            <param name="parent">The parent model element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the parent is null</exception>
        </member>
        <member name="M:NMF.Models.Collections.CompositionList`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionList`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionList`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionList`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableCompositionList`1">
            <summary>
            Denotes the base class for an observable composition list
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="P:NMF.Models.Collections.ObservableCompositionList`1.Parent">
            <summary>
            Gets the parent model element
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionList`1.#ctor(NMF.Models.ModelElement)">
            <summary>
            Create a new instance
            </summary>
            <param name="parent">The parent model element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parent is null</exception>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionList`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionList`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionList`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionList`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.CompositionOrderedSet`1">
            <summary>
            Denotes the base class for a composition realized as ordered set
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="P:NMF.Models.Collections.CompositionOrderedSet`1.Parent">
            <summary>
            Gets the parent model element
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.CompositionOrderedSet`1.#ctor(NMF.Models.ModelElement)">
            <summary>
            Create new instance
            </summary>
            <param name="parent">The parent model element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parent is null</exception>
        </member>
        <member name="M:NMF.Models.Collections.CompositionOrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionOrderedSet`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionOrderedSet`1.Remove(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.CompositionOrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableCompositionOrderedSet`1">
            <summary>
            Denotes the base class for an observable collection composition implemented as an ordered set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NMF.Models.Collections.ObservableCompositionOrderedSet`1.Parent">
            <summary>
            Gets the parent model element
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionOrderedSet`1.#ctor(NMF.Models.ModelElement)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">The parent model element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the parent is null</exception>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionOrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionOrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionOrderedSet`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionOrderedSet`1.Remove(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.CompositionSet`1">
            <summary>
            Denotes the base class for a composition implemented as a set
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.CompositionSet`1.#ctor(NMF.Models.IModelElement)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">The parent model element</param>
        </member>
        <member name="M:NMF.Models.Collections.CompositionSet`1.SetOpposite(`0,NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ObservableCompositionSet`1">
            <summary>
            Denotes the base class for a composition implemented as a set
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionSet`1.#ctor(NMF.Models.IModelElement)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">The parent model element</param>
        </member>
        <member name="M:NMF.Models.Collections.ObservableCompositionSet`1.SetOpposite(`0,NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Collections.ReferenceCollection">
            <summary>
            Denotes the base class for a collection of referenced elements
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.AttachCore">
            <summary>
            Attaches the collection
            </summary>
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.DetachCore">
            <summary>
            Detaches the collection
            </summary>
        </member>
        <member name="E:NMF.Models.Collections.ReferenceCollection.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Add(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Contains(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Collections.ReferenceCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Collections.ReferenceCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Remove(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.AsNotifiable">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.PropagateCollectionChanges(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Propagate a collection changed event
            </summary>
            <param name="sender">The original sender</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Propagate a value changed event
            </summary>
            <param name="sender">The original sender</param>
            <param name="e">The original event args</param>
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.PropagateValueChanges(System.Object,NMF.Models.BubbledChangeEventArgs)">
            <summary>
            Propagates a bubbled change
            </summary>
            <param name="sender">The original sender</param>
            <param name="e">The original event args</param>
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Collections.ReferenceCollection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.IModelElement">
            <summary>
            Defines the interface of a model element in NMF
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.Delete">
            <summary>
            Deletes the current model element
            </summary>
        </member>
        <member name="E:NMF.Models.IModelElement.Deleted">
            <summary>
            This event is fired after the model element is deleted
            </summary>
        </member>
        <member name="E:NMF.Models.IModelElement.Deleting">
            <summary>
            This event is fired before the model element is deleted
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.IsIdentified">
            <summary>
            Gets a value indicating whether this item can be identified through its ToString value
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.ToIdentifierString">
            <summary>
            Gets an identification string of the model element
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.RelativeUri">
            <summary>
            Gets the relative Uri of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.AbsoluteUri">
            <summary>
            Gets the absolute Uri for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.Resolve(System.String)">
            <summary>
            Resolves the given relative Uri from the current model element
            </summary>
            <param name="relativeUri">A relative uri describing the path to the desired child element</param>
            <returns>The corresponding child element or null, if no such was found</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.Resolve(System.Uri)">
            <summary>
            Resolves the given relative Uri from the current model element
            </summary>
            <param name="relativeUri">A relative uri describing the path to the desired child element</param>
            <returns>The corresponding child element or null, if no such was found</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)">
            <summary>
            Gets the container reference for the given child element
            </summary>
            <param name="child">The child element</param>
            <param name="index">The index of the child in the returned reference</param>
            <returns>A composition reference or null, if the child is not contained in the model element</returns>
        </member>
        <member name="P:NMF.Models.IModelElement.Model">
            <summary>
            Gets the model that contains the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.Parent">
            <summary>
            Gets the container of the current model element
            </summary>
        </member>
        <member name="E:NMF.Models.IModelElement.ParentChanged">
            <summary>
            Gets fired when the container of the current model element has changed
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.Children">
            <summary>
            Gets the children of the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.ReferencedElements">
            <summary>
            Gets the model elements referenced by the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.Extensions">
            <summary>
            Gets the extensions for the current model element
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.GetExtension``1">
            <summary>
            Gets the extension of the given extension type
            </summary>
            <typeparam name="T">The extension type</typeparam>
            <returns>The extension instance for this model element or null, if the extension type was not applied to the current model element</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.GetClass">
            <summary>
            Gets the class of the model element
            </summary>
            <returns>The class of the model element</returns>
        </member>
        <member name="P:NMF.Models.IModelElement.IdentifierString">
            <summary>
            Gets the string representation of the identifier
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.ClassName">
            <summary>
            Gets the name of the class
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)">
            <summary>
            Gets the value for the given attribute and index
            </summary>
            <param name="attribute">The attribute</param>
            <param name="index">The index within the attribute</param>
            <returns>The value for the given attribute. If this is a collection and the index parameter is specified, the method returns the value at the given index</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)">
            <summary>
            Gets the values of the given attribute as a list
            </summary>
            <param name="attribute">The attribute</param>
            <returns>A non-generic list of values</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])">
            <summary>
            Calls the given operation
            </summary>
            <param name="operation">The operation that should be called</param>
            <param name="arguments">The arguments used to call the operation</param>
            <returns>The operation result or null, if the operation does not return any value</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)">
            <summary>
            Gets the referenced model element for the given reference and index
            </summary>
            <param name="reference">The reference</param>
            <param name="index">The index within the reference</param>
            <returns>The value for the given reference. If this is a collection and the index parameter is specified, the method returns the referenced element at the given index</returns>
        </member>
        <member name="M:NMF.Models.IModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)">
            <summary>
            Sets the referenced element of the current model element for the given reference
            </summary>
            <param name="reference">The reference</param>
            <param name="element">The element that should be set</param>
        </member>
        <member name="M:NMF.Models.IModelElement.GetReferencedElements(NMF.Models.Meta.IReference)">
            <summary>
            Gets the referen
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:NMF.Models.IModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)">
            <summary>
            Sets the value of the current model element for the given attribute
            </summary>
            <param name="attribute">The attribute</param>
            <param name="value">The value that should be set</param>
        </member>
        <member name="M:NMF.Models.IModelElement.Freeze">
            <summary>
            Freezes this model element such that it becomes immutable.
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.Lock">
            <summary>
            Locks this model element against any changes (can be undone)
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElement.Unlock">
            <summary>
            Unlocks this model element.
            </summary>
            <exception cref="T:NMF.Models.LockedException">thrown if the model element could not be unlocked</exception>
        </member>
        <member name="M:NMF.Models.IModelElement.TryUnlock">
            <summary>
            Tries to unlock the current model element in order to make changes possible
            </summary>
            <returns>True, if unlocking the model element succeeds, otherwise False</returns>
        </member>
        <member name="P:NMF.Models.IModelElement.IsFrozen">
            <summary>
            Determines whether the model elements and all elements underneath are frozen
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElement.IsLocked">
            <summary>
            Determines whether the model elements and all elements underneath are locked
            </summary>
        </member>
        <member name="E:NMF.Models.IModelElement.BubbledChange">
            <summary>
            Gets fired when an elementary change happens in the composition hierarchy rooted at the current element. The original elementary change can be retrieved in the event data
            </summary>
        </member>
        <member name="T:NMF.Models.IModelElementExtension">
            <summary>
            The public interface for ModelElementExtension
            </summary>
        </member>
        <member name="P:NMF.Models.IModelElementExtension.ExtendedElement">
            <summary>
            The ExtendedElement property
            </summary>
        </member>
        <member name="M:NMF.Models.IModelElementExtension.GetExtension">
            <summary>
            Gets the Extension for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.IsoDateTimeConverter">
            <summary>
            Denotes a type converter that converts date time to string in iso format
            </summary>
        </member>
        <member name="M:NMF.Models.IsoDateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.LockedException">
            <summary>
            This exception is thrown if a change was attempted but the model element is locked
            </summary>
        </member>
        <member name="M:NMF.Models.LockedException.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:NMF.Models.LowercaseBooleanConverter">
            <summary>
            Denotes a type converter that converts booleans to lower case strings
            </summary>
        </member>
        <member name="M:NMF.Models.LowercaseBooleanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Meta.AnnotationEntry">
            <summary>
            The default implementation of the AnnotationEntry class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AnnotationEntry._source">
            <summary>
            The backing field for the Source property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AnnotationEntry._details">
            <summary>
            The backing field for the Details property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AnnotationEntry._annotations">
            <summary>
            The backing field for the Annotations property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.Source">
            <summary>
            The Source property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.Details">
            <summary>
            The Details property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.Annotations">
            <summary>
            The Annotations property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AnnotationEntry.SourceChanged">
            <summary>
            Gets fired when the Source property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AnnotationEntry.SourceChanging">
            <summary>
            Gets fired before the Source property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.OnSourceChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.OnSourceChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.DetailsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Details property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.DetailsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Details property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Annotations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Annotations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection">
            <summary>
            The collection class to to represent the children of the AnnotationEntry class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.#ctor(NMF.Models.Meta.AnnotationEntry)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AnnotationEntry class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.#ctor(NMF.Models.Meta.AnnotationEntry)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.AnnotationEntryReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.AnnotationEntry.SourceProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Source property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationEntry.SourceProxy.#ctor(NMF.Models.Meta.IAnnotationEntry)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationEntry.SourceProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.AnnotationSet">
            <summary>
            The AnnotationSet extension
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AnnotationSet._annotations">
            <summary>
            The backing field for the Annotations property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationSet.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AnnotationSet.Annotations">
            <summary>
            The Annotations property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationSet.AnnotationsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Annotations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationSet.AnnotationsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Annotations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationSet.FromModelElement(NMF.Models.IModelElement)">
            <summary>
            Gets the AnnotationSet extension from the given model element
            </summary>
            <returns>The extension object or null, if the model element does not have this extension</returns>
            <param name="parent">The parent model element that may hold the extension</param>
        </member>
        <member name="M:NMF.Models.Meta.AnnotationSet.GetExtension">
            <summary>
            Gets the extension model element for the given model extension class
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Attribute">
            <summary>
            Represents a simple-valued attribute
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Attribute._defaultValue">
            <summary>
            The backing field for the DefaultValue property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Attribute._refines">
            <summary>
            The backing field for the Refines property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.DefaultValue">
            <summary>
            The default value for this attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.DeclaringType">
            <summary>
            The type that declared this attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.Refines">
            <summary>
            Gets or sets the attribute that is implemented by the current attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.DefaultValueChanged">
            <summary>
            Gets fired when the DefaultValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.DefaultValueChanging">
            <summary>
            Gets fired before the DefaultValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Attribute.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnDefaultValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DefaultValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnDefaultValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DefaultValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnRefinesChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnRefinesChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.OnResetRefines(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Refines property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Attribute class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.#ctor(NMF.Models.Meta.Attribute)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.AttributeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Attribute.DefaultValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DefaultValue property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.DefaultValueProxy.#ctor(NMF.Models.Meta.IAttribute)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.DefaultValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Attribute.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IAttribute)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Attribute.RefinesProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Refines property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Attribute.RefinesProxy.#ctor(NMF.Models.Meta.IAttribute)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Attribute.RefinesProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.AttributeConstraint">
            <summary>
            The default implementation of the AttributeConstraint class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AttributeConstraint._values">
            <summary>
            The backing field for the Values property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.AttributeConstraint._constrains">
            <summary>
            The backing field for the Constrains property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.Values">
            <summary>
            The Values property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.Constrains">
            <summary>
            The Constrains property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AttributeConstraint.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AttributeConstraint.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AttributeConstraint.ConstrainsChanging">
            <summary>
            Gets fired before the Constrains property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.AttributeConstraint.ConstrainsChanged">
            <summary>
            Gets fired when the Constrains property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.ValuesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Values property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.ValuesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Values property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnConstrainsChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ConstrainsChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnConstrainsChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ConstrainsChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.OnResetConstrains(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Constrains property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the AttributeConstraint class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.#ctor(NMF.Models.Meta.AttributeConstraint)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.AttributeConstraintReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.AttributeConstraint.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IAttributeConstraint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.AttributeConstraint.ConstrainsProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Constrains property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.AttributeConstraint.ConstrainsProxy.#ctor(NMF.Models.Meta.IAttributeConstraint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.AttributeConstraint.ConstrainsProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Class">
            <summary>
            Represents a group of instances with common properties like attributes or references
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._isAbstract">
            <summary>
            The backing field for the IsAbstract property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._identifierScope">
            <summary>
            The backing field for the IdentifierScope property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._baseTypes">
            <summary>
            The backing field for the BaseTypes property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._instanceOf">
            <summary>
            The backing field for the InstanceOf property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._identifier">
            <summary>
            The backing field for the Identifier property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._attributeConstraints">
            <summary>
            The backing field for the AttributeConstraints property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Class._referenceConstraints">
            <summary>
            The backing field for the ReferenceConstraints property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.IsAbstract">
            <summary>
            The IsAbstract property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.IdentifierScope">
            <summary>
            Specifies whether the identifier is valid only in the scope of its container or on a global scope.
            </summary>
            <remarks>This attribute is ignored when this class is not identified.</remarks>
        </member>
        <member name="P:NMF.Models.Meta.Class.BaseTypes">
            <summary>
            The BaseTypes property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.InstanceOf">
            <summary>
            The InstanceOf property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.Identifier">
            <summary>
            Gets or sets the attribute that will identify instances of this class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.AttributeConstraints">
            <summary>
            The AttributeConstraints property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.ReferenceConstraints">
            <summary>
            The ReferenceConstraints property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IsAbstractChanged">
            <summary>
            Gets fired when the IsAbstract property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IsAbstractChanging">
            <summary>
            Gets fired before the IsAbstract property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IdentifierScopeChanged">
            <summary>
            Gets fired when the IdentifierScope property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IdentifierScopeChanging">
            <summary>
            Gets fired before the IdentifierScope property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.InstanceOfChanging">
            <summary>
            Gets fired before the InstanceOf property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.InstanceOfChanged">
            <summary>
            Gets fired when the InstanceOf property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IdentifierChanging">
            <summary>
            Gets fired before the Identifier property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Class.IdentifierChanged">
            <summary>
            Gets fired when the Identifier property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIsAbstractChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsAbstractChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIsAbstractChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsAbstractChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIdentifierScopeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdentifierScopeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIdentifierScopeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdentifierScopeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.BaseTypesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the BaseTypes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.BaseTypesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the BaseTypes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnInstanceOfChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the InstanceOfChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnInstanceOfChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the InstanceOfChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnResetInstanceOf(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the InstanceOf property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIdentifierChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdentifierChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnIdentifierChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdentifierChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.OnResetIdentifier(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Identifier property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.AttributeConstraintsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the AttributeConstraints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.AttributeConstraintsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the AttributeConstraints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ReferenceConstraintsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the ReferenceConstraints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ReferenceConstraintsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the ReferenceConstraints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Class.ClassChildrenCollection">
            <summary>
            The collection class to to represent the children of the Class class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.#ctor(NMF.Models.Meta.Class)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.ClassChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Class.ClassReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Class class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.#ctor(NMF.Models.Meta.Class)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Class.ClassReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Class.ClassReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Class.IsAbstractProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsAbstract property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.IsAbstractProxy.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Class.IsAbstractProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Class.IdentifierScopeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IdentifierScope property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.IdentifierScopeProxy.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Class.IdentifierScopeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Class.InstanceOfProxy">
            <summary>
            Represents a proxy to represent an incremental access to the InstanceOf property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.InstanceOfProxy.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Class.InstanceOfProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Class.IdentifierProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Identifier property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Class.IdentifierProxy.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Class.IdentifierProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ClassAttributeConstraintsCollection">
            <summary>
            Denotes a class to implement the AttributeConstraints reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ClassAttributeConstraintsCollection.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Class</param>
        </member>
        <member name="M:NMF.Models.Meta.ClassAttributeConstraintsCollection.SetOpposite(NMF.Models.Meta.IAttributeConstraint,NMF.Models.Meta.IClass)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.ClassExtensions">
            <summary>
            Denotes extension methods for Class instances
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IReference)">
            <summary>
            Determines whether the given reference is refined in the scope of this class
            </summary>
            <param name="class">the context class</param>
            <param name="reference">the reference</param>
            <returns>True, if the reference is refined otherwise False</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.IsRefined(NMF.Models.Meta.IClass,NMF.Models.Meta.IAttribute)">
            <summary>
            Determines whether the given attribute is refined in the scope of this class
            </summary>
            <param name="class">the context class</param>
            <param name="attribute">the attribute</param>
            <returns>True, if the attribute is refined, otherwise False</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.LookupReference(NMF.Models.Meta.IClass,System.String)">
            <summary>
            Looks up the reference with the given name
            </summary>
            <param name="class">the context class</param>
            <param name="name">the name of the reference</param>
            <returns>The reference or null, if no such reference could be found</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.LookupOperation(NMF.Models.Meta.IClass,System.String)">
            <summary>
            Looks up the operation with the given name
            </summary>
            <param name="class">the context class</param>
            <param name="name">the name of the operation</param>
            <returns>The operation or null, if no such operation was found</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.LookupAttribute(NMF.Models.Meta.IClass,System.String)">
            <summary>
            Looks up the attribute with the given name
            </summary>
            <param name="class">the context class</param>
            <param name="name">the name of the attribute</param>
            <returns>The attribute or null, if no such attribute could be found</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.IsContainerReference(NMF.Models.Meta.IReference)">
            <summary>
            Determines whethe the given reference is a reference to the container
            </summary>
            <param name="reference">the reference</param>
            <returns>True, if the reference has an opposite containment reference, otherwise False</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.RetrieveIdentifier(NMF.Models.Meta.IClass)">
            <summary>
            Retrieves the identifier of the class
            </summary>
            <param name="class">the class</param>
            <returns>A scoped identifier</returns>
        </member>
        <member name="M:NMF.Models.Meta.ClassExtensions.IsAssignableFrom(NMF.Models.Meta.IClass,NMF.Models.Meta.IClass)">
            <summary>
            Determines whether an instance of the provided class can be assigned to this class
            </summary>
            <param name="class">the more abstract class</param>
            <param name="specificType">the more concrete class</param>
            <returns>True, if the provided class is a derived class, otherwise False</returns>
        </member>
        <member name="T:NMF.Models.Meta.ClassReferenceConstraintsCollection">
            <summary>
            Denotes a class to implement the ReferenceConstraints reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ClassReferenceConstraintsCollection.#ctor(NMF.Models.Meta.IClass)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Class</param>
        </member>
        <member name="M:NMF.Models.Meta.ClassReferenceConstraintsCollection.SetOpposite(NMF.Models.Meta.IReferenceConstraint,NMF.Models.Meta.IClass)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.DataType">
            <summary>
            Represents a complex immutable data class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.DataType.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.DataType.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Direction">
            <summary>
            Denotes the direction of a parameter
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Direction.In">
             <summary>
            Denotes that the parameter is used as an input parameter
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Direction.Out">
             <summary>
            Denotes that the parameter is used as an output parameter
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Direction.InOut">
             <summary>
            Denotes that the parameter is used both as input and output parameter
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Enumeration">
            <summary>
            The default implementation of the Enumeration class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Enumeration._isFlagged">
            <summary>
            The backing field for the IsFlagged property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Enumeration._literals">
            <summary>
            The backing field for the Literals property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.IsFlagged">
            <summary>
            The IsFlagged property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.Literals">
            <summary>
            The Literals property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Enumeration.IsFlaggedChanged">
            <summary>
            Gets fired when the IsFlagged property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Enumeration.IsFlaggedChanging">
            <summary>
            Gets fired before the IsFlagged property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.OnIsFlaggedChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsFlaggedChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.OnIsFlaggedChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsFlaggedChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.LiteralsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Literals property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.LiteralsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Literals property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection">
            <summary>
            The collection class to to represent the children of the Enumeration class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.#ctor(NMF.Models.Meta.Enumeration)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Enumeration class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.#ctor(NMF.Models.Meta.Enumeration)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.EnumerationReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Enumeration.IsFlaggedProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsFlagged property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Enumeration.IsFlaggedProxy.#ctor(NMF.Models.Meta.IEnumeration)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Enumeration.IsFlaggedProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.EnumerationLiteralsCollection">
            <summary>
            Denotes a class to implement the Literals reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.EnumerationLiteralsCollection.#ctor(NMF.Models.Meta.IEnumeration)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Enumeration</param>
        </member>
        <member name="M:NMF.Models.Meta.EnumerationLiteralsCollection.SetOpposite(NMF.Models.Meta.ILiteral,NMF.Models.Meta.IEnumeration)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.Event">
            <summary>
            Represents an event
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Event._type">
            <summary>
            The backing field for the Type property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Event.Type">
            <summary>
            The Type property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Event.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Event.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Event.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Event.TypeChanging">
            <summary>
            Gets fired before the Type property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Event.TypeChanged">
            <summary>
            Gets fired when the Type property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Event.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Event.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnResetType(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Type property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Event.EventReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Event class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.#ctor(NMF.Models.Meta.Event)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Event.EventReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Event.EventReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Event.TypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Type property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.TypeProxy.#ctor(NMF.Models.Meta.IEvent)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Event.TypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Event.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Event.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IEvent)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Event.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Extension">
            <summary>
            The default implementation of the Extension class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Extension._adornedClass">
            <summary>
            The backing field for the AdornedClass property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Extension.AdornedClass">
            <summary>
            The AdornedClass property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Extension.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Extension.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Extension.AdornedClassChanging">
            <summary>
            Gets fired before the AdornedClass property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Extension.AdornedClassChanged">
            <summary>
            Gets fired when the AdornedClass property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.OnAdornedClassChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AdornedClassChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.OnAdornedClassChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AdornedClassChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.OnResetAdornedClass(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the AdornedClass property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Extension class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.#ctor(NMF.Models.Meta.Extension)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Extension.ExtensionReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Extension.AdornedClassProxy">
            <summary>
            Represents a proxy to represent an incremental access to the AdornedClass property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Extension.AdornedClassProxy.#ctor(NMF.Models.Meta.IExtension)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Extension.AdornedClassProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IAnnotationEntry">
            <summary>
            The public interface for AnnotationEntry
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAnnotationEntry.Source">
            <summary>
            The Source property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAnnotationEntry.Details">
            <summary>
            The Details property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAnnotationEntry.Annotations">
            <summary>
            The Annotations property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAnnotationEntry.SourceChanged">
            <summary>
            Gets fired when the Source property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAnnotationEntry.SourceChanging">
            <summary>
            Gets fired before the Source property changes its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IAttribute">
            <summary>
            The public interface for Attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttribute.DefaultValue">
            <summary>
            The default value for this attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttribute.DeclaringType">
            <summary>
            The type that declared this attribute
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttribute.Refines">
            <summary>
            Gets or sets the attribute that is implemented by the current attribute
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.DefaultValueChanged">
            <summary>
            Gets fired when the DefaultValue property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.DefaultValueChanging">
            <summary>
            Gets fired before the DefaultValue property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttribute.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IAttributeConstraint">
            <summary>
            The public interface for AttributeConstraint
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttributeConstraint.Values">
            <summary>
            The Values property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttributeConstraint.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IAttributeConstraint.Constrains">
            <summary>
            The Constrains property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttributeConstraint.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttributeConstraint.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttributeConstraint.ConstrainsChanging">
            <summary>
            Gets fired before the Constrains property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IAttributeConstraint.ConstrainsChanged">
            <summary>
            Gets fired when the Constrains property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IClass">
            <summary>
            The public interface for Class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.IsAbstract">
            <summary>
            The IsAbstract property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.IdentifierScope">
            <summary>
            Specifies whether the identifier is valid only in the scope of its container or on a global scope.
            </summary>
            <remarks>This attribute is ignored when this class is not identified.</remarks>
        </member>
        <member name="P:NMF.Models.Meta.IClass.BaseTypes">
            <summary>
            The BaseTypes property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.InstanceOf">
            <summary>
            The InstanceOf property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.Identifier">
            <summary>
            Gets or sets the attribute that will identify instances of this class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.AttributeConstraints">
            <summary>
            The AttributeConstraints property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IClass.ReferenceConstraints">
            <summary>
            The ReferenceConstraints property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IsAbstractChanged">
            <summary>
            Gets fired when the IsAbstract property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IsAbstractChanging">
            <summary>
            Gets fired before the IsAbstract property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IdentifierScopeChanged">
            <summary>
            Gets fired when the IdentifierScope property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IdentifierScopeChanging">
            <summary>
            Gets fired before the IdentifierScope property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.InstanceOfChanging">
            <summary>
            Gets fired before the InstanceOf property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.InstanceOfChanged">
            <summary>
            Gets fired when the InstanceOf property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IdentifierChanging">
            <summary>
            Gets fired before the Identifier property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IClass.IdentifierChanged">
            <summary>
            Gets fired when the Identifier property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IDataType">
            <summary>
            The public interface for DataType
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.IdentifierScope.Inherit">
             <summary>
            The identifier scope is inherited from the (first) base class that defines an identifier
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.IdentifierScope.Local">
             <summary>
            The identifier has a local scope, i.e., the identifier identifies an element only in the scope of the parent element
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.IdentifierScope.Global">
             <summary>
            The identifier has a global scope, i.e., there is no other model element with the same identifier
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IdentifierScopeExtensions">
            <summary>
            Denotes extension method for identifier scopes
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.IdentifierScopeExtensions.GetActual(NMF.Models.Meta.IdentifierScope,NMF.Models.Meta.IdentifierScope)">
            <summary>
            Gets the actual identifier scope
            </summary>
            <param name="current">The identifier scope declared</param>
            <param name="inherited">The inherited identifier scope</param>
            <returns>The actual identifier scope</returns>
        </member>
        <member name="T:NMF.Models.Meta.IEnumeration">
            <summary>
            The public interface for Enumeration
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IEnumeration.IsFlagged">
            <summary>
            The IsFlagged property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IEnumeration.Literals">
            <summary>
            The Literals property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEnumeration.IsFlaggedChanged">
            <summary>
            Gets fired when the IsFlagged property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEnumeration.IsFlaggedChanging">
            <summary>
            Gets fired before the IsFlagged property changes its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IEvent">
            <summary>
            The public interface for Event
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IEvent.Type">
            <summary>
            The Type property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IEvent.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEvent.TypeChanging">
            <summary>
            Gets fired before the Type property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEvent.TypeChanged">
            <summary>
            Gets fired when the Type property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEvent.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IEvent.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IExtension">
            <summary>
            The public interface for Extension
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IExtension.AdornedClass">
            <summary>
            The AdornedClass property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IExtension.AdornedClassChanging">
            <summary>
            Gets fired before the AdornedClass property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IExtension.AdornedClassChanged">
            <summary>
            Gets fired when the AdornedClass property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ILiteral">
            <summary>
            The public interface for Literal
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ILiteral.Value">
            <summary>
            The Value property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ILiteral.Enumeration">
            <summary>
            The Enumeration property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ILiteral.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ILiteral.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ILiteral.EnumerationChanging">
            <summary>
            Gets fired before the Enumeration property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ILiteral.EnumerationChanged">
            <summary>
            Gets fired when the Enumeration property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IMetaElement">
            <summary>
            The public interface for MetaElement
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IMetaElement.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IMetaElement.Summary">
            <summary>
            The Summary property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IMetaElement.Remarks">
            <summary>
            The Remarks property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.NameChanged">
            <summary>
            Gets fired when the Name property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.NameChanging">
            <summary>
            Gets fired before the Name property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.SummaryChanged">
            <summary>
            Gets fired when the Summary property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.SummaryChanging">
            <summary>
            Gets fired before the Summary property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.RemarksChanged">
            <summary>
            Gets fired when the Remarks property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IMetaElement.RemarksChanging">
            <summary>
            Gets fired before the Remarks property changes its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IModel">
            <summary>
            The public interface for Model
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IModel.ModelUri">
            <summary>
            The ModelUri property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IModel.RootElements">
            <summary>
            The RootElements property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IModel.ModelUriChanged">
            <summary>
            Gets fired when the ModelUri property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IModel.ModelUriChanging">
            <summary>
            Gets fired before the ModelUri property changes its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.INamespace">
            <summary>
            The public interface for Namespace
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.INamespace.Uri">
            <summary>
            The Uri property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.INamespace.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.INamespace.ParentNamespace">
            <summary>
            The ParentNamespace property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.INamespace.ChildNamespaces">
            <summary>
            The ChildNamespaces property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.INamespace.Types">
            <summary>
            The Types property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.UriChanged">
            <summary>
            Gets fired when the Uri property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.UriChanging">
            <summary>
            Gets fired before the Uri property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.PrefixChanged">
            <summary>
            Gets fired when the Prefix property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.PrefixChanging">
            <summary>
            Gets fired before the Prefix property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.ParentNamespaceChanging">
            <summary>
            Gets fired before the ParentNamespace property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.INamespace.ParentNamespaceChanged">
            <summary>
            Gets fired when the ParentNamespace property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IOperation">
            <summary>
            The public interface for Operation
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IOperation.Parameters">
            <summary>
            The Parameters property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IOperation.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IOperation.Refines">
            <summary>
            The Refines property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IOperation.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IOperation.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IOperation.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IOperation.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IParameter">
            <summary>
            The public interface for Parameter
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IParameter.Direction">
            <summary>
            The Direction property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IParameter.Operation">
            <summary>
            The Operation property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IParameter.DirectionChanged">
            <summary>
            Gets fired when the Direction property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IParameter.DirectionChanging">
            <summary>
            Gets fired before the Direction property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IParameter.OperationChanging">
            <summary>
            Gets fired before the Operation property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IParameter.OperationChanged">
            <summary>
            Gets fired when the Operation property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IPrimitiveType">
            <summary>
            The public interface for PrimitiveType
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IPrimitiveType.SystemType">
            <summary>
            The SystemType property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IPrimitiveType.SystemTypeChanged">
            <summary>
            Gets fired when the SystemType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IPrimitiveType.SystemTypeChanging">
            <summary>
            Gets fired before the SystemType property changes its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IReference">
            <summary>
            The public interface for Reference
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.IsContainment">
            <summary>
            The IsContainment property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.Opposite">
            <summary>
            The Opposite property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.ReferenceType">
            <summary>
            The ReferenceType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.Refines">
            <summary>
            The reference that is refined by the current reference, only applicable if the reference is part of a class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReference.Anchor">
            <summary>
            The least common anchestor of an instance and its referenced element, if statically known
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.IsContainmentChanged">
            <summary>
            Gets fired when the IsContainment property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.IsContainmentChanging">
            <summary>
            Gets fired before the IsContainment property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.OppositeChanging">
            <summary>
            Gets fired before the Opposite property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.OppositeChanged">
            <summary>
            Gets fired when the Opposite property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.ReferenceTypeChanging">
            <summary>
            Gets fired before the ReferenceType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.ReferenceTypeChanged">
            <summary>
            Gets fired when the ReferenceType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.AnchorChanging">
            <summary>
            Gets fired before the Anchor property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReference.AnchorChanged">
            <summary>
            Gets fired when the Anchor property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IReferenceConstraint">
            <summary>
            The public interface for ReferenceConstraint
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReferenceConstraint.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReferenceConstraint.References">
            <summary>
            The References property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReferenceConstraint.Constrains">
            <summary>
            The Constrains property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReferenceConstraint.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReferenceConstraint.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReferenceConstraint.ConstrainsChanging">
            <summary>
            Gets fired before the Constrains property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IReferenceConstraint.ConstrainsChanged">
            <summary>
            Gets fired when the Constrains property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IReferenceType">
            <summary>
            The public interface for ReferenceType
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReferenceType.Events">
            <summary>
            The Events property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IReferenceType.References">
            <summary>
            The References property
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IStructuredType">
            <summary>
            The public interface for StructuredType
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IStructuredType.Operations">
            <summary>
            The Operations property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IStructuredType.Attributes">
            <summary>
            The Attributes property
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.IType">
            <summary>
            The public interface for Type
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.IType.Namespace">
            <summary>
            The Namespace property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IType.NamespaceChanging">
            <summary>
            Gets fired before the Namespace property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.IType.NamespaceChanged">
            <summary>
            Gets fired when the Namespace property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ITypedElement">
            <summary>
            The public interface for TypedElement
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ITypedElement.IsOrdered">
            <summary>
            The IsOrdered property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ITypedElement.IsUnique">
            <summary>
            The IsUnique property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ITypedElement.LowerBound">
            <summary>
            The LowerBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ITypedElement.UpperBound">
            <summary>
            The UpperBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ITypedElement.Type">
            <summary>
            The Type property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.IsOrderedChanged">
            <summary>
            Gets fired when the IsOrdered property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.IsOrderedChanging">
            <summary>
            Gets fired before the IsOrdered property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.IsUniqueChanged">
            <summary>
            Gets fired when the IsUnique property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.IsUniqueChanging">
            <summary>
            Gets fired before the IsUnique property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.LowerBoundChanged">
            <summary>
            Gets fired when the LowerBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.LowerBoundChanging">
            <summary>
            Gets fired before the LowerBound property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.UpperBoundChanged">
            <summary>
            Gets fired when the UpperBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.UpperBoundChanging">
            <summary>
            Gets fired before the UpperBound property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.TypeChanging">
            <summary>
            Gets fired before the Type property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ITypedElement.TypeChanged">
            <summary>
            Gets fired when the Type property changed its value
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Literal">
            <summary>
            The default implementation of the Literal class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Literal._value">
            <summary>
            The backing field for the Value property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Literal.Value">
            <summary>
            The Value property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Literal.Enumeration">
            <summary>
            The Enumeration property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Literal.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Literal.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Literal.ValueChanged">
            <summary>
            Gets fired when the Value property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Literal.ValueChanging">
            <summary>
            Gets fired before the Value property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Literal.EnumerationChanging">
            <summary>
            Gets fired before the Enumeration property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Literal.EnumerationChanged">
            <summary>
            Gets fired when the Enumeration property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnEnumerationChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the EnumerationChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnEnumerationChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the EnumerationChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Literal class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.#ctor(NMF.Models.Meta.Literal)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Literal.LiteralReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Literal.ValueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Value property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.ValueProxy.#ctor(NMF.Models.Meta.ILiteral)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Literal.ValueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Literal.EnumerationProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Enumeration property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Literal.EnumerationProxy.#ctor(NMF.Models.Meta.ILiteral)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Literal.EnumerationProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.MappedType">
            <summary>
            The MappedType extension
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.MappedType._systemType">
            <summary>
            The backing field for the SystemType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MappedType.SystemType">
            <summary>
            The SystemType property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MappedType.SystemTypeChanged">
            <summary>
            Gets fired when the SystemType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MappedType.SystemTypeChanging">
            <summary>
            Gets fired before the SystemType property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MappedType.OnSystemTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SystemTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MappedType.OnSystemTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SystemTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MappedType.FromType(NMF.Models.Meta.IType)">
            <summary>
            Gets the MappedType extension from the given model element
            </summary>
            <returns>The extension object or null, if the model element does not have this extension</returns>
            <param name="parent">The parent model element that may hold the extension</param>
        </member>
        <member name="M:NMF.Models.Meta.MappedType.GetExtension">
            <summary>
            Gets the extension model element for the given model extension class
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.MetaElement">
            <summary>
            The default implementation of the MetaElement class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.MetaElement._name">
            <summary>
            The backing field for the Name property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.MetaElement._summary">
            <summary>
            The backing field for the Summary property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.MetaElement._remarks">
            <summary>
            The backing field for the Remarks property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.Name">
            <summary>
            The Name property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.Summary">
            <summary>
            The Summary property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.Remarks">
            <summary>
            The Remarks property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.IsIdentified">
            <summary>
            Gets a value indicating whether the current model element can be identified by an attribute value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.NameChanged">
            <summary>
            Gets fired when the Name property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.NameChanging">
            <summary>
            Gets fired before the Name property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.SummaryChanged">
            <summary>
            Gets fired when the Summary property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.SummaryChanging">
            <summary>
            Gets fired before the Summary property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.RemarksChanged">
            <summary>
            Gets fired when the Remarks property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.MetaElement.RemarksChanging">
            <summary>
            Gets fired before the Remarks property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NameChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NameChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnSummaryChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SummaryChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnSummaryChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SummaryChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnRemarksChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RemarksChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.OnRemarksChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RemarksChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.ToIdentifierString">
            <summary>
            Gets the identifier string for this model element
            </summary>
            <returns>The identifier string</returns>
        </member>
        <member name="T:NMF.Models.Meta.MetaElement.NameProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Name property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.NameProxy.#ctor(NMF.Models.Meta.IMetaElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.NameProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.MetaElement.SummaryProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Summary property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.SummaryProxy.#ctor(NMF.Models.Meta.IMetaElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.SummaryProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.MetaElement.RemarksProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Remarks property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.MetaElement.RemarksProxy.#ctor(NMF.Models.Meta.IMetaElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.MetaElement.RemarksProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ModelElementExtensionsCollection">
            <summary>
            Denotes a collection type for extensions of model elements
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ModelElementExtensionsCollection.#ctor(NMF.Models.IModelElement)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent element</param>
        </member>
        <member name="M:NMF.Models.Meta.ModelElementExtensionsCollection.SetOpposite(NMF.Models.IModelElementExtension,NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Meta.Namespace">
            <summary>
            The default implementation of the Namespace class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Namespace._uri">
            <summary>
            The backing field for the Uri property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Namespace._prefix">
            <summary>
            The backing field for the Prefix property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Namespace._childNamespaces">
            <summary>
            The backing field for the ChildNamespaces property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Namespace._types">
            <summary>
            The backing field for the Types property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.Uri">
            <summary>
            The Uri property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.Prefix">
            <summary>
            The Prefix property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.ParentNamespace">
            <summary>
            The ParentNamespace property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.ChildNamespaces">
            <summary>
            The ChildNamespaces property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.Types">
            <summary>
            The Types property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.UriChanged">
            <summary>
            Gets fired when the Uri property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.UriChanging">
            <summary>
            Gets fired before the Uri property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.PrefixChanged">
            <summary>
            Gets fired when the Prefix property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.PrefixChanging">
            <summary>
            Gets fired before the Prefix property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.ParentNamespaceChanging">
            <summary>
            Gets fired before the ParentNamespace property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Namespace.ParentNamespaceChanged">
            <summary>
            Gets fired when the ParentNamespace property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnUriChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UriChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnUriChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UriChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnPrefixChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the PrefixChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnPrefixChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the PrefixChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnParentNamespaceChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ParentNamespaceChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnParentNamespaceChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ParentNamespaceChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.ChildNamespacesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the ChildNamespaces property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.ChildNamespacesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the ChildNamespaces property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.TypesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Types property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.TypesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Types property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Namespace.NamespaceChildrenCollection">
            <summary>
            The collection class to to represent the children of the Namespace class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.#ctor(NMF.Models.Meta.Namespace)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Namespace class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.#ctor(NMF.Models.Meta.Namespace)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.NamespaceReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Namespace.UriProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Uri property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.UriProxy.#ctor(NMF.Models.Meta.INamespace)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.UriProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Namespace.PrefixProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Prefix property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.PrefixProxy.#ctor(NMF.Models.Meta.INamespace)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.PrefixProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Namespace.ParentNamespaceProxy">
            <summary>
            Represents a proxy to represent an incremental access to the ParentNamespace property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Namespace.ParentNamespaceProxy.#ctor(NMF.Models.Meta.INamespace)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Namespace.ParentNamespaceProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.NamespaceChildNamespacesCollection">
            <summary>
            Denotes a class to implement the ChildNamespaces reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.NamespaceChildNamespacesCollection.#ctor(NMF.Models.Meta.INamespace)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Namespace</param>
        </member>
        <member name="M:NMF.Models.Meta.NamespaceChildNamespacesCollection.SetOpposite(NMF.Models.Meta.INamespace,NMF.Models.Meta.INamespace)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.NamespaceTypesCollection">
            <summary>
            Denotes a class to implement the Types reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.NamespaceTypesCollection.#ctor(NMF.Models.Meta.INamespace)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Namespace</param>
        </member>
        <member name="M:NMF.Models.Meta.NamespaceTypesCollection.SetOpposite(NMF.Models.Meta.IType,NMF.Models.Meta.INamespace)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.Operation">
            <summary>
            The default implementation of the Operation class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Operation._parameters">
            <summary>
            The backing field for the Parameters property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Operation._refines">
            <summary>
            The backing field for the Refines property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.Parameters">
            <summary>
            The Parameters property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.Refines">
            <summary>
            The Refines property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Operation.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Operation.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Operation.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Operation.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.ParametersCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Parameters property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.ParametersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Parameters property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnRefinesChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnRefinesChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OnResetRefines(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Refines property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Operation.OperationChildrenCollection">
            <summary>
            The collection class to to represent the children of the Operation class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.#ctor(NMF.Models.Meta.Operation)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.OperationChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Operation.OperationReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Operation class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.#ctor(NMF.Models.Meta.Operation)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Operation.OperationReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Operation.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IOperation)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Operation.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Operation.RefinesProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Refines property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Operation.RefinesProxy.#ctor(NMF.Models.Meta.IOperation)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Operation.RefinesProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.OperationParametersCollection">
            <summary>
            Denotes a class to implement the Parameters reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.OperationParametersCollection.#ctor(NMF.Models.Meta.IOperation)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent Operation</param>
        </member>
        <member name="M:NMF.Models.Meta.OperationParametersCollection.SetOpposite(NMF.Models.Meta.IParameter,NMF.Models.Meta.IOperation)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.Parameter">
            <summary>
            The default implementation of the Parameter class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Parameter._direction">
            <summary>
            The backing field for the Direction property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.Direction">
            <summary>
            The Direction property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.Operation">
            <summary>
            The Operation property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Parameter.DirectionChanged">
            <summary>
            Gets fired when the Direction property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Parameter.DirectionChanging">
            <summary>
            Gets fired before the Direction property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Parameter.OperationChanging">
            <summary>
            Gets fired before the Operation property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Parameter.OperationChanged">
            <summary>
            Gets fired when the Operation property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnDirectionChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DirectionChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnDirectionChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DirectionChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnOperationChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OperationChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnOperationChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OperationChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Parameter class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.#ctor(NMF.Models.Meta.Parameter)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.ParameterReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Parameter.DirectionProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Direction property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.DirectionProxy.#ctor(NMF.Models.Meta.IParameter)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.DirectionProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Parameter.OperationProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Operation property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Parameter.OperationProxy.#ctor(NMF.Models.Meta.IParameter)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Parameter.OperationProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.PrimitiveType">
            <summary>
            The default implementation of the PrimitiveType class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.PrimitiveType._systemType">
            <summary>
            The backing field for the SystemType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.PrimitiveType.SystemType">
            <summary>
            The SystemType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.PrimitiveType.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.PrimitiveType.SystemTypeChanged">
            <summary>
            Gets fired when the SystemType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.PrimitiveType.SystemTypeChanging">
            <summary>
            Gets fired before the SystemType property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.OnSystemTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SystemTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.OnSystemTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SystemTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.PrimitiveType.SystemTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the SystemType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.PrimitiveType.SystemTypeProxy.#ctor(NMF.Models.Meta.IPrimitiveType)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.PrimitiveType.SystemTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference">
            <summary>
            The default implementation of the Reference class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._isContainment">
            <summary>
            The backing field for the IsContainment property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._opposite">
            <summary>
            The backing field for the Opposite property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._referenceType">
            <summary>
            The backing field for the ReferenceType property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._refines">
            <summary>
            The backing field for the Refines property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._anchor">
            <summary>
            The backing field for the Anchor property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._isOrdered">
            <summary>
            The backing field for the IsOrdered property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._isUnique">
            <summary>
            The backing field for the IsUnique property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._lowerBound">
            <summary>
            The backing field for the LowerBound property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.Reference._upperBound">
            <summary>
            The backing field for the UpperBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsContainment">
            <summary>
            The IsContainment property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.Opposite">
            <summary>
            The Opposite property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.ReferenceType">
            <summary>
            The ReferenceType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.Refines">
            <summary>
            The reference that is refined by the current reference, only applicable if the reference is part of a class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.Anchor">
            <summary>
            The least common anchestor of an instance and its referenced element, if statically known
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsOrdered">
            <summary>
            The IsOrdered property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsUnique">
            <summary>
            The IsUnique property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.LowerBound">
            <summary>
            The LowerBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.UpperBound">
            <summary>
            The UpperBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsContainmentChanged">
            <summary>
            Gets fired when the IsContainment property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsContainmentChanging">
            <summary>
            Gets fired before the IsContainment property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.OppositeChanging">
            <summary>
            Gets fired before the Opposite property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.OppositeChanged">
            <summary>
            Gets fired when the Opposite property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.ReferenceTypeChanging">
            <summary>
            Gets fired before the ReferenceType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.ReferenceTypeChanged">
            <summary>
            Gets fired when the ReferenceType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.RefinesChanging">
            <summary>
            Gets fired before the Refines property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.RefinesChanged">
            <summary>
            Gets fired when the Refines property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.AnchorChanging">
            <summary>
            Gets fired before the Anchor property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.AnchorChanged">
            <summary>
            Gets fired when the Anchor property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsOrderedChanged">
            <summary>
            Gets fired when the IsOrdered property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsOrderedChanging">
            <summary>
            Gets fired before the IsOrdered property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsUniqueChanged">
            <summary>
            Gets fired when the IsUnique property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.IsUniqueChanging">
            <summary>
            Gets fired before the IsUnique property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.LowerBoundChanged">
            <summary>
            Gets fired when the LowerBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.LowerBoundChanging">
            <summary>
            Gets fired before the LowerBound property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.UpperBoundChanged">
            <summary>
            Gets fired when the UpperBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Reference.UpperBoundChanging">
            <summary>
            Gets fired before the UpperBound property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsContainmentChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsContainmentChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsContainmentChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsContainmentChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnOppositeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OppositeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnOppositeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the OppositeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnResetOpposite(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Opposite property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnReferenceTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ReferenceTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnReferenceTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ReferenceTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnResetReferenceType(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the ReferenceType property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnRefinesChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnRefinesChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the RefinesChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnResetRefines(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Refines property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnAnchorChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AnchorChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnAnchorChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the AnchorChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnResetAnchor(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Anchor property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsOrderedChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsOrderedChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsOrderedChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsOrderedChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsUniqueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsUniqueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnIsUniqueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsUniqueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnLowerBoundChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the LowerBoundChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnLowerBoundChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the LowerBoundChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnUpperBoundChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UpperBoundChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OnUpperBoundChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UpperBoundChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Reference class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.#ctor(NMF.Models.Meta.Reference)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Reference.IsContainmentProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsContainment property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.IsContainmentProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsContainmentProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.OppositeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Opposite property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.OppositeProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.OppositeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.ReferenceTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the ReferenceType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.ReferenceTypeProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.ReferenceTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.RefinesProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Refines property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.RefinesProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.RefinesProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.AnchorProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Anchor property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.AnchorProxy.#ctor(NMF.Models.Meta.IReference)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.AnchorProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.IsOrderedProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsOrdered property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.IsOrderedProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsOrderedProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.IsUniqueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsUnique property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.IsUniqueProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.IsUniqueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.LowerBoundProxy">
            <summary>
            Represents a proxy to represent an incremental access to the LowerBound property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.LowerBoundProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.LowerBoundProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.UpperBoundProxy">
            <summary>
            Represents a proxy to represent an incremental access to the UpperBound property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.UpperBoundProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.UpperBoundProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Reference.TypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Type property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Reference.TypeProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Reference.TypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceConstraint">
            <summary>
            The default implementation of the ReferenceConstraint class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.ReferenceConstraint._references">
            <summary>
            The backing field for the References property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.ReferenceConstraint._constrains">
            <summary>
            The backing field for the Constrains property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.DeclaringType">
            <summary>
            The DeclaringType property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.References">
            <summary>
            The References property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.Constrains">
            <summary>
            The Constrains property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ReferenceConstraint.DeclaringTypeChanging">
            <summary>
            Gets fired before the DeclaringType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ReferenceConstraint.DeclaringTypeChanged">
            <summary>
            Gets fired when the DeclaringType property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ReferenceConstraint.ConstrainsChanging">
            <summary>
            Gets fired before the Constrains property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.ReferenceConstraint.ConstrainsChanged">
            <summary>
            Gets fired when the Constrains property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnDeclaringTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnDeclaringTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DeclaringTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferencesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the References property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferencesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the References property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnConstrainsChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ConstrainsChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnConstrainsChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ConstrainsChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.OnResetConstrains(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Constrains property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ReferenceConstraint class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.#ctor(NMF.Models.Meta.ReferenceConstraint)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ReferenceConstraintReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceConstraint.DeclaringTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the DeclaringType property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.DeclaringTypeProxy.#ctor(NMF.Models.Meta.IReferenceConstraint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.DeclaringTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceConstraint.ConstrainsProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Constrains property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceConstraint.ConstrainsProxy.#ctor(NMF.Models.Meta.IReferenceConstraint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceConstraint.ConstrainsProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceType">
            <summary>
            The default implementation of the ReferenceType class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.ReferenceType._events">
            <summary>
            The backing field for the Events property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.ReferenceType._references">
            <summary>
            The backing field for the References property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.Events">
            <summary>
            The Events property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.References">
            <summary>
            The References property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.EventsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Events property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.EventsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Events property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferencesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the References property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferencesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the References property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection">
            <summary>
            The collection class to to represent the children of the ReferenceType class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.#ctor(NMF.Models.Meta.ReferenceType)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the ReferenceType class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.#ctor(NMF.Models.Meta.ReferenceType)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceType.ReferenceTypeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceTypeEventsCollection">
            <summary>
            Denotes a class to implement the Events reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceTypeEventsCollection.#ctor(NMF.Models.Meta.IReferenceType)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent ReferenceType</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceTypeEventsCollection.SetOpposite(NMF.Models.Meta.IEvent,NMF.Models.Meta.IReferenceType)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.ReferenceTypeReferencesCollection">
            <summary>
            Denotes a class to implement the References reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceTypeReferencesCollection.#ctor(NMF.Models.Meta.IReferenceType)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent ReferenceType</param>
        </member>
        <member name="M:NMF.Models.Meta.ReferenceTypeReferencesCollection.SetOpposite(NMF.Models.Meta.IReference,NMF.Models.Meta.IReferenceType)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.SerializationInformation">
            <summary>
            The SerializationInformation extension
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.SerializationInformation._serializationName">
            <summary>
            The backing field for the SerializationName property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.SerializationInformation._isDefault">
            <summary>
            The backing field for the IsDefault property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.SerializationInformation.SerializationName">
            <summary>
            The SerializationName property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.SerializationInformation.IsDefault">
            <summary>
            The IsDefault property
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.SerializationInformation.SerializationNameChanged">
            <summary>
            Gets fired when the SerializationName property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.SerializationInformation.SerializationNameChanging">
            <summary>
            Gets fired before the SerializationName property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.SerializationInformation.IsDefaultChanged">
            <summary>
            Gets fired when the IsDefault property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.SerializationInformation.IsDefaultChanging">
            <summary>
            Gets fired before the IsDefault property changes its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.OnSerializationNameChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SerializationNameChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.OnSerializationNameChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SerializationNameChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.OnIsDefaultChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsDefaultChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.OnIsDefaultChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsDefaultChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.FromMetaElement(NMF.Models.Meta.IMetaElement)">
            <summary>
            Gets the SerializationInformation extension from the given model element
            </summary>
            <returns>The extension object or null, if the model element does not have this extension</returns>
            <param name="parent">The parent model element that may hold the extension</param>
        </member>
        <member name="M:NMF.Models.Meta.SerializationInformation.GetExtension">
            <summary>
            Gets the extension model element for the given model extension class
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.StructuredType">
            <summary>
            The default implementation of the StructuredType class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.StructuredType._operations">
            <summary>
            The backing field for the Operations property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.StructuredType._attributes">
            <summary>
            The backing field for the Attributes property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.Operations">
            <summary>
            The Operations property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.Attributes">
            <summary>
            The Attributes property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.OperationsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Operations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.OperationsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Operations property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.AttributesCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Attributes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.AttributesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Attributes property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection">
            <summary>
            The collection class to to represent the children of the StructuredType class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.#ctor(NMF.Models.Meta.StructuredType)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the StructuredType class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.#ctor(NMF.Models.Meta.StructuredType)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredType.StructuredTypeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.StructuredTypeAttributesCollection">
            <summary>
            Denotes a class to implement the Attributes reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredTypeAttributesCollection.#ctor(NMF.Models.Meta.IStructuredType)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent StructuredType</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredTypeAttributesCollection.SetOpposite(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IStructuredType)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.StructuredTypeOperationsCollection">
            <summary>
            Denotes a class to implement the Operations reference
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.StructuredTypeOperationsCollection.#ctor(NMF.Models.Meta.IStructuredType)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent StructuredType</param>
        </member>
        <member name="M:NMF.Models.Meta.StructuredTypeOperationsCollection.SetOpposite(NMF.Models.Meta.IOperation,NMF.Models.Meta.IStructuredType)">
            <summary>
            Sets the opposite of the given item
            </summary>
            <param name="item">the item</param>
            <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        </member>
        <member name="T:NMF.Models.Meta.Type">
            <summary>
            The default implementation of the Type class
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Type.Namespace">
            <summary>
            The Namespace property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Type.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Type.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Type.NamespaceChanging">
            <summary>
            Gets fired before the Namespace property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.Type.NamespaceChanged">
            <summary>
            Gets fired when the Namespace property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.OnNamespaceChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NamespaceChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element is about to change
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.OnNamespaceChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the NamespaceChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parent model element of the current model element changes
            </summary>
            <param name="oldParent">The old parent model element</param>
            <param name="newParent">The new parent model element</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.Type.TypeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Type class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.#ctor(NMF.Models.Meta.Type)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.Type.TypeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.Type.TypeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.Type.NamespaceProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Namespace property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.Type.NamespaceProxy.#ctor(NMF.Models.Meta.IType)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.Type.NamespaceProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement">
            <summary>
            The default implementation of the TypedElement class
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.TypedElement._isOrdered">
            <summary>
            The backing field for the IsOrdered property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.TypedElement._isUnique">
            <summary>
            The backing field for the IsUnique property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.TypedElement._lowerBound">
            <summary>
            The backing field for the LowerBound property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.TypedElement._upperBound">
            <summary>
            The backing field for the UpperBound property
            </summary>
        </member>
        <member name="F:NMF.Models.Meta.TypedElement._type">
            <summary>
            The backing field for the Type property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.IsOrdered">
            <summary>
            The IsOrdered property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.IsUnique">
            <summary>
            The IsUnique property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.LowerBound">
            <summary>
            The LowerBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.UpperBound">
            <summary>
            The UpperBound property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.Type">
            <summary>
            The Type property
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.IsOrderedChanged">
            <summary>
            Gets fired when the IsOrdered property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.IsOrderedChanging">
            <summary>
            Gets fired before the IsOrdered property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.IsUniqueChanged">
            <summary>
            Gets fired when the IsUnique property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.IsUniqueChanging">
            <summary>
            Gets fired before the IsUnique property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.LowerBoundChanged">
            <summary>
            Gets fired when the LowerBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.LowerBoundChanging">
            <summary>
            Gets fired before the LowerBound property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.UpperBoundChanged">
            <summary>
            Gets fired when the UpperBound property changed its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.UpperBoundChanging">
            <summary>
            Gets fired before the UpperBound property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.TypeChanging">
            <summary>
            Gets fired before the Type property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Meta.TypedElement.TypeChanged">
            <summary>
            Gets fired when the Type property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnIsOrderedChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsOrderedChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnIsOrderedChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsOrderedChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnIsUniqueChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsUniqueChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnIsUniqueChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IsUniqueChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnLowerBoundChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the LowerBoundChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnLowerBoundChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the LowerBoundChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnUpperBoundChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UpperBoundChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnUpperBoundChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the UpperBoundChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.OnResetType(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Type property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the TypedElement class
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.#ctor(NMF.Models.Meta.TypedElement)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.AttachCore">
            <summary>
            Registers event hooks to keep the collection up to date
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.DetachCore">
            <summary>
            Unregisters all event hooks registered by AttachCore
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypedElementReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.IsOrderedProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsOrdered property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.IsOrderedProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.IsOrderedProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.IsUniqueProxy">
            <summary>
            Represents a proxy to represent an incremental access to the IsUnique property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.IsUniqueProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.IsUniqueProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.LowerBoundProxy">
            <summary>
            Represents a proxy to represent an incremental access to the LowerBound property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.LowerBoundProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.LowerBoundProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.UpperBoundProxy">
            <summary>
            Represents a proxy to represent an incremental access to the UpperBound property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.UpperBoundProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.UpperBoundProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypedElement.TypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the Type property
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypedElement.TypeProxy.#ctor(NMF.Models.Meta.ITypedElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Meta.TypedElement.TypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Models.Meta.TypeExtensions">
            <summary>
            Denotes common extensions to types
            </summary>
        </member>
        <member name="M:NMF.Models.Meta.TypeExtensions.Parse(NMF.Models.Meta.IType,System.String)">
            <summary>
            Parses the given textual representation into an object
            </summary>
            <param name="type">The type of the data</param>
            <param name="input">The actual inputs</param>
            <returns>A deserialized object</returns>
        </member>
        <member name="M:NMF.Models.Meta.TypeExtensions.Serialize(NMF.Models.Meta.IType,System.Object)">
            <summary>
            Serializes the given value of the provided type into a string
            </summary>
            <param name="type">The model type of the object</param>
            <param name="value">The value</param>
            <returns>A string representation</returns>
        </member>
        <member name="T:NMF.Models.Model">
            <summary>
            Denotes a container for model elements
            </summary>
        </member>
        <member name="F:NMF.Models.Model._modelUri">
            <summary>
            The backing field for the ModelUri property
            </summary>
        </member>
        <member name="F:NMF.Models.Model._rootElements">
            <summary>
            The backing field for the RootElements property
            </summary>
        </member>
        <member name="P:NMF.Models.Model.FragmentPrefix">
            <summary>
            Gets or sets the prefix used for model fragments
            </summary>
        </member>
        <member name="M:NMF.Models.Model.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Model.ModelUri">
            <summary>
            The ModelUri property
            </summary>
        </member>
        <member name="P:NMF.Models.Model.RootElements">
            <summary>
            The RootElements property
            </summary>
        </member>
        <member name="P:NMF.Models.Model.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Model.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Models.Model.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Models.Model.ModelUriChanging">
            <summary>
            Gets fired before the ModelUri property changes its value
            </summary>
        </member>
        <member name="E:NMF.Models.Model.ModelUriChanged">
            <summary>
            Gets fired when the ModelUri property changed its value
            </summary>
        </member>
        <member name="M:NMF.Models.Model.OnModelUriChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ModelUriChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Model.OnModelUriChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the ModelUriChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Models.Model.RootElementsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the RootElements property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Model.RootElementsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the RootElements property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Models.Model.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Models.Model.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Models.Model.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Models.Model.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.Model.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Models.Model.ModelChildrenCollection">
            <summary>
            The collection class to to represent the children of the Model class
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.#ctor(NMF.Models.Model)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Model.ModelChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Model.ModelChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Model.ModelReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Model class
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.#ctor(NMF.Models.Model)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Models.Model.ModelReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Models.Model.ModelReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Models.Model.ModelUriProxy">
            <summary>
            Represents a proxy to represent an incremental access to the ModelUri property
            </summary>
        </member>
        <member name="M:NMF.Models.Model.ModelUriProxy.#ctor(NMF.Models.Model)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Models.Model.ModelUriProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="P:NMF.Models.Model.PromoteSingleRootElement">
            <summary>
            This configuration sets whether a model should be identified with its single root model if such an element exists
            </summary>
        </member>
        <member name="P:NMF.Models.Model.Repository">
            <summary>
            The repository that manages this model
            </summary>
        </member>
        <member name="M:NMF.Models.Model.GetModelElementForReference(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.RegisterId(System.String,NMF.Models.ModelElement)">
            <summary>
            Registers the given model element with the given id
            </summary>
            <param name="id">The identifier</param>
            <param name="element">That element to register with the id</param>
            <returns>True, if the registration process was successful. Otherwise, False denotes that already an element with this identifier existed.</returns>
        </member>
        <member name="M:NMF.Models.Model.UnregisterId(System.String)">
            <summary>
            Unregister the given identifier
            </summary>
            <param name="id">The identifier</param>
            <returns>True, if the identifier is removed. False denotes that this identifier was not registered</returns>
        </member>
        <member name="M:NMF.Models.Model.CreateUriForElement(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.SimplifyUri(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.ResolveGlobal(System.String)">
            <summary>
            Resolves the given global ID
            </summary>
            <param name="id">The given global id</param>
            <returns>The model element with the given id or null, if no such element is found</returns>
        </member>
        <member name="M:NMF.Models.Model.Resolve(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.GetRelativePathForChild(NMF.Models.IModelElement)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.EnsureAllElementsContained">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Model.SerializeAsReference(NMF.Models.IModelElement)">
            <summary>
            Determines whether the given reference should be serialized as a reference
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="E:NMF.Models.Model.UnlockRequested">
            <summary>
            Raised when an unlock was requested for the model
            </summary>
        </member>
        <member name="M:NMF.Models.Model.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.ModelElement">
            <summary>
            Defines the base class for a model element implementation
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.Model">
            <summary>
            Gets the model that contains the current model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.Freeze">
            <summary>
            Freezes this model element such that it becomes immutable.
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.Lock">
            <summary>
            Locks this model element against any changes (can be undone)
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.IsFrozen">
            <summary>
            Gets a value indicating whether the model element is closed for any future modifications
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.IsLocked">
            <summary>
            Gets a value indicating whether the model element is temporarily locked
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.Unlock">
            <summary>
            Unlocks this model element.
            </summary>
            <exception cref="T:NMF.Models.LockedException">thrown if the model element could not be unlocked</exception>
        </member>
        <member name="M:NMF.Models.ModelElement.TryUnlock">
            <summary>
            Tries to unlock the current model element in order to make changes possible
            </summary>
            <returns>True, if unlocking the model element succeeds, otherwise False</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.SetParent(NMF.Models.IModelElement)">
            <summary>
            Sets the parentElement for the current model element to the given element
            </summary>
            <param name="newParent">The new parentElement for the given element</param>
        </member>
        <member name="M:NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)">
            <summary>
            Gets the container reference for the given child element
            </summary>
            <param name="child">The child element</param>
            <param name="index">The index of the child in the returned reference</param>
            <returns>A composition reference or null, if the child is not contained in the model element</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)">
            <summary>
            Propagates through the composition hierarchy that an entire subtree has been added to a new model
            </summary>
            <param name="newModel">The new model that will host the subtree</param>
            <param name="oldModel">The old model of the subtree</param>
            <param name="subtreeRoot">The root element of the inserted subtree</param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)">
            <summary>
            Gets called when a new model element is added as a child of the current model element
            </summary>
            <param name="child">The child element</param>
            <remarks>This method is not called if an existing model element is moved in the composition hierarchy</remarks>
        </member>
        <member name="M:NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parentElement element of the current element changes
            </summary>
            <param name="newParent">The new parentElement element</param>
            <param name="oldParent">The old parentElement element</param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Gets called when the parentElement element of the current element changes
            </summary>
            <param name="newParent">The new parentElement element</param>
            <param name="oldParent">The old parentElement element</param>
        </member>
        <member name="P:NMF.Models.ModelElement.Parent">
            <summary>
            Gets or sets the parentElement element for the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.Children">
            <summary>
            Gets a collection with the children of the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.RelativeUri">
            <summary>
            Gets the relative Uri for the current model element
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.AbsoluteUri">
            <summary>
            Gets the abolute Uri for the current model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)">
            <summary>
            Creates the uri with the given fragment starting from the current model element
            </summary>
            <param name="fragment">The fragment starting from this element</param>
            <param name="absolute">True, if an absolute Uri is desired, otherwise false</param>
            <param name="baseElement">The element from which the uri shall be created or null</param>
            <returns>A uri (relative or absolute)</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)">
            <summary>
            Creates a uri with the given fragment
            </summary>
            <param name="fragment">The fragment</param>
            <param name="absolute">True when the Uri should be absolute, otherwise False</param>
            <returns>A uri with the given fragment</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Informs the model that the current model element has a new id
            </summary>
            <param name="e">The event data for the value change of the identifier</param>
        </member>
        <member name="P:NMF.Models.ModelElement.EnforceModels">
            <summary>
            Gets or sets a value indicating whether a correct model containment should be enforced
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.PreferIdentifiers">
            <summary>
            Gets or sets whether identifiers should be preferred in the serialization
            </summary>
        </member>
        <member name="P:NMF.Models.ModelElement.IsIdentified">
            <summary>
            Gets a value indicating whether this item can be identified through its ToString value
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.ToIdentifierString">
            <summary>
            Gets the identifier for this model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.ToString">
            <summary>
            Gets a string representation of the current model element
            </summary>
            <returns>A string representation of the current model element</returns>
        </member>
        <member name="P:NMF.Models.ModelElement.IdentifierString">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Models.ModelElement.ClassName">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)">
            <summary>
            Notifies clients that the identifier changed
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:NMF.Models.ModelElement.Resolve(System.Uri)">
            <summary>
            Resolves the given relative Uri from the current model element
            </summary>
            <param name="relativeUri">A relative uri describing the path to the desired child element</param>
            <returns>The corresponding child element or null, if no such was found</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.Resolve(System.String)">
            <summary>
            Resolves the given path starting from the current element
            </summary>
            <param name="relativeUri">The path</param>
            <returns>The element corresponding to the given path or null, if no such element could be found</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative Uri for the given child element
            </summary>
            <param name="child">The child element</param>
            <returns>A relative Uri to resolve the child element</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative Uri for the given child element that is not identified
            </summary>
            <param name="child">The child element</param>
            <returns>A relative Uri to resolve the child element</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)">
            <summary>
            Gets the model element for the given relative Uri
            </summary>
            <param name="segment">The relative Uri</param>
            <returns>The model element that corresponds to the given Uri</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Gets the Model element for the given reference and index
            </summary>
            <param name="reference">The reference name in upper case</param>
            <param name="index">The index of the element within the reference</param>
            <returns>The model element at the given reference</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <param name="feature">The features name in upper case</param>
            <returns>A non-generic list of elements</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Gets the attribute value for the given attribute
            </summary>
            <param name="attribute">The attributes name in upper case</param>
            <param name="index">The attributes index</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.SetFeature(System.String,System.Object)">
            <summary>
            Sets the given feature to the given value
            </summary>
            <param name="feature">The name of the feature that should be set</param>
            <param name="value">The value that should be set</param>
        </member>
        <member name="M:NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])">
            <summary>
            Calls the given operation
            </summary>
            <param name="operation">The operation that should be called</param>
            <param name="arguments">The arguments used to call the operation</param>
            <returns>The operation result or null, if the operation does not return any value</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetExpressionForReference(System.String)">
            <summary>
            Gets a property expression for the given reference
            </summary>
            <param name="reference">The name of the requested reference in upper case</param>
            <returns>A property expression</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetExpressionForAttribute(System.String)">
            <summary>
            Gets a property expression for the given attribute
            </summary>
            <param name="attribute">The requested attribute in upper case</param>
            <returns>A property expression</returns>
        </member>
        <member name="P:NMF.Models.ModelElement.Extensions">
            <summary>
            Gets a collection of model element extensions that have been applied to this model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.GetExtension``1">
            <summary>
            Gets the extension with the given extension type
            </summary>
            <typeparam name="T">The model element extension type</typeparam>
            <returns>The extension of the given extension type or null, if no such exists</returns>
        </member>
        <member name="P:NMF.Models.ModelElement.ReferencedElements">
            <summary>
            Gets a collection of model elements referenced from this element.
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Gets called when the PropertyChanged event is fired
            </summary>
            <param name="propertyName">The name of the changed property</param>
            <param name="valueChangedEvent">The original event data</param>
            <param name="feature">The feature</param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Gets called when the PropertyChanging event is fired
            </summary>
            <param name="propertyName">The name of the changed property</param>
            <param name="feature">The feature</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:NMF.Models.ModelElement.Delete">
            <summary>
            Deletes the current model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)">
            <summary>
            Gets called before the model element gets deleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)">
            <summary>
            Gets called when the model element gets deleted
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="E:NMF.Models.ModelElement.PropertyChanged">
            <summary>
            Gets fired when a property value changes
            </summary>
        </member>
        <member name="E:NMF.Models.ModelElement.PropertyChanging">
            <summary>
            Gets fired before a property value changes
            </summary>
        </member>
        <member name="E:NMF.Models.ModelElement.Deleted">
            <summary>
            Gets fired after the model element has been deleted
            </summary>
        </member>
        <member name="E:NMF.Models.ModelElement.Deleting">
            <summary>
            Gets fired before the model element gets deleted
            </summary>
        </member>
        <member name="E:NMF.Models.ModelElement.UriChanged">
            <summary>
            Gets fired when the Uri of this element changes
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.GetClass">
            <summary>
            Gets the class of the current model element
            </summary>
            <returns>The class of the current model element</returns>
        </member>
        <member name="P:NMF.Models.ModelElement.ClassInstance">
            <summary>
            Gets the NMeta class object for this type
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)">
            <summary>
            Gets the referenced element of the current model element for the given reference
            </summary>
            <param name="reference">The reference</param>
            <param name="index">The index of the desired model element, if multi-valued reference</param>
            <returns>The referenced element for the given reference</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)">
            <summary>
            Sets the referenced element of the current model element for the given reference
            </summary>
            <param name="reference">The reference</param>
            <param name="element">The element that should be set</param>
        </member>
        <member name="M:NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)">
            <summary>
            Gets the referenced elements of the current model element for the given reference
            </summary>
            <param name="reference">The reference</param>
            <returns>A collection of referenced elements</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)">
            <summary>
            Gets the value of the current model element under the given attribute
            </summary>
            <param name="attribute">The attribute</param>
            <param name="index">The index of the desired value, if multi-valued attribute</param>
            <returns>The attributes value</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)">
            <summary>
            Sets the value of the current model element for the given attribute
            </summary>
            <param name="attribute">The attribute</param>
            <param name="value">The value that should be set</param>
        </member>
        <member name="M:NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)">
            <summary>
            Gets the values for the given attribute
            </summary>
            <param name="attribute">The attribute whose value is queried</param>
            <returns>The attribute value collection</returns>
        </member>
        <member name="M:NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Raises the Bubbled Change event for the given collection change
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
            <param name="e">The event data</param>
            <param name="feature">The feature that is changing</param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})">
            <summary>
            Raises the Bubbled Change event for the given upcoming collection change
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
            <param name="e">The event data</param>
            <param name="feature">The feature that is changing</param>
        </member>
        <member name="M:NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)">
            <summary>
            Fires the BubbledChange event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="E:NMF.Models.ModelElement.BubbledChange">
            <summary>
            Is fired when an element in the below containment hierarchy has changed
            </summary>
        </member>
        <member name="E:NMF.Models.ModelElement.ParentChanged">
            <summary>
            Gets fired when the container of the current model element has changed
            </summary>
        </member>
        <member name="T:NMF.Models.ModelElementExtension">
            <summary>
            Denotes the abstract base class for an extension (aka stereotype)
            </summary>
        </member>
        <member name="M:NMF.Models.ModelElementExtension.GetExtension">
            <summary>
            Gets the actual extension
            </summary>
            <returns></returns>
        </member>
        <member name="M:NMF.Models.ModelElementExtension.GetClass">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.ModelElementExtension`2">
            <summary>
            Denotes an abstract base class for a typed model extension
            </summary>
            <typeparam name="T">The type of the extended element</typeparam>
            <typeparam name="T2">The type of the extension</typeparam>
        </member>
        <member name="M:NMF.Models.ModelElementExtension`2.op_Implicit(NMF.Models.ModelElementExtension{`0,`1})~`0">
            <summary>
            Converts the extension to the extended element
            </summary>
            <param name="extension">the extension</param>
        </member>
        <member name="M:NMF.Models.ModelElementExtension`2.op_Implicit(`0)~NMF.Models.ModelElementExtension{`0,`1}">
            <summary>
            Converts the extended element to the extension
            </summary>
            <param name="element">the extended element</param>
        </member>
        <member name="T:NMF.Models.ModelExtensions">
            <summary>
            Denotes common extensions to model elements
            </summary>
        </member>
        <member name="M:NMF.Models.ModelExtensions.Descendants(NMF.Models.IModelElement)">
            <summary>
            Gets an incrementalizable collection with all descendent elements
            </summary>
            <param name="element">The root model element</param>
            <returns>An incrementalizable collection with all descendent elements</returns>
        </member>
        <member name="M:NMF.Models.ModelExtensions.Ancestors(NMF.Models.IModelElement)">
            <summary>
            Gets an incrementalizable collection with all ancestor elements
            </summary>
            <param name="element">The leaf element</param>
            <returns>A collection including the element and all its ancestors</returns>
        </member>
        <member name="M:NMF.Models.ModelExtensions.AncestorTree(NMF.Models.IModelElement)">
            <summary>
            Gets an incrementalizable collection with all ancestor elements
            </summary>
            <param name="element">The leaf element</param>
            <returns>A collection including the element and all its ancestors</returns>
        </member>
        <member name="M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String)">
            <summary>
            Serializes the given model element to the given path
            </summary>
            <param name="serializer">The serializer</param>
            <param name="element">The model element</param>
            <param name="path">The path</param>
        </member>
        <member name="M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.String,System.Uri)">
            <summary>
            Serializes the given model element to the given path
            </summary>
            <param name="serializer">The serializer</param>
            <param name="element">The model element</param>
            <param name="path">The path</param>
            <param name="uri">The uri under which the element should be serialized</param>
        </member>
        <member name="M:NMF.Models.ModelExtensions.Serialize(NMF.Models.Repository.IModelSerializer,NMF.Models.IModelElement,System.IO.Stream,System.Uri)">
            <summary>
            Serializes the given model element to the given path
            </summary>
            <param name="serializer">The serializer</param>
            <param name="element">The model element</param>
            <param name="target">The target to which the model element should be serialized</param>
            <param name="uri">The uri under which the element should be serialized</param>
        </member>
        <member name="T:NMF.Models.ModelHelper">
            <summary>
            Denotes helper methods for model elements
            </summary>
        </member>
        <member name="M:NMF.Models.ModelHelper.CreatePath(System.String,System.Int32)">
            <summary>
            Creates a Uri for an ordered reference where the child element has the given index
            </summary>
            <param name="reference">The reference of the child element</param>
            <param name="index">The index inside the child element</param>
            <returns>A relative Uri for the reference with the given index</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.CreatePath(System.String)">
            <summary>
            Creates a relative Uri for the given reference name
            </summary>
            <param name="reference">The name of the reference</param>
            <returns>A relative Uri for the given reference</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.IndexOfReference``1(System.Collections.Generic.IList{``0},NMF.Models.IModelElement)">
            <summary>
            Gets the index of the given element inside the given reference or -1 if the element is not contained in the reference
            </summary>
            <typeparam name="T">The element type for the reference</typeparam>
            <param name="reference">The reference list</param>
            <param name="element">The element that should be looked for</param>
            <returns>The index of the element or -1, if the reference does not contain the given element</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.ParseSegment(System.String,System.String@,System.Int32@)">
            <summary>
            Parses the given relative Uri
            </summary>
            <param name="segment">the relative Uri</param>
            <param name="reference">The reference that corresponds to the Uri. This is never null.</param>
            <param name="index">The element index of the Uri or 0 if no index is given</param>
            <returns>True, if the segment was parsed successfully, otherwise false</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.ParseIdentifierSegment(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parses the given relative Uri for a identifier reference
            </summary>
            <param name="segment">The relative Uri</param>
            <param name="reference">The reference that corresponds to the Uri. This is never null.</param>
            <param name="identifierReference">The identifier reference. This is never null.</param>
            <param name="identifier">The identifier. This is never null.</param>
            <returns>True, if the segment was parsed successfully, otherwise false</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.Parse``1(System.String)">
            <summary>
            Parses the given text into the given type
            </summary>
            <typeparam name="T">The type of element</typeparam>
            <param name="text">The text that should be parsed</param>
            <returns>An instance of the semantic type</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.CastAs``1(System.Object)">
            <summary>
            Type-safe cast, for code generation purposes
            </summary>
            <typeparam name="T">the element type</typeparam>
            <param name="item">the item to cast</param>
            <returns>the casted item</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.CanCreateInstance``1">
            <summary>
            True, if an instance of the element type can be created automatically, resolving DefaultImplementationType attributes
            </summary>
            <typeparam name="T">The type of elements to create</typeparam>
            <returns>True, if an element of the given type can be instantiated, otherwise False</returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.CreateInstance``1">
            <summary>
            Creates an instance of the given element type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NMF.Models.ModelHelper.ImplementationType``1">
            <summary>
            Gets the type used to instantiate the given type
            </summary>
            <typeparam name="T">The interface type in question</typeparam>
            <returns>The type used for the implementation</returns>
        </member>
        <member name="T:NMF.Models.ModelMetadataAttribute">
            <summary>
            Declares that the assembly includes code for a given metamodel
            </summary>
        </member>
        <member name="P:NMF.Models.ModelMetadataAttribute.ModelUri">
            <summary>
            The model uri
            </summary>
        </member>
        <member name="P:NMF.Models.ModelMetadataAttribute.ResourceName">
            <summary>
            the name of the resource
            </summary>
        </member>
        <member name="M:NMF.Models.ModelMetadataAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines that the assembly contains a model at the given embedded resource name
            </summary>
            <param name="modelUri">The URI of the model</param>
            <param name="resourceName">The resource name or name suffix</param>
        </member>
        <member name="T:NMF.Models.Expressions.ModelPropertyChange`2">
            <summary>
            The base class for simple property access proxies targeting a specific change event instead of the generic property changed event
            </summary>
            <typeparam name="TClass">The member type for the property</typeparam>
            <typeparam name="TProperty">The property type</typeparam>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.ModelElement">
            <summary>
            The model element
            </summary>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.#ctor(`0,System.String)">
            <summary>
            Creates a proxy for the given model instance
            </summary>
            <param name="modelElement">the model element</param>
            <param name="propertyName">The property name</param>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.CanBeConstant">
            <summary>
            Determines whether the expression can be replaced by a constant expression
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.IsConstant">
            <summary>
            Determines whether the current expression is a constant
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.IsParameterFree">
            <summary>
            Determines whether the current expression contains parameters
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.Value">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.ValueObject">
            <summary>
            Gets the current value as object
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.IsReversable">
            <summary>
            Checks whether it is allowed to set values
            </summary>
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.Successors">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Expressions.ModelPropertyChange`2.ExecutionMetaData">
            <inheritdoc />
        </member>
        <member name="E:NMF.Models.Expressions.ModelPropertyChange`2.ValueChanged">
            <summary>
            Gets fired when the value changed
            </summary>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.ApplyParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{NMF.Expressions.INotifiable,NMF.Expressions.INotifiable})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Attach">
            <summary>
            Detach a listener to this value
            </summary>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Detach">
            <summary>
            Attach a listener to this value
            </summary>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Reduce">
            <summary>
            Simplifies the current expression
            </summary>
            <returns>A simpler expression repüresenting the same incremental value (e.g. a constant if this expression can be constant), otherwise itself</returns>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Dispose(System.Boolean)">
            <summary>
            Disposes the current object
            </summary>
            <param name="disposing">True, if managed resources should disposed, otherwise false</param>
        </member>
        <member name="M:NMF.Models.Expressions.ModelPropertyChange`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.ModelRepresentationClassAttribute">
            <summary>
            Declares that the given type represents a type from the metamodel
            </summary>
        </member>
        <member name="M:NMF.Models.ModelRepresentationClassAttribute.#ctor(System.String)">
            <summary>
            Declares that the given type represents a type from the metamodel
            </summary>
            <param name="uriString">The URI of the type represented</param>
        </member>
        <member name="P:NMF.Models.ModelRepresentationClassAttribute.UriString">
            <summary>
            Gets the URI of the type represented by this class
            </summary>
        </member>
        <member name="T:NMF.Models.ModelTransaction">
            <summary>
            Denotes a model transaction
            </summary>
        </member>
        <member name="M:NMF.Models.ModelTransaction.#ctor(NMF.Models.IModelElement)">
            <summary>
            Creates a new model transaction
            </summary>
            <param name="rootElement">The root element</param>
            <exception cref="T:System.ArgumentNullException">Thrown if rootElement is null</exception>
        </member>
        <member name="M:NMF.Models.ModelTransaction.Commit">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:NMF.Models.ModelTransaction.Rollback">
            <summary>
            Roll back the transaction
            </summary>
        </member>
        <member name="P:NMF.Models.ModelTransaction.IsComitted">
            <summary>
            True, if the transaction was committed, otherwise False
            </summary>
        </member>
        <member name="M:NMF.Models.ModelTransaction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.ModelTreeItem">
            <summary>
            Denotes a pair of a model element and its parent
            </summary>
        </member>
        <member name="P:NMF.Models.ModelTreeItem.Parent">
            <summary>
            Gets the parent model element
            </summary>
        </member>
        <member name="P:NMF.Models.ModelTreeItem.Child">
            <summary>
            Gets the child model element
            </summary>
        </member>
        <member name="M:NMF.Models.ModelTreeItem.#ctor(NMF.Models.IModelElement,NMF.Models.IModelElement)">
            <summary>
            Creates a new pair
            </summary>
            <param name="parent">the parent model element</param>
            <param name="child">the child model element</param>
        </member>
        <member name="M:NMF.Models.ModelTreeItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ModelTreeItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ModelTreeItem.Equals(NMF.Models.ModelTreeItem)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ModelTreeItem.op_Equality(NMF.Models.ModelTreeItem,NMF.Models.ModelTreeItem)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ModelTreeItem.op_Inequality(NMF.Models.ModelTreeItem,NMF.Models.ModelTreeItem)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.OperationBroker">
            <summary>
            Denotes a broker for model operations
            </summary>
        </member>
        <member name="P:NMF.Models.OperationBroker.Instance">
            <summary>
            Gets the singleton operation broker instance
            </summary>
        </member>
        <member name="M:NMF.Models.OperationBroker.GetRegisteredDelegate``1(NMF.Models.Meta.IOperation)">
            <summary>
            Gets the registered delegate for the given operation
            </summary>
            <typeparam name="TDelegate">The type of the delegate</typeparam>
            <param name="op">the operation for which a delegate is requested</param>
            <returns>The registered delegate or null, if no delegate can be found</returns>
        </member>
        <member name="M:NMF.Models.OperationBroker.GetRegisteredDelegate``1(System.Lazy{NMF.Models.Meta.IOperation})">
            <summary>
            Gets the registered delegate for the given operation
            </summary>
            <typeparam name="TDelegate">The type of the delegate</typeparam>
            <param name="op">the operation for which a delegate is requested</param>
            <returns>The registered delegate or null, if no delegate can be found</returns>
        </member>
        <member name="M:NMF.Models.OperationBroker.RegisterDelegate(NMF.Models.Meta.IOperation,System.Object)">
            <summary>
            Registers the provided delegate for the given operation
            </summary>
            <param name="op">the operation</param>
            <param name="delegate">the delegate</param>
        </member>
        <member name="M:NMF.Models.OperationBroker.RegisterDelegate(System.Lazy{NMF.Models.Meta.IOperation},System.Object)">
            <summary>
            Registers the provided delegate for the given operation
            </summary>
            <param name="op">the operation</param>
            <param name="delegate">the delegate</param>
        </member>
        <member name="T:NMF.Models.OperationCallEventArgs">
            <summary>
            Denotes event args that an operation is or was called
            </summary>
        </member>
        <member name="M:NMF.Models.OperationCallEventArgs.#ctor(NMF.Models.IModelElement,NMF.Models.Meta.IOperation,System.Object[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="target">The target model element</param>
            <param name="operation">The operation that was called</param>
            <param name="arguments">The arguments</param>
        </member>
        <member name="P:NMF.Models.OperationCallEventArgs.Operation">
            <summary>
            The operation
            </summary>
        </member>
        <member name="P:NMF.Models.OperationCallEventArgs.Arguments">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="P:NMF.Models.OperationCallEventArgs.Target">
            <summary>
            The target
            </summary>
        </member>
        <member name="P:NMF.Models.OperationCallEventArgs.Result">
            <summary>
            Gets or sets the result of the call
            </summary>
        </member>
        <member name="T:NMF.Models.Repository.ExtensionBasedSerializer">
            <summary>
            Denotes a model serializer that chooses the actual serialization process based on the file extension
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.#ctor(NMF.Models.Repository.IModelSerializer,System.Collections.Generic.Dictionary{System.String,NMF.Models.Repository.IModelSerializer})">
            <summary>
            Create a new instance
            </summary>
            <param name="defaultSerializer">the default serializer</param>
            <param name="serializerByExtension"></param>
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.#ctor(NMF.Models.Repository.IModelSerializer)">
            <summary>
            Create a new instance
            </summary>
            <param name="defaultSerializer">the default serializer</param>
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.Add(System.String,NMF.Models.Repository.IModelSerializer)">
            <summary>
            Registers the given serializer for the given extension
            </summary>
            <param name="extension">the extension (including the leading period)</param>
            <param name="serializer">the serializer</param>
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.Deserialize(System.IO.Stream,System.Uri,NMF.Models.Repository.IModelRepository,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.Serialize(NMF.Models.Model,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.SerializeFragment(NMF.Models.ModelElement,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ExtensionBasedSerializer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.FileLocator">
            <summary>
            Denotes a locator based on the file system
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.FileLocator.Instance">
            <summary>
            Gets the singleton instance of the file locator
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.FileLocator.CanLocate(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.FileLocator.GetRepositoryUri(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.FileLocator.Open(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.FileMapLocator">
            <summary>
            Denotes a locator that locates URI through a mapping to files
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.FileMapLocator.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.FileMapLocator.#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})">
            <summary>
            Creates a new instance
            </summary>
            <param name="mappings">the mappings</param>
        </member>
        <member name="M:NMF.Models.Repository.FileMapLocator.Open(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.IModelLocator">
            <summary>
            Denotes an interface for a component that can locate models
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.IModelLocator.CanLocate(System.Uri)">
            <summary>
            Determines whether the given locator is able to locate the given URI
            </summary>
            <param name="uri">the URI to locate</param>
            <returns>true, if the URI can be located, otherwise false</returns>
        </member>
        <member name="M:NMF.Models.Repository.IModelLocator.GetRepositoryUri(System.Uri)">
            <summary>
            Calculates the repository URI for the given URI
            </summary>
            <param name="uri">the input URI</param>
            <returns>the URI as used for a repository</returns>
        </member>
        <member name="M:NMF.Models.Repository.IModelLocator.Open(System.Uri)">
            <summary>
            Opens the given URI
            </summary>
            <param name="repositoryId">the URI as used in the repository</param>
            <returns>A stream</returns>
        </member>
        <member name="T:NMF.Models.Repository.IModelRepository">
            <summary>
            Denotes a repository of model elements
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.IModelRepository.Resolve(System.Uri,System.Boolean)">
            <summary>
            Resolves the given URI to a model element
            </summary>
            <param name="uri">the URI of the model element</param>
            <param name="loadOnDemand">true, if the model should be loaded in case it is not already in memory</param>
            <returns>the model element with the given URI or null, if it was not found</returns>
        </member>
        <member name="P:NMF.Models.Repository.IModelRepository.Models">
            <summary>
            Gets the collection of models managed by this repository
            </summary>
        </member>
        <member name="E:NMF.Models.Repository.IModelRepository.BubbledChange">
            <summary>
            Gets raised when there is any change in any of the models
            </summary>
        </member>
        <member name="T:NMF.Models.Repository.IModelSerializer">
            <summary>
            Denotes a serializer component for model elements
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.IModelSerializer.Serialize(NMF.Models.Model,System.IO.Stream)">
            <summary>
            Serializes the given model to the given target stream
            </summary>
            <param name="model">the model to serialize</param>
            <param name="target">the target stream</param>
        </member>
        <member name="M:NMF.Models.Repository.IModelSerializer.SerializeFragment(NMF.Models.ModelElement,System.IO.Stream)">
            <summary>
            Serialize the given model element as a fragment to the given stream
            </summary>
            <param name="element">the model element to serialize</param>
            <param name="target">the target stream</param>
        </member>
        <member name="M:NMF.Models.Repository.IModelSerializer.Deserialize(System.IO.Stream,System.Uri,NMF.Models.Repository.IModelRepository,System.Boolean)">
            <summary>
            Deserializes the given source into a model
            </summary>
            <param name="source">the source stream</param>
            <param name="modelUri">the URI of the model</param>
            <param name="repository">the repository in the context of which the model is deserialized</param>
            <param name="addToRepository">true, if the model should be added to the repository, otherwise false</param>
            <returns>the deserialized model</returns>
        </member>
        <member name="T:NMF.Models.Repository.MapLocator">
            <summary>
            Denotes an abstract locator that maps to preconfigured locations
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.MapLocator.Mappings">
            <summary>
            Gets the preconfiured mappings
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.MapLocator.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.MapLocator.#ctor(System.Collections.Generic.IDictionary{System.Uri,System.String})">
            <summary>
            Creates a new instance
            </summary>
            <param name="mappings">The mappings</param>
        </member>
        <member name="M:NMF.Models.Repository.MapLocator.CanLocate(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.MapLocator.GetRepositoryUri(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.MapLocator.Open(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.MetaRepository">
            <summary>
            Denotes the repository with the metamodels contained in the loaded assemblies
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.MetaRepository.#cctor">
            <summary>
            Initializes the type
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.MetaRepository.Instance">
            <summary>
            Gets the instance
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.MetaRepository.Serializer">
            <summary>
            Gets the serializer used for the deserialization of the models
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.MetaRepository.ResolveType(System.String)">
            <summary>
            Resolves the given uri into a type
            </summary>
            <param name="uriString">The absolute uri</param>
            <returns>The type object</returns>
        </member>
        <member name="M:NMF.Models.Repository.MetaRepository.ResolveClass(System.Type)">
            <summary>
            Resolves the given system type into an NMeta type instance
            </summary>
            <param name="systemType">The system type</param>
            <returns>The type object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if systemtype is null</exception>
        </member>
        <member name="M:NMF.Models.Repository.MetaRepository.Resolve(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.MetaRepository.Resolve(System.String)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.MetaRepository.Models">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.ModelCollection">
            <summary>
            Denotes a collection of models
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.AllowOverride">
            <summary>
            true, if elements in the model collection may be overridden, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.#ctor(NMF.Models.Repository.IModelRepository)">
            <summary>
            Creates a new instance
            </summary>
            <param name="repo">the parent repository</param>
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.Repository">
            <summary>
            Gets the parent repository
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.Item(System.Uri)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.Keys">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.ModelCollection.Values">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Add(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Add(System.Uri,NMF.Models.Model)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Contains(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.ContainsKey(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Remove(System.Collections.Generic.KeyValuePair{System.Uri,NMF.Models.Model})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.Remove(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelCollection.TryGetValue(System.Uri,NMF.Models.Model@)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.ModelRepository">
            <summary>
            Represents a standard model repository
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelRepository.Parent">
            <summary>
            Gets the parent model repository.
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelRepository.Serializer">
            <summary>
            Gets or sets the serializer that is used for the deserialization of the models
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelRepository.Locators">
            <summary>
            Gets a collection of model locators
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.#ctor">
            <summary>
            Creates a new model repository with the meta repository as parent
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.#ctor(NMF.Models.Repository.IModelRepository)">
            <summary>
            Creates a new model repository with a given parent
            </summary>
            <param name="parent">The parent repository</param>
            <remarks>If no parent repository is provided, the meta repository is used as parent repository</remarks>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.#ctor(NMF.Models.Repository.IModelRepository,NMF.Models.Repository.IModelSerializer,NMF.Models.Repository.IModelLocator[])">
            <summary>
            Creates a new model repository with a given parent
            </summary>
            <param name="parent">The parent repository</param>
            <param name="serializer">A serializer object or null to use the default</param>
            <param name="locators">A set of model locators</param>
            <remarks>If no parent repository is provided, the meta repository is used as parent repository</remarks>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Resolve(System.String)">
            <summary>
            Resolves the given file path for a model element
            </summary>
            <param name="path">The file path where to look for models</param>
            <returns>The model at this file path or null if the file cannot be found</returns>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Resolve(System.Uri,System.Boolean)">
            <summary>
            Resolves the given Uri and returns the model element
            </summary>
            <param name="uri">The Uri where to look for the model element</param>
            <param name="loadOnDemand">A boolean flag indicating whether the uri should be attempted
            to load, if the model is not already registered with the repository</param>
            <returns>A model element at the given Uri or null if none can be found</returns>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Resolve(System.Uri,System.String,System.Boolean)">
            <summary>
            Resolves the given Uri and returns the model element
            </summary>
            <param name="uri">The Uri where to look for the model element</param>
            <param name="hintPath">The path where the model can be found</param>
            <param name="loadOnDemand">A boolean flag indicating whether the uri should be attempted
            to load, if the model is not already registered with the repository</param>
            <returns>A model element at the given Uri or null if none can be found</returns>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.String)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="path">The path where to save the model element</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.String,System.Boolean)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="path">The path where to save the model element</param>
            <param name="overrideIfExists">Overrides the existing model, if already exists</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.String,System.Uri)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="path">The path where to save the model element</param>
            <param name="uri">The uri under which the model element can be retrieved</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.String,System.Uri,System.Boolean)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="path">The path where to save the model element</param>
            <param name="uri">The uri under which the model element can be retrieved</param>
            <param name="overrideIfExists">Overrides the existing model, if already exists</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.IO.Stream,System.Uri)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="stream">The stream to save the model element to</param>
            <param name="uri">The uri under which the model element shall be retrievable</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.Save(NMF.Models.IModelElement,System.IO.Stream,System.Uri,System.Boolean)">
            <summary>
            Saves the given model element to the specified stream
            </summary>
            <param name="element">The model element</param>
            <param name="stream">The stream to save the model element to</param>
            <param name="uri">The uri under which the model element shall be retrievable</param>
            <param name="overrideIfExists">Overrides the existing model, if already exists</param>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.OnUnresolvedModelElement(NMF.Models.Repository.UnresolvedModelElementEventArgs)">
            <summary>
            Gets called when a Uri cannot be resolved
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="E:NMF.Models.Repository.ModelRepository.UnresolvedModelElement">
            <summary>
            Gets fired when a Uri cannot be resolved
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)">
            <summary>
            Raises the bubbled change event
            </summary>
            <param name="e">the event data</param>
        </member>
        <member name="E:NMF.Models.Repository.ModelRepository.BubbledChange">
            <summary>
            Gets raised whenever there is a change in one of the model elements contained in the repository
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ModelRepository.Models">
            <summary>
            Gets a dictionary of the models loaded to this repository
            </summary>
        </member>
        <member name="T:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection">
            <summary>
            Denotes a class to store models in the repository
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.#ctor(NMF.Models.Repository.ModelRepository)">
            <summary>
            Creates a new instance
            </summary>
            <param name="repo">the parent repository</param>
        </member>
        <member name="P:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.AllowOverride">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.Add(System.Uri,NMF.Models.Model)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.RegisterChangeHandlers">
            <summary>
            Registers the change handlers for all models
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ModelRepository.ModelRepositoryModelCollection.UnregisterChangeHandlers">
            <summary>
            Unregisters the change handlers for all models
            </summary>
        </member>
        <member name="T:NMF.Models.Repository.ResourceMapLocator">
            <summary>
            Denotes a locator that maps to assembly embedded resources
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.ResourceMapLocator.Assembly">
            <summary>
            Gets the assembly for which the resource mapper maps to
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.ResourceMapLocator.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a new instance
            </summary>
            <param name="assembly">the target assembly</param>
            <exception cref="T:System.ArgumentNullException">thrown if the assembly is null</exception>
        </member>
        <member name="M:NMF.Models.Repository.ResourceMapLocator.Open(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.Serialization.ExplicitIdSerializer">
            <summary>
            Denotes a serializer that is able to read and understand all model URIs but serializes using XMI IDs
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new instance
            </summary>
            <param name="settings">the serializer settings</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.#ctor(NMF.Serialization.XmlSerializer)">
            <summary>
            Creates a new instance
            </summary>
            <param name="parent">the parent serializer</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new instance
            </summary>
            <param name="settings">the serializer settings</param>
            <param name="knownTypes">a collection of known types</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.GetAttributeValue(System.Object,NMF.Serialization.ITypeSerializationInfo,System.Boolean,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ExplicitIdSerializer.WriteIdentifiedObject(System.Xml.XmlWriter,System.Object,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Models.Repository.Serialization.ExplicitIdSerializer.IdAttribute">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.Serialization.ModelSerializationContext">
            <summary>
            Denotes a context for the serialization of models
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializationContext.#ctor(NMF.Models.Repository.IModelRepository,NMF.Models.Model)">
            <summary>
            Creates a new instance
            </summary>
            <param name="repository">The repository</param>
            <param name="root">The root model element</param>
        </member>
        <member name="P:NMF.Models.Repository.Serialization.ModelSerializationContext.Repository">
            <summary>
            Gets the repository
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.Serialization.ModelSerializationContext.Model">
            <summary>
            Gets the model
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializationContext.OnNameClash(System.String,NMF.Serialization.ITypeSerializationInfo,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializationContext.Resolve(System.String,NMF.Serialization.ITypeSerializationInfo,System.Type,System.Boolean,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.Serialization.ModelSerializer">
            <summary>
            Denotes the standard model serializer
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.#ctor">
            <summary>
            Creates a new model serializer
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.#ctor(NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new model serializer
            </summary>
            <param name="settings">The serialization settings</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.#ctor(NMF.Serialization.XmlSerializer)">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.#ctor(NMF.Serialization.XmlSerializer,NMF.Serialization.XmlSerializationSettings)">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">The serialization settings</param>
            <param name="parent">An XML serializer to copy settings and known type information from</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.#ctor(NMF.Serialization.XmlSerializationSettings,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new serializer and copies settings and known types from the given serializer
            </summary>
            <param name="settings">The serialization settings</param>
            <param name="knownTypes">A collection of known types</param>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.InitializeElementProperties(System.Xml.XmlReader,System.Object@,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.WriteElementProperties(System.Xml.XmlWriter,System.Object,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.CreateSerializationContext(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.WriteIdentifiedObject(System.Xml.XmlWriter,System.Object,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.ITypeSerializationInfo,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.Serialize(System.Object,System.Xml.XmlWriter,NMF.Serialization.IPropertySerializationInfo,System.Boolean,NMF.Serialization.XmlIdentificationMode,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.GetAttributeValue(System.Object,NMF.Serialization.ITypeSerializationInfo,System.Boolean,NMF.Serialization.XmlSerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.IsPropertyElement(System.Xml.XmlReader,NMF.Serialization.IPropertySerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.CreateModelForRoot(System.Object)">
            <summary>
            Creates the model for the given root element
            </summary>
            <param name="root">The root element</param>
            <returns>The model instance</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if root is not a model element</exception>
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.Deserialize(System.IO.Stream,System.Uri,NMF.Models.Repository.IModelRepository,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.SelectRoot(System.Object,System.Boolean)">
            <summary>
            Gets the serialization root element
            </summary>
            <param name="graph">The base element that should be serialized</param>
            <param name="fragment">A value indicating whether only a fragment should be written</param>
            <returns>The root element for serialization</returns>
        </member>
        <member name="P:NMF.Models.Repository.Serialization.ModelSerializer.IdAttribute">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.Serialize(NMF.Models.Model,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.Repository.Serialization.ModelSerializer.SerializeFragment(NMF.Models.ModelElement,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Repository.UnresolvedModelElementEventArgs">
            <summary>
            Denotes the event data that a model element could not be resolved
            </summary>
        </member>
        <member name="M:NMF.Models.Repository.UnresolvedModelElementEventArgs.#ctor(System.Uri)">
            <summary>
            Creates a new instance
            </summary>
            <param name="uri">The uri that could not be resolved</param>
        </member>
        <member name="M:NMF.Models.Repository.UnresolvedModelElementEventArgs.#ctor(System.Uri,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="uri">The uri that could not be resolved</param>
            <param name="hintPath">A hint path, if available</param>
        </member>
        <member name="M:NMF.Models.Repository.UnresolvedModelElementEventArgs.#ctor(System.Uri,System.String,System.Exception)">
            <summary>
            Creates a new instance
            </summary>
            <param name="uri">The uri that could not be resolved</param>
            <param name="hintPath">A hint path, if available</param>
            <param name="loadException">Exception that happened during model loading, if any</param>
        </member>
        <member name="P:NMF.Models.Repository.UnresolvedModelElementEventArgs.Uri">
            <summary>
            The Uri that could not be resolved
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.UnresolvedModelElementEventArgs.HintPath">
            <summary>
            A hint path
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.UnresolvedModelElementEventArgs.LoadException">
            <summary>
            Exception while model was loaded, if any
            </summary>
        </member>
        <member name="P:NMF.Models.Repository.UnresolvedModelElementEventArgs.ModelElement">
            <summary>
            Gets or sets the model element that was identified during the event
            </summary>
        </member>
        <member name="T:NMF.Models.ScopedIdentifier">
            <summary>
            Denotes the tuple of an attribute and its scope
            </summary>
        </member>
        <member name="P:NMF.Models.ScopedIdentifier.Identifier">
            <summary>
            Gets the identifier attribute
            </summary>
        </member>
        <member name="P:NMF.Models.ScopedIdentifier.Scope">
            <summary>
            Gets the scope in which the identifier is valid
            </summary>
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.#ctor(NMF.Models.Meta.IAttribute,NMF.Models.Meta.IdentifierScope)">
            <summary>
            Creates a new scoped identifier
            </summary>
            <param name="identifier"></param>
            <param name="scope"></param>
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.Equals(NMF.Models.ScopedIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.op_Equality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.op_Inequality(NMF.Models.ScopedIdentifier,NMF.Models.ScopedIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Models.ScopedIdentifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NMF.Models.Security.ModelHasher">
            <summary>
            A class that computes model hashes
            </summary>
        </member>
        <member name="M:NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement)">
            <summary>
            Creates a SHA512 hash for the given model
            </summary>
            <param name="modelElement">The model element for which a hash should be provided</param>
            <returns>A hash code for the given model element</returns>
        </member>
        <member name="M:NMF.Models.Security.ModelHasher.CreateHash(NMF.Models.IModelElement,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Creates a hash for the given model
            </summary>
            <param name="modelElement">The model element for which a hash should be provided</param>
            <param name="hashAlgorithm">Tha hashing algorithm that should be used or null to use the default SHA512</param>
            <returns>A hash code for the given model element</returns>
        </member>
        <member name="T:NMF.Models.UnlockEventArgs">
            <summary>
            Denotes the event that an unlock of a model element was requested
            </summary>
        </member>
        <member name="P:NMF.Models.UnlockEventArgs.Element">
            <summary>
            The model element for which the unlock was requested
            </summary>
        </member>
        <member name="P:NMF.Models.UnlockEventArgs.MayUnlock">
            <summary>
            Gets or sets whether the model element may be unlocked
            </summary>
        </member>
        <member name="M:NMF.Models.UnlockEventArgs.#ctor(NMF.Models.IModelElement)">
            <summary>
            Creates a new instance
            </summary>
            <param name="element">The element that was requested to get unlocked</param>
        </member>
    </members>
</doc>
