//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Type
{
    
    
    /// <summary>
    /// The default implementation of the XMLTypeDocumentRoot class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2003/XMLType")]
    [XmlNamespacePrefixAttribute("ecore.xml.type")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2003/XMLType#//XMLTypeDocumentRoot")]
    public partial class XMLTypeDocumentRoot : ModelElement, IXMLTypeDocumentRoot, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Mixed property
        /// </summary>
        private ObservableList<object> _mixed;
        
        private static Lazy<ITypedElement> _mixedAttribute = new Lazy<ITypedElement>(RetrieveMixedAttribute);
        
        private static Lazy<ITypedElement> _xMLNSPrefixMapReference = new Lazy<ITypedElement>(RetrieveXMLNSPrefixMapReference);
        
        /// <summary>
        /// The backing field for the XMLNSPrefixMap property
        /// </summary>
        private ObservableCompositionOrderedSet<IEStringToStringMapEntry> _xMLNSPrefixMap;
        
        private static Lazy<ITypedElement> _xSISchemaLocationReference = new Lazy<ITypedElement>(RetrieveXSISchemaLocationReference);
        
        /// <summary>
        /// The backing field for the XSISchemaLocation property
        /// </summary>
        private ObservableCompositionOrderedSet<IEStringToStringMapEntry> _xSISchemaLocation;
        
        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public XMLTypeDocumentRoot()
        {
            this._mixed = new ObservableList<object>();
            this._mixed.CollectionChanging += this.MixedCollectionChanging;
            this._mixed.CollectionChanged += this.MixedCollectionChanged;
            this._xMLNSPrefixMap = new ObservableCompositionOrderedSet<IEStringToStringMapEntry>(this);
            this._xMLNSPrefixMap.CollectionChanging += this.XMLNSPrefixMapCollectionChanging;
            this._xMLNSPrefixMap.CollectionChanged += this.XMLNSPrefixMapCollectionChanged;
            this._xSISchemaLocation = new ObservableCompositionOrderedSet<IEStringToStringMapEntry>(this);
            this._xSISchemaLocation.CollectionChanging += this.XSISchemaLocationCollectionChanging;
            this._xSISchemaLocation.CollectionChanged += this.XSISchemaLocationCollectionChanged;
        }
        
        /// <summary>
        /// The mixed property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("mixed")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IListExpression<object> Mixed
        {
            get
            {
                return this._mixed;
            }
        }
        
        /// <summary>
        /// The xMLNSPrefixMap property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("xMLNSPrefixMap")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEStringToStringMapEntry> XMLNSPrefixMap
        {
            get
            {
                return this._xMLNSPrefixMap;
            }
        }
        
        /// <summary>
        /// The xSISchemaLocation property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("xSISchemaLocation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEStringToStringMapEntry> XSISchemaLocation
        {
            get
            {
                return this._xSISchemaLocation;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new XMLTypeDocumentRootChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new XMLTypeDocumentRootReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2003/XMLType#//XMLTypeDocumentRoot")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveMixedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(XMLTypeDocumentRoot.ClassInstance)).Resolve("mixed")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Mixed property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MixedCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Mixed", e, _mixedAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Mixed property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MixedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Mixed", e, _mixedAttribute);
        }
        
        private static ITypedElement RetrieveXMLNSPrefixMapReference()
        {
            return ((ITypedElement)(((ModelElement)(XMLTypeDocumentRoot.ClassInstance)).Resolve("xMLNSPrefixMap")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the XMLNSPrefixMap property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void XMLNSPrefixMapCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("XMLNSPrefixMap", e, _xMLNSPrefixMapReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the XMLNSPrefixMap property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void XMLNSPrefixMapCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("XMLNSPrefixMap", e, _xMLNSPrefixMapReference);
        }
        
        private static ITypedElement RetrieveXSISchemaLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(XMLTypeDocumentRoot.ClassInstance)).Resolve("xSISchemaLocation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the XSISchemaLocation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void XSISchemaLocationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("XSISchemaLocation", e, _xSISchemaLocationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the XSISchemaLocation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void XSISchemaLocationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("XSISchemaLocation", e, _xSISchemaLocationReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int xMLNSPrefixMapIndex = ModelHelper.IndexOfReference(this.XMLNSPrefixMap, element);
            if ((xMLNSPrefixMapIndex != -1))
            {
                return ModelHelper.CreatePath("xMLNSPrefixMap", xMLNSPrefixMapIndex);
            }
            int xSISchemaLocationIndex = ModelHelper.IndexOfReference(this.XSISchemaLocation, element);
            if ((xSISchemaLocationIndex != -1))
            {
                return ModelHelper.CreatePath("xSISchemaLocation", xSISchemaLocationIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "XMLNSPREFIXMAP"))
            {
                if ((index < this.XMLNSPrefixMap.Count))
                {
                    return this.XMLNSPrefixMap[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "XSISCHEMALOCATION"))
            {
                if ((index < this.XSISchemaLocation.Count))
                {
                    return this.XSISchemaLocation[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MIXED"))
            {
                if ((index < this.Mixed.Count))
                {
                    return this.Mixed[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "XMLNSPREFIXMAP"))
            {
                return this._xMLNSPrefixMap;
            }
            if ((feature == "XSISCHEMALOCATION"))
            {
                return this._xSISchemaLocation;
            }
            if ((feature == "MIXED"))
            {
                return this._mixed;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._xMLNSPrefixMap))
            {
                return "xMLNSPrefixMap";
            }
            if ((container == this._xSISchemaLocation))
            {
                return "xSISchemaLocation";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2003/XMLType#//XMLTypeDocumentRoot")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the XMLTypeDocumentRoot class
        /// </summary>
        public class XMLTypeDocumentRootChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private XMLTypeDocumentRoot _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public XMLTypeDocumentRootChildrenCollection(XMLTypeDocumentRoot parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.XMLNSPrefixMap.Count);
                    count = (count + this._parent.XSISchemaLocation.Count);
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.XMLNSPrefixMap.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.XSISchemaLocation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.XMLNSPrefixMap.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.XSISchemaLocation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEStringToStringMapEntry xMLNSPrefixMapCasted = item.As<IEStringToStringMapEntry>();
                if ((xMLNSPrefixMapCasted != null))
                {
                    this._parent.XMLNSPrefixMap.Add(xMLNSPrefixMapCasted);
                }
                IEStringToStringMapEntry xSISchemaLocationCasted = item.As<IEStringToStringMapEntry>();
                if ((xSISchemaLocationCasted != null))
                {
                    this._parent.XSISchemaLocation.Add(xSISchemaLocationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.XMLNSPrefixMap.Clear();
                this._parent.XSISchemaLocation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.XMLNSPrefixMap.Contains(item))
                {
                    return true;
                }
                if (this._parent.XSISchemaLocation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> xMLNSPrefixMapEnumerator = this._parent.XMLNSPrefixMap.GetEnumerator();
                try
                {
                    for (
                    ; xMLNSPrefixMapEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = xMLNSPrefixMapEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    xMLNSPrefixMapEnumerator.Dispose();
                }
                IEnumerator<IModelElement> xSISchemaLocationEnumerator = this._parent.XSISchemaLocation.GetEnumerator();
                try
                {
                    for (
                    ; xSISchemaLocationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = xSISchemaLocationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    xSISchemaLocationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEStringToStringMapEntry eStringToStringMapEntryItem = item.As<IEStringToStringMapEntry>();
                if (((eStringToStringMapEntryItem != null) 
                            && this._parent.XMLNSPrefixMap.Remove(eStringToStringMapEntryItem)))
                {
                    return true;
                }
                if (((eStringToStringMapEntryItem != null) 
                            && this._parent.XSISchemaLocation.Remove(eStringToStringMapEntryItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.XMLNSPrefixMap).Concat(this._parent.XSISchemaLocation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the XMLTypeDocumentRoot class
        /// </summary>
        public class XMLTypeDocumentRootReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private XMLTypeDocumentRoot _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public XMLTypeDocumentRootReferencedElementsCollection(XMLTypeDocumentRoot parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.XMLNSPrefixMap.Count);
                    count = (count + this._parent.XSISchemaLocation.Count);
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.XMLNSPrefixMap.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.XSISchemaLocation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.XMLNSPrefixMap.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.XSISchemaLocation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEStringToStringMapEntry xMLNSPrefixMapCasted = item.As<IEStringToStringMapEntry>();
                if ((xMLNSPrefixMapCasted != null))
                {
                    this._parent.XMLNSPrefixMap.Add(xMLNSPrefixMapCasted);
                }
                IEStringToStringMapEntry xSISchemaLocationCasted = item.As<IEStringToStringMapEntry>();
                if ((xSISchemaLocationCasted != null))
                {
                    this._parent.XSISchemaLocation.Add(xSISchemaLocationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.XMLNSPrefixMap.Clear();
                this._parent.XSISchemaLocation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.XMLNSPrefixMap.Contains(item))
                {
                    return true;
                }
                if (this._parent.XSISchemaLocation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> xMLNSPrefixMapEnumerator = this._parent.XMLNSPrefixMap.GetEnumerator();
                try
                {
                    for (
                    ; xMLNSPrefixMapEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = xMLNSPrefixMapEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    xMLNSPrefixMapEnumerator.Dispose();
                }
                IEnumerator<IModelElement> xSISchemaLocationEnumerator = this._parent.XSISchemaLocation.GetEnumerator();
                try
                {
                    for (
                    ; xSISchemaLocationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = xSISchemaLocationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    xSISchemaLocationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEStringToStringMapEntry eStringToStringMapEntryItem = item.As<IEStringToStringMapEntry>();
                if (((eStringToStringMapEntryItem != null) 
                            && this._parent.XMLNSPrefixMap.Remove(eStringToStringMapEntryItem)))
                {
                    return true;
                }
                if (((eStringToStringMapEntryItem != null) 
                            && this._parent.XSISchemaLocation.Remove(eStringToStringMapEntryItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.XMLNSPrefixMap).Concat(this._parent.XSISchemaLocation).GetEnumerator();
            }
        }
    }
}

