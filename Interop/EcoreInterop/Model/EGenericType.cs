//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    /// <summary>
    /// The default implementation of the EGenericType class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EGenericType/")]
    public class EGenericType : ModelElement, IEGenericType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EUpperBound property
        /// </summary>
        private IEGenericType _eUpperBound;
        
        /// <summary>
        /// The backing field for the ETypeArguments property
        /// </summary>
        private ObservableCompositionOrderedSet<IEGenericType> _eTypeArguments;
        
        /// <summary>
        /// The backing field for the ELowerBound property
        /// </summary>
        private IEGenericType _eLowerBound;
        
        /// <summary>
        /// The backing field for the ETypeParameter property
        /// </summary>
        private IETypeParameter _eTypeParameter;
        
        /// <summary>
        /// The backing field for the EClassifier property
        /// </summary>
        private IEClassifier _eClassifier;
        
        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public EGenericType()
        {
            this._eTypeArguments = new ObservableCompositionOrderedSet<IEGenericType>(this);
            this._eTypeArguments.CollectionChanging += this.ETypeArgumentsCollectionChanging;
            this._eTypeArguments.CollectionChanged += this.ETypeArgumentsCollectionChanged;
        }
        
        /// <summary>
        /// The eUpperBound property
        /// </summary>
        [XmlElementNameAttribute("eUpperBound")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IEGenericType EUpperBound
        {
            get
            {
                return this._eUpperBound;
            }
            set
            {
                if ((this._eUpperBound != value))
                {
                    IEGenericType old = this._eUpperBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEUpperBoundChanging(e);
                    this.OnPropertyChanging("EUpperBound", e);
                    this._eUpperBound = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetEUpperBound;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetEUpperBound;
                    }
                    this.OnEUpperBoundChanged(e);
                    this.OnPropertyChanged("EUpperBound", e);
                }
            }
        }
        
        /// <summary>
        /// The eTypeArguments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eTypeArguments")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEGenericType> ETypeArguments
        {
            get
            {
                return this._eTypeArguments;
            }
        }
        
        /// <summary>
        /// The eLowerBound property
        /// </summary>
        [XmlElementNameAttribute("eLowerBound")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IEGenericType ELowerBound
        {
            get
            {
                return this._eLowerBound;
            }
            set
            {
                if ((this._eLowerBound != value))
                {
                    IEGenericType old = this._eLowerBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnELowerBoundChanging(e);
                    this.OnPropertyChanging("ELowerBound", e);
                    this._eLowerBound = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetELowerBound;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetELowerBound;
                    }
                    this.OnELowerBoundChanged(e);
                    this.OnPropertyChanged("ELowerBound", e);
                }
            }
        }
        
        /// <summary>
        /// The eTypeParameter property
        /// </summary>
        [XmlElementNameAttribute("eTypeParameter")]
        [XmlAttributeAttribute(true)]
        public virtual IETypeParameter ETypeParameter
        {
            get
            {
                return this._eTypeParameter;
            }
            set
            {
                if ((this._eTypeParameter != value))
                {
                    IETypeParameter old = this._eTypeParameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnETypeParameterChanging(e);
                    this.OnPropertyChanging("ETypeParameter", e);
                    this._eTypeParameter = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetETypeParameter;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetETypeParameter;
                    }
                    this.OnETypeParameterChanged(e);
                    this.OnPropertyChanged("ETypeParameter", e);
                }
            }
        }
        
        /// <summary>
        /// The eClassifier property
        /// </summary>
        [XmlElementNameAttribute("eClassifier")]
        [XmlAttributeAttribute(true)]
        public virtual IEClassifier EClassifier
        {
            get
            {
                return this._eClassifier;
            }
            set
            {
                if ((this._eClassifier != value))
                {
                    IEClassifier old = this._eClassifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEClassifierChanging(e);
                    this.OnPropertyChanging("EClassifier", e);
                    this._eClassifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEClassifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEClassifier;
                    }
                    this.OnEClassifierChanged(e);
                    this.OnPropertyChanged("EClassifier", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EGenericTypeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EGenericTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EGenericType/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EUpperBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EUpperBoundChanging;
        
        /// <summary>
        /// Gets fired when the EUpperBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EUpperBoundChanged;
        
        /// <summary>
        /// Gets fired before the ELowerBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ELowerBoundChanging;
        
        /// <summary>
        /// Gets fired when the ELowerBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ELowerBoundChanged;
        
        /// <summary>
        /// Gets fired before the ETypeParameter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ETypeParameterChanging;
        
        /// <summary>
        /// Gets fired when the ETypeParameter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ETypeParameterChanged;
        
        /// <summary>
        /// Gets fired before the EClassifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EClassifierChanging;
        
        /// <summary>
        /// Gets fired when the EClassifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EClassifierChanged;
        
        /// <summary>
        /// Raises the EUpperBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEUpperBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EUpperBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EUpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEUpperBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EUpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EUpperBound property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEUpperBound(object sender, System.EventArgs eventArgs)
        {
            this.EUpperBound = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ETypeArguments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ETypeArgumentsCollectionChanging(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ETypeArguments", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ETypeArguments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ETypeArgumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ETypeArguments", e);
        }
        
        /// <summary>
        /// Raises the ELowerBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnELowerBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ELowerBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ELowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnELowerBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ELowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ELowerBound property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetELowerBound(object sender, System.EventArgs eventArgs)
        {
            this.ELowerBound = null;
        }
        
        /// <summary>
        /// Raises the ETypeParameterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnETypeParameterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ETypeParameterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ETypeParameterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnETypeParameterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ETypeParameterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ETypeParameter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetETypeParameter(object sender, System.EventArgs eventArgs)
        {
            this.ETypeParameter = null;
        }
        
        /// <summary>
        /// Raises the EClassifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEClassifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EClassifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EClassifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEClassifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EClassifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EClassifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEClassifier(object sender, System.EventArgs eventArgs)
        {
            this.EClassifier = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.EUpperBound))
            {
                return ModelHelper.CreatePath("EUpperBound");
            }
            int eTypeArgumentsIndex = ModelHelper.IndexOfReference(this.ETypeArguments, element);
            if ((eTypeArgumentsIndex != -1))
            {
                return ModelHelper.CreatePath("eTypeArguments", eTypeArgumentsIndex);
            }
            if ((element == this.ELowerBound))
            {
                return ModelHelper.CreatePath("ELowerBound");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EUPPERBOUND"))
            {
                return this.EUpperBound;
            }
            if ((reference == "ETYPEARGUMENTS"))
            {
                if ((index < this.ETypeArguments.Count))
                {
                    return this.ETypeArguments[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ELOWERBOUND"))
            {
                return this.ELowerBound;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ETYPEARGUMENTS"))
            {
                return this._eTypeArguments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EUPPERBOUND"))
            {
                this.EUpperBound = ((IEGenericType)(value));
                return;
            }
            if ((feature == "ELOWERBOUND"))
            {
                this.ELowerBound = ((IEGenericType)(value));
                return;
            }
            if ((feature == "ETYPEPARAMETER"))
            {
                this.ETypeParameter = ((IETypeParameter)(value));
                return;
            }
            if ((feature == "ECLASSIFIER"))
            {
                this.EClassifier = ((IEClassifier)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EUPPERBOUND"))
            {
                return new EUpperBoundProxy(this);
            }
            if ((attribute == "ELOWERBOUND"))
            {
                return new ELowerBoundProxy(this);
            }
            if ((attribute == "ETYPEPARAMETER"))
            {
                return new ETypeParameterProxy(this);
            }
            if ((attribute == "ECLASSIFIER"))
            {
                return new EClassifierProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EUPPERBOUND"))
            {
                return new EUpperBoundProxy(this);
            }
            if ((reference == "ELOWERBOUND"))
            {
                return new ELowerBoundProxy(this);
            }
            if ((reference == "ETYPEPARAMETER"))
            {
                return new ETypeParameterProxy(this);
            }
            if ((reference == "ECLASSIFIER"))
            {
                return new EClassifierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EGenericType/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EGenericType class
        /// </summary>
        public class EGenericTypeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EGenericType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EGenericTypeChildrenCollection(EGenericType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EUpperBound != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ETypeArguments.Count);
                    if ((this._parent.ELowerBound != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.EUpperBoundChanged += this.PropagateValueChanges;
                this._parent.ETypeArguments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ELowerBoundChanged += this.PropagateValueChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.EUpperBoundChanged -= this.PropagateValueChanges;
                this._parent.ETypeArguments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ELowerBoundChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EUpperBound == null))
                {
                    IEGenericType eUpperBoundCasted = item.As<IEGenericType>();
                    if ((eUpperBoundCasted != null))
                    {
                        this._parent.EUpperBound = eUpperBoundCasted;
                        return;
                    }
                }
                IEGenericType eTypeArgumentsCasted = item.As<IEGenericType>();
                if ((eTypeArgumentsCasted != null))
                {
                    this._parent.ETypeArguments.Add(eTypeArgumentsCasted);
                }
                if ((this._parent.ELowerBound == null))
                {
                    IEGenericType eLowerBoundCasted = item.As<IEGenericType>();
                    if ((eLowerBoundCasted != null))
                    {
                        this._parent.ELowerBound = eLowerBoundCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EUpperBound = null;
                this._parent.ETypeArguments.Clear();
                this._parent.ELowerBound = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EUpperBound))
                {
                    return true;
                }
                if (this._parent.ETypeArguments.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ELowerBound))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EUpperBound != null))
                {
                    array[arrayIndex] = this._parent.EUpperBound;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> eTypeArgumentsEnumerator = this._parent.ETypeArguments.GetEnumerator();
                try
                {
                    for (
                    ; eTypeArgumentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eTypeArgumentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eTypeArgumentsEnumerator.Dispose();
                }
                if ((this._parent.ELowerBound != null))
                {
                    array[arrayIndex] = this._parent.ELowerBound;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EUpperBound == item))
                {
                    this._parent.EUpperBound = null;
                    return true;
                }
                IEGenericType eGenericTypeItem = item.As<IEGenericType>();
                if (((eGenericTypeItem != null) 
                            && this._parent.ETypeArguments.Remove(eGenericTypeItem)))
                {
                    return true;
                }
                if ((this._parent.ELowerBound == item))
                {
                    this._parent.ELowerBound = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EUpperBound).Concat(this._parent.ETypeArguments).Concat(this._parent.ELowerBound).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EGenericType class
        /// </summary>
        public class EGenericTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EGenericType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EGenericTypeReferencedElementsCollection(EGenericType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EUpperBound != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ETypeArguments.Count);
                    if ((this._parent.ELowerBound != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ETypeParameter != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EClassifier != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.EUpperBoundChanged += this.PropagateValueChanges;
                this._parent.ETypeArguments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ELowerBoundChanged += this.PropagateValueChanges;
                this._parent.ETypeParameterChanged += this.PropagateValueChanges;
                this._parent.EClassifierChanged += this.PropagateValueChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.EUpperBoundChanged -= this.PropagateValueChanges;
                this._parent.ETypeArguments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ELowerBoundChanged -= this.PropagateValueChanges;
                this._parent.ETypeParameterChanged -= this.PropagateValueChanges;
                this._parent.EClassifierChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EUpperBound == null))
                {
                    IEGenericType eUpperBoundCasted = item.As<IEGenericType>();
                    if ((eUpperBoundCasted != null))
                    {
                        this._parent.EUpperBound = eUpperBoundCasted;
                        return;
                    }
                }
                IEGenericType eTypeArgumentsCasted = item.As<IEGenericType>();
                if ((eTypeArgumentsCasted != null))
                {
                    this._parent.ETypeArguments.Add(eTypeArgumentsCasted);
                }
                if ((this._parent.ELowerBound == null))
                {
                    IEGenericType eLowerBoundCasted = item.As<IEGenericType>();
                    if ((eLowerBoundCasted != null))
                    {
                        this._parent.ELowerBound = eLowerBoundCasted;
                        return;
                    }
                }
                if ((this._parent.ETypeParameter == null))
                {
                    IETypeParameter eTypeParameterCasted = item.As<IETypeParameter>();
                    if ((eTypeParameterCasted != null))
                    {
                        this._parent.ETypeParameter = eTypeParameterCasted;
                        return;
                    }
                }
                if ((this._parent.EClassifier == null))
                {
                    IEClassifier eClassifierCasted = item.As<IEClassifier>();
                    if ((eClassifierCasted != null))
                    {
                        this._parent.EClassifier = eClassifierCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EUpperBound = null;
                this._parent.ETypeArguments.Clear();
                this._parent.ELowerBound = null;
                this._parent.ETypeParameter = null;
                this._parent.EClassifier = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EUpperBound))
                {
                    return true;
                }
                if (this._parent.ETypeArguments.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ELowerBound))
                {
                    return true;
                }
                if ((item == this._parent.ETypeParameter))
                {
                    return true;
                }
                if ((item == this._parent.EClassifier))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EUpperBound != null))
                {
                    array[arrayIndex] = this._parent.EUpperBound;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> eTypeArgumentsEnumerator = this._parent.ETypeArguments.GetEnumerator();
                try
                {
                    for (
                    ; eTypeArgumentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eTypeArgumentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eTypeArgumentsEnumerator.Dispose();
                }
                if ((this._parent.ELowerBound != null))
                {
                    array[arrayIndex] = this._parent.ELowerBound;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ETypeParameter != null))
                {
                    array[arrayIndex] = this._parent.ETypeParameter;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EClassifier != null))
                {
                    array[arrayIndex] = this._parent.EClassifier;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EUpperBound == item))
                {
                    this._parent.EUpperBound = null;
                    return true;
                }
                IEGenericType eGenericTypeItem = item.As<IEGenericType>();
                if (((eGenericTypeItem != null) 
                            && this._parent.ETypeArguments.Remove(eGenericTypeItem)))
                {
                    return true;
                }
                if ((this._parent.ELowerBound == item))
                {
                    this._parent.ELowerBound = null;
                    return true;
                }
                if ((this._parent.ETypeParameter == item))
                {
                    this._parent.ETypeParameter = null;
                    return true;
                }
                if ((this._parent.EClassifier == item))
                {
                    this._parent.EClassifier = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EUpperBound).Concat(this._parent.ETypeArguments).Concat(this._parent.ELowerBound).Concat(this._parent.ETypeParameter).Concat(this._parent.EClassifier).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eUpperBound property
        /// </summary>
        private sealed class EUpperBoundProxy : ModelPropertyChange<IEGenericType, IEGenericType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EUpperBoundProxy(IEGenericType modelElement) : 
                    base(modelElement, "eUpperBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEGenericType Value
            {
                get
                {
                    return this.ModelElement.EUpperBound;
                }
                set
                {
                    this.ModelElement.EUpperBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eLowerBound property
        /// </summary>
        private sealed class ELowerBoundProxy : ModelPropertyChange<IEGenericType, IEGenericType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ELowerBoundProxy(IEGenericType modelElement) : 
                    base(modelElement, "eLowerBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEGenericType Value
            {
                get
                {
                    return this.ModelElement.ELowerBound;
                }
                set
                {
                    this.ModelElement.ELowerBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eTypeParameter property
        /// </summary>
        private sealed class ETypeParameterProxy : ModelPropertyChange<IEGenericType, IETypeParameter>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ETypeParameterProxy(IEGenericType modelElement) : 
                    base(modelElement, "eTypeParameter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IETypeParameter Value
            {
                get
                {
                    return this.ModelElement.ETypeParameter;
                }
                set
                {
                    this.ModelElement.ETypeParameter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eClassifier property
        /// </summary>
        private sealed class EClassifierProxy : ModelPropertyChange<IEGenericType, IEClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EClassifierProxy(IEGenericType modelElement) : 
                    base(modelElement, "eClassifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEClassifier Value
            {
                get
                {
                    return this.ModelElement.EClassifier;
                }
                set
                {
                    this.ModelElement.EClassifier = value;
                }
            }
        }
    }
}

