//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    /// <summary>
    /// The default implementation of the EClassifier class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EClassifier/")]
    [DebuggerDisplayAttribute("EClassifier {Name}")]
    public abstract class EClassifier : ENamedElement, IEClassifier, IModelElement
    {
        
        /// <summary>
        /// The backing field for the InstanceClassName property
        /// </summary>
        private string _instanceClassName;
        
        /// <summary>
        /// The backing field for the InstanceTypeName property
        /// </summary>
        private string _instanceTypeName;
        
        /// <summary>
        /// The backing field for the ETypeParameters property
        /// </summary>
        private ObservableCompositionOrderedSet<IETypeParameter> _eTypeParameters;
        
        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public EClassifier()
        {
            this._eTypeParameters = new ObservableCompositionOrderedSet<IETypeParameter>(this);
            this._eTypeParameters.CollectionChanging += this.ETypeParametersCollectionChanging;
            this._eTypeParameters.CollectionChanged += this.ETypeParametersCollectionChanged;
        }
        
        /// <summary>
        /// The instanceClassName property
        /// </summary>
        [XmlElementNameAttribute("instanceClassName")]
        [XmlAttributeAttribute(true)]
        public virtual string InstanceClassName
        {
            get
            {
                return this._instanceClassName;
            }
            set
            {
                if ((this._instanceClassName != value))
                {
                    string old = this._instanceClassName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstanceClassNameChanging(e);
                    this.OnPropertyChanging("InstanceClassName", e);
                    this._instanceClassName = value;
                    this.OnInstanceClassNameChanged(e);
                    this.OnPropertyChanged("InstanceClassName", e);
                }
            }
        }
        
        /// <summary>
        /// The instanceTypeName property
        /// </summary>
        [XmlElementNameAttribute("instanceTypeName")]
        [XmlAttributeAttribute(true)]
        public virtual string InstanceTypeName
        {
            get
            {
                return this._instanceTypeName;
            }
            set
            {
                if ((this._instanceTypeName != value))
                {
                    string old = this._instanceTypeName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstanceTypeNameChanging(e);
                    this.OnPropertyChanging("InstanceTypeName", e);
                    this._instanceTypeName = value;
                    this.OnInstanceTypeNameChanged(e);
                    this.OnPropertyChanged("InstanceTypeName", e);
                }
            }
        }
        
        /// <summary>
        /// The ePackage property
        /// </summary>
        [XmlElementNameAttribute("ePackage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eClassifiers")]
        public virtual IEPackage EPackage
        {
            get
            {
                return ModelHelper.CastAs<IEPackage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The eTypeParameters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eTypeParameters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IETypeParameter> ETypeParameters
        {
            get
            {
                return this._eTypeParameters;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EClassifierChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EClassifierReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EClassifier/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InstanceClassName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceClassNameChanging;
        
        /// <summary>
        /// Gets fired when the InstanceClassName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceClassNameChanged;
        
        /// <summary>
        /// Gets fired before the InstanceTypeName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceTypeNameChanging;
        
        /// <summary>
        /// Gets fired when the InstanceTypeName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceTypeNameChanged;
        
        /// <summary>
        /// Gets fired before the EPackage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EPackageChanging;
        
        /// <summary>
        /// Gets fired when the EPackage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EPackageChanged;
        
        /// <summary>
        /// Raises the InstanceClassNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceClassNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceClassNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceClassNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceClassNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceClassNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceTypeNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceTypeNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceTypeNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceTypeNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceTypeNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceTypeNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EPackageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEPackageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EPackageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IEPackage oldEPackage = ModelHelper.CastAs<IEPackage>(oldParent);
            IEPackage newEPackage = ModelHelper.CastAs<IEPackage>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEPackage, newEPackage);
            this.OnEPackageChanging(e);
            this.OnPropertyChanging("EPackage");
        }
        
        /// <summary>
        /// Raises the EPackageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEPackageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EPackageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IEPackage oldEPackage = ModelHelper.CastAs<IEPackage>(oldParent);
            IEPackage newEPackage = ModelHelper.CastAs<IEPackage>(newParent);
            if ((oldEPackage != null))
            {
                oldEPackage.EClassifiers.Remove(this);
            }
            if ((newEPackage != null))
            {
                newEPackage.EClassifiers.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEPackage, newEPackage);
            this.OnEPackageChanged(e);
            this.OnPropertyChanged("EPackage", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ETypeParameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ETypeParametersCollectionChanging(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ETypeParameters", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ETypeParameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ETypeParametersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ETypeParameters", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int eTypeParametersIndex = ModelHelper.IndexOfReference(this.ETypeParameters, element);
            if ((eTypeParametersIndex != -1))
            {
                return ModelHelper.CreatePath("eTypeParameters", eTypeParametersIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ETYPEPARAMETERS"))
            {
                if ((index < this.ETypeParameters.Count))
                {
                    return this.ETypeParameters[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INSTANCECLASSNAME"))
            {
                return this.InstanceClassName;
            }
            if ((attribute == "INSTANCETYPENAME"))
            {
                return this.InstanceTypeName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ETYPEPARAMETERS"))
            {
                return this._eTypeParameters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EPACKAGE"))
            {
                this.EPackage = ((IEPackage)(value));
                return;
            }
            if ((feature == "INSTANCECLASSNAME"))
            {
                this.InstanceClassName = ((string)(value));
                return;
            }
            if ((feature == "INSTANCETYPENAME"))
            {
                this.InstanceTypeName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EPACKAGE"))
            {
                return new EPackageProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EPACKAGE"))
            {
                return new EPackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EClassifier/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EClassifier class
        /// </summary>
        public class EClassifierChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EClassifier _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EClassifierChildrenCollection(EClassifier parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ETypeParameters.Count);
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.ETypeParameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.ETypeParameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IETypeParameter eTypeParametersCasted = item.As<IETypeParameter>();
                if ((eTypeParametersCasted != null))
                {
                    this._parent.ETypeParameters.Add(eTypeParametersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ETypeParameters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ETypeParameters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> eTypeParametersEnumerator = this._parent.ETypeParameters.GetEnumerator();
                try
                {
                    for (
                    ; eTypeParametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eTypeParametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eTypeParametersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IETypeParameter eTypeParameterItem = item.As<IETypeParameter>();
                if (((eTypeParameterItem != null) 
                            && this._parent.ETypeParameters.Remove(eTypeParameterItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ETypeParameters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EClassifier class
        /// </summary>
        public class EClassifierReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EClassifier _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EClassifierReferencedElementsCollection(EClassifier parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EPackage != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ETypeParameters.Count);
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.EPackageChanged += this.PropagateValueChanges;
                this._parent.ETypeParameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.EPackageChanged -= this.PropagateValueChanges;
                this._parent.ETypeParameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EPackage == null))
                {
                    IEPackage ePackageCasted = item.As<IEPackage>();
                    if ((ePackageCasted != null))
                    {
                        this._parent.EPackage = ePackageCasted;
                        return;
                    }
                }
                IETypeParameter eTypeParametersCasted = item.As<IETypeParameter>();
                if ((eTypeParametersCasted != null))
                {
                    this._parent.ETypeParameters.Add(eTypeParametersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EPackage = null;
                this._parent.ETypeParameters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EPackage))
                {
                    return true;
                }
                if (this._parent.ETypeParameters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EPackage != null))
                {
                    array[arrayIndex] = this._parent.EPackage;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> eTypeParametersEnumerator = this._parent.ETypeParameters.GetEnumerator();
                try
                {
                    for (
                    ; eTypeParametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eTypeParametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eTypeParametersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EPackage == item))
                {
                    this._parent.EPackage = null;
                    return true;
                }
                IETypeParameter eTypeParameterItem = item.As<IETypeParameter>();
                if (((eTypeParameterItem != null) 
                            && this._parent.ETypeParameters.Remove(eTypeParameterItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EPackage).Concat(this._parent.ETypeParameters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instanceClassName property
        /// </summary>
        private sealed class InstanceClassNameProxy : ModelPropertyChange<IEClassifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceClassNameProxy(IEClassifier modelElement) : 
                    base(modelElement, "instanceClassName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InstanceClassName;
                }
                set
                {
                    this.ModelElement.InstanceClassName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instanceTypeName property
        /// </summary>
        private sealed class InstanceTypeNameProxy : ModelPropertyChange<IEClassifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceTypeNameProxy(IEClassifier modelElement) : 
                    base(modelElement, "instanceTypeName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InstanceTypeName;
                }
                set
                {
                    this.ModelElement.InstanceTypeName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ePackage property
        /// </summary>
        private sealed class EPackageProxy : ModelPropertyChange<IEClassifier, IEPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EPackageProxy(IEClassifier modelElement) : 
                    base(modelElement, "ePackage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEPackage Value
            {
                get
                {
                    return this.ModelElement.EPackage;
                }
                set
                {
                    this.ModelElement.EPackage = value;
                }
            }
        }
    }
}

