//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    /// <summary>
    /// The default implementation of the EReference class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EReference/")]
    [DebuggerDisplayAttribute("EReference {Name}")]
    public class EReference : EStructuralFeature, IEReference, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Containment property
        /// </summary>
        private Nullable<bool> _containment;
        
        /// <summary>
        /// The backing field for the ResolveProxies property
        /// </summary>
        private Nullable<bool> _resolveProxies = true;
        
        /// <summary>
        /// The backing field for the EOpposite property
        /// </summary>
        private IEReference _eOpposite;
        
        /// <summary>
        /// The backing field for the EKeys property
        /// </summary>
        private ObservableAssociationOrderedSet<IEAttribute> _eKeys;
        
        private static IClass _classInstance;

        /// <summary>
        /// Creates a new instance
        /// </summary>
        public EReference()
        {
            this._eKeys = new ObservableAssociationOrderedSet<IEAttribute>();
            this._eKeys.CollectionChanging += this.EKeysCollectionChanging;
            this._eKeys.CollectionChanged += this.EKeysCollectionChanged;
        }
        
        /// <summary>
        /// The containment property
        /// </summary>
        [XmlElementNameAttribute("containment")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Containment
        {
            get
            {
                return this._containment;
            }
            set
            {
                if ((this._containment != value))
                {
                    Nullable<bool> old = this._containment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContainmentChanging(e);
                    this.OnPropertyChanging("Containment", e);
                    this._containment = value;
                    this.OnContainmentChanged(e);
                    this.OnPropertyChanged("Containment", e);
                }
            }
        }
        
        /// <summary>
        /// The resolveProxies property
        /// </summary>
        [DefaultValueAttribute(true)]
        [XmlElementNameAttribute("resolveProxies")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> ResolveProxies
        {
            get
            {
                return this._resolveProxies;
            }
            set
            {
                if ((this._resolveProxies != value))
                {
                    Nullable<bool> old = this._resolveProxies;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResolveProxiesChanging(e);
                    this.OnPropertyChanging("ResolveProxies", e);
                    this._resolveProxies = value;
                    this.OnResolveProxiesChanged(e);
                    this.OnPropertyChanged("ResolveProxies", e);
                }
            }
        }
        
        /// <summary>
        /// The eOpposite property
        /// </summary>
        [XmlElementNameAttribute("eOpposite")]
        [XmlAttributeAttribute(true)]
        public virtual IEReference EOpposite
        {
            get
            {
                return this._eOpposite;
            }
            set
            {
                if ((this._eOpposite != value))
                {
                    IEReference old = this._eOpposite;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEOppositeChanging(e);
                    this.OnPropertyChanging("EOpposite", e);
                    this._eOpposite = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEOpposite;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEOpposite;
                    }
                    this.OnEOppositeChanged(e);
                    this.OnPropertyChanged("EOpposite", e);
                }
            }
        }
        
        /// <summary>
        /// The eKeys property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eKeys")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEAttribute> EKeys
        {
            get
            {
                return this._eKeys;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EReferenceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EReference/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Containment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainmentChanging;
        
        /// <summary>
        /// Gets fired when the Containment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainmentChanged;
        
        /// <summary>
        /// Gets fired before the ResolveProxies property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResolveProxiesChanging;
        
        /// <summary>
        /// Gets fired when the ResolveProxies property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResolveProxiesChanged;
        
        /// <summary>
        /// Gets fired before the EOpposite property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EOppositeChanging;
        
        /// <summary>
        /// Gets fired when the EOpposite property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EOppositeChanged;
        
        /// <summary>
        /// Raises the ContainmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContainmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResolveProxiesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResolveProxiesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResolveProxiesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResolveProxiesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResolveProxiesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResolveProxiesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EOppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEOppositeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EOppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EOppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EOppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EOpposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEOpposite(object sender, System.EventArgs eventArgs)
        {
            this.EOpposite = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EKeys property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EKeysCollectionChanging(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EKeys", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EKeys property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EKeysCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EKeys", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONTAINMENT"))
            {
                return this.Containment;
            }
            if ((attribute == "RESOLVEPROXIES"))
            {
                return this.ResolveProxies;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EKEYS"))
            {
                return this._eKeys;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EOPPOSITE"))
            {
                this.EOpposite = ((IEReference)(value));
                return;
            }
            if ((feature == "CONTAINMENT"))
            {
                this.Containment = ((bool)(value));
                return;
            }
            if ((feature == "RESOLVEPROXIES"))
            {
                this.ResolveProxies = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EOPPOSITE"))
            {
                return new EOppositeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EOPPOSITE"))
            {
                return new EOppositeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2002/Ecore#//EReference/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EReference class
        /// </summary>
        public class EReferenceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EReference _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EReferenceReferencedElementsCollection(EReference parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EOpposite != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EKeys.Count);
                    return count;
                }
            }

            /// <inheritdoc />
            protected override void AttachCore()
            {
                this._parent.EOppositeChanged += this.PropagateValueChanges;
                this._parent.EKeys.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }

            /// <inheritdoc />
            protected override void DetachCore()
            {
                this._parent.EOppositeChanged -= this.PropagateValueChanges;
                this._parent.EKeys.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EOpposite == null))
                {
                    IEReference eOppositeCasted = item.As<IEReference>();
                    if ((eOppositeCasted != null))
                    {
                        this._parent.EOpposite = eOppositeCasted;
                        return;
                    }
                }
                IEAttribute eKeysCasted = item.As<IEAttribute>();
                if ((eKeysCasted != null))
                {
                    this._parent.EKeys.Add(eKeysCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EOpposite = null;
                this._parent.EKeys.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EOpposite))
                {
                    return true;
                }
                if (this._parent.EKeys.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EOpposite != null))
                {
                    array[arrayIndex] = this._parent.EOpposite;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> eKeysEnumerator = this._parent.EKeys.GetEnumerator();
                try
                {
                    for (
                    ; eKeysEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eKeysEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eKeysEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EOpposite == item))
                {
                    this._parent.EOpposite = null;
                    return true;
                }
                IEAttribute eAttributeItem = item.As<IEAttribute>();
                if (((eAttributeItem != null) 
                            && this._parent.EKeys.Remove(eAttributeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EOpposite).Concat(this._parent.EKeys).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the containment property
        /// </summary>
        private sealed class ContainmentProxy : ModelPropertyChange<IEReference, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContainmentProxy(IEReference modelElement) : 
                    base(modelElement, "containment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Containment;
                }
                set
                {
                    this.ModelElement.Containment = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resolveProxies property
        /// </summary>
        private sealed class ResolveProxiesProxy : ModelPropertyChange<IEReference, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResolveProxiesProxy(IEReference modelElement) : 
                    base(modelElement, "resolveProxies")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.ResolveProxies;
                }
                set
                {
                    this.ModelElement.ResolveProxies = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eOpposite property
        /// </summary>
        private sealed class EOppositeProxy : ModelPropertyChange<IEReference, IEReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EOppositeProxy(IEReference modelElement) : 
                    base(modelElement, "eOpposite")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEReference Value
            {
                get
                {
                    return this.ModelElement.EOpposite;
                }
                set
                {
                    this.ModelElement.EOpposite = value;
                }
            }
        }
    }
}

