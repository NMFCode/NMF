//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for Extent
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Extent))]
    [XmlDefaultImplementationTypeAttribute(typeof(Extent))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Extent")]
    public interface IExtent : IModelElement, IObject
    {
        
        /// <summary>
        /// 
        /// </summary>
        bool UseContainment();
        
        /// <summary>
        /// 
        /// </summary>
        IReflectiveSequence Elements();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="includesSubtypes"></param>
        ISetExpression<IElement> ElementsOfType(NMF.Interop.Cmof.IClass type, bool includesSubtypes);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        ISetExpression<ILink> LinksOfType(IAssociation type);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="association"></param>
        /// <param name="endElement"></param>
        /// <param name="end1ToEnd2Direction"></param>
        ISetExpression<IElement> LinkedElements(IAssociation association, IElement endElement, bool end1ToEnd2Direction);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="association"></param>
        /// <param name="firstElement"></param>
        /// <param name="secondElement"></param>
        bool LinkExists(IAssociation association, IElement firstElement, IElement secondElement);
    }
}

