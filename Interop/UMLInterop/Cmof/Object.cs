//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The default implementation of the Object class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Object")]
    public partial class Object : ModelElement, IObject, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _equalsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEqualsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isSetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsSetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unsetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnsetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _invokeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInvokeOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Object")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        public IObject Get(IProperty property)
        {
            System.Func<IObject, IProperty, IObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObject, IProperty, IObject>>(_getOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method get registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOperation.Value, property);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOperation.Value, e));
            IObject result = handler.Invoke(this, property);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOperation()
        {
            return ClassInstance.LookupOperation("get");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="element"></param>
        public bool Equals(IObject element)
        {
            System.Func<IObject, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObject, IObject, bool>>(_equalsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method equals registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _equalsOperation.Value, element);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _equalsOperation.Value, e));
            bool result = handler.Invoke(this, element);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _equalsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEqualsOperation()
        {
            return ClassInstance.LookupOperation("equals");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        /// <param name="value"></param>
        public void Set(IProperty property, IObject value)
        {
            System.Action<IObject, IProperty, IObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IObject, IProperty, IObject>>(_setOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method set registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setOperation.Value, property, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setOperation.Value, e));
            handler.Invoke(this, property, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetOperation()
        {
            return ClassInstance.LookupOperation("set");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        public bool IsSet(IProperty property)
        {
            System.Func<IObject, IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObject, IProperty, bool>>(_isSetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isSet registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isSetOperation.Value, property);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isSetOperation.Value, e));
            bool result = handler.Invoke(this, property);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isSetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsSetOperation()
        {
            return ClassInstance.LookupOperation("isSet");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        public void Unset(IProperty property)
        {
            System.Action<IObject, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IObject, IProperty>>(_unsetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unset registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unsetOperation.Value, property);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unsetOperation.Value, e));
            handler.Invoke(this, property);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unsetOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnsetOperation()
        {
            return ClassInstance.LookupOperation("unset");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="op"></param>
        /// <param name="arguments"></param>
        public IObject Invoke(NMF.Interop.Cmof.IOperation op, IEnumerable<IArgument> arguments)
        {
            System.Func<IObject, NMF.Interop.Cmof.IOperation, IEnumerable<IArgument>, IObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObject, NMF.Interop.Cmof.IOperation, IEnumerable<IArgument>, IObject>>(_invokeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method invoke registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _invokeOperation.Value, op, arguments);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _invokeOperation.Value, e));
            IObject result = handler.Invoke(this, op, arguments);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _invokeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInvokeOperation()
        {
            return ClassInstance.LookupOperation("invoke");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Object")));
            }
            return _classInstance;
        }
    }
}

