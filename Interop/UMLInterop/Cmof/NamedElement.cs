//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A named element is an element in a model that may have a name.
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//NamedElement")]
    [DebuggerDisplayAttribute("NamedElement {Name}")]
    public abstract partial class NamedElement : Element, INamedElement, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _visibility_needs_ownershipOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveVisibility_needs_ownershipOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_no_qualified_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_no_qualified_nameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_qualified_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_qualified_nameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allNamespacesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllNamespacesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isDistinguishableFromOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsDistinguishableFromOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _qualifiedNameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveQualifiedNameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _separatorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSeparatorOperation);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nameAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the Visibility property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<VisibilityKind> _visibility;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _visibilityAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveVisibilityAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The name of the NamedElement.
        /// </summary>
        [DisplayNameAttribute("name")]
        [DescriptionAttribute("The name of the NamedElement.")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.
        /// </summary>
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute("Determines where the NamedElement appears within different Namespaces within the " +
            "overall model, and its accessibility.")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        public Nullable<VisibilityKind> Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                if ((this._visibility != value))
                {
                    Nullable<VisibilityKind> old = this._visibility;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Visibility", e, _visibilityAttribute);
                    this._visibility = value;
                    this.OnPropertyChanged("Visibility", e, _visibilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//NamedElement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// If a NamedElement is not owned by a Namespace, it does not have a visibility.
        ///namespace->isEmpty() implies visibility->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Visibility_needs_ownership(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_visibility_needs_ownershipOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method visibility_needs_ownership registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _visibility_needs_ownershipOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _visibility_needs_ownershipOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _visibility_needs_ownershipOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveVisibility_needs_ownershipOperation()
        {
            return ClassInstance.LookupOperation("visibility_needs_ownership");
        }
        
        /// <summary>
        /// If there is no name, or one of the containing namespaces has no name, there is no qualified name.
        ///(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())
        ///  implies self.qualifiedName->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_no_qualified_name(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_has_no_qualified_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_no_qualified_name registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_no_qualified_nameOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_no_qualified_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_no_qualified_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_no_qualified_nameOperation()
        {
            return ClassInstance.LookupOperation("has_no_qualified_name");
        }
        
        /// <summary>
        /// When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
        ///(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies
        ///  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_qualified_name(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_has_qualified_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_qualified_name registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_qualified_nameOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_qualified_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_qualified_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_qualified_nameOperation()
        {
            return ClassInstance.LookupOperation("has_qualified_name");
        }
        
        /// <summary>
        /// The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.
        ///result = if self.namespace->isEmpty()
        ///then Sequence{}
        ///else self.namespace.allNamespaces()->prepend(self.namespace)
        ///endif
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Cmof.INamespace> AllNamespaces()
        {
            System.Func<INamedElement, IOrderedSetExpression<NMF.Interop.Cmof.INamespace>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, IOrderedSetExpression<NMF.Interop.Cmof.INamespace>>>(_allNamespacesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allNamespaces registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allNamespacesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allNamespacesOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Cmof.INamespace> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allNamespacesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllNamespacesOperation()
        {
            return ClassInstance.LookupOperation("allNamespaces");
        }
        
        /// <summary>
        /// The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.
        ///result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)
        ///then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()
        ///else true
        ///endif
        /// </summary>
        /// <param name="n"></param>
        /// <param name="ns"></param>
        public bool IsDistinguishableFrom(INamedElement n, NMF.Interop.Cmof.INamespace ns)
        {
            System.Func<INamedElement, INamedElement, NMF.Interop.Cmof.INamespace, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, INamedElement, NMF.Interop.Cmof.INamespace, bool>>(_isDistinguishableFromOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isDistinguishableFrom registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isDistinguishableFromOperation.Value, n, ns);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isDistinguishableFromOperation.Value, e));
            bool result = handler.Invoke(this, n, ns);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isDistinguishableFromOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsDistinguishableFromOperation()
        {
            return ClassInstance.LookupOperation("isDistinguishableFrom");
        }
        
        /// <summary>
        /// When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
        ///result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()
        ///then 
        ///    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
        ///else
        ///    Set{}
        ///endif
        /// </summary>
        public string QualifiedName()
        {
            System.Func<INamedElement, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, string>>(_qualifiedNameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method qualifiedName registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _qualifiedNameOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _qualifiedNameOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _qualifiedNameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveQualifiedNameOperation()
        {
            return ClassInstance.LookupOperation("qualifiedName");
        }
        
        /// <summary>
        /// The query separator() gives the string that is used to separate names when constructing a qualified name.
        ///result = '::'
        /// </summary>
        public string Separator()
        {
            System.Func<INamedElement, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, string>>(_separatorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method separator registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _separatorOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _separatorOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _separatorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSeparatorOperation()
        {
            return ClassInstance.LookupOperation("separator");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNameAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.NamedElement.ClassInstance)).Resolve("name")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveVisibilityAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.NamedElement.ClassInstance)).Resolve("visibility")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "VISIBILITY"))
            {
                return this.Visibility;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "VISIBILITY"))
            {
                this.Visibility = ((VisibilityKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "VISIBILITY"))
            {
                return Observable.Box(new VisibilityProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//NamedElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(INamedElement modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the visibility property
        /// </summary>
        private sealed class VisibilityProxy : ModelPropertyChange<INamedElement, Nullable<VisibilityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VisibilityProxy(INamedElement modelElement) : 
                    base(modelElement, "visibility")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<VisibilityKind> Value
            {
                get
                {
                    return this.ModelElement.Visibility;
                }
                set
                {
                    this.ModelElement.Visibility = value;
                }
            }
        }
    }
}

