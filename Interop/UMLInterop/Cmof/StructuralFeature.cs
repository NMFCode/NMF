//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
    ///By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//StructuralFeature")]
    [DebuggerDisplayAttribute("StructuralFeature {Name}")]
    public abstract partial class StructuralFeature : Feature, IStructuralFeature, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsReadOnly property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isReadOnly = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isReadOnlyAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsReadOnlyAttribute);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_ge_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_ge_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _value_specification_no_side_effectsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValue_specification_no_side_effectsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_ge_lowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_ge_lowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _value_specification_constantOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValue_specification_constantOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesCardinalityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesCardinalityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesMultiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesMultiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMultivaluedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMultivaluedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lowerBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLowerBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upperBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpperBoundOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerValueReference);
        
        /// <summary>
        /// The backing field for the LowerValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _lowerValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperValueReference);
        
        /// <summary>
        /// The backing field for the UpperValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _upperValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Cmof.IType _type;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// States whether the feature&apos;s value may be modified by a client.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReadOnly")]
        [DescriptionAttribute("States whether the feature\'s value may be modified by a client.")]
        [CategoryAttribute("StructuralFeature")]
        [XmlElementNameAttribute("isReadOnly")]
        [XmlAttributeAttribute(true)]
        public bool IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                if ((this._isReadOnly != value))
                {
                    bool old = this._isReadOnly;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsReadOnly", e, _isReadOnlyAttribute);
                    this._isReadOnly = value;
                    this.OnPropertyChanged("IsReadOnly", e, _isReadOnlyAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("For a multivalued multiplicity, this attribute specifies whether the values in an" +
            " instantiation of this element are sequentially ordered.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnique")]
        [DescriptionAttribute("For a multivalued multiplicity, this attributes specifies whether the values in a" +
            "n instantiation of this element are unique.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The specification of the lower bound for this multiplicity.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("lowerValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification LowerValue
        {
            get
            {
                return this._lowerValue;
            }
            set
            {
                if ((this._lowerValue != value))
                {
                    IValueSpecification old = this._lowerValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("LowerValue", e, _lowerValueReference);
                    this._lowerValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetLowerValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetLowerValue;
                    }
                    this.OnPropertyChanged("LowerValue", e, _lowerValueReference);
                }
            }
        }
        
        /// <summary>
        /// The specification of the upper bound for this multiplicity.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("upperValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification UpperValue
        {
            get
            {
                return this._upperValue;
            }
            set
            {
                if ((this._upperValue != value))
                {
                    IValueSpecification old = this._upperValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("UpperValue", e, _upperValueReference);
                    this._upperValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetUpperValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetUpperValue;
                    }
                    this.OnPropertyChanged("UpperValue", e, _upperValueReference);
                }
            }
        }
        
        /// <summary>
        /// This information is derived from the return result for this Operation.
        ///The type of the TypedElement.
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("This information is derived from the return result for this Operation.\nThe type o" +
            "f the TypedElement.")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Cmof.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Cmof.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StructuralFeatureChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//StructuralFeature")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsReadOnlyAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.StructuralFeature.ClassInstance)).Resolve("isReadOnly")));
        }
        
        /// <summary>
        /// The lower bound must be a non-negative integer literal.
        ///lowerBound()-&gt;notEmpty() implies lowerBound() &gt;= 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Lower_ge_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_ge_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_ge_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_ge_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_ge_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_ge_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_ge_0Operation()
        {
            return ClassInstance.LookupOperation("lower_ge_0");
        }
        
        /// <summary>
        /// If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.
        ///true
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Value_specification_no_side_effects(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_value_specification_no_side_effectsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value_specification_no_side_effects registe" +
                        "red. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _value_specification_no_side_effectsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _value_specification_no_side_effectsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _value_specification_no_side_effectsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValue_specification_no_side_effectsOperation()
        {
            return ClassInstance.LookupOperation("value_specification_no_side_effects");
        }
        
        /// <summary>
        /// The upper bound must be greater than or equal to the lower bound.
        ///(upperBound()-&gt;notEmpty() and lowerBound()-&gt;notEmpty()) implies upperBound() &gt;= lowerBound()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Upper_ge_lower(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_ge_lowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_ge_lower registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_ge_lowerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_ge_lowerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_ge_lowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_ge_lowerOperation()
        {
            return ClassInstance.LookupOperation("upper_ge_lower");
        }
        
        /// <summary>
        /// If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.
        ///true
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Value_specification_constant(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_value_specification_constantOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value_specification_constant registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _value_specification_constantOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _value_specification_constantOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _value_specification_constantOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValue_specification_constantOperation()
        {
            return ClassInstance.LookupOperation("value_specification_constant");
        }
        
        /// <summary>
        /// The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.
        ///result = (lowerBound() &lt;= C) and (upperBound() &gt;= C)
        ///upperBound()-&gt;notEmpty() and lowerBound()-&gt;notEmpty()
        /// </summary>
        /// <param name="c"></param>
        public bool IncludesCardinality(int c)
        {
            System.Func<IMultiplicityElement, int, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int, bool>>(_includesCardinalityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesCardinality registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesCardinalityOperation.Value, c);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesCardinalityOperation.Value, e));
            bool result = handler.Invoke(this, c);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesCardinalityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesCardinalityOperation()
        {
            return ClassInstance.LookupOperation("includesCardinality");
        }
        
        /// <summary>
        /// The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
        ///result = (self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() &gt;= M.upperBound())
        ///self.upperBound()-&gt;notEmpty() and self.lowerBound()-&gt;notEmpty() and M.upperBound()-&gt;notEmpty() and M.lowerBound()-&gt;notEmpty()
        /// </summary>
        /// <param name="m"></param>
        public bool IncludesMultiplicity(IMultiplicityElement m)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_includesMultiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesMultiplicity registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesMultiplicityOperation.Value, m);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesMultiplicityOperation.Value, e));
            bool result = handler.Invoke(this, m);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesMultiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("includesMultiplicity");
        }
        
        /// <summary>
        /// The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
        ///upperBound()-&gt;notEmpty()
        ///result = upperBound() &gt; 1
        /// </summary>
        public bool IsMultivalued()
        {
            System.Func<IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, bool>>(_isMultivaluedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMultivalued registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMultivaluedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMultivaluedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMultivaluedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMultivaluedOperation()
        {
            return ClassInstance.LookupOperation("isMultivalued");
        }
        
        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an integer.
        ///result = if lowerValue-&gt;isEmpty() then 1 else lowerValue.integerValue() endif
        /// </summary>
        public int LowerBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_lowerBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lowerBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lowerBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lowerBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lowerBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLowerBoundOperation()
        {
            return ClassInstance.LookupOperation("lowerBound");
        }
        
        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.
        ///result = if upperValue-&gt;isEmpty() then 1 else upperValue.unlimitedValue() endif
        /// </summary>
        public void UpperBound()
        {
            System.Action<IMultiplicityElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IMultiplicityElement>>(_upperBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upperBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upperBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upperBoundOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upperBoundOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpperBoundOperation()
        {
            return ClassInstance.LookupOperation("upperBound");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.MultiplicityElement.ClassInstance)).Resolve("lowerValue")));
        }
        
        /// <summary>
        /// Handles the event that the LowerValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLowerValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.LowerValue))
            {
                this.LowerValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.MultiplicityElement.ClassInstance)).Resolve("upperValue")));
        }
        
        /// <summary>
        /// Handles the event that the UpperValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUpperValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.UpperValue))
            {
                this.UpperValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Type))
            {
                this.Type = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.LowerValue))
            {
                return ModelHelper.CreatePath("lowerValue");
            }
            if ((element == this.UpperValue))
            {
                return ModelHelper.CreatePath("upperValue");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LOWERVALUE"))
            {
                return this.LowerValue;
            }
            if ((reference == "UPPERVALUE"))
            {
                return this.UpperValue;
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISREADONLY"))
            {
                return this.IsReadOnly;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOWERVALUE"))
            {
                this.LowerValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "UPPERVALUE"))
            {
                this.UpperValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Cmof.IType)(value));
                return;
            }
            if ((feature == "ISREADONLY"))
            {
                this.IsReadOnly = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISREADONLY"))
            {
                return Observable.Box(new IsReadOnlyProxy(this));
            }
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LOWERVALUE"))
            {
                return new LowerValueProxy(this);
            }
            if ((reference == "UPPERVALUE"))
            {
                return new UpperValueProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//StructuralFeature")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructuralFeature class
        /// </summary>
        public class StructuralFeatureChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructuralFeature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructuralFeatureChildrenCollection(StructuralFeature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.LowerValue != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UpperValue != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.LowerValue == null))
                {
                    IValueSpecification lowerValueCasted = item.As<IValueSpecification>();
                    if ((lowerValueCasted != null))
                    {
                        this._parent.LowerValue = lowerValueCasted;
                        return;
                    }
                }
                if ((this._parent.UpperValue == null))
                {
                    IValueSpecification upperValueCasted = item.As<IValueSpecification>();
                    if ((upperValueCasted != null))
                    {
                        this._parent.UpperValue = upperValueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LowerValue = null;
                this._parent.UpperValue = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.LowerValue))
                {
                    return true;
                }
                if ((item == this._parent.UpperValue))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.LowerValue != null))
                {
                    array[arrayIndex] = this._parent.LowerValue;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UpperValue != null))
                {
                    array[arrayIndex] = this._parent.UpperValue;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.LowerValue == item))
                {
                    this._parent.LowerValue = null;
                    return true;
                }
                if ((this._parent.UpperValue == item))
                {
                    this._parent.UpperValue = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LowerValue).Concat(this._parent.UpperValue).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isReadOnly property
        /// </summary>
        private sealed class IsReadOnlyProxy : ModelPropertyChange<IStructuralFeature, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsReadOnlyProxy(IStructuralFeature modelElement) : 
                    base(modelElement, "isReadOnly")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsReadOnly;
                }
                set
                {
                    this.ModelElement.IsReadOnly = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerValue property
        /// </summary>
        private sealed class LowerValueProxy : ModelPropertyChange<IMultiplicityElement, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerValueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lowerValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.LowerValue;
                }
                set
                {
                    this.ModelElement.LowerValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upperValue property
        /// </summary>
        private sealed class UpperValueProxy : ModelPropertyChange<IMultiplicityElement, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperValueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upperValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.UpperValue;
                }
                set
                {
                    this.ModelElement.UpperValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Cmof.ITypedElement, NMF.Interop.Cmof.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Cmof.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Cmof.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}
