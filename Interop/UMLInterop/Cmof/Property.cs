//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Property")]
    [DebuggerDisplayAttribute("Property {Name}")]
    public partial class Property : StructuralFeature, IProperty, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_compositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_compositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetting_context_conformsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetting_context_conformsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _derived_union_is_read_onlyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDerived_union_is_read_onlyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefined_property_inheritedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefined_property_inheritedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetted_property_namesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetted_property_namesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _derived_union_is_derivedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDerived_union_is_derivedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetting_rulesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetting_rulesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isAttributeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsAttributeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isNavigableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsNavigableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsettingContextOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsettingContextOperation);
        
        /// <summary>
        /// The backing field for the Aggregation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private AggregationKind _aggregation = AggregationKind.None;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _aggregationAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAggregationAttribute);
        
        /// <summary>
        /// The backing field for the IsDerived property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerived = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedAttribute);
        
        /// <summary>
        /// The backing field for the IsDerivedUnion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerivedUnion = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedUnionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedUnionAttribute);
        
        /// <summary>
        /// The backing field for the IsID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isID = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isIDAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsIDAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassReference);
        
        /// <summary>
        /// The backing field for the Class property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Cmof.IClass _class;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _datatypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDatatypeReference);
        
        /// <summary>
        /// The backing field for the Datatype property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Cmof.IDataType _datatype;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _owningAssociationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwningAssociationReference);
        
        /// <summary>
        /// The backing field for the OwningAssociation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAssociation _owningAssociation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _defaultValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDefaultValueReference);
        
        /// <summary>
        /// The backing field for the DefaultValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _defaultValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedPropertyReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedPropertyReference);
        
        /// <summary>
        /// The backing field for the RedefinedProperty property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IProperty> _redefinedProperty;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subsettedPropertyReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubsettedPropertyReference);
        
        /// <summary>
        /// The backing field for the SubsettedProperty property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IProperty> _subsettedProperty;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Property()
        {
            this._redefinedProperty = new ObservableAssociationSet<IProperty>();
            this._redefinedProperty.CollectionChanging += this.RedefinedPropertyCollectionChanging;
            this._redefinedProperty.CollectionChanged += this.RedefinedPropertyCollectionChanged;
            this._subsettedProperty = new ObservableAssociationSet<IProperty>();
            this._subsettedProperty.CollectionChanging += this.SubsettedPropertyCollectionChanging;
            this._subsettedProperty.CollectionChanged += this.SubsettedPropertyCollectionChanged;
        }
        
        /// <summary>
        /// Specifies the kind of aggregation that applies to the Property.
        /// </summary>
        [DefaultValueAttribute(AggregationKind.None)]
        [DisplayNameAttribute("aggregation")]
        [DescriptionAttribute("Specifies the kind of aggregation that applies to the Property.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("aggregation")]
        [XmlAttributeAttribute(true)]
        public AggregationKind Aggregation
        {
            get
            {
                return this._aggregation;
            }
            set
            {
                if ((this._aggregation != value))
                {
                    AggregationKind old = this._aggregation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Aggregation", e, _aggregationAttribute);
                    this._aggregation = value;
                    this.OnPropertyChanged("Aggregation", e, _aggregationAttribute);
                }
            }
        }
        
        /// <summary>
        /// If isDerived is true, the value of the attribute is derived from information elsewhere.
        ///Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("If isDerived is true, the value of the attribute is derived from information else" +
            "where.\nSpecifies whether the Property is derived, i.e., whether its value or val" +
            "ues can be computed from other information.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        public bool IsDerived
        {
            get
            {
                return this._isDerived;
            }
            set
            {
                if ((this._isDerived != value))
                {
                    bool old = this._isDerived;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerived", e, _isDerivedAttribute);
                    this._isDerived = value;
                    this.OnPropertyChanged("IsDerived", e, _isDerivedAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerivedUnion")]
        [DescriptionAttribute("Specifies whether the property is derived as the union of all of the properties t" +
            "hat are constrained to subset it.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerivedUnion")]
        [XmlAttributeAttribute(true)]
        public bool IsDerivedUnion
        {
            get
            {
                return this._isDerivedUnion;
            }
            set
            {
                if ((this._isDerivedUnion != value))
                {
                    bool old = this._isDerivedUnion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerivedUnion", e, _isDerivedUnionAttribute);
                    this._isDerivedUnion = value;
                    this.OnPropertyChanged("IsDerivedUnion", e, _isDerivedUnionAttribute);
                }
            }
        }
        
        /// <summary>
        /// True indicates this property can be used to uniquely identify an instance of the containing Class.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isID")]
        [DescriptionAttribute("True indicates this property can be used to uniquely identify an instance of the " +
            "containing Class.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isID")]
        [XmlAttributeAttribute(true)]
        public bool IsID
        {
            get
            {
                return this._isID;
            }
            set
            {
                if ((this._isID != value))
                {
                    bool old = this._isID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsID", e, _isIDAttribute);
                    this._isID = value;
                    this.OnPropertyChanged("IsID", e, _isIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Class that owns the Property.
        ///References the Class that owns the Property.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedAttribute")]
        public NMF.Interop.Cmof.IClass Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    NMF.Interop.Cmof.IClass old = this._class;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Class", e, _classReference);
                    this._class = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedAttribute.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedAttribute.Add(this);
                    }
                    this.OnPropertyChanged("Class", e, _classReference);
                }
            }
        }
        
        /// <summary>
        /// The DataType that owns this Property.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedAttribute")]
        public NMF.Interop.Cmof.IDataType Datatype
        {
            get
            {
                return this._datatype;
            }
            set
            {
                if ((this._datatype != value))
                {
                    NMF.Interop.Cmof.IDataType old = this._datatype;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Datatype", e, _datatypeReference);
                    this._datatype = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedAttribute.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedAttribute.Add(this);
                    }
                    this.OnPropertyChanged("Datatype", e, _datatypeReference);
                }
            }
        }
        
        /// <summary>
        /// References the owning association of this property, if any.
        /// </summary>
        [DisplayNameAttribute("owningAssociation")]
        [DescriptionAttribute("References the owning association of this property, if any.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("owningAssociation")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedEnd")]
        public IAssociation OwningAssociation
        {
            get
            {
                return this._owningAssociation;
            }
            set
            {
                if ((this._owningAssociation != value))
                {
                    IAssociation old = this._owningAssociation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwningAssociation", e, _owningAssociationReference);
                    this._owningAssociation = value;
                    if ((old != null))
                    {
                        old.OwnedEnd.Remove(this);
                        old.Deleted -= this.OnResetOwningAssociation;
                    }
                    if ((value != null))
                    {
                        if ((value.OwnedEnd.Contains(this) != true))
                        {
                            value.OwnedEnd.Add(this);
                        }
                        value.Deleted += this.OnResetOwningAssociation;
                    }
                    this.OnPropertyChanged("OwningAssociation", e, _owningAssociationReference);
                }
            }
        }
        
        /// <summary>
        /// A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("defaultValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification DefaultValue
        {
            get
            {
                return this._defaultValue;
            }
            set
            {
                if ((this._defaultValue != value))
                {
                    IValueSpecification old = this._defaultValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DefaultValue", e, _defaultValueReference);
                    this._defaultValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetDefaultValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetDefaultValue;
                    }
                    this.OnPropertyChanged("DefaultValue", e, _defaultValueReference);
                }
            }
        }
        
        /// <summary>
        /// References the properties that are redefined by this property.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedProperty")]
        [DescriptionAttribute("References the properties that are redefined by this property.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("redefinedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IProperty> RedefinedProperty
        {
            get
            {
                return this._redefinedProperty;
            }
        }
        
        /// <summary>
        /// References the properties of which this property is constrained to be a subset.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("subsettedProperty")]
        [DescriptionAttribute("References the properties of which this property is constrained to be a subset.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("subsettedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IProperty> SubsettedProperty
        {
            get
            {
                return this._subsettedProperty;
            }
        }
        
        IAssociation IProperty.Association
        {
            get
            {
                IProperty _this = this;
                return _this.OwningAssociation;
            }
            set
            {
                IProperty _this = this;
                _this.OwningAssociation = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PropertyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Property")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A multiplicity of a composite aggregation must not have an upper bound greater than 1.
        ///A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.
        ///isComposite implies (upperBound()-&gt;isEmpty() or upperBound() &lt;= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_composite(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_multiplicity_of_compositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_composite registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_compositeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_compositeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_compositeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_compositeOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_composite");
        }
        
        /// <summary>
        /// Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.
        ///self.subsettedProperty-&gt;notEmpty() implies
        ///  (self.subsettingContext()-&gt;notEmpty() and self.subsettingContext()-&gt;forAll (sc |
        ///    self.subsettedProperty-&gt;forAll(sp |
        ///      sp.subsettingContext()-&gt;exists(c | sc.conformsTo(c)))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetting_context_conforms(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetting_context_conformsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetting_context_conforms registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetting_context_conformsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetting_context_conformsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetting_context_conformsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetting_context_conformsOperation()
        {
            return ClassInstance.LookupOperation("subsetting_context_conforms");
        }
        
        /// <summary>
        /// A derived union is read only.
        ///isDerivedUnion implies isReadOnly
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Derived_union_is_read_only(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_derived_union_is_read_onlyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method derived_union_is_read_only registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _derived_union_is_read_onlyOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _derived_union_is_read_onlyOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _derived_union_is_read_onlyOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDerived_union_is_read_onlyOperation()
        {
            return ClassInstance.LookupOperation("derived_union_is_read_only");
        }
        
        /// <summary>
        /// A redefined property must be inherited from a more general classifier containing the redefining property.
        ///if (redefinedProperty-&gt;notEmpty()) then
        ///  (redefinitionContext-&gt;notEmpty() and
        ///      redefinedProperty-&gt;forAll(rp|
        ///        ((redefinitionContext-&gt;collect(fc|
        ///          fc.allParents()))-&gt;asSet())-&gt;collect(c| c.allFeatures())-&gt;asSet()-&gt;includes(rp))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefined_property_inherited(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_redefined_property_inheritedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefined_property_inherited registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefined_property_inheritedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefined_property_inheritedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefined_property_inheritedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefined_property_inheritedOperation()
        {
            return ClassInstance.LookupOperation("redefined_property_inherited");
        }
        
        /// <summary>
        /// A property may not subset a property with the same name.
        ///true
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetted_property_names(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetted_property_namesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetted_property_names registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetted_property_namesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetted_property_namesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetted_property_namesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetted_property_namesOperation()
        {
            return ClassInstance.LookupOperation("subsetted_property_names");
        }
        
        /// <summary>
        /// A derived union is derived.
        ///isDerivedUnion implies isDerived
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Derived_union_is_derived(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_derived_union_is_derivedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method derived_union_is_derived registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _derived_union_is_derivedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _derived_union_is_derivedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _derived_union_is_derivedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDerived_union_is_derivedOperation()
        {
            return ClassInstance.LookupOperation("derived_union_is_derived");
        }
        
        /// <summary>
        /// A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.
        ///self.subsettedProperty-&gt;forAll(sp |
        ///  self.type.conformsTo(sp.type) and
        ///    ((self.upperBound()-&gt;notEmpty() and sp.upperBound()-&gt;notEmpty()) implies
        ///      self.upperBound()&lt;=sp.upperBound() ))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetting_rules(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetting_rulesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetting_rules registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetting_rulesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetting_rulesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetting_rulesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetting_rulesOperation()
        {
            return ClassInstance.LookupOperation("subsetting_rules");
        }
        
        /// <summary>
        /// The query isAttribute() is true if the Property is defined as an attribute of some classifier.
        ///result = Classifier.allInstances-&gt;exists(c | c.attribute-&gt;includes(p))
        /// </summary>
        /// <param name="p"></param>
        public bool IsAttribute(IProperty p)
        {
            System.Func<IProperty, IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, IProperty, bool>>(_isAttributeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isAttribute registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isAttributeOperation.Value, p);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isAttributeOperation.Value, e));
            bool result = handler.Invoke(this, p);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isAttributeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsAttributeOperation()
        {
            return ClassInstance.LookupOperation("isAttribute");
        }
        
        /// <summary>
        /// The query isNavigable() indicates whether it is possible to navigate across the property.
        ///result = not classifier-&gt;isEmpty() or association.owningAssociation.navigableOwnedEnd-&gt;includes(self)
        /// </summary>
        public bool IsNavigable()
        {
            System.Func<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, bool>>(_isNavigableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isNavigable registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isNavigableOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isNavigableOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isNavigableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsNavigableOperation()
        {
            return ClassInstance.LookupOperation("isNavigable");
        }
        
        /// <summary>
        /// The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.
        ///result = if association-&gt;notEmpty()
        ///then association.endType-type
        ///else if classifier-&gt;notEmpty() then Set{classifier} else Set{} endif
        ///endif
        /// </summary>
        public ISetExpression<NMF.Interop.Cmof.IType> SubsettingContext()
        {
            System.Func<IProperty, ISetExpression<NMF.Interop.Cmof.IType>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, ISetExpression<NMF.Interop.Cmof.IType>>>(_subsettingContextOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsettingContext registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsettingContextOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsettingContextOperation.Value, e));
            ISetExpression<NMF.Interop.Cmof.IType> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsettingContextOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsettingContextOperation()
        {
            return ClassInstance.LookupOperation("subsettingContext");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAggregationAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("aggregation")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("isDerived")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedUnionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("isDerivedUnion")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsIDAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("isID")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("class")));
        }
        
        /// <summary>
        /// Handles the event that the Class property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClass(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Class))
            {
                this.Class = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDatatypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("datatype")));
        }
        
        /// <summary>
        /// Handles the event that the Datatype property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDatatype(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Datatype))
            {
                this.Datatype = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwningAssociationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("owningAssociation")));
        }
        
        /// <summary>
        /// Handles the event that the OwningAssociation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwningAssociation(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.OwningAssociation))
            {
                this.OwningAssociation = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDefaultValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("defaultValue")));
        }
        
        /// <summary>
        /// Handles the event that the DefaultValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefaultValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DefaultValue))
            {
                this.DefaultValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedPropertyReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("redefinedProperty")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedPropertyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedProperty", e, _redefinedPropertyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedPropertyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedProperty", e, _redefinedPropertyReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubsettedPropertyReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Property.ClassInstance)).Resolve("subsettedProperty")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubsettedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubsettedPropertyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SubsettedProperty", e, _subsettedPropertyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubsettedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubsettedPropertyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubsettedProperty", e, _subsettedPropertyReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.DefaultValue))
            {
                return ModelHelper.CreatePath("defaultValue");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASS"))
            {
                return this.Class;
            }
            if ((reference == "DATATYPE"))
            {
                return this.Datatype;
            }
            if ((reference == "OWNINGASSOCIATION"))
            {
                return this.OwningAssociation;
            }
            if ((reference == "DEFAULTVALUE"))
            {
                return this.DefaultValue;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AGGREGATION"))
            {
                return this.Aggregation;
            }
            if ((attribute == "ISDERIVED"))
            {
                return this.IsDerived;
            }
            if ((attribute == "ISDERIVEDUNION"))
            {
                return this.IsDerivedUnion;
            }
            if ((attribute == "ISID"))
            {
                return this.IsID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REDEFINEDPROPERTY"))
            {
                return this._redefinedProperty;
            }
            if ((feature == "SUBSETTEDPROPERTY"))
            {
                return this._subsettedProperty;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASS"))
            {
                this.Class = ((NMF.Interop.Cmof.IClass)(value));
                return;
            }
            if ((feature == "DATATYPE"))
            {
                this.Datatype = ((NMF.Interop.Cmof.IDataType)(value));
                return;
            }
            if ((feature == "OWNINGASSOCIATION"))
            {
                this.OwningAssociation = ((IAssociation)(value));
                return;
            }
            if ((feature == "DEFAULTVALUE"))
            {
                this.DefaultValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "AGGREGATION"))
            {
                this.Aggregation = ((AggregationKind)(value));
                return;
            }
            if ((feature == "ISDERIVED"))
            {
                this.IsDerived = ((bool)(value));
                return;
            }
            if ((feature == "ISDERIVEDUNION"))
            {
                this.IsDerivedUnion = ((bool)(value));
                return;
            }
            if ((feature == "ISID"))
            {
                this.IsID = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AGGREGATION"))
            {
                return Observable.Box(new AggregationProxy(this));
            }
            if ((attribute == "ISDERIVED"))
            {
                return Observable.Box(new IsDerivedProxy(this));
            }
            if ((attribute == "ISDERIVEDUNION"))
            {
                return Observable.Box(new IsDerivedUnionProxy(this));
            }
            if ((attribute == "ISID"))
            {
                return Observable.Box(new IsIDProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((reference == "DATATYPE"))
            {
                return new DatatypeProxy(this);
            }
            if ((reference == "OWNINGASSOCIATION"))
            {
                return new OwningAssociationProxy(this);
            }
            if ((reference == "DEFAULTVALUE"))
            {
                return new DefaultValueProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Property")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyChildrenCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DefaultValue != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DefaultValue == null))
                {
                    IValueSpecification defaultValueCasted = item.As<IValueSpecification>();
                    if ((defaultValueCasted != null))
                    {
                        this._parent.DefaultValue = defaultValueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DefaultValue = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DefaultValue))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DefaultValue != null))
                {
                    array[arrayIndex] = this._parent.DefaultValue;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DefaultValue == item))
                {
                    this._parent.DefaultValue = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DefaultValue).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyReferencedElementsCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Class != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Datatype != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OwningAssociation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DefaultValue != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RedefinedProperty.Count);
                    count = (count + this._parent.SubsettedProperty.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.RedefinedProperty.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubsettedProperty.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.RedefinedProperty.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubsettedProperty.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Class == null))
                {
                    NMF.Interop.Cmof.IClass classCasted = item.As<NMF.Interop.Cmof.IClass>();
                    if ((classCasted != null))
                    {
                        this._parent.Class = classCasted;
                        return;
                    }
                }
                if ((this._parent.Datatype == null))
                {
                    NMF.Interop.Cmof.IDataType datatypeCasted = item.As<NMF.Interop.Cmof.IDataType>();
                    if ((datatypeCasted != null))
                    {
                        this._parent.Datatype = datatypeCasted;
                        return;
                    }
                }
                if ((this._parent.OwningAssociation == null))
                {
                    IAssociation owningAssociationCasted = item.As<IAssociation>();
                    if ((owningAssociationCasted != null))
                    {
                        this._parent.OwningAssociation = owningAssociationCasted;
                        return;
                    }
                }
                if ((this._parent.DefaultValue == null))
                {
                    IValueSpecification defaultValueCasted = item.As<IValueSpecification>();
                    if ((defaultValueCasted != null))
                    {
                        this._parent.DefaultValue = defaultValueCasted;
                        return;
                    }
                }
                IProperty redefinedPropertyCasted = item.As<IProperty>();
                if ((redefinedPropertyCasted != null))
                {
                    this._parent.RedefinedProperty.Add(redefinedPropertyCasted);
                }
                IProperty subsettedPropertyCasted = item.As<IProperty>();
                if ((subsettedPropertyCasted != null))
                {
                    this._parent.SubsettedProperty.Add(subsettedPropertyCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Class = null;
                this._parent.Datatype = null;
                this._parent.OwningAssociation = null;
                this._parent.DefaultValue = null;
                this._parent.RedefinedProperty.Clear();
                this._parent.SubsettedProperty.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Class))
                {
                    return true;
                }
                if ((item == this._parent.Datatype))
                {
                    return true;
                }
                if ((item == this._parent.OwningAssociation))
                {
                    return true;
                }
                if ((item == this._parent.DefaultValue))
                {
                    return true;
                }
                if (this._parent.RedefinedProperty.Contains(item))
                {
                    return true;
                }
                if (this._parent.SubsettedProperty.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Class != null))
                {
                    array[arrayIndex] = this._parent.Class;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Datatype != null))
                {
                    array[arrayIndex] = this._parent.Datatype;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OwningAssociation != null))
                {
                    array[arrayIndex] = this._parent.OwningAssociation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DefaultValue != null))
                {
                    array[arrayIndex] = this._parent.DefaultValue;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> redefinedPropertyEnumerator = this._parent.RedefinedProperty.GetEnumerator();
                try
                {
                    for (
                    ; redefinedPropertyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedPropertyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedPropertyEnumerator.Dispose();
                }
                IEnumerator<IModelElement> subsettedPropertyEnumerator = this._parent.SubsettedProperty.GetEnumerator();
                try
                {
                    for (
                    ; subsettedPropertyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subsettedPropertyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subsettedPropertyEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Class == item))
                {
                    this._parent.Class = null;
                    return true;
                }
                if ((this._parent.Datatype == item))
                {
                    this._parent.Datatype = null;
                    return true;
                }
                if ((this._parent.OwningAssociation == item))
                {
                    this._parent.OwningAssociation = null;
                    return true;
                }
                if ((this._parent.DefaultValue == item))
                {
                    this._parent.DefaultValue = null;
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.RedefinedProperty.Remove(propertyItem)))
                {
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.SubsettedProperty.Remove(propertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Class).Concat(this._parent.Datatype).Concat(this._parent.OwningAssociation).Concat(this._parent.DefaultValue).Concat(this._parent.RedefinedProperty).Concat(this._parent.SubsettedProperty).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aggregation property
        /// </summary>
        private sealed class AggregationProxy : ModelPropertyChange<IProperty, AggregationKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AggregationProxy(IProperty modelElement) : 
                    base(modelElement, "aggregation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override AggregationKind Value
            {
                get
                {
                    return this.ModelElement.Aggregation;
                }
                set
                {
                    this.ModelElement.Aggregation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerived property
        /// </summary>
        private sealed class IsDerivedProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedProxy(IProperty modelElement) : 
                    base(modelElement, "isDerived")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerived;
                }
                set
                {
                    this.ModelElement.IsDerived = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerivedUnion property
        /// </summary>
        private sealed class IsDerivedUnionProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedUnionProxy(IProperty modelElement) : 
                    base(modelElement, "isDerivedUnion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerivedUnion;
                }
                set
                {
                    this.ModelElement.IsDerivedUnion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isID property
        /// </summary>
        private sealed class IsIDProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsIDProxy(IProperty modelElement) : 
                    base(modelElement, "isID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsID;
                }
                set
                {
                    this.ModelElement.IsID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<IProperty, NMF.Interop.Cmof.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(IProperty modelElement) : 
                    base(modelElement, "class")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Cmof.IClass Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the datatype property
        /// </summary>
        private sealed class DatatypeProxy : ModelPropertyChange<IProperty, NMF.Interop.Cmof.IDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DatatypeProxy(IProperty modelElement) : 
                    base(modelElement, "datatype")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Cmof.IDataType Value
            {
                get
                {
                    return this.ModelElement.Datatype;
                }
                set
                {
                    this.ModelElement.Datatype = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the association property
        /// </summary>
        private sealed class AssociationProxy : ModelPropertyChange<IProperty, IAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssociationProxy(IProperty modelElement) : 
                    base(modelElement, "association")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociation Value
            {
                get
                {
                    return this.ModelElement.Association;
                }
                set
                {
                    this.ModelElement.Association = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owningAssociation property
        /// </summary>
        private sealed class OwningAssociationProxy : ModelPropertyChange<IProperty, IAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwningAssociationProxy(IProperty modelElement) : 
                    base(modelElement, "owningAssociation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociation Value
            {
                get
                {
                    return this.ModelElement.OwningAssociation;
                }
                set
                {
                    this.ModelElement.OwningAssociation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultValue property
        /// </summary>
        private sealed class DefaultValueProxy : ModelPropertyChange<IProperty, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultValueProxy(IProperty modelElement) : 
                    base(modelElement, "defaultValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.DefaultValue;
                }
                set
                {
                    this.ModelElement.DefaultValue = value;
                }
            }
        }
    }
}
