//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for OpaqueExpression
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OpaqueExpression))]
    [XmlDefaultImplementationTypeAttribute(typeof(OpaqueExpression))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//OpaqueExpression")]
    public interface IOpaqueExpression : IModelElement, IValueSpecification
    {
        
        /// <summary>
        /// The text of the expression, possibly in multiple languages.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("The text of the expression, possibly in multiple languages.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IListExpression<string> Body
        {
            get;
        }
        
        /// <summary>
        /// Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("language")]
        [DescriptionAttribute(@"Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("language")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<string> Language
        {
            get;
        }
        
        /// <summary>
        /// If the language attribute is not empty, then the size of the body and language arrays must be the same.
        ///language->notEmpty() implies (body->size() = language->size())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Language_body_size(object diagnostics, object context);
        
        /// <summary>
        /// The query isIntegral() tells whether an expression is intended to produce an integer.
        ///result = false
        /// </summary>
        bool IsIntegral();
        
        /// <summary>
        /// The query isNonNegative() tells whether an integer expression has a non-negative value.
        ///self.isIntegral()
        ///result = false
        /// </summary>
        bool IsNonNegative();
        
        /// <summary>
        /// The query isPositive() tells whether an integer expression has a positive value.
        ///self.isIntegral()
        ///result = false
        /// </summary>
        bool IsPositive();
        
        /// <summary>
        /// The query value() gives an integer value for an expression intended to produce one.
        ///true
        ///self.isIntegral()
        /// </summary>
        int Value();
    }
}

