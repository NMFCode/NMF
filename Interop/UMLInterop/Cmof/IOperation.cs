//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for Operation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Operation))]
    [XmlDefaultImplementationTypeAttribute(typeof(Operation))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Operation")]
    public interface IOperation : IModelElement, IBehavioralFeature
    {
        
        /// <summary>
        /// Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isQuery")]
        [DescriptionAttribute("Specifies whether an execution of the BehavioralFeature leaves the state of the s" +
            "ystem unchanged (isQuery=true) or whether side effects may occur (isQuery=false)" +
            ".")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("isQuery")]
        [XmlAttributeAttribute(true)]
        bool IsQuery
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional Constraint on the result values of an invocation of this Operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyCondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint BodyCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DataType that owns this Operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Cmof.IDataType Datatype
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional set of Constraints specifying the state of the system when the Operation is completed.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> Postcondition
        {
            get;
        }
        
        /// <summary>
        /// An optional set of Constraints on the state of the system when the Operation is invoked.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> Precondition
        {
            get;
        }
        
        /// <summary>
        /// References the Operations that are redefined by this Operation.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedOperation")]
        [DescriptionAttribute("References the Operations that are redefined by this Operation.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("redefinedOperation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<NMF.Interop.Cmof.IOperation> RedefinedOperation
        {
            get;
        }
        
        /// <summary>
        /// The class that owns the operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Cmof.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// A bodyCondition can only be specified for a query operation.
        ///bodyCondition-&gt;notEmpty() implies isQuery
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Only_body_for_query(object diagnostics, object context);
        
        /// <summary>
        /// An operation can have at most one return parameter; i.e., an owned parameter with the direction set to &apos;return&apos;
        ///self.ownedParameter-&gt;select(par | par.direction = #return)-&gt;size() &lt;= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool At_most_one_return(object diagnostics, object context);
        
        /// <summary>
        /// The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set
        ///result = ownedParameter-&gt;select (par | par.direction = #return)
        /// </summary>
        ISetExpression<NMF.Interop.Cmof.IParameter> ReturnResult();
    }
}
