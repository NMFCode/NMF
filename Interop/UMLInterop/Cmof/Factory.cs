//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The default implementation of the Factory class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Factory")]
    public partial class Factory : Element, IFactory, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createFromStringOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateFromStringOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _convertToStringOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConvertToStringOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createElementOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateElementOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createLinkOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateLinkOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackageReference);
        
        /// <summary>
        /// The backing field for the Package property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPackage _package;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The package property
        /// </summary>
        [DisplayNameAttribute("package")]
        [CategoryAttribute("Factory")]
        [XmlElementNameAttribute("package")]
        [XmlAttributeAttribute(true)]
        public IPackage Package
        {
            get
            {
                return this._package;
            }
            set
            {
                if ((this._package != value))
                {
                    IPackage old = this._package;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Package", e, _packageReference);
                    this._package = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPackage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPackage;
                    }
                    this.OnPropertyChanged("Package", e, _packageReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FactoryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Factory")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dataType"></param>
        /// <param name="string"></param>
        public IObject CreateFromString(NMF.Interop.Cmof.IDataType dataType, string @string)
        {
            System.Func<IFactory, NMF.Interop.Cmof.IDataType, string, IObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFactory, NMF.Interop.Cmof.IDataType, string, IObject>>(_createFromStringOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createFromString registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createFromStringOperation.Value, dataType, @string);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createFromStringOperation.Value, e));
            IObject result = handler.Invoke(this, dataType, @string);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createFromStringOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateFromStringOperation()
        {
            return ClassInstance.LookupOperation("createFromString");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dataType"></param>
        /// <param name="object"></param>
        public string ConvertToString(NMF.Interop.Cmof.IDataType dataType, IObject @object)
        {
            System.Func<IFactory, NMF.Interop.Cmof.IDataType, IObject, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFactory, NMF.Interop.Cmof.IDataType, IObject, string>>(_convertToStringOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method convertToString registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _convertToStringOperation.Value, dataType, @object);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _convertToStringOperation.Value, e));
            string result = handler.Invoke(this, dataType, @object);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _convertToStringOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConvertToStringOperation()
        {
            return ClassInstance.LookupOperation("convertToString");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaClass"></param>
        public IElement Create(NMF.Interop.Cmof.IClass metaClass)
        {
            System.Func<IFactory, NMF.Interop.Cmof.IClass, IElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFactory, NMF.Interop.Cmof.IClass, IElement>>(_createOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method create registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOperation.Value, metaClass);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOperation.Value, e));
            IElement result = handler.Invoke(this, metaClass);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOperation()
        {
            return ClassInstance.LookupOperation("create");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="class"></param>
        /// <param name="arguments"></param>
        public IElement CreateElement(NMF.Interop.Cmof.IClass @class, IEnumerable<IArgument> arguments)
        {
            System.Func<IFactory, NMF.Interop.Cmof.IClass, IEnumerable<IArgument>, IElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFactory, NMF.Interop.Cmof.IClass, IEnumerable<IArgument>, IElement>>(_createElementOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createElement registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createElementOperation.Value, @class, arguments);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createElementOperation.Value, e));
            IElement result = handler.Invoke(this, @class, arguments);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createElementOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateElementOperation()
        {
            return ClassInstance.LookupOperation("createElement");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="association"></param>
        /// <param name="firstElement"></param>
        /// <param name="secondElement"></param>
        public ILink CreateLink(IAssociation association, IElement firstElement, IElement secondElement)
        {
            System.Func<IFactory, IAssociation, IElement, IElement, ILink> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFactory, IAssociation, IElement, IElement, ILink>>(_createLinkOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createLink registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createLinkOperation.Value, association, firstElement, secondElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createLinkOperation.Value, e));
            ILink result = handler.Invoke(this, association, firstElement, secondElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createLinkOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateLinkOperation()
        {
            return ClassInstance.LookupOperation("createLink");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Factory.ClassInstance)).Resolve("package")));
        }
        
        /// <summary>
        /// Handles the event that the Package property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPackage(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Package))
            {
                this.Package = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PACKAGE"))
            {
                return this.Package;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PACKAGE"))
            {
                this.Package = ((IPackage)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PACKAGE"))
            {
                return new PackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Factory")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Factory class
        /// </summary>
        public class FactoryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Factory _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FactoryReferencedElementsCollection(Factory parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Package != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Package == null))
                {
                    IPackage packageCasted = item.As<IPackage>();
                    if ((packageCasted != null))
                    {
                        this._parent.Package = packageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Package = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Package))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Package != null))
                {
                    array[arrayIndex] = this._parent.Package;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Package == item))
                {
                    this._parent.Package = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Package).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the package property
        /// </summary>
        private sealed class PackageProxy : ModelPropertyChange<IFactory, IPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PackageProxy(IFactory modelElement) : 
                    base(modelElement, "package")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackage Value
            {
                get
                {
                    return this.ModelElement.Package;
                }
                set
                {
                    this.ModelElement.Package = value;
                }
            }
        }
    }
}
