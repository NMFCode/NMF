//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Slot")]
    public partial class Slot : Element, ISlot, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _definingFeatureReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDefiningFeatureReference);
        
        /// <summary>
        /// The backing field for the DefiningFeature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStructuralFeature _definingFeature;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _valueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveValueReference);
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IValueSpecification> _value;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _owningInstanceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwningInstanceReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Slot()
        {
            this._value = new ObservableCompositionOrderedSet<IValueSpecification>(this);
            this._value.CollectionChanging += this.ValueCollectionChanging;
            this._value.CollectionChanged += this.ValueCollectionChanged;
        }
        
        /// <summary>
        /// The structural feature that specifies the values that may be held by the slot.
        /// </summary>
        [DisplayNameAttribute("definingFeature")]
        [DescriptionAttribute("The structural feature that specifies the values that may be held by the slot.")]
        [CategoryAttribute("Slot")]
        [XmlElementNameAttribute("definingFeature")]
        [XmlAttributeAttribute(true)]
        public IStructuralFeature DefiningFeature
        {
            get
            {
                return this._definingFeature;
            }
            set
            {
                if ((this._definingFeature != value))
                {
                    IStructuralFeature old = this._definingFeature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DefiningFeature", e, _definingFeatureReference);
                    this._definingFeature = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDefiningFeature;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDefiningFeature;
                    }
                    this.OnPropertyChanged("DefiningFeature", e, _definingFeatureReference);
                }
            }
        }
        
        /// <summary>
        /// The value or values corresponding to the defining feature for the owning instance specification.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IValueSpecification> Value
        {
            get
            {
                return this._value;
            }
        }
        
        /// <summary>
        /// The instance specification that owns this slot.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningInstance")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("slot")]
        public IInstanceSpecification OwningInstance
        {
            get
            {
                return ModelHelper.CastAs<IInstanceSpecification>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SlotChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SlotReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Slot")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDefiningFeatureReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Slot.ClassInstance)).Resolve("definingFeature")));
        }
        
        /// <summary>
        /// Handles the event that the DefiningFeature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefiningFeature(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DefiningFeature))
            {
                this.DefiningFeature = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Slot.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Value property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ValueCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Value", e, _valueReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Value property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ValueCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Value", e, _valueReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwningInstanceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Slot.ClassInstance)).Resolve("owningInstance")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IInstanceSpecification oldOwningInstance = ModelHelper.CastAs<IInstanceSpecification>(oldParent);
            IInstanceSpecification newOwningInstance = ModelHelper.CastAs<IInstanceSpecification>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningInstance, newOwningInstance);
            this.OnPropertyChanging("OwningInstance", e, _owningInstanceReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IInstanceSpecification oldOwningInstance = ModelHelper.CastAs<IInstanceSpecification>(oldParent);
            IInstanceSpecification newOwningInstance = ModelHelper.CastAs<IInstanceSpecification>(newParent);
            if ((oldOwningInstance != null))
            {
                oldOwningInstance.Slot.Remove(this);
            }
            if ((newOwningInstance != null))
            {
                newOwningInstance.Slot.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningInstance, newOwningInstance);
            this.OnPropertyChanged("OwningInstance", e, _owningInstanceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int valueIndex = ModelHelper.IndexOfReference(this.Value, element);
            if ((valueIndex != -1))
            {
                return ModelHelper.CreatePath("value", valueIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DEFININGFEATURE"))
            {
                return this.DefiningFeature;
            }
            if ((reference == "VALUE"))
            {
                if ((index < this.Value.Count))
                {
                    return this.Value[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNINGINSTANCE"))
            {
                return this.OwningInstance;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "VALUE"))
            {
                return this._value;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DEFININGFEATURE"))
            {
                this.DefiningFeature = ((IStructuralFeature)(value));
                return;
            }
            if ((feature == "OWNINGINSTANCE"))
            {
                this.OwningInstance = ((IInstanceSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DEFININGFEATURE"))
            {
                return new DefiningFeatureProxy(this);
            }
            if ((reference == "OWNINGINSTANCE"))
            {
                return new OwningInstanceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._value))
            {
                return "value";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Slot")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Slot class
        /// </summary>
        public class SlotChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Slot _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SlotChildrenCollection(Slot parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Value.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Value.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Value.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IValueSpecification valueCasted = item.As<IValueSpecification>();
                if ((valueCasted != null))
                {
                    this._parent.Value.Add(valueCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Value.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Value.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> valueEnumerator = this._parent.Value.GetEnumerator();
                try
                {
                    for (
                    ; valueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = valueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    valueEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IValueSpecification valueSpecificationItem = item.As<IValueSpecification>();
                if (((valueSpecificationItem != null) 
                            && this._parent.Value.Remove(valueSpecificationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Value).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Slot class
        /// </summary>
        public class SlotReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Slot _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SlotReferencedElementsCollection(Slot parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DefiningFeature != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Value.Count);
                    if ((this._parent.OwningInstance != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Value.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Value.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DefiningFeature == null))
                {
                    IStructuralFeature definingFeatureCasted = item.As<IStructuralFeature>();
                    if ((definingFeatureCasted != null))
                    {
                        this._parent.DefiningFeature = definingFeatureCasted;
                        return;
                    }
                }
                IValueSpecification valueCasted = item.As<IValueSpecification>();
                if ((valueCasted != null))
                {
                    this._parent.Value.Add(valueCasted);
                }
                if ((this._parent.OwningInstance == null))
                {
                    IInstanceSpecification owningInstanceCasted = item.As<IInstanceSpecification>();
                    if ((owningInstanceCasted != null))
                    {
                        this._parent.OwningInstance = owningInstanceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DefiningFeature = null;
                this._parent.Value.Clear();
                this._parent.OwningInstance = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DefiningFeature))
                {
                    return true;
                }
                if (this._parent.Value.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OwningInstance))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DefiningFeature != null))
                {
                    array[arrayIndex] = this._parent.DefiningFeature;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> valueEnumerator = this._parent.Value.GetEnumerator();
                try
                {
                    for (
                    ; valueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = valueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    valueEnumerator.Dispose();
                }
                if ((this._parent.OwningInstance != null))
                {
                    array[arrayIndex] = this._parent.OwningInstance;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DefiningFeature == item))
                {
                    this._parent.DefiningFeature = null;
                    return true;
                }
                IValueSpecification valueSpecificationItem = item.As<IValueSpecification>();
                if (((valueSpecificationItem != null) 
                            && this._parent.Value.Remove(valueSpecificationItem)))
                {
                    return true;
                }
                if ((this._parent.OwningInstance == item))
                {
                    this._parent.OwningInstance = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DefiningFeature).Concat(this._parent.Value).Concat(this._parent.OwningInstance).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the definingFeature property
        /// </summary>
        private sealed class DefiningFeatureProxy : ModelPropertyChange<ISlot, IStructuralFeature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefiningFeatureProxy(ISlot modelElement) : 
                    base(modelElement, "definingFeature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStructuralFeature Value
            {
                get
                {
                    return this.ModelElement.DefiningFeature;
                }
                set
                {
                    this.ModelElement.DefiningFeature = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owningInstance property
        /// </summary>
        private sealed class OwningInstanceProxy : ModelPropertyChange<ISlot, IInstanceSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwningInstanceProxy(ISlot modelElement) : 
                    base(modelElement, "owningInstance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInstanceSpecification Value
            {
                get
                {
                    return this.ModelElement.OwningInstance;
                }
                set
                {
                    this.ModelElement.OwningInstance = value;
                }
            }
        }
    }
}
