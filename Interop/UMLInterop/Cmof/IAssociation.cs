//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for Association
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Association))]
    [XmlDefaultImplementationTypeAttribute(typeof(Association))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Association")]
    public interface IAssociation : IModelElement, IRelationship, IClassifier
    {
        
        /// <summary>
        /// Specifies whether the association is derived from other model elements such as other associations or constraints.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("Specifies whether the association is derived from other model elements such as ot" +
            "her associations or constraints.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        bool IsDerived
        {
            get;
            set;
        }
        
        /// <summary>
        /// The navigable ends that are owned by the association itself.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("navigableOwnedEnd")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IProperty> NavigableOwnedEnd
        {
            get;
        }
        
        /// <summary>
        /// The ends that are owned by the association itself.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("ownedEnd")]
        [DescriptionAttribute("The ends that are owned by the association itself.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("ownedEnd")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("owningAssociation")]
        [ConstantAttribute()]
        IListExpression<IProperty> OwnedEnd
        {
            get;
        }
        
        /// <summary>
        /// Each end represents participation of instances of the classifier connected to the end in links of the association.
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("memberEnd")]
        [DescriptionAttribute("Each end represents participation of instances of the classifier connected to the" +
            " end in links of the association.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("memberEnd")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("association")]
        [ConstantAttribute()]
        IListExpression<IProperty> MemberEnd
        {
            get;
        }
        
        /// <summary>
        /// Only binary associations can be aggregations.
        ///self.memberEnd-&gt;exists(aggregation &lt;&gt; Aggregation::none) implies self.memberEnd-&gt;size() = 2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Binary_associations(object diagnostics, object context);
        
        /// <summary>
        /// An association specializing another association has the same number of ends as the other association.
        ///parents()-&gt;select(oclIsKindOf(Association)).oclAsType(Association)-&gt;forAll(p | p.memberEnd-&gt;size() = self.memberEnd-&gt;size())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Specialized_end_number(object diagnostics, object context);
        
        /// <summary>
        /// Association ends of associations with more than two ends must be owned by the association.
        ///if memberEnd-&gt;size() &gt; 2 then ownedEnd-&gt;includesAll(memberEnd)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Association_ends(object diagnostics, object context);
        
        /// <summary>
        /// When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.
        ///Sequence{1..self.memberEnd-&gt;size()}-&gt;
        ///	forAll(i | self.general-&gt;select(oclIsKindOf(Association)).oclAsType(Association)-&gt;
        ///		forAll(ga |self.memberEnd-&gt;at(i).type.conformsTo(ga.memberEnd-&gt;at(i).type)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Specialized_end_types(object diagnostics, object context);
    }
}
