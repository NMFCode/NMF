//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A type is a named element that is used as the type for a typed element. A type can be contained in a package.
    ///A type constrains the values represented by a typed element.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Type")]
    [DebuggerDisplayAttribute("Type {Name}")]
    public abstract partial class Type : PackageableElement, NMF.Interop.Cmof.IType, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _conformsToOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConformsToOperation_);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isInstanceOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsInstanceOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Type")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.
        ///result = false
        /// </summary>
        /// <param name="other"></param>
        public bool ConformsTo(NMF.Interop.Cmof.IType other)
        {
            System.Func<NMF.Interop.Cmof.IType, NMF.Interop.Cmof.IType, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Cmof.IType, NMF.Interop.Cmof.IType, bool>>(_conformsToOperation_);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method conformsTo registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _conformsToOperation_.Value, other);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _conformsToOperation_.Value, e));
            bool result = handler.Invoke(this, other);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _conformsToOperation_.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConformsToOperation_()
        {
            return ClassInstance.LookupOperation("conformsTo");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool IsInstance(IObject @object)
        {
            System.Func<NMF.Interop.Cmof.IType, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Cmof.IType, IObject, bool>>(_isInstanceOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isInstance registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isInstanceOperation.Value, @object);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isInstanceOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isInstanceOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsInstanceOperation()
        {
            return ClassInstance.LookupOperation("isInstance");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Type")));
            }
            return _classInstance;
        }
    }
}

