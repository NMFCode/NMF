//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.
    ///An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link. A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Association")]
    [DebuggerDisplayAttribute("Association {Name}")]
    public partial class Association : Classifier, IAssociation, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _binary_associationsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBinary_associationsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _specialized_end_numberOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSpecialized_end_numberOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _association_endsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAssociation_endsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _specialized_end_typesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSpecialized_end_typesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _endTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEndTypeOperation);
        
        /// <summary>
        /// The backing field for the IsDerived property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerived = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _navigableOwnedEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNavigableOwnedEndReference);
        
        /// <summary>
        /// The backing field for the NavigableOwnedEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IProperty> _navigableOwnedEnd;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedEndReference);
        
        /// <summary>
        /// The backing field for the OwnedEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private AssociationOwnedEndCollection _ownedEnd;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _memberEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMemberEndReference);
        
        /// <summary>
        /// The backing field for the MemberEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private AssociationMemberEndCollection _memberEnd;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Association()
        {
            this._navigableOwnedEnd = new ObservableAssociationSet<IProperty>();
            this._navigableOwnedEnd.CollectionChanging += this.NavigableOwnedEndCollectionChanging;
            this._navigableOwnedEnd.CollectionChanged += this.NavigableOwnedEndCollectionChanged;
            this._ownedEnd = new AssociationOwnedEndCollection(this);
            this._ownedEnd.CollectionChanging += this.OwnedEndCollectionChanging;
            this._ownedEnd.CollectionChanged += this.OwnedEndCollectionChanged;
            this._memberEnd = new AssociationMemberEndCollection(this);
            this._memberEnd.CollectionChanging += this.MemberEndCollectionChanging;
            this._memberEnd.CollectionChanged += this.MemberEndCollectionChanged;
        }
        
        /// <summary>
        /// Specifies whether the association is derived from other model elements such as other associations or constraints.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("Specifies whether the association is derived from other model elements such as ot" +
            "her associations or constraints.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        public bool IsDerived
        {
            get
            {
                return this._isDerived;
            }
            set
            {
                if ((this._isDerived != value))
                {
                    bool old = this._isDerived;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerived", e, _isDerivedAttribute);
                    this._isDerived = value;
                    this.OnPropertyChanged("IsDerived", e, _isDerivedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The navigable ends that are owned by the association itself.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("navigableOwnedEnd")]
        [DescriptionAttribute("The navigable ends that are owned by the association itself.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("navigableOwnedEnd")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IProperty> NavigableOwnedEnd
        {
            get
            {
                return this._navigableOwnedEnd;
            }
        }
        
        /// <summary>
        /// The ends that are owned by the association itself.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedEnd")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owningAssociation")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> OwnedEnd
        {
            get
            {
                return this._ownedEnd;
            }
        }
        
        /// <summary>
        /// Each end represents participation of instances of the classifier connected to the end in links of the association.
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("memberEnd")]
        [DescriptionAttribute("Each end represents participation of instances of the classifier connected to the" +
            " end in links of the association.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("memberEnd")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("association")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> MemberEnd
        {
            get
            {
                return this._memberEnd;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AssociationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssociationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Association")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Only binary associations can be aggregations.
        ///self.memberEnd->exists(aggregation <> Aggregation::none) implies self.memberEnd->size() = 2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Binary_associations(object diagnostics, object context)
        {
            System.Func<IAssociation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, object, object, bool>>(_binary_associationsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method binary_associations registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _binary_associationsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _binary_associationsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _binary_associationsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBinary_associationsOperation()
        {
            return ClassInstance.LookupOperation("binary_associations");
        }
        
        /// <summary>
        /// An association specializing another association has the same number of ends as the other association.
        ///parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Specialized_end_number(object diagnostics, object context)
        {
            System.Func<IAssociation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, object, object, bool>>(_specialized_end_numberOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method specialized_end_number registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _specialized_end_numberOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _specialized_end_numberOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _specialized_end_numberOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSpecialized_end_numberOperation()
        {
            return ClassInstance.LookupOperation("specialized_end_number");
        }
        
        /// <summary>
        /// Association ends of associations with more than two ends must be owned by the association.
        ///if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Association_ends(object diagnostics, object context)
        {
            System.Func<IAssociation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, object, object, bool>>(_association_endsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method association_ends registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _association_endsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _association_endsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _association_endsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAssociation_endsOperation()
        {
            return ClassInstance.LookupOperation("association_ends");
        }
        
        /// <summary>
        /// When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.
        ///Sequence{1..self.memberEnd->size()}->
        ///	forAll(i | self.general->select(oclIsKindOf(Association)).oclAsType(Association)->
        ///		forAll(ga |self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Specialized_end_types(object diagnostics, object context)
        {
            System.Func<IAssociation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, object, object, bool>>(_specialized_end_typesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method specialized_end_types registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _specialized_end_typesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _specialized_end_typesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _specialized_end_typesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSpecialized_end_typesOperation()
        {
            return ClassInstance.LookupOperation("specialized_end_types");
        }
        
        /// <summary>
        /// endType is derived from the types of the member ends.
        ///result = self.memberEnd->collect(e | e.type)
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Cmof.IType> EndType()
        {
            System.Func<IAssociation, IOrderedSetExpression<NMF.Interop.Cmof.IType>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, IOrderedSetExpression<NMF.Interop.Cmof.IType>>>(_endTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method endType registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _endTypeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _endTypeOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Cmof.IType> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _endTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEndTypeOperation()
        {
            return ClassInstance.LookupOperation("endType");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Association.ClassInstance)).Resolve("isDerived")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNavigableOwnedEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Association.ClassInstance)).Resolve("navigableOwnedEnd")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NavigableOwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NavigableOwnedEndCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NavigableOwnedEnd", e, _navigableOwnedEndReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NavigableOwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NavigableOwnedEndCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NavigableOwnedEnd", e, _navigableOwnedEndReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Association.ClassInstance)).Resolve("ownedEnd")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedEndCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedEnd", e, _ownedEndReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedEndCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedEnd", e, _ownedEndReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMemberEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Association.ClassInstance)).Resolve("memberEnd")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MemberEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberEndCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MemberEnd", e, _memberEndReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MemberEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberEndCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MemberEnd", e, _memberEndReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedEndIndex = ModelHelper.IndexOfReference(this.OwnedEnd, element);
            if ((ownedEndIndex != -1))
            {
                return ModelHelper.CreatePath("ownedEnd", ownedEndIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNEDEND"))
            {
                if ((index < this.OwnedEnd.Count))
                {
                    return this.OwnedEnd[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "MEMBEREND"))
            {
                if ((index < this.MemberEnd.Count))
                {
                    return this.MemberEnd[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISDERIVED"))
            {
                return this.IsDerived;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NAVIGABLEOWNEDEND"))
            {
                return this._navigableOwnedEnd;
            }
            if ((feature == "OWNEDEND"))
            {
                return this._ownedEnd;
            }
            if ((feature == "MEMBEREND"))
            {
                return this._memberEnd;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISDERIVED"))
            {
                this.IsDerived = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISDERIVED"))
            {
                return Observable.Box(new IsDerivedProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ownedEnd))
            {
                return "ownedEnd";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Association")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Association class
        /// </summary>
        public class AssociationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Association _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationChildrenCollection(Association parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedEnd.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProperty ownedEndCasted = item.As<IProperty>();
                if ((ownedEndCasted != null))
                {
                    this._parent.OwnedEnd.Add(ownedEndCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedEnd.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedEnd.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedEndEnumerator = this._parent.OwnedEnd.GetEnumerator();
                try
                {
                    for (
                    ; ownedEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedEndEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.OwnedEnd.Remove(propertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedEnd).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Association class
        /// </summary>
        public class AssociationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Association _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationReferencedElementsCollection(Association parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NavigableOwnedEnd.Count);
                    count = (count + this._parent.OwnedEnd.Count);
                    count = (count + this._parent.MemberEnd.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MemberEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MemberEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProperty navigableOwnedEndCasted = item.As<IProperty>();
                if ((navigableOwnedEndCasted != null))
                {
                    this._parent.NavigableOwnedEnd.Add(navigableOwnedEndCasted);
                }
                IProperty ownedEndCasted = item.As<IProperty>();
                if ((ownedEndCasted != null))
                {
                    this._parent.OwnedEnd.Add(ownedEndCasted);
                }
                IProperty memberEndCasted = item.As<IProperty>();
                if ((memberEndCasted != null))
                {
                    this._parent.MemberEnd.Add(memberEndCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NavigableOwnedEnd.Clear();
                this._parent.OwnedEnd.Clear();
                this._parent.MemberEnd.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NavigableOwnedEnd.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedEnd.Contains(item))
                {
                    return true;
                }
                if (this._parent.MemberEnd.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> navigableOwnedEndEnumerator = this._parent.NavigableOwnedEnd.GetEnumerator();
                try
                {
                    for (
                    ; navigableOwnedEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = navigableOwnedEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    navigableOwnedEndEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedEndEnumerator = this._parent.OwnedEnd.GetEnumerator();
                try
                {
                    for (
                    ; ownedEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedEndEnumerator.Dispose();
                }
                IEnumerator<IModelElement> memberEndEnumerator = this._parent.MemberEnd.GetEnumerator();
                try
                {
                    for (
                    ; memberEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = memberEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    memberEndEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.NavigableOwnedEnd.Remove(propertyItem)))
                {
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.OwnedEnd.Remove(propertyItem)))
                {
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.MemberEnd.Remove(propertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NavigableOwnedEnd).Concat(this._parent.OwnedEnd).Concat(this._parent.MemberEnd).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerived property
        /// </summary>
        private sealed class IsDerivedProxy : ModelPropertyChange<IAssociation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedProxy(IAssociation modelElement) : 
                    base(modelElement, "isDerived")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerived;
                }
                set
                {
                    this.ModelElement.IsDerived = value;
                }
            }
        }
    }
}

