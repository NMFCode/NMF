//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The default implementation of the Extent class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Extent")]
    public partial class Extent : Object, IExtent, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _useContainmentOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUseContainmentOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _elementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveElementsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _elementsOfTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveElementsOfTypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _linksOfTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLinksOfTypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _linkedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLinkedElementsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _linkExistsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLinkExistsOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Extent")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public bool UseContainment()
        {
            System.Func<IExtent, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, bool>>(_useContainmentOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method useContainment registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _useContainmentOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _useContainmentOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _useContainmentOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUseContainmentOperation()
        {
            return ClassInstance.LookupOperation("useContainment");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public IReflectiveSequence Elements()
        {
            System.Func<IExtent, IReflectiveSequence> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, IReflectiveSequence>>(_elementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method elements registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _elementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _elementsOperation.Value, e));
            IReflectiveSequence result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _elementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveElementsOperation()
        {
            return ClassInstance.LookupOperation("elements");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="includesSubtypes"></param>
        public ISetExpression<IElement> ElementsOfType(NMF.Interop.Cmof.IClass type, bool includesSubtypes)
        {
            System.Func<IExtent, NMF.Interop.Cmof.IClass, bool, ISetExpression<IElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, NMF.Interop.Cmof.IClass, bool, ISetExpression<IElement>>>(_elementsOfTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method elementsOfType registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _elementsOfTypeOperation.Value, type, includesSubtypes);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _elementsOfTypeOperation.Value, e));
            ISetExpression<IElement> result = handler.Invoke(this, type, includesSubtypes);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _elementsOfTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveElementsOfTypeOperation()
        {
            return ClassInstance.LookupOperation("elementsOfType");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        public ISetExpression<ILink> LinksOfType(IAssociation type)
        {
            System.Func<IExtent, IAssociation, ISetExpression<ILink>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, IAssociation, ISetExpression<ILink>>>(_linksOfTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method linksOfType registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _linksOfTypeOperation.Value, type);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _linksOfTypeOperation.Value, e));
            ISetExpression<ILink> result = handler.Invoke(this, type);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _linksOfTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLinksOfTypeOperation()
        {
            return ClassInstance.LookupOperation("linksOfType");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="association"></param>
        /// <param name="endElement"></param>
        /// <param name="end1ToEnd2Direction"></param>
        public ISetExpression<IElement> LinkedElements(IAssociation association, IElement endElement, bool end1ToEnd2Direction)
        {
            System.Func<IExtent, IAssociation, IElement, bool, ISetExpression<IElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, IAssociation, IElement, bool, ISetExpression<IElement>>>(_linkedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method linkedElements registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _linkedElementsOperation.Value, association, endElement, end1ToEnd2Direction);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _linkedElementsOperation.Value, e));
            ISetExpression<IElement> result = handler.Invoke(this, association, endElement, end1ToEnd2Direction);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _linkedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLinkedElementsOperation()
        {
            return ClassInstance.LookupOperation("linkedElements");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="association"></param>
        /// <param name="firstElement"></param>
        /// <param name="secondElement"></param>
        public bool LinkExists(IAssociation association, IElement firstElement, IElement secondElement)
        {
            System.Func<IExtent, IAssociation, IElement, IElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtent, IAssociation, IElement, IElement, bool>>(_linkExistsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method linkExists registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _linkExistsOperation.Value, association, firstElement, secondElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _linkExistsOperation.Value, e));
            bool result = handler.Invoke(this, association, firstElement, secondElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _linkExistsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLinkExistsOperation()
        {
            return ClassInstance.LookupOperation("linkExists");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Extent")));
            }
            return _classInstance;
        }
    }
}

