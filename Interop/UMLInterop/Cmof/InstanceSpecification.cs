//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// An instance specification is a model element that represents an instance in a modeled system.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//InstanceSpecification")]
    [DebuggerDisplayAttribute("InstanceSpecification {Name}")]
    public partial class InstanceSpecification : PackageableElement, IInstanceSpecification, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _structural_featureOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveStructural_featureOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _defining_featureOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDefining_featureOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassifierReference);
        
        /// <summary>
        /// The backing field for the Classifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _classifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _slotReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSlotReference);
        
        /// <summary>
        /// The backing field for the Slot property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InstanceSpecificationSlotCollection _slot;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _specificationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSpecificationReference);
        
        /// <summary>
        /// The backing field for the Specification property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _specification;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public InstanceSpecification()
        {
            this._classifier = new ObservableAssociationSet<IClassifier>();
            this._classifier.CollectionChanging += this.ClassifierCollectionChanging;
            this._classifier.CollectionChanged += this.ClassifierCollectionChanged;
            this._slot = new InstanceSpecificationSlotCollection(this);
            this._slot.CollectionChanging += this.SlotCollectionChanging;
            this._slot.CollectionChanged += this.SlotCollectionChanged;
        }
        
        /// <summary>
        /// The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("classifier")]
        [DescriptionAttribute("The classifier or classifiers of the represented instance. If multiple classifier" +
            "s are specified, the instance is classified by all of them.")]
        [CategoryAttribute("InstanceSpecification")]
        [XmlElementNameAttribute("classifier")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> Classifier
        {
            get
            {
                return this._classifier;
            }
        }
        
        /// <summary>
        /// A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("slot")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owningInstance")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISlot> Slot
        {
            get
            {
                return this._slot;
            }
        }
        
        /// <summary>
        /// A specification of how to compute, derive, or construct the instance.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("specification")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Specification
        {
            get
            {
                return this._specification;
            }
            set
            {
                if ((this._specification != value))
                {
                    IValueSpecification old = this._specification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Specification", e, _specificationReference);
                    this._specification = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetSpecification;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSpecification;
                    }
                    this.OnPropertyChanged("Specification", e, _specificationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InstanceSpecificationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InstanceSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//InstanceSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.
        ///classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Structural_feature(object diagnostics, object context)
        {
            System.Func<IInstanceSpecification, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInstanceSpecification, object, object, bool>>(_structural_featureOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method structural_feature registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _structural_featureOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _structural_featureOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _structural_featureOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveStructural_featureOperation()
        {
            return ClassInstance.LookupOperation("structural_feature");
        }
        
        /// <summary>
        /// The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.
        ///slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Defining_feature(object diagnostics, object context)
        {
            System.Func<IInstanceSpecification, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInstanceSpecification, object, object, bool>>(_defining_featureOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method defining_feature registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _defining_featureOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _defining_featureOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _defining_featureOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDefining_featureOperation()
        {
            return ClassInstance.LookupOperation("defining_feature");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.InstanceSpecification.ClassInstance)).Resolve("classifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Classifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Classifier", e, _classifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Classifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Classifier", e, _classifierReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSlotReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.InstanceSpecification.ClassInstance)).Resolve("slot")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Slot property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SlotCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Slot", e, _slotReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Slot property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SlotCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Slot", e, _slotReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSpecificationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.InstanceSpecification.ClassInstance)).Resolve("specification")));
        }
        
        /// <summary>
        /// Handles the event that the Specification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecification(object sender, System.EventArgs eventArgs)
        {
            this.Specification = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int slotIndex = ModelHelper.IndexOfReference(this.Slot, element);
            if ((slotIndex != -1))
            {
                return ModelHelper.CreatePath("slot", slotIndex);
            }
            if ((element == this.Specification))
            {
                return ModelHelper.CreatePath("specification");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SLOT"))
            {
                if ((index < this.Slot.Count))
                {
                    return this.Slot[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SPECIFICATION"))
            {
                return this.Specification;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CLASSIFIER"))
            {
                return this._classifier;
            }
            if ((feature == "SLOT"))
            {
                return this._slot;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIFICATION"))
            {
                this.Specification = ((IValueSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SPECIFICATION"))
            {
                return new SpecificationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._slot))
            {
                return "slot";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//InstanceSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InstanceSpecification class
        /// </summary>
        public class InstanceSpecificationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InstanceSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InstanceSpecificationChildrenCollection(InstanceSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Slot.Count);
                    if ((this._parent.Specification != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Slot.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Slot.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISlot slotCasted = item.As<ISlot>();
                if ((slotCasted != null))
                {
                    this._parent.Slot.Add(slotCasted);
                }
                if ((this._parent.Specification == null))
                {
                    IValueSpecification specificationCasted = item.As<IValueSpecification>();
                    if ((specificationCasted != null))
                    {
                        this._parent.Specification = specificationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Slot.Clear();
                this._parent.Specification = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Slot.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Specification))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> slotEnumerator = this._parent.Slot.GetEnumerator();
                try
                {
                    for (
                    ; slotEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = slotEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    slotEnumerator.Dispose();
                }
                if ((this._parent.Specification != null))
                {
                    array[arrayIndex] = this._parent.Specification;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISlot slotItem = item.As<ISlot>();
                if (((slotItem != null) 
                            && this._parent.Slot.Remove(slotItem)))
                {
                    return true;
                }
                if ((this._parent.Specification == item))
                {
                    this._parent.Specification = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Slot).Concat(this._parent.Specification).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InstanceSpecification class
        /// </summary>
        public class InstanceSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InstanceSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InstanceSpecificationReferencedElementsCollection(InstanceSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Classifier.Count);
                    count = (count + this._parent.Slot.Count);
                    if ((this._parent.Specification != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Classifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Slot.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Classifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Slot.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier classifierCasted = item.As<IClassifier>();
                if ((classifierCasted != null))
                {
                    this._parent.Classifier.Add(classifierCasted);
                }
                ISlot slotCasted = item.As<ISlot>();
                if ((slotCasted != null))
                {
                    this._parent.Slot.Add(slotCasted);
                }
                if ((this._parent.Specification == null))
                {
                    IValueSpecification specificationCasted = item.As<IValueSpecification>();
                    if ((specificationCasted != null))
                    {
                        this._parent.Specification = specificationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Classifier.Clear();
                this._parent.Slot.Clear();
                this._parent.Specification = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Classifier.Contains(item))
                {
                    return true;
                }
                if (this._parent.Slot.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Specification))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> classifierEnumerator = this._parent.Classifier.GetEnumerator();
                try
                {
                    for (
                    ; classifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = classifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    classifierEnumerator.Dispose();
                }
                IEnumerator<IModelElement> slotEnumerator = this._parent.Slot.GetEnumerator();
                try
                {
                    for (
                    ; slotEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = slotEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    slotEnumerator.Dispose();
                }
                if ((this._parent.Specification != null))
                {
                    array[arrayIndex] = this._parent.Specification;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.Classifier.Remove(classifierItem)))
                {
                    return true;
                }
                ISlot slotItem = item.As<ISlot>();
                if (((slotItem != null) 
                            && this._parent.Slot.Remove(slotItem)))
                {
                    return true;
                }
                if ((this._parent.Specification == item))
                {
                    this._parent.Specification = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Classifier).Concat(this._parent.Slot).Concat(this._parent.Specification).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specification property
        /// </summary>
        private sealed class SpecificationProxy : ModelPropertyChange<IInstanceSpecification, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecificationProxy(IInstanceSpecification modelElement) : 
                    base(modelElement, "specification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Specification;
                }
                set
                {
                    this.ModelElement.Specification = value;
                }
            }
        }
    }
}

