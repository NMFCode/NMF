//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// A package is used to group elements, and provides a namespace for the grouped elements.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Package")]
    [DebuggerDisplayAttribute("Package {Name}")]
    public partial class Package : Namespace, IPackage, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _elements_public_or_privateOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveElements_public_or_privateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _makesVisibleOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMakesVisibleOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _nestedPackageOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNestedPackageOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _ownedTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOwnedTypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _visibleMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveVisibleMembersOperation);
        
        /// <summary>
        /// The backing field for the URI property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _uRI;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _uRIAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveURIAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packageMergeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackageMergeReference);
        
        /// <summary>
        /// The backing field for the PackageMerge property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private PackagePackageMergeCollection _packageMerge;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packagedElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackagedElementReference);
        
        /// <summary>
        /// The backing field for the PackagedElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IPackageableElement> _packagedElement;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Package()
        {
            this._packageMerge = new PackagePackageMergeCollection(this);
            this._packageMerge.CollectionChanging += this.PackageMergeCollectionChanging;
            this._packageMerge.CollectionChanged += this.PackageMergeCollectionChanged;
            this._packagedElement = new ObservableCompositionOrderedSet<IPackageableElement>(this);
            this._packagedElement.CollectionChanging += this.PackagedElementCollectionChanging;
            this._packagedElement.CollectionChanged += this.PackagedElementCollectionChanged;
        }
        
        /// <summary>
        /// Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.
        /// </summary>
        [DescriptionAttribute(@"Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.")]
        [CategoryAttribute("Package")]
        [XmlAttributeAttribute(true)]
        public string URI
        {
            get
            {
                return this._uRI;
            }
            set
            {
                if ((this._uRI != value))
                {
                    string old = this._uRI;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("URI", e, _uRIAttribute);
                    this._uRI = value;
                    this.OnPropertyChanged("URI", e, _uRIAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the PackageMerges that are owned by this Package.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packageMerge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("receivingPackage")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPackageMerge> PackageMerge
        {
            get
            {
                return this._packageMerge;
            }
        }
        
        /// <summary>
        /// Specifies the packageable elements that are owned by this Package.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packagedElement")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPackageableElement> PackagedElement
        {
            get
            {
                return this._packagedElement;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PackageChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PackageReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Package")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If an element that is owned by a package has visibility, it is public or private.
        ///self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Elements_public_or_private(object diagnostics, object context)
        {
            System.Func<IPackage, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPackage, object, object, bool>>(_elements_public_or_privateOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method elements_public_or_private registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _elements_public_or_privateOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _elements_public_or_privateOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _elements_public_or_privateOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveElements_public_or_privateOperation()
        {
            return ClassInstance.LookupOperation("elements_public_or_private");
        }
        
        /// <summary>
        /// The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.
        ///result = (ownedMember->includes(el)) or
        ///(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or
        ///(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
        ///self.member->includes(el)
        /// </summary>
        /// <param name="el"></param>
        public bool MakesVisible(INamedElement el)
        {
            System.Func<IPackage, INamedElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPackage, INamedElement, bool>>(_makesVisibleOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method makesVisible registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _makesVisibleOperation.Value, el);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _makesVisibleOperation.Value, e));
            bool result = handler.Invoke(this, el);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _makesVisibleOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMakesVisibleOperation()
        {
            return ClassInstance.LookupOperation("makesVisible");
        }
        
        /// <summary>
        /// Missing derivation for Package::/nestedPackage : Package
        ///true
        /// </summary>
        public ISetExpression<IPackage> NestedPackage()
        {
            System.Func<IPackage, ISetExpression<IPackage>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPackage, ISetExpression<IPackage>>>(_nestedPackageOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method nestedPackage registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _nestedPackageOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _nestedPackageOperation.Value, e));
            ISetExpression<IPackage> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _nestedPackageOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNestedPackageOperation()
        {
            return ClassInstance.LookupOperation("nestedPackage");
        }
        
        /// <summary>
        /// Missing derivation for Package::/ownedType : Type
        ///true
        /// </summary>
        public ISetExpression<NMF.Interop.Cmof.IType> OwnedType()
        {
            System.Func<IPackage, ISetExpression<NMF.Interop.Cmof.IType>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPackage, ISetExpression<NMF.Interop.Cmof.IType>>>(_ownedTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method ownedType registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _ownedTypeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _ownedTypeOperation.Value, e));
            ISetExpression<NMF.Interop.Cmof.IType> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _ownedTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOwnedTypeOperation()
        {
            return ClassInstance.LookupOperation("ownedType");
        }
        
        /// <summary>
        /// The query visibleMembers() defines which members of a Package can be accessed outside it.
        ///result = member->select( m | self.makesVisible(m))
        /// </summary>
        public ISetExpression<IPackageableElement> VisibleMembers()
        {
            System.Func<IPackage, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPackage, ISetExpression<IPackageableElement>>>(_visibleMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method visibleMembers registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _visibleMembersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _visibleMembersOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _visibleMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveVisibleMembersOperation()
        {
            return ClassInstance.LookupOperation("visibleMembers");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveURIAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Package.ClassInstance)).Resolve("URI")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackageMergeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Package.ClassInstance)).Resolve("packageMerge")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PackageMerge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageMergeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PackageMerge", e, _packageMergeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PackageMerge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageMergeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PackageMerge", e, _packageMergeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackagedElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.Package.ClassInstance)).Resolve("packagedElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PackagedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackagedElementCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PackagedElement", e, _packagedElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PackagedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackagedElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PackagedElement", e, _packagedElementReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int packageMergeIndex = ModelHelper.IndexOfReference(this.PackageMerge, element);
            if ((packageMergeIndex != -1))
            {
                return ModelHelper.CreatePath("packageMerge", packageMergeIndex);
            }
            int packagedElementIndex = ModelHelper.IndexOfReference(this.PackagedElement, element);
            if ((packagedElementIndex != -1))
            {
                return ModelHelper.CreatePath("packagedElement", packagedElementIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PACKAGEMERGE"))
            {
                if ((index < this.PackageMerge.Count))
                {
                    return this.PackageMerge[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "PACKAGEDELEMENT"))
            {
                if ((index < this.PackagedElement.Count))
                {
                    return this.PackagedElement[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "URI"))
            {
                return this.URI;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PACKAGEMERGE"))
            {
                return this._packageMerge;
            }
            if ((feature == "PACKAGEDELEMENT"))
            {
                return this._packagedElement;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "URI"))
            {
                this.URI = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "URI"))
            {
                return new URIProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._packageMerge))
            {
                return "packageMerge";
            }
            if ((container == this._packagedElement))
            {
                return "packagedElement";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Package")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Package class
        /// </summary>
        public class PackageChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Package _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PackageChildrenCollection(Package parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PackageMerge.Count);
                    count = (count + this._parent.PackagedElement.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PackageMerge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackagedElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PackageMerge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackagedElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPackageMerge packageMergeCasted = item.As<IPackageMerge>();
                if ((packageMergeCasted != null))
                {
                    this._parent.PackageMerge.Add(packageMergeCasted);
                }
                IPackageableElement packagedElementCasted = item.As<IPackageableElement>();
                if ((packagedElementCasted != null))
                {
                    this._parent.PackagedElement.Add(packagedElementCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PackageMerge.Clear();
                this._parent.PackagedElement.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PackageMerge.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackagedElement.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> packageMergeEnumerator = this._parent.PackageMerge.GetEnumerator();
                try
                {
                    for (
                    ; packageMergeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageMergeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageMergeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packagedElementEnumerator = this._parent.PackagedElement.GetEnumerator();
                try
                {
                    for (
                    ; packagedElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packagedElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packagedElementEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPackageMerge packageMergeItem = item.As<IPackageMerge>();
                if (((packageMergeItem != null) 
                            && this._parent.PackageMerge.Remove(packageMergeItem)))
                {
                    return true;
                }
                IPackageableElement packageableElementItem = item.As<IPackageableElement>();
                if (((packageableElementItem != null) 
                            && this._parent.PackagedElement.Remove(packageableElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PackageMerge).Concat(this._parent.PackagedElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Package class
        /// </summary>
        public class PackageReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Package _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PackageReferencedElementsCollection(Package parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PackageMerge.Count);
                    count = (count + this._parent.PackagedElement.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PackageMerge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackagedElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PackageMerge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackagedElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPackageMerge packageMergeCasted = item.As<IPackageMerge>();
                if ((packageMergeCasted != null))
                {
                    this._parent.PackageMerge.Add(packageMergeCasted);
                }
                IPackageableElement packagedElementCasted = item.As<IPackageableElement>();
                if ((packagedElementCasted != null))
                {
                    this._parent.PackagedElement.Add(packagedElementCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PackageMerge.Clear();
                this._parent.PackagedElement.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PackageMerge.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackagedElement.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> packageMergeEnumerator = this._parent.PackageMerge.GetEnumerator();
                try
                {
                    for (
                    ; packageMergeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageMergeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageMergeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packagedElementEnumerator = this._parent.PackagedElement.GetEnumerator();
                try
                {
                    for (
                    ; packagedElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packagedElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packagedElementEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPackageMerge packageMergeItem = item.As<IPackageMerge>();
                if (((packageMergeItem != null) 
                            && this._parent.PackageMerge.Remove(packageMergeItem)))
                {
                    return true;
                }
                IPackageableElement packageableElementItem = item.As<IPackageableElement>();
                if (((packageableElementItem != null) 
                            && this._parent.PackagedElement.Remove(packageableElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PackageMerge).Concat(this._parent.PackagedElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the URI property
        /// </summary>
        private sealed class URIProxy : ModelPropertyChange<IPackage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public URIProxy(IPackage modelElement) : 
                    base(modelElement, "URI")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.URI;
                }
                set
                {
                    this.ModelElement.URI = value;
                }
            }
        }
    }
}

