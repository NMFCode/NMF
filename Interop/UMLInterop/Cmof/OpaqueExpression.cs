//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//OpaqueExpression")]
    [DebuggerDisplayAttribute("OpaqueExpression {Name}")]
    public partial class OpaqueExpression : ValueSpecification, IOpaqueExpression, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _language_body_sizeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLanguage_body_sizeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isIntegralOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsIntegralOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isNonNegativeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsNonNegativeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isPositiveOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsPositiveOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _valueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValueOperation);
        
        /// <summary>
        /// The backing field for the Body property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableList<string> _body;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyAttribute);
        
        /// <summary>
        /// The backing field for the Language property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _language;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _languageAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLanguageAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public OpaqueExpression()
        {
            this._body = new ObservableList<string>();
            this._body.CollectionChanging += this.BodyCollectionChanging;
            this._body.CollectionChanged += this.BodyCollectionChanged;
            this._language = new ObservableOrderedSet<string>();
            this._language.CollectionChanging += this.LanguageCollectionChanging;
            this._language.CollectionChanged += this.LanguageCollectionChanged;
        }
        
        /// <summary>
        /// The text of the expression, possibly in multiple languages.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("The text of the expression, possibly in multiple languages.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IListExpression<string> Body
        {
            get
            {
                return this._body;
            }
        }
        
        /// <summary>
        /// Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("language")]
        [DescriptionAttribute(@"Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("language")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Language
        {
            get
            {
                return this._language;
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//OpaqueExpression")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If the language attribute is not empty, then the size of the body and language arrays must be the same.
        ///language-&gt;notEmpty() implies (body-&gt;size() = language-&gt;size())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Language_body_size(object diagnostics, object context)
        {
            System.Func<IOpaqueExpression, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOpaqueExpression, object, object, bool>>(_language_body_sizeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method language_body_size registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _language_body_sizeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _language_body_sizeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _language_body_sizeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLanguage_body_sizeOperation()
        {
            return ClassInstance.LookupOperation("language_body_size");
        }
        
        /// <summary>
        /// The query isIntegral() tells whether an expression is intended to produce an integer.
        ///result = false
        /// </summary>
        public bool IsIntegral()
        {
            System.Func<IOpaqueExpression, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOpaqueExpression, bool>>(_isIntegralOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isIntegral registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isIntegralOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isIntegralOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isIntegralOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsIntegralOperation()
        {
            return ClassInstance.LookupOperation("isIntegral");
        }
        
        /// <summary>
        /// The query isNonNegative() tells whether an integer expression has a non-negative value.
        ///self.isIntegral()
        ///result = false
        /// </summary>
        public bool IsNonNegative()
        {
            System.Func<IOpaqueExpression, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOpaqueExpression, bool>>(_isNonNegativeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isNonNegative registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isNonNegativeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isNonNegativeOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isNonNegativeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsNonNegativeOperation()
        {
            return ClassInstance.LookupOperation("isNonNegative");
        }
        
        /// <summary>
        /// The query isPositive() tells whether an integer expression has a positive value.
        ///self.isIntegral()
        ///result = false
        /// </summary>
        public bool IsPositive()
        {
            System.Func<IOpaqueExpression, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOpaqueExpression, bool>>(_isPositiveOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isPositive registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isPositiveOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isPositiveOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isPositiveOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsPositiveOperation()
        {
            return ClassInstance.LookupOperation("isPositive");
        }
        
        /// <summary>
        /// The query value() gives an integer value for an expression intended to produce one.
        ///true
        ///self.isIntegral()
        /// </summary>
        public int Value()
        {
            System.Func<IOpaqueExpression, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOpaqueExpression, int>>(_valueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _valueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _valueOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _valueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValueOperation()
        {
            return ClassInstance.LookupOperation("value");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.OpaqueExpression.ClassInstance)).Resolve("body")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Body property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Body", e, _bodyAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Body property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Body", e, _bodyAttribute);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLanguageAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Cmof.OpaqueExpression.ClassInstance)).Resolve("language")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Language property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LanguageCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Language", e, _languageAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Language property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LanguageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Language", e, _languageAttribute);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BODY"))
            {
                if ((index < this.Body.Count))
                {
                    return this.Body[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "LANGUAGE"))
            {
                if ((index < this.Language.Count))
                {
                    return this.Language[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BODY"))
            {
                return this._body;
            }
            if ((feature == "LANGUAGE"))
            {
                return this._language;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//OpaqueExpression")));
            }
            return _classInstance;
        }
    }
}
