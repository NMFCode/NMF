//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The default implementation of the ReflectiveCollection class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//ReflectiveCollection")]
    public partial class ReflectiveCollection : Object, IReflectiveCollection, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _addOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAddOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _addAllOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAddAllOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _clearOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClearOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _removeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRemoveOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _sizeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSizeOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//ReflectiveCollection")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool Add(IObject @object)
        {
            System.Func<IReflectiveCollection, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IObject, bool>>(_addOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method add registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _addOperation.Value, @object);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _addOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _addOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAddOperation()
        {
            return ClassInstance.LookupOperation("add");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objects"></param>
        public bool AddAll(IReflectiveCollection objects)
        {
            System.Func<IReflectiveCollection, IReflectiveCollection, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IReflectiveCollection, bool>>(_addAllOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method addAll registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _addAllOperation.Value, objects);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _addAllOperation.Value, e));
            bool result = handler.Invoke(this, objects);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _addAllOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAddAllOperation()
        {
            return ClassInstance.LookupOperation("addAll");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void Clear()
        {
            System.Action<IReflectiveCollection> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IReflectiveCollection>>(_clearOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method clear registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _clearOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _clearOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _clearOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClearOperation()
        {
            return ClassInstance.LookupOperation("clear");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool Remove(IObject @object)
        {
            System.Func<IReflectiveCollection, IObject, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, IObject, bool>>(_removeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method remove registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _removeOperation.Value, @object);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _removeOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _removeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRemoveOperation()
        {
            return ClassInstance.LookupOperation("remove");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public int Size()
        {
            System.Func<IReflectiveCollection, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReflectiveCollection, int>>(_sizeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method size registered. Use the method broker to r" +
                        "egister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _sizeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _sizeOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _sizeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSizeOperation()
        {
            return ClassInstance.LookupOperation("size");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//ReflectiveCollection")));
            }
            return _classInstance;
        }
    }
}

