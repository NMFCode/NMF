//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for Package
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Package))]
    [XmlDefaultImplementationTypeAttribute(typeof(Package))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Package")]
    public interface IPackage : IModelElement, IPackageableElement, NMF.Interop.Cmof.INamespace
    {
        
        /// <summary>
        /// Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.
        /// </summary>
        [DescriptionAttribute(@"Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.")]
        [CategoryAttribute("Package")]
        [XmlAttributeAttribute(true)]
        string URI
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the packaged elements that are Packages.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedPackage")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("nestingPackage")]
        [ConstantAttribute()]
        IOrderedSetExpression<IPackage> NestedPackage
        {
            get;
        }
        
        /// <summary>
        /// References the PackageMerges that are owned by this Package.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packageMerge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("receivingPackage")]
        [ConstantAttribute()]
        IOrderedSetExpression<IPackageMerge> PackageMerge
        {
            get;
        }
        
        /// <summary>
        /// References the packaged elements that are Types.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("package")]
        [ConstantAttribute()]
        IOrderedSetExpression<NMF.Interop.Cmof.IType> OwnedType
        {
            get;
        }
        
        /// <summary>
        /// References the Package that owns this Package.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestingPackage")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("nestedPackage")]
        IPackage NestingPackage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the packageable elements that are owned by this Package.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packagedElement")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IListExpression<IPackageableElement> PackagedElement
        {
            get;
        }
        
        /// <summary>
        /// If an element that is owned by a package has visibility, it is public or private.
        ///self.ownedElements-&gt;forAll(e | e.visibility-&gt;notEmpty() implies e.visbility = #public or e.visibility = #private)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Elements_public_or_private(object diagnostics, object context);
        
        /// <summary>
        /// The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.
        ///result = (ownedMember-&gt;includes(el)) or
        ///(elementImport-&gt;select(ei|ei.importedElement = #public)-&gt;collect(ei|ei.importedElement)-&gt;includes(el)) or
        ///(packageImport-&gt;select(pi|pi.visibility = #public)-&gt;collect(pi|pi.importedPackage.member-&gt;includes(el))-&gt;notEmpty())
        ///self.member-&gt;includes(el)
        /// </summary>
        /// <param name="el"></param>
        bool MakesVisible(INamedElement el);
        
        /// <summary>
        /// The query visibleMembers() defines which members of a Package can be accessed outside it.
        ///result = member-&gt;select( m | self.makesVisible(m))
        /// </summary>
        ISetExpression<IPackageableElement> VisibleMembers();
    }
}
