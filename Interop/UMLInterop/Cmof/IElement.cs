//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Cmof
{
    
    
    /// <summary>
    /// The public interface for Element
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Element))]
    [XmlDefaultImplementationTypeAttribute(typeof(Element))]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/MOF/20131001/cmof.xmi#//Element")]
    public interface IElement : IModelElement, IObject
    {
        
        /// <summary>
        /// The Comments owned by this element.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedComment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IComment> OwnedComment
        {
            get;
        }
        
        /// <summary>
        /// Elements that must be owned must have an owner.
        ///self.mustBeOwned() implies owner->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Has_owner(object diagnostics, object context);
        
        /// <summary>
        /// An element may not directly or indirectly own itself.
        ///not self.allOwnedElements()->includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_own_self(object diagnostics, object context);
        
        /// <summary>
        /// The query allOwnedElements() gives all of the direct and indirect owned elements of an element.
        ///result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
        /// </summary>
        ISetExpression<IElement> AllOwnedElements();
        
        /// <summary>
        /// The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
        ///result = true
        /// </summary>
        bool MustBeOwned();
        
        /// <summary>
        /// 
        /// </summary>
        NMF.Interop.Cmof.IClass GetMetaClass();
        
        /// <summary>
        /// 
        /// </summary>
        IElement Container();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="includesSubtypes"></param>
        bool IsInstanceOfType(NMF.Interop.Cmof.IClass type, bool includesSubtypes);
        
        /// <summary>
        /// 
        /// </summary>
        void Delete();
    }
}

