//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A FunctionBehavior is an OpaqueBehavior that does not access or modify any objects or other external data.
    ///<p>From package UML::CommonBehavior.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//FunctionBehavior")]
    [DebuggerDisplayAttribute("FunctionBehavior {Name}")]
    public partial class FunctionBehavior : OpaqueBehavior, IFunctionBehavior, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_output_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_output_parameterOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _types_of_parametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTypes_of_parametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _hasAllDataTypeAttributesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHasAllDataTypeAttributesOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//FunctionBehavior")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A FunctionBehavior has at least one output Parameter.
        ///self.ownedParameter->
        ///  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_output_parameter(object diagnostics, object context)
        {
            System.Func<IFunctionBehavior, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFunctionBehavior, object, object, bool>>(_one_output_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_output_parameter registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_output_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_output_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_output_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_output_parameterOperation()
        {
            return ClassInstance.LookupOperation("one_output_parameter");
        }
        
        /// <summary>
        /// The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes.
        ///ownedParameter->forAll(p | p.type <> null and
        ///  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Types_of_parameters(object diagnostics, object context)
        {
            System.Func<IFunctionBehavior, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFunctionBehavior, object, object, bool>>(_types_of_parametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method types_of_parameters registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _types_of_parametersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _types_of_parametersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _types_of_parametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTypes_of_parametersOperation()
        {
            return ClassInstance.LookupOperation("types_of_parameters");
        }
        
        /// <summary>
        /// The hasAllDataTypeAttributes query tests whether the types of the attributes of the given DataType are all DataTypes, and similarly for all those DataTypes.
        ///result = (d.ownedAttribute->forAll(a |
        ///    a.type.oclIsKindOf(DataType) and
        ///      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        /// <param name="d"></param>
        public bool HasAllDataTypeAttributes(NMF.Interop.Uml.IDataType d)
        {
            System.Func<IFunctionBehavior, NMF.Interop.Uml.IDataType, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFunctionBehavior, NMF.Interop.Uml.IDataType, bool>>(_hasAllDataTypeAttributesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method hasAllDataTypeAttributes registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _hasAllDataTypeAttributesOperation.Value, d);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _hasAllDataTypeAttributesOperation.Value, e));
            bool result = handler.Invoke(this, d);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _hasAllDataTypeAttributesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHasAllDataTypeAttributesOperation()
        {
            return ClassInstance.LookupOperation("hasAllDataTypeAttributes");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//FunctionBehavior")));
            }
            return _classInstance;
        }
    }
}

