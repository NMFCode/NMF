//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for State
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(State))]
    [XmlDefaultImplementationTypeAttribute(typeof(State))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//State")]
    public interface IState : IModelElement, IVertex, IRedefinableElement, NMF.Interop.Uml.INamespace
    {
        
        /// <summary>
        /// The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("connection")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("state")]
        [ConstantAttribute()]
        IOrderedSetExpression<IConnectionPointReference> Connection
        {
            get;
        }
        
        /// <summary>
        /// The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("connectionPoint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("state")]
        [ConstantAttribute()]
        IOrderedSetExpression<IPseudostate> ConnectionPoint
        {
            get;
        }
        
        /// <summary>
        /// A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("deferrableTrigger")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<ITrigger> DeferrableTrigger
        {
            get;
        }
        
        /// <summary>
        /// An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("doActivity")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBehavior DoActivity
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("entry")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBehavior Entry
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("exit")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBehavior Exit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The State of which this State is a redefinition.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("redefinedState")]
        [DescriptionAttribute("The State of which this State is a redefinition.\n<p>From package UML::StateMachin" +
            "es.</p>")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("redefinedState")]
        [XmlAttributeAttribute(true)]
        IState RedefinedState
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("stateInvariant")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint StateInvariant
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StateMachine that is to be inserted in place of the (submachine) State.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("submachine")]
        [DescriptionAttribute("The StateMachine that is to be inserted in place of the (submachine) State.\n<p>Fr" +
            "om package UML::StateMachines.</p>")]
        [CategoryAttribute("State")]
        [XmlElementNameAttribute("submachine")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("submachineState")]
        IStateMachine Submachine
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Regions owned directly by the State.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("region")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("state")]
        [ConstantAttribute()]
        IOrderedSetExpression<IRegion> Region
        {
            get;
        }
        
        /// <summary>
        /// Only entry or exit Pseudostates can serve as connection points.
        ///connectionPoint-&gt;forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Entry_or_exit(object diagnostics, object context);
        
        /// <summary>
        /// Only submachine States can have connection point references.
        ///isSubmachineState implies connection-&gt;notEmpty( )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Submachine_states(object diagnostics, object context);
        
        /// <summary>
        /// Only composite States can have entry or exit Pseudostates defined.
        ///connectionPoint-&gt;notEmpty() implies isComposite
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Composite_states(object diagnostics, object context);
        
        /// <summary>
        /// The connection point references used as destinations/sources of Transitions associated with a submachine State must be defined as entry/exit points in the submachine StateMachine.
        ///self.isSubmachineState implies (self.connection-&gt;forAll (cp |
        ///  cp.entry-&gt;forAll (ps | ps.stateMachine = self.submachine) and
        ///  cp.exit-&gt;forAll (ps | ps.stateMachine = self.submachine)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Destinations_or_sources_of_transitions(object diagnostics, object context);
        
        /// <summary>
        /// A State is not allowed to have both a submachine and Regions.
        ///isComposite implies not isSubmachineState
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Submachine_or_regions(object diagnostics, object context);
    }
}
