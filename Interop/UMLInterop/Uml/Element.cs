//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An Element is a constituent of a model. As such, it has the capability of owning other Elements.
    ///<p>From package UML::CommonStructure.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Element")]
    public abstract partial class Element : EModelElement, IElement, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_ownerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_ownerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_own_selfOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_own_selfOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _addKeywordOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAddKeywordOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _applyStereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveApplyStereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createEAnnotationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateEAnnotationOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _destroyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDestroyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getKeywordsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetKeywordsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getApplicableStereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetApplicableStereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getApplicableStereotypesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetApplicableStereotypesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedStereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedStereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedStereotypesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedStereotypesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedSubstereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedSubstereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedSubstereotypesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedSubstereotypesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getModelOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetModelOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getNearestPackageOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetNearestPackageOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getRelationshipsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getRelationshipsOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getRequiredStereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetRequiredStereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getRequiredStereotypesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetRequiredStereotypesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getSourceDirectedRelationshipsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetSourceDirectedRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getSourceDirectedRelationshipsOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetSourceDirectedRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getStereotypeApplicationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetStereotypeApplicationOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getStereotypeApplicationsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetStereotypeApplicationsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getTargetDirectedRelationshipsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetTargetDirectedRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getTargetDirectedRelationshipsOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetTargetDirectedRelationshipsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _hasKeywordOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHasKeywordOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _hasValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHasValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isStereotypeApplicableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsStereotypeApplicableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isStereotypeAppliedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsStereotypeAppliedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isStereotypeRequiredOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsStereotypeRequiredOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _removeKeywordOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRemoveKeywordOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unapplyStereotypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnapplyStereotypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allOwnedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllOwnedElementsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _mustBeOwnedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMustBeOwnedOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedCommentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedCommentReference);
        
        /// <summary>
        /// The backing field for the OwnedComment property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IComment> _ownedComment;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Element()
        {
            this._ownedComment = new ObservableCompositionOrderedSet<IComment>(this);
            this._ownedComment.CollectionChanging += this.OwnedCommentCollectionChanging;
            this._ownedComment.CollectionChanged += this.OwnedCommentCollectionChanged;
        }
        
        /// <summary>
        /// The Comments owned by this Element.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedComment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IComment> OwnedComment
        {
            get
            {
                return this._ownedComment;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ElementChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Element")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Elements that must be owned must have an owner.
        ///mustBeOwned() implies owner->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_owner(object diagnostics, object context)
        {
            System.Func<IElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, object, object, bool>>(_has_ownerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_owner registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_ownerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_ownerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_ownerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_ownerOperation()
        {
            return ClassInstance.LookupOperation("has_owner");
        }
        
        /// <summary>
        /// An element may not directly or indirectly own itself.
        ///not allOwnedElements()->includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_own_self(object diagnostics, object context)
        {
            System.Func<IElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, object, object, bool>>(_not_own_selfOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_own_self registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_own_selfOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_own_selfOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_own_selfOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_own_selfOperation()
        {
            return ClassInstance.LookupOperation("not_own_self");
        }
        
        /// <summary>
        /// Adds the specified keyword to this element.
        /// </summary>
        /// <param name="keyword">The keyword to add.</param>
        public bool AddKeyword(string keyword)
        {
            System.Func<IElement, string, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, bool>>(_addKeywordOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method addKeyword registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _addKeywordOperation.Value, keyword);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _addKeywordOperation.Value, e));
            bool result = handler.Invoke(this, keyword);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _addKeywordOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAddKeywordOperation()
        {
            return ClassInstance.LookupOperation("addKeyword");
        }
        
        /// <summary>
        /// Applies the specified stereotype to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype to apply.</param>
        public IEObject ApplyStereotype(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, IEObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, IEObject>>(_applyStereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method applyStereotype registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _applyStereotypeOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _applyStereotypeOperation.Value, e));
            IEObject result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _applyStereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveApplyStereotypeOperation()
        {
            return ClassInstance.LookupOperation("applyStereotype");
        }
        
        /// <summary>
        /// Creates an annotation with the specified source and this element as its model element.
        /// </summary>
        /// <param name="source">The source for the new annotation.</param>
        public IEAnnotation CreateEAnnotation(string source)
        {
            System.Func<IElement, string, IEAnnotation> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, IEAnnotation>>(_createEAnnotationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createEAnnotation registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createEAnnotationOperation.Value, source);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createEAnnotationOperation.Value, e));
            IEAnnotation result = handler.Invoke(this, source);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createEAnnotationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateEAnnotationOperation()
        {
            return ClassInstance.LookupOperation("createEAnnotation");
        }
        
        /// <summary>
        /// Destroys this element by removing all cross references to/from it and removing it from its containing resource or object.
        /// </summary>
        public void Destroy()
        {
            System.Action<IElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IElement>>(_destroyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method destroy registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _destroyOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _destroyOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _destroyOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDestroyOperation()
        {
            return ClassInstance.LookupOperation("destroy");
        }
        
        /// <summary>
        /// Retrieves the keywords for this element.
        /// </summary>
        public ISetExpression<string> GetKeywords()
        {
            System.Func<IElement, ISetExpression<string>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<string>>>(_getKeywordsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getKeywords registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getKeywordsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getKeywordsOperation.Value, e));
            ISetExpression<string> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getKeywordsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetKeywordsOperation()
        {
            return ClassInstance.LookupOperation("getKeywords");
        }
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the applicable stereotype to retrieve.</param>
        public IStereotype GetApplicableStereotype(string qualifiedName)
        {
            System.Func<IElement, string, IStereotype> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, IStereotype>>(_getApplicableStereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getApplicableStereotype registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getApplicableStereotypeOperation.Value, qualifiedName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getApplicableStereotypeOperation.Value, e));
            IStereotype result = handler.Invoke(this, qualifiedName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getApplicableStereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetApplicableStereotypeOperation()
        {
            return ClassInstance.LookupOperation("getApplicableStereotype");
        }
        
        /// <summary>
        /// Retrieves the stereotypes that are applicable to this element, including those that are required and/or may already be applied.
        /// </summary>
        public ISetExpression<IStereotype> GetApplicableStereotypes()
        {
            System.Func<IElement, ISetExpression<IStereotype>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IStereotype>>>(_getApplicableStereotypesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getApplicableStereotypes registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getApplicableStereotypesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getApplicableStereotypesOperation.Value, e));
            ISetExpression<IStereotype> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getApplicableStereotypesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetApplicableStereotypesOperation()
        {
            return ClassInstance.LookupOperation("getApplicableStereotypes");
        }
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the applied stereotype to retrieve.</param>
        public IStereotype GetAppliedStereotype(string qualifiedName)
        {
            System.Func<IElement, string, IStereotype> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, IStereotype>>(_getAppliedStereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedStereotype registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedStereotypeOperation.Value, qualifiedName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedStereotypeOperation.Value, e));
            IStereotype result = handler.Invoke(this, qualifiedName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedStereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedStereotypeOperation()
        {
            return ClassInstance.LookupOperation("getAppliedStereotype");
        }
        
        /// <summary>
        /// Retrieves the stereotypes that are applied to this element.
        /// </summary>
        public ISetExpression<IStereotype> GetAppliedStereotypes()
        {
            System.Func<IElement, ISetExpression<IStereotype>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IStereotype>>>(_getAppliedStereotypesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedStereotypes registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedStereotypesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedStereotypesOperation.Value, e));
            ISetExpression<IStereotype> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedStereotypesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedStereotypesOperation()
        {
            return ClassInstance.LookupOperation("getAppliedStereotypes");
        }
        
        /// <summary>
        /// Retrieves the substereotype of the specified stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is applied.
        /// </summary>
        /// <param name="stereotype">The superstereotype of the applied substereotype to retrieve.</param>
        /// <param name="qualifiedName">The qualified name of the applied substereotype to retrieve.</param>
        public IStereotype GetAppliedSubstereotype(IStereotype stereotype, string qualifiedName)
        {
            System.Func<IElement, IStereotype, string, IStereotype> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, string, IStereotype>>(_getAppliedSubstereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedSubstereotype registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedSubstereotypeOperation.Value, stereotype, qualifiedName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedSubstereotypeOperation.Value, e));
            IStereotype result = handler.Invoke(this, stereotype, qualifiedName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedSubstereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedSubstereotypeOperation()
        {
            return ClassInstance.LookupOperation("getAppliedSubstereotype");
        }
        
        /// <summary>
        /// Retrieves the substereotypes of the specified stereotype that are applied to this element.
        /// </summary>
        /// <param name="stereotype">The superstereotype of the applied substereotypes to retrieve.</param>
        public ISetExpression<IStereotype> GetAppliedSubstereotypes(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, ISetExpression<IStereotype>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, ISetExpression<IStereotype>>>(_getAppliedSubstereotypesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedSubstereotypes registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedSubstereotypesOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedSubstereotypesOperation.Value, e));
            ISetExpression<IStereotype> result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedSubstereotypesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedSubstereotypesOperation()
        {
            return ClassInstance.LookupOperation("getAppliedSubstereotypes");
        }
        
        /// <summary>
        /// Retrieves the model that owns (either directly or indirectly) this element.
        /// </summary>
        public NMF.Interop.Uml.IModel GetModel()
        {
            System.Func<IElement, NMF.Interop.Uml.IModel> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, NMF.Interop.Uml.IModel>>(_getModelOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getModel registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getModelOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getModelOperation.Value, e));
            NMF.Interop.Uml.IModel result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getModelOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetModelOperation()
        {
            return ClassInstance.LookupOperation("getModel");
        }
        
        /// <summary>
        /// Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package).
        /// </summary>
        public IPackage GetNearestPackage()
        {
            System.Func<IElement, IPackage> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IPackage>>(_getNearestPackageOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getNearestPackage registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getNearestPackageOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getNearestPackageOperation.Value, e));
            IPackage result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getNearestPackageOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetNearestPackageOperation()
        {
            return ClassInstance.LookupOperation("getNearestPackage");
        }
        
        /// <summary>
        /// Retrieves the relationships in which this element is involved.
        /// </summary>
        public ISetExpression<IRelationship> GetRelationships()
        {
            System.Func<IElement, ISetExpression<IRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IRelationship>>>(_getRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getRelationships registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getRelationshipsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getRelationshipsOperation.Value, e));
            ISetExpression<IRelationship> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getRelationshipsOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Retrieves the relationships of the specified type in which this element is involved.
        /// </summary>
        /// <param name="eClass">The (meta)type of the relationships to retrieve.</param>
        public ISetExpression<IRelationship> GetRelationships(IEClass eClass)
        {
            System.Func<IElement, IEClass, ISetExpression<IRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IEClass, ISetExpression<IRelationship>>>(_getRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getRelationships registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getRelationshipsOperation.Value, eClass);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getRelationshipsOperation.Value, e));
            ISetExpression<IRelationship> result = handler.Invoke(this, eClass);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getRelationshipsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetRelationshipsOperation()
        {
            return ClassInstance.LookupOperation("getRelationships");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetRelationshipsOperation_()
        {
            return ClassInstance.LookupOperation("getRelationships");
        }
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the required stereotype to retrieve.</param>
        public IStereotype GetRequiredStereotype(string qualifiedName)
        {
            System.Func<IElement, string, IStereotype> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, IStereotype>>(_getRequiredStereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getRequiredStereotype registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getRequiredStereotypeOperation.Value, qualifiedName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getRequiredStereotypeOperation.Value, e));
            IStereotype result = handler.Invoke(this, qualifiedName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getRequiredStereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetRequiredStereotypeOperation()
        {
            return ClassInstance.LookupOperation("getRequiredStereotype");
        }
        
        /// <summary>
        /// Retrieves the stereotypes that are required for this element.
        /// </summary>
        public ISetExpression<IStereotype> GetRequiredStereotypes()
        {
            System.Func<IElement, ISetExpression<IStereotype>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IStereotype>>>(_getRequiredStereotypesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getRequiredStereotypes registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getRequiredStereotypesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getRequiredStereotypesOperation.Value, e));
            ISetExpression<IStereotype> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getRequiredStereotypesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetRequiredStereotypesOperation()
        {
            return ClassInstance.LookupOperation("getRequiredStereotypes");
        }
        
        /// <summary>
        /// Retrieves the directed relationships for which this element is a source.
        /// </summary>
        public ISetExpression<IDirectedRelationship> GetSourceDirectedRelationships()
        {
            System.Func<IElement, ISetExpression<IDirectedRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IDirectedRelationship>>>(_getSourceDirectedRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getSourceDirectedRelationships registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getSourceDirectedRelationshipsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getSourceDirectedRelationshipsOperation.Value, e));
            ISetExpression<IDirectedRelationship> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getSourceDirectedRelationshipsOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Retrieves the directed relationships of the specified type for which this element is a source.
        /// </summary>
        /// <param name="eClass">The (meta)type of the directed relationships to retrieve.</param>
        public ISetExpression<IDirectedRelationship> GetSourceDirectedRelationships(IEClass eClass)
        {
            System.Func<IElement, IEClass, ISetExpression<IDirectedRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IEClass, ISetExpression<IDirectedRelationship>>>(_getSourceDirectedRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getSourceDirectedRelationships registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getSourceDirectedRelationshipsOperation.Value, eClass);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getSourceDirectedRelationshipsOperation.Value, e));
            ISetExpression<IDirectedRelationship> result = handler.Invoke(this, eClass);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getSourceDirectedRelationshipsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetSourceDirectedRelationshipsOperation()
        {
            return ClassInstance.LookupOperation("getSourceDirectedRelationships");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetSourceDirectedRelationshipsOperation_()
        {
            return ClassInstance.LookupOperation("getSourceDirectedRelationships");
        }
        
        /// <summary>
        /// Retrieves the application of the specified stereotype for this element, or null if no such stereotype application exists.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to retrieve an application.</param>
        public IEObject GetStereotypeApplication(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, IEObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, IEObject>>(_getStereotypeApplicationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getStereotypeApplication registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getStereotypeApplicationOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getStereotypeApplicationOperation.Value, e));
            IEObject result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getStereotypeApplicationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetStereotypeApplicationOperation()
        {
            return ClassInstance.LookupOperation("getStereotypeApplication");
        }
        
        /// <summary>
        /// Retrieves the stereotype applications for this element.
        /// </summary>
        public ISetExpression<IEObject> GetStereotypeApplications()
        {
            System.Func<IElement, ISetExpression<IEObject>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IEObject>>>(_getStereotypeApplicationsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getStereotypeApplications registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getStereotypeApplicationsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getStereotypeApplicationsOperation.Value, e));
            ISetExpression<IEObject> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getStereotypeApplicationsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetStereotypeApplicationsOperation()
        {
            return ClassInstance.LookupOperation("getStereotypeApplications");
        }
        
        /// <summary>
        /// Retrieves the directed relationships for which this element is a target.
        /// </summary>
        public ISetExpression<IDirectedRelationship> GetTargetDirectedRelationships()
        {
            System.Func<IElement, ISetExpression<IDirectedRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IDirectedRelationship>>>(_getTargetDirectedRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getTargetDirectedRelationships registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getTargetDirectedRelationshipsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getTargetDirectedRelationshipsOperation.Value, e));
            ISetExpression<IDirectedRelationship> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getTargetDirectedRelationshipsOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Retrieves the directed relationships of the specified type for which this element is a target.
        /// </summary>
        /// <param name="eClass">The (meta)type of the directed relationships to retrieve.</param>
        public ISetExpression<IDirectedRelationship> GetTargetDirectedRelationships(IEClass eClass)
        {
            System.Func<IElement, IEClass, ISetExpression<IDirectedRelationship>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IEClass, ISetExpression<IDirectedRelationship>>>(_getTargetDirectedRelationshipsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getTargetDirectedRelationships registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getTargetDirectedRelationshipsOperation.Value, eClass);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getTargetDirectedRelationshipsOperation.Value, e));
            ISetExpression<IDirectedRelationship> result = handler.Invoke(this, eClass);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getTargetDirectedRelationshipsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetTargetDirectedRelationshipsOperation()
        {
            return ClassInstance.LookupOperation("getTargetDirectedRelationships");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetTargetDirectedRelationshipsOperation_()
        {
            return ClassInstance.LookupOperation("getTargetDirectedRelationships");
        }
        
        /// <summary>
        /// Retrieves the value of the property with the specified name in the specified stereotype for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to retrieve the value.</param>
        /// <param name="propertyName">The name of the property whose value to retrieve.</param>
        public object GetValue(IStereotype stereotype, string propertyName)
        {
            System.Func<IElement, IStereotype, string, object> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, string, object>>(_getValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getValue registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getValueOperation.Value, stereotype, propertyName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getValueOperation.Value, e));
            object result = handler.Invoke(this, stereotype, propertyName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetValueOperation()
        {
            return ClassInstance.LookupOperation("getValue");
        }
        
        /// <summary>
        /// Determines whether this element has the specified keyword.
        /// </summary>
        /// <param name="keyword">The keyword in question.</param>
        public bool HasKeyword(string keyword)
        {
            System.Func<IElement, string, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, bool>>(_hasKeywordOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method hasKeyword registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _hasKeywordOperation.Value, keyword);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _hasKeywordOperation.Value, e));
            bool result = handler.Invoke(this, keyword);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _hasKeywordOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHasKeywordOperation()
        {
            return ClassInstance.LookupOperation("hasKeyword");
        }
        
        /// <summary>
        /// Determines whether this element has a (non-default) value for the property with the specified name in the specified stereotype.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to test the property.</param>
        /// <param name="propertyName">The name of the property in question.</param>
        public bool HasValue(IStereotype stereotype, string propertyName)
        {
            System.Func<IElement, IStereotype, string, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, string, bool>>(_hasValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method hasValue registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _hasValueOperation.Value, stereotype, propertyName);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _hasValueOperation.Value, e));
            bool result = handler.Invoke(this, stereotype, propertyName);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _hasValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHasValueOperation()
        {
            return ClassInstance.LookupOperation("hasValue");
        }
        
        /// <summary>
        /// Determines whether the specified stereotype is applicable to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        public bool IsStereotypeApplicable(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, bool>>(_isStereotypeApplicableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isStereotypeApplicable registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isStereotypeApplicableOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isStereotypeApplicableOperation.Value, e));
            bool result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isStereotypeApplicableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsStereotypeApplicableOperation()
        {
            return ClassInstance.LookupOperation("isStereotypeApplicable");
        }
        
        /// <summary>
        /// Determines whether the specified stereotype is applied to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        public bool IsStereotypeApplied(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, bool>>(_isStereotypeAppliedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isStereotypeApplied registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isStereotypeAppliedOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isStereotypeAppliedOperation.Value, e));
            bool result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isStereotypeAppliedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsStereotypeAppliedOperation()
        {
            return ClassInstance.LookupOperation("isStereotypeApplied");
        }
        
        /// <summary>
        /// Determines whether the specified stereotype is required for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        public bool IsStereotypeRequired(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, bool>>(_isStereotypeRequiredOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isStereotypeRequired registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isStereotypeRequiredOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isStereotypeRequiredOperation.Value, e));
            bool result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isStereotypeRequiredOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsStereotypeRequiredOperation()
        {
            return ClassInstance.LookupOperation("isStereotypeRequired");
        }
        
        /// <summary>
        /// Removes the specified keyword from this element.
        /// </summary>
        /// <param name="keyword">The keyword to remove.</param>
        public bool RemoveKeyword(string keyword)
        {
            System.Func<IElement, string, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, string, bool>>(_removeKeywordOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method removeKeyword registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _removeKeywordOperation.Value, keyword);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _removeKeywordOperation.Value, e));
            bool result = handler.Invoke(this, keyword);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _removeKeywordOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRemoveKeywordOperation()
        {
            return ClassInstance.LookupOperation("removeKeyword");
        }
        
        /// <summary>
        /// Sets the value of the property with the specified name in the specified stereotype for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to set the value.</param>
        /// <param name="propertyName">The name of the property whose value to set.</param>
        /// <param name="newValue">The new value for the property.</param>
        public void SetValue(IStereotype stereotype, string propertyName, object newValue)
        {
            System.Action<IElement, IStereotype, string, object> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IElement, IStereotype, string, object>>(_setValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setValue registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setValueOperation.Value, stereotype, propertyName, newValue);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setValueOperation.Value, e));
            handler.Invoke(this, stereotype, propertyName, newValue);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetValueOperation()
        {
            return ClassInstance.LookupOperation("setValue");
        }
        
        /// <summary>
        /// Unapplies the specified stereotype from this element.
        /// </summary>
        /// <param name="stereotype">The stereotype to unapply.</param>
        public IEObject UnapplyStereotype(IStereotype stereotype)
        {
            System.Func<IElement, IStereotype, IEObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, IStereotype, IEObject>>(_unapplyStereotypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unapplyStereotype registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unapplyStereotypeOperation.Value, stereotype);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unapplyStereotypeOperation.Value, e));
            IEObject result = handler.Invoke(this, stereotype);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unapplyStereotypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnapplyStereotypeOperation()
        {
            return ClassInstance.LookupOperation("unapplyStereotype");
        }
        
        /// <summary>
        /// The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.
        ///result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public ISetExpression<IElement> AllOwnedElements()
        {
            System.Func<IElement, ISetExpression<IElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, ISetExpression<IElement>>>(_allOwnedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allOwnedElements registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allOwnedElementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allOwnedElementsOperation.Value, e));
            ISetExpression<IElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allOwnedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllOwnedElementsOperation()
        {
            return ClassInstance.LookupOperation("allOwnedElements");
        }
        
        /// <summary>
        /// The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
        ///result = (true)
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public bool MustBeOwned()
        {
            System.Func<IElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElement, bool>>(_mustBeOwnedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method mustBeOwned registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _mustBeOwnedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _mustBeOwnedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _mustBeOwnedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMustBeOwnedOperation()
        {
            return ClassInstance.LookupOperation("mustBeOwned");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedCommentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Element.ClassInstance)).Resolve("ownedComment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedComment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedCommentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedComment", e, _ownedCommentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedComment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedCommentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedComment", e, _ownedCommentReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedCommentIndex = ModelHelper.IndexOfReference(this.OwnedComment, element);
            if ((ownedCommentIndex != -1))
            {
                return ModelHelper.CreatePath("ownedComment", ownedCommentIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNEDCOMMENT"))
            {
                if ((index < this.OwnedComment.Count))
                {
                    return this.OwnedComment[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OWNEDCOMMENT"))
            {
                return this._ownedComment;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ownedComment))
            {
                return "ownedComment";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Element")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Element class
        /// </summary>
        public class ElementChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Element _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElementChildrenCollection(Element parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedComment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IComment ownedCommentCasted = item.As<IComment>();
                if ((ownedCommentCasted != null))
                {
                    this._parent.OwnedComment.Add(ownedCommentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedComment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedComment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedCommentEnumerator = this._parent.OwnedComment.GetEnumerator();
                try
                {
                    for (
                    ; ownedCommentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedCommentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedCommentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.OwnedComment.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedComment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Element class
        /// </summary>
        public class ElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Element _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElementReferencedElementsCollection(Element parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedComment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IComment ownedCommentCasted = item.As<IComment>();
                if ((ownedCommentCasted != null))
                {
                    this._parent.OwnedComment.Add(ownedCommentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedComment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedComment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedCommentEnumerator = this._parent.OwnedComment.GetEnumerator();
                try
                {
                    for (
                    ; ownedCommentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedCommentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedCommentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.OwnedComment.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedComment).GetEnumerator();
            }
        }
    }
}

