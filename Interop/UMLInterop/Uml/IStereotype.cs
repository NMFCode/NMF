//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Stereotype
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Stereotype))]
    [XmlDefaultImplementationTypeAttribute(typeof(Stereotype))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Stereotype")]
    public interface IStereotype : IModelElement, NMF.Interop.Uml.IClass
    {
        
        /// <summary>
        /// Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("icon")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IImage> Icon
        {
            get;
        }
        
        /// <summary>
        /// Stereotypes may only participate in binary associations.
        ///ownedAttribute.association->forAll(memberEnd->size()=2)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool BinaryAssociationsOnly(object diagnostics, object context);
        
        /// <summary>
        /// A Stereotype may only generalize or specialize another Stereotype.
        ///allParents()->forAll(oclIsKindOf(Stereotype)) 
        ///and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Generalize(object diagnostics, object context);
        
        /// <summary>
        /// Stereotype names should not clash with keyword names for the extended model element.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Name_not_clash(object diagnostics, object context);
        
        /// <summary>
        /// Where a stereotypeâ€™s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself.
        ///ownedAttribute
        ///->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))
        ///->forAll(opposite.owner = association)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool AssociationEndOwnership(object diagnostics, object context);
        
        /// <summary>
        /// The upper bound of base-properties is exactly 1.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Base_property_upper_bound(object diagnostics, object context);
        
        /// <summary>
        /// If a Stereotype extends only one metaclass, the multiplicity of the corresponding base-property shall be 1..1.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Base_property_multiplicity_single_extension(object diagnostics, object context);
        
        /// <summary>
        /// If a Stereotype extends more than one metaclass, the multiplicity of the corresponding base-properties shall be [0..1]. At any point in time, only one of these base-properties can contain a metaclass instance during runtime.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Base_property_multiplicity_multiple_extension(object diagnostics, object context);
        
        /// <summary>
        /// Creates a(n) (required) extension of the specified metaclass with this stereotype.
        /// </summary>
        /// <param name="metaclass">The metaclass for the new extension.</param>
        /// <param name="isRequired">Whether the new extension should be required.</param>
        NMF.Interop.Uml.IExtension CreateExtension(NMF.Interop.Uml.IClass metaclass, bool isRequired);
        
        /// <summary>
        /// Creates an icon with the specified location for this stereotype.
        /// </summary>
        /// <param name="location">The location for the new icon.</param>
        IImage CreateIcon(string location);
        
        /// <summary>
        /// Creates an icon with the specified format and content for this stereotype.
        /// </summary>
        /// <param name="format">The format for the new icon.</param>
        /// <param name="content">The content for the new icon.</param>
        IImage CreateIcon(string format, string content);
        
        /// <summary>
        /// Retrieves all the metaclasses extended by this stereotype, including the metaclasses extended by its superstereotypes.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IClass> GetAllExtendedMetaclasses();
        
        /// <summary>
        /// Retrieves the current definition (Ecore representation) of this stereotype.
        /// </summary>
        IEClass GetDefinition();
        
        /// <summary>
        /// Retrieves the metaclasses extended by this stereotype.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IClass> GetExtendedMetaclasses();
        
        /// <summary>
        /// Retrieves the localized keyword for this stereotype.
        /// </summary>
        string GetKeyword();
        
        /// <summary>
        /// Retrieves the keyword for this stereotype, localized if indicated.
        /// </summary>
        /// <param name="localize">Whether to localize the keyword.</param>
        string GetKeyword(bool localize);
        
        /// <summary>
        /// The query containingProfile returns the closest profile directly or indirectly containing this stereotype.
        ///result = (self.namespace.oclAsType(Package).containingProfile())
        ///<p>From package UML::Packages.</p>
        /// </summary>
        IProfile ContainingProfile();
        
        /// <summary>
        /// A stereotype must be contained, directly or indirectly, in a profile.
        ///result = (self.containingProfile())
        ///<p>From package UML::Packages.</p>
        /// </summary>
        IProfile GetProfile();
    }
}

