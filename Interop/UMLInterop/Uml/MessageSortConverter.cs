//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// Implements a type converter for the enumeration MessageSort
    /// </summary>
    public class MessageSortConverter : TypeConverter
    {
        
        /// <summary>
        /// Determines whether the converter can convert from the provided source type into MessageSort
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="sourceType">the source type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        /// <summary>
        /// Determines whether the converter can convert to the destination type from MessageSort
        /// </summary>
        /// <returns>true, if the converter can convert from the source type, otherwise false</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="context">the context in which the value should be transformed</param>
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        /// <summary>
        /// Convert the provided value into a MessageSort
        /// </summary>
        /// <returns>the converted value as a MessageSort</returns>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(MessageSort);
            }
            string valueString = value.ToString();
            if ((valueString == "synchCall"))
            {
                return MessageSort.SynchCall;
            }
            if ((valueString == "asynchCall"))
            {
                return MessageSort.AsynchCall;
            }
            if ((valueString == "asynchSignal"))
            {
                return MessageSort.AsynchSignal;
            }
            if ((valueString == "createMessage"))
            {
                return MessageSort.CreateMessage;
            }
            if ((valueString == "deleteMessage"))
            {
                return MessageSort.DeleteMessage;
            }
            if ((valueString == "reply"))
            {
                return MessageSort.Reply;
            }
            return default(MessageSort);
        }
        
        /// <summary>
        /// Convert the provided value into a MessageSort
        /// </summary>
        /// <returns>the converted value</returns>
        /// <param name="destinationType">the destination type</param>
        /// <param name="value">the value to convert</param>
        /// <param name="context">the context in which the value should be transformed</param>
        /// <param name="culture">the culture in which the value should be converted</param>
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            MessageSort valueCasted = ((MessageSort)(value));
            if ((valueCasted == MessageSort.SynchCall))
            {
                return "synchCall";
            }
            if ((valueCasted == MessageSort.AsynchCall))
            {
                return "asynchCall";
            }
            if ((valueCasted == MessageSort.AsynchSignal))
            {
                return "asynchSignal";
            }
            if ((valueCasted == MessageSort.CreateMessage))
            {
                return "createMessage";
            }
            if ((valueCasted == MessageSort.DeleteMessage))
            {
                return "deleteMessage";
            }
            if ((valueCasted == MessageSort.Reply))
            {
                return "reply";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}
