//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ObjectNode is an abstract ActivityNode that may hold tokens within the object flow in an Activity. ObjectNodes also support token selection, limitation on the number of tokens held, specification of the state required for tokens being held, and carrying control values.
    ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectNode")]
    [DebuggerDisplayAttribute("ObjectNode {Name}")]
    public abstract partial class ObjectNode : ActivityNode, IObjectNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _input_output_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInput_output_parameterOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _selection_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSelection_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _object_flow_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveObject_flow_edgesOperation);
        
        /// <summary>
        /// The backing field for the IsControlType property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isControlType = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isControlTypeAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsControlTypeAttribute);
        
        /// <summary>
        /// The backing field for the Ordering property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObjectNodeOrderingKind _ordering = ObjectNodeOrderingKind.FIFO;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _orderingAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOrderingAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inStateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInStateReference);
        
        /// <summary>
        /// The backing field for the InState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IState> _inState;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _selectionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSelectionReference);
        
        /// <summary>
        /// The backing field for the Selection property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _selection;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperBoundReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperBoundReference);
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _upperBound;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Uml.IType _type;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ObjectNode()
        {
            this._inState = new ObservableAssociationSet<IState>();
            this._inState.CollectionChanging += this.InStateCollectionChanging;
            this._inState.CollectionChanged += this.InStateCollectionChanged;
        }
        
        /// <summary>
        /// Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isControlType")]
        [DescriptionAttribute("Indicates whether the type of the ObjectNode is to be treated as representing con" +
            "trol values that may traverse ControlFlows.\n<p>From package UML::Activities.</p>" +
            "")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("isControlType")]
        [XmlAttributeAttribute(true)]
        public bool IsControlType
        {
            get
            {
                return this._isControlType;
            }
            set
            {
                if ((this._isControlType != value))
                {
                    bool old = this._isControlType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsControlType", e, _isControlTypeAttribute);
                    this._isControlType = value;
                    this.OnPropertyChanged("IsControlType", e, _isControlTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(ObjectNodeOrderingKind.FIFO)]
        [DisplayNameAttribute("ordering")]
        [DescriptionAttribute("Indicates how the tokens held by the ObjectNode are ordered for selection to trav" +
            "erse ActivityEdges outgoing from the ObjectNode.\n<p>From package UML::Activities" +
            ".</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("ordering")]
        [XmlAttributeAttribute(true)]
        public ObjectNodeOrderingKind Ordering
        {
            get
            {
                return this._ordering;
            }
            set
            {
                if ((this._ordering != value))
                {
                    ObjectNodeOrderingKind old = this._ordering;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Ordering", e, _orderingAttribute);
                    this._ordering = value;
                    this.OnPropertyChanged("Ordering", e, _orderingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The States required to be associated with the values held by tokens on this ObjectNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inState")]
        [DescriptionAttribute("The States required to be associated with the values held by tokens on this Objec" +
            "tNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("inState")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IState> InState
        {
            get
            {
                return this._inState;
            }
        }
        
        /// <summary>
        /// A Behavior used to select tokens to be offered on outgoing ActivityEdges.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("selection")]
        [DescriptionAttribute("A Behavior used to select tokens to be offered on outgoing ActivityEdges.\n<p>From" +
            " package UML::Activities.</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("selection")]
        [XmlAttributeAttribute(true)]
        public IBehavior Selection
        {
            get
            {
                return this._selection;
            }
            set
            {
                if ((this._selection != value))
                {
                    IBehavior old = this._selection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Selection", e, _selectionReference);
                    this._selection = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSelection;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSelection;
                    }
                    this.OnPropertyChanged("Selection", e, _selectionReference);
                }
            }
        }
        
        /// <summary>
        /// The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("upperBound")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((this._upperBound != value))
                {
                    IValueSpecification old = this._upperBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("UpperBound", e, _upperBoundReference);
                    this._upperBound = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetUpperBound;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetUpperBound;
                    }
                    this.OnPropertyChanged("UpperBound", e, _upperBoundReference);
                }
            }
        }
        
        /// <summary>
        /// The type of the TypedElement.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("The type of the TypedElement.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Uml.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Uml.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ObjectNodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ObjectNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same type as  or a supertype of the type of ObjectNode, be non-unique, and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of ObjectNode. The Behavior cannot have side effects.
        ///selection&lt;&gt;null implies
        ///	selection.inputParameters()-&gt;size()=1 and
        ///	selection.inputParameters()-&gt;forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and
        ///	selection.outputParameters()-&gt;size()=1 and
        ///		selection.inputParameters()-&gt;forAll(p | self.type.conformsTo(p.type))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Input_output_parameter(object diagnostics, object context)
        {
            System.Func<IObjectNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectNode, object, object, bool>>(_input_output_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method input_output_parameter registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _input_output_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _input_output_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _input_output_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInput_output_parameterOperation()
        {
            return ClassInstance.LookupOperation("input_output_parameter");
        }
        
        /// <summary>
        /// If an ObjectNode has a selection Behavior, then the ordering of the object node is ordered, and vice versa.
        ///(selection&lt;&gt;null) = (ordering=ObjectNodeOrderingKind::ordered)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Selection_behavior(object diagnostics, object context)
        {
            System.Func<IObjectNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectNode, object, object, bool>>(_selection_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method selection_behavior registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _selection_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _selection_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _selection_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSelection_behaviorOperation()
        {
            return ClassInstance.LookupOperation("selection_behavior");
        }
        
        /// <summary>
        /// If isControlType=false, the ActivityEdges incoming to or outgoing from an ObjectNode must all be ObjectFlows.
        ///(not isControlType) implies incoming-&gt;union(outgoing)-&gt;forAll(oclIsKindOf(ObjectFlow))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Object_flow_edges(object diagnostics, object context)
        {
            System.Func<IObjectNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectNode, object, object, bool>>(_object_flow_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method object_flow_edges registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _object_flow_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _object_flow_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _object_flow_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveObject_flow_edgesOperation()
        {
            return ClassInstance.LookupOperation("object_flow_edges");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsControlTypeAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectNode.ClassInstance)).Resolve("isControlType")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOrderingAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectNode.ClassInstance)).Resolve("ordering")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInStateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectNode.ClassInstance)).Resolve("inState")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InState property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InStateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InState", e, _inStateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InState property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InStateCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InState", e, _inStateReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSelectionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectNode.ClassInstance)).Resolve("selection")));
        }
        
        /// <summary>
        /// Handles the event that the Selection property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSelection(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Selection))
            {
                this.Selection = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperBoundReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectNode.ClassInstance)).Resolve("upperBound")));
        }
        
        /// <summary>
        /// Handles the event that the UpperBound property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUpperBound(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.UpperBound))
            {
                this.UpperBound = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Type))
            {
                this.Type = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.UpperBound))
            {
                return ModelHelper.CreatePath("upperBound");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SELECTION"))
            {
                return this.Selection;
            }
            if ((reference == "UPPERBOUND"))
            {
                return this.UpperBound;
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISCONTROLTYPE"))
            {
                return this.IsControlType;
            }
            if ((attribute == "ORDERING"))
            {
                return this.Ordering;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INSTATE"))
            {
                return this._inState;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SELECTION"))
            {
                this.Selection = ((IBehavior)(value));
                return;
            }
            if ((feature == "UPPERBOUND"))
            {
                this.UpperBound = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Uml.IType)(value));
                return;
            }
            if ((feature == "ISCONTROLTYPE"))
            {
                this.IsControlType = ((bool)(value));
                return;
            }
            if ((feature == "ORDERING"))
            {
                this.Ordering = ((ObjectNodeOrderingKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISCONTROLTYPE"))
            {
                return Observable.Box(new IsControlTypeProxy(this));
            }
            if ((attribute == "ORDERING"))
            {
                return Observable.Box(new OrderingProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SELECTION"))
            {
                return new SelectionProxy(this);
            }
            if ((reference == "UPPERBOUND"))
            {
                return new UpperBoundProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ObjectNode class
        /// </summary>
        public class ObjectNodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ObjectNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ObjectNodeChildrenCollection(ObjectNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.UpperBound != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.UpperBound == null))
                {
                    IValueSpecification upperBoundCasted = item.As<IValueSpecification>();
                    if ((upperBoundCasted != null))
                    {
                        this._parent.UpperBound = upperBoundCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UpperBound = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.UpperBound))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.UpperBound != null))
                {
                    array[arrayIndex] = this._parent.UpperBound;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.UpperBound == item))
                {
                    this._parent.UpperBound = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UpperBound).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ObjectNode class
        /// </summary>
        public class ObjectNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ObjectNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ObjectNodeReferencedElementsCollection(ObjectNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InState.Count);
                    if ((this._parent.Selection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UpperBound != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.InState.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.InState.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IState inStateCasted = item.As<IState>();
                if ((inStateCasted != null))
                {
                    this._parent.InState.Add(inStateCasted);
                }
                if ((this._parent.Selection == null))
                {
                    IBehavior selectionCasted = item.As<IBehavior>();
                    if ((selectionCasted != null))
                    {
                        this._parent.Selection = selectionCasted;
                        return;
                    }
                }
                if ((this._parent.UpperBound == null))
                {
                    IValueSpecification upperBoundCasted = item.As<IValueSpecification>();
                    if ((upperBoundCasted != null))
                    {
                        this._parent.UpperBound = upperBoundCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    NMF.Interop.Uml.IType typeCasted = item.As<NMF.Interop.Uml.IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InState.Clear();
                this._parent.Selection = null;
                this._parent.UpperBound = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InState.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Selection))
                {
                    return true;
                }
                if ((item == this._parent.UpperBound))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inStateEnumerator = this._parent.InState.GetEnumerator();
                try
                {
                    for (
                    ; inStateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inStateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inStateEnumerator.Dispose();
                }
                if ((this._parent.Selection != null))
                {
                    array[arrayIndex] = this._parent.Selection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UpperBound != null))
                {
                    array[arrayIndex] = this._parent.UpperBound;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.InState.Remove(stateItem)))
                {
                    return true;
                }
                if ((this._parent.Selection == item))
                {
                    this._parent.Selection = null;
                    return true;
                }
                if ((this._parent.UpperBound == item))
                {
                    this._parent.UpperBound = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InState).Concat(this._parent.Selection).Concat(this._parent.UpperBound).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isControlType property
        /// </summary>
        private sealed class IsControlTypeProxy : ModelPropertyChange<IObjectNode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsControlTypeProxy(IObjectNode modelElement) : 
                    base(modelElement, "isControlType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsControlType;
                }
                set
                {
                    this.ModelElement.IsControlType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ordering property
        /// </summary>
        private sealed class OrderingProxy : ModelPropertyChange<IObjectNode, ObjectNodeOrderingKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrderingProxy(IObjectNode modelElement) : 
                    base(modelElement, "ordering")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ObjectNodeOrderingKind Value
            {
                get
                {
                    return this.ModelElement.Ordering;
                }
                set
                {
                    this.ModelElement.Ordering = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the selection property
        /// </summary>
        private sealed class SelectionProxy : ModelPropertyChange<IObjectNode, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SelectionProxy(IObjectNode modelElement) : 
                    base(modelElement, "selection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.Selection;
                }
                set
                {
                    this.ModelElement.Selection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<IObjectNode, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(IObjectNode modelElement) : 
                    base(modelElement, "upperBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Uml.ITypedElement, NMF.Interop.Uml.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Uml.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}
