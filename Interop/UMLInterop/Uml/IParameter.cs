//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Parameter
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Parameter))]
    [XmlDefaultImplementationTypeAttribute(typeof(Parameter))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Parameter")]
    public interface IParameter : IModelElement, IMultiplicityElement, IConnectableElement
    {
        
        /// <summary>
        /// Indicates whether a parameter is being sent into or out of a behavioral element.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(ParameterDirectionKind.In)]
        [DisplayNameAttribute("direction")]
        [DescriptionAttribute("Indicates whether a parameter is being sent into or out of a behavioral element.\n" +
            "<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        ParameterDirectionKind Direction
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the effect that executions of the owner of the Parameter have on objects passed in or out of the parameter.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("effect")]
        [DescriptionAttribute("Specifies the effect that executions of the owner of the Parameter have on object" +
            "s passed in or out of the parameter.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("effect")]
        [XmlAttributeAttribute(true)]
        Nullable<ParameterEffectKind> Effect
        {
            get;
            set;
        }
        
        /// <summary>
        /// Tells whether an output parameter may emit a value to the exclusion of the other outputs.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isException")]
        [DescriptionAttribute("Tells whether an output parameter may emit a value to the exclusion of the other " +
            "outputs.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("isException")]
        [XmlAttributeAttribute(true)]
        bool IsException
        {
            get;
            set;
        }
        
        /// <summary>
        /// Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter may post values while the behavior is executing.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isStream")]
        [DescriptionAttribute("Tells whether an input parameter may accept values while its behavior is executin" +
            "g, or whether an output parameter may post values while the behavior is executin" +
            "g.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("isStream")]
        [XmlAttributeAttribute(true)]
        bool IsStream
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("defaultValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification DefaultValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Operation owning this parameter.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("operation")]
        [DescriptionAttribute("The Operation owning this parameter.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("operation")]
        [XmlAttributeAttribute(true)]
        NMF.Interop.Uml.IOperation Operation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ParameterSets containing the parameter. See ParameterSet.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("parameterSet")]
        [DescriptionAttribute("The ParameterSets containing the parameter. See ParameterSet.\n<p>From package UML" +
            "::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("parameterSet")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("parameter")]
        [ConstantAttribute()]
        ISetExpression<IParameterSet> ParameterSet
        {
            get;
        }
        
        /// <summary>
        /// Only in and inout Parameters may have a delete effect. Only out, inout, and return Parameters may have a create effect.
        ///(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))
        ///and
        ///(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool In_and_out(object diagnostics, object context);
        
        /// <summary>
        /// An input Parameter cannot be an exception.
        ///isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_exception(object diagnostics, object context);
        
        /// <summary>
        /// A Parameter may only be associated with a Connector end within the context of a Collaboration.
        ///end->notEmpty() implies collaboration->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Connector_end(object diagnostics, object context);
        
        /// <summary>
        /// Reentrant behaviors cannot have stream Parameters.
        ///(isStream and behavior <> null) implies not behavior.isReentrant
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Reentrant_behaviors(object diagnostics, object context);
        
        /// <summary>
        /// A Parameter cannot be a stream and exception at the same time.
        ///not (isException and isStream)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Stream_and_exception(object diagnostics, object context);
        
        /// <summary>
        /// Parameters typed by DataTypes cannot have an effect.
        ///(type.oclIsKindOf(DataType)) implies (effect = null)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Object_effect(object diagnostics, object context);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSetDefault();
        
        /// <summary>
        /// Sets the default value for this parameter to the specified Boolean value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        void SetBooleanDefaultValue(bool value);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newDefault"></param>
        void SetDefault(string newDefault);
        
        /// <summary>
        /// Sets the default value for this parameter to the specified integer value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        void SetIntegerDefaultValue(int value);
        
        /// <summary>
        /// Sets the default value for this parameter to the null value.
        /// </summary>
        void SetNullDefaultValue();
        
        /// <summary>
        /// Sets the default value for this parameter to the specified real value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        void SetRealDefaultValue(double value);
        
        /// <summary>
        /// Sets the default value for this parameter to the specified string value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        void SetStringDefaultValue(string value);
        
        /// <summary>
        /// Sets the default value for this parameter to the specified unlimited natural value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        void SetUnlimitedNaturalDefaultValue(object value);
        
        /// <summary>
        /// 
        /// </summary>
        void UnsetDefault();
        
        /// <summary>
        /// Derivation for Parameter::/default
        ///result = (if self.type = String then defaultValue.stringValue() else null endif)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        string GetDefault();
    }
}

