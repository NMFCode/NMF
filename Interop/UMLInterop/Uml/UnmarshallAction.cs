//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An UnmarshallAction is an Action that retrieves the values of the StructuralFeatures of an object and places them on OutputPins.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//UnmarshallAction")]
    [DebuggerDisplayAttribute("UnmarshallAction {Name}")]
    public partial class UnmarshallAction : Action, IUnmarshallAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _structural_featureOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveStructural_featureOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _number_of_resultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNumber_of_resultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _type_ordering_and_multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveType_ordering_and_multiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_objectOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_objectOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _object_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveObject_typeOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _objectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveObjectReference);
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _object;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOutputPin> _result;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _unmarshallTypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUnmarshallTypeReference);
        
        /// <summary>
        /// The backing field for the UnmarshallType property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassifier _unmarshallType;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public UnmarshallAction()
        {
            this._result = new ObservableCompositionOrderedSet<IOutputPin>(this);
            this._result.CollectionChanging += this.ResultCollectionChanging;
            this._result.CollectionChanged += this.ResultCollectionChanged;
        }
        
        /// <summary>
        /// The InputPin that gives the object to be unmarshalled.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IInputPin old = this._object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Object", e, _objectReference);
                    this._object = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object", e, _objectReference);
                }
            }
        }
        
        /// <summary>
        /// The OutputPins on which are placed the values of the StructuralFeatures of the input object.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOutputPin> Result
        {
            get
            {
                return this._result;
            }
        }
        
        /// <summary>
        /// The type of the object to be unmarshalled.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("unmarshallType")]
        [DescriptionAttribute("The type of the object to be unmarshalled.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("UnmarshallAction")]
        [XmlElementNameAttribute("unmarshallType")]
        [XmlAttributeAttribute(true)]
        public IClassifier UnmarshallType
        {
            get
            {
                return this._unmarshallType;
            }
            set
            {
                if ((this._unmarshallType != value))
                {
                    IClassifier old = this._unmarshallType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("UnmarshallType", e, _unmarshallTypeReference);
                    this._unmarshallType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnmarshallType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnmarshallType;
                    }
                    this.OnPropertyChanged("UnmarshallType", e, _unmarshallTypeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new UnmarshallActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UnmarshallActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//UnmarshallAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The unmarshallType must have at least one StructuralFeature.
        ///unmarshallType.allAttributes()->size() >= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Structural_feature(object diagnostics, object context)
        {
            System.Func<IUnmarshallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUnmarshallAction, object, object, bool>>(_structural_featureOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method structural_feature registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _structural_featureOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _structural_featureOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _structural_featureOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveStructural_featureOperation()
        {
            return ClassInstance.LookupOperation("structural_feature");
        }
        
        /// <summary>
        /// The number of result outputPins must be the same as the number of attributes of the unmarshallType.
        ///unmarshallType.allAttributes()->size() = result->size()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Number_of_result(object diagnostics, object context)
        {
            System.Func<IUnmarshallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUnmarshallAction, object, object, bool>>(_number_of_resultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method number_of_result registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _number_of_resultOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _number_of_resultOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _number_of_resultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNumber_of_resultOperation()
        {
            return ClassInstance.LookupOperation("number_of_result");
        }
        
        /// <summary>
        /// The type, ordering and multiplicity of each attribute of the unmarshallType must be compatible with the type, ordering and multiplicity of the corresponding result OutputPin.
        ///let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in
        ///Sequence{1..result->size()}->forAll(i | 
        ///	attribute->at(i).type.conformsTo(result->at(i).type) and
        ///	attribute->at(i).isOrdered=result->at(i).isOrdered and
        ///	attribute->at(i).compatibleWith(result->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Type_ordering_and_multiplicity(object diagnostics, object context)
        {
            System.Func<IUnmarshallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUnmarshallAction, object, object, bool>>(_type_ordering_and_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method type_ordering_and_multiplicity registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _type_ordering_and_multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _type_ordering_and_multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _type_ordering_and_multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveType_ordering_and_multiplicityOperation()
        {
            return ClassInstance.LookupOperation("type_ordering_and_multiplicity");
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin is 1..1
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_object(object diagnostics, object context)
        {
            System.Func<IUnmarshallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUnmarshallAction, object, object, bool>>(_multiplicity_of_objectOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_object registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_objectOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_objectOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_objectOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_objectOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_object");
        }
        
        /// <summary>
        /// The type of the object InputPin conform to the unmarshallType.
        ///object.type.conformsTo(unmarshallType)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Object_type(object diagnostics, object context)
        {
            System.Func<IUnmarshallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUnmarshallAction, object, object, bool>>(_object_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method object_type registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _object_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _object_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _object_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveObject_typeOperation()
        {
            return ClassInstance.LookupOperation("object_type");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveObjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UnmarshallAction.ClassInstance)).Resolve("object")));
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, System.EventArgs eventArgs)
        {
            this.Object = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UnmarshallAction.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Result", e, _resultReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUnmarshallTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UnmarshallAction.ClassInstance)).Resolve("unmarshallType")));
        }
        
        /// <summary>
        /// Handles the event that the UnmarshallType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnmarshallType(object sender, System.EventArgs eventArgs)
        {
            this.UnmarshallType = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Object))
            {
                return ModelHelper.CreatePath("object");
            }
            int resultIndex = ModelHelper.IndexOfReference(this.Result, element);
            if ((resultIndex != -1))
            {
                return ModelHelper.CreatePath("result", resultIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OBJECT"))
            {
                return this.Object;
            }
            if ((reference == "RESULT"))
            {
                if ((index < this.Result.Count))
                {
                    return this.Result[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "UNMARSHALLTYPE"))
            {
                return this.UnmarshallType;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESULT"))
            {
                return this._result;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OBJECT"))
            {
                this.Object = ((IInputPin)(value));
                return;
            }
            if ((feature == "UNMARSHALLTYPE"))
            {
                this.UnmarshallType = ((IClassifier)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OBJECT"))
            {
                return new ObjectProxy(this);
            }
            if ((reference == "UNMARSHALLTYPE"))
            {
                return new UnmarshallTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._result))
            {
                return "result";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//UnmarshallAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UnmarshallAction class
        /// </summary>
        public class UnmarshallActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UnmarshallAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UnmarshallActionChildrenCollection(UnmarshallAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Result.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
                this._parent.Result.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UnmarshallAction class
        /// </summary>
        public class UnmarshallActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UnmarshallAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UnmarshallActionReferencedElementsCollection(UnmarshallAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Result.Count);
                    if ((this._parent.UnmarshallType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
                if ((this._parent.UnmarshallType == null))
                {
                    IClassifier unmarshallTypeCasted = item.As<IClassifier>();
                    if ((unmarshallTypeCasted != null))
                    {
                        this._parent.UnmarshallType = unmarshallTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
                this._parent.Result.Clear();
                this._parent.UnmarshallType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.UnmarshallType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
                if ((this._parent.UnmarshallType != null))
                {
                    array[arrayIndex] = this._parent.UnmarshallType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                if ((this._parent.UnmarshallType == item))
                {
                    this._parent.UnmarshallType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).Concat(this._parent.Result).Concat(this._parent.UnmarshallType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the object property
        /// </summary>
        private sealed class ObjectProxy : ModelPropertyChange<IUnmarshallAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjectProxy(IUnmarshallAction modelElement) : 
                    base(modelElement, "object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Object;
                }
                set
                {
                    this.ModelElement.Object = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unmarshallType property
        /// </summary>
        private sealed class UnmarshallTypeProxy : ModelPropertyChange<IUnmarshallAction, IClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnmarshallTypeProxy(IUnmarshallAction modelElement) : 
                    base(modelElement, "unmarshallType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassifier Value
            {
                get
                {
                    return this.ModelElement.UnmarshallType;
                }
                set
                {
                    this.ModelElement.UnmarshallType = value;
                }
            }
        }
    }
}

