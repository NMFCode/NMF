//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ElementImport identifies a NamedElement in a Namespace other than the one that owns that NamedElement and allows the NamedElement to be referenced using an unqualified name in the Namespace owning the ElementImport.
    ///<p>From package UML::CommonStructure.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ElementImport")]
    public partial class ElementImport : DirectedRelationship, IElementImport, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _imported_element_is_publicOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveImported_element_is_publicOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _visibility_public_or_privateOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveVisibility_public_or_privateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getNameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetNameOperation);
        
        /// <summary>
        /// The backing field for the Alias property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _alias;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _aliasAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAliasAttribute);
        
        /// <summary>
        /// The backing field for the Visibility property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private VisibilityKind _visibility = VisibilityKind.Public;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _visibilityAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveVisibilityAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _importedElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveImportedElementReference);
        
        /// <summary>
        /// The backing field for the ImportedElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPackageableElement _importedElement;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _importingNamespaceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveImportingNamespaceReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DisplayNameAttribute("alias")]
        [DescriptionAttribute(@"Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.
<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("alias")]
        [XmlAttributeAttribute(true)]
        public string Alias
        {
            get
            {
                return this._alias;
            }
            set
            {
                if ((this._alias != value))
                {
                    string old = this._alias;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Alias", e, _aliasAttribute);
                    this._alias = value;
                    this.OnPropertyChanged("Alias", e, _aliasAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DefaultValueAttribute(VisibilityKind.Public)]
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute(@"Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.
<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        public VisibilityKind Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                if ((this._visibility != value))
                {
                    VisibilityKind old = this._visibility;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Visibility", e, _visibilityAttribute);
                    this._visibility = value;
                    this.OnPropertyChanged("Visibility", e, _visibilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the PackageableElement whose name is to be added to a Namespace.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DisplayNameAttribute("importedElement")]
        [DescriptionAttribute("Specifies the PackageableElement whose name is to be added to a Namespace.\n<p>Fro" +
            "m package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("importedElement")]
        [XmlAttributeAttribute(true)]
        public IPackageableElement ImportedElement
        {
            get
            {
                return this._importedElement;
            }
            set
            {
                if ((this._importedElement != value))
                {
                    IPackageableElement old = this._importedElement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ImportedElement", e, _importedElementReference);
                    this._importedElement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImportedElement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImportedElement;
                    }
                    this.OnPropertyChanged("ImportedElement", e, _importedElementReference);
                }
            }
        }
        
        /// <summary>
        /// Specifies the Namespace that imports a PackageableElement from another Namespace.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("importingNamespace")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("elementImport")]
        public NMF.Interop.Uml.INamespace ImportingNamespace
        {
            get
            {
                return ModelHelper.CastAs<NMF.Interop.Uml.INamespace>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElementImportReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ElementImport")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// An importedElement has either public visibility or no visibility at all.
        ///importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Imported_element_is_public(object diagnostics, object context)
        {
            System.Func<IElementImport, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElementImport, object, object, bool>>(_imported_element_is_publicOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method imported_element_is_public registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _imported_element_is_publicOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _imported_element_is_publicOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _imported_element_is_publicOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveImported_element_is_publicOperation()
        {
            return ClassInstance.LookupOperation("imported_element_is_public");
        }
        
        /// <summary>
        /// The visibility of an ElementImport is either public or private.
        ///visibility = VisibilityKind::public or visibility = VisibilityKind::private
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Visibility_public_or_private(object diagnostics, object context)
        {
            System.Func<IElementImport, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElementImport, object, object, bool>>(_visibility_public_or_privateOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method visibility_public_or_private registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _visibility_public_or_privateOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _visibility_public_or_privateOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _visibility_public_or_privateOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveVisibility_public_or_privateOperation()
        {
            return ClassInstance.LookupOperation("visibility_public_or_private");
        }
        
        /// <summary>
        /// The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.
        ///result = (if alias->notEmpty() then
        ///  alias
        ///else
        ///  importedElement.name
        ///endif)
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public string GetName()
        {
            System.Func<IElementImport, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IElementImport, string>>(_getNameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getName registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getNameOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getNameOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getNameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetNameOperation()
        {
            return ClassInstance.LookupOperation("getName");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAliasAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ElementImport.ClassInstance)).Resolve("alias")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveVisibilityAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ElementImport.ClassInstance)).Resolve("visibility")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveImportedElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ElementImport.ClassInstance)).Resolve("importedElement")));
        }
        
        /// <summary>
        /// Handles the event that the ImportedElement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImportedElement(object sender, System.EventArgs eventArgs)
        {
            this.ImportedElement = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveImportingNamespaceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ElementImport.ClassInstance)).Resolve("importingNamespace")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Uml.INamespace oldImportingNamespace = ModelHelper.CastAs<NMF.Interop.Uml.INamespace>(oldParent);
            NMF.Interop.Uml.INamespace newImportingNamespace = ModelHelper.CastAs<NMF.Interop.Uml.INamespace>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldImportingNamespace, newImportingNamespace);
            this.OnPropertyChanging("ImportingNamespace", e, _importingNamespaceReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Uml.INamespace oldImportingNamespace = ModelHelper.CastAs<NMF.Interop.Uml.INamespace>(oldParent);
            NMF.Interop.Uml.INamespace newImportingNamespace = ModelHelper.CastAs<NMF.Interop.Uml.INamespace>(newParent);
            if ((oldImportingNamespace != null))
            {
                oldImportingNamespace.ElementImport.Remove(this);
            }
            if ((newImportingNamespace != null))
            {
                newImportingNamespace.ElementImport.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldImportingNamespace, newImportingNamespace);
            this.OnPropertyChanged("ImportingNamespace", e, _importingNamespaceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "IMPORTEDELEMENT"))
            {
                return this.ImportedElement;
            }
            if ((reference == "IMPORTINGNAMESPACE"))
            {
                return this.ImportingNamespace;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ALIAS"))
            {
                return this.Alias;
            }
            if ((attribute == "VISIBILITY"))
            {
                return this.Visibility;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "IMPORTEDELEMENT"))
            {
                this.ImportedElement = ((IPackageableElement)(value));
                return;
            }
            if ((feature == "IMPORTINGNAMESPACE"))
            {
                this.ImportingNamespace = ((NMF.Interop.Uml.INamespace)(value));
                return;
            }
            if ((feature == "ALIAS"))
            {
                this.Alias = ((string)(value));
                return;
            }
            if ((feature == "VISIBILITY"))
            {
                this.Visibility = ((VisibilityKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ALIAS"))
            {
                return new AliasProxy(this);
            }
            if ((attribute == "VISIBILITY"))
            {
                return Observable.Box(new VisibilityProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IMPORTEDELEMENT"))
            {
                return new ImportedElementProxy(this);
            }
            if ((reference == "IMPORTINGNAMESPACE"))
            {
                return new ImportingNamespaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ElementImport")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ElementImport class
        /// </summary>
        public class ElementImportReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ElementImport _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElementImportReferencedElementsCollection(ElementImport parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ImportedElement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImportingNamespace != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ImportedElement == null))
                {
                    IPackageableElement importedElementCasted = item.As<IPackageableElement>();
                    if ((importedElementCasted != null))
                    {
                        this._parent.ImportedElement = importedElementCasted;
                        return;
                    }
                }
                if ((this._parent.ImportingNamespace == null))
                {
                    NMF.Interop.Uml.INamespace importingNamespaceCasted = item.As<NMF.Interop.Uml.INamespace>();
                    if ((importingNamespaceCasted != null))
                    {
                        this._parent.ImportingNamespace = importingNamespaceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ImportedElement = null;
                this._parent.ImportingNamespace = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ImportedElement))
                {
                    return true;
                }
                if ((item == this._parent.ImportingNamespace))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ImportedElement != null))
                {
                    array[arrayIndex] = this._parent.ImportedElement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImportingNamespace != null))
                {
                    array[arrayIndex] = this._parent.ImportingNamespace;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ImportedElement == item))
                {
                    this._parent.ImportedElement = null;
                    return true;
                }
                if ((this._parent.ImportingNamespace == item))
                {
                    this._parent.ImportingNamespace = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ImportedElement).Concat(this._parent.ImportingNamespace).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the alias property
        /// </summary>
        private sealed class AliasProxy : ModelPropertyChange<IElementImport, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AliasProxy(IElementImport modelElement) : 
                    base(modelElement, "alias")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Alias;
                }
                set
                {
                    this.ModelElement.Alias = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the visibility property
        /// </summary>
        private sealed class VisibilityProxy : ModelPropertyChange<IElementImport, VisibilityKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VisibilityProxy(IElementImport modelElement) : 
                    base(modelElement, "visibility")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override VisibilityKind Value
            {
                get
                {
                    return this.ModelElement.Visibility;
                }
                set
                {
                    this.ModelElement.Visibility = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the importedElement property
        /// </summary>
        private sealed class ImportedElementProxy : ModelPropertyChange<IElementImport, IPackageableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImportedElementProxy(IElementImport modelElement) : 
                    base(modelElement, "importedElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackageableElement Value
            {
                get
                {
                    return this.ModelElement.ImportedElement;
                }
                set
                {
                    this.ModelElement.ImportedElement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the importingNamespace property
        /// </summary>
        private sealed class ImportingNamespaceProxy : ModelPropertyChange<IElementImport, NMF.Interop.Uml.INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImportingNamespaceProxy(IElementImport modelElement) : 
                    base(modelElement, "importingNamespace")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.INamespace Value
            {
                get
                {
                    return this.ModelElement.ImportingNamespace;
                }
                set
                {
                    this.ModelElement.ImportingNamespace = value;
                }
            }
        }
    }
}

