//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for TemplateSignature
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TemplateSignature))]
    [XmlDefaultImplementationTypeAttribute(typeof(TemplateSignature))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateSignature")]
    public interface ITemplateSignature : IModelElement, IElement
    {
        
        /// <summary>
        /// The ordered set of all formal TemplateParameters for this TemplateSignature.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("parameter")]
        [DescriptionAttribute("The ordered set of all formal TemplateParameters for this TemplateSignature.\n<p>F" +
            "rom package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateSignature")]
        [XmlElementNameAttribute("parameter")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<ITemplateParameter> Parameter
        {
            get;
        }
        
        /// <summary>
        /// The TemplateableElement that owns this TemplateSignature.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("template")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedTemplateSignature")]
        ITemplateableElement Template
        {
            get;
            set;
        }
        
        /// <summary>
        /// The formal parameters that are owned by this TemplateSignature.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("signature")]
        [ConstantAttribute()]
        IOrderedSetExpression<ITemplateParameter> OwnedParameter
        {
            get;
        }
        
        /// <summary>
        /// Parameters must own the ParameterableElements they parameter or those ParameterableElements must be owned by the TemplateableElement being templated.
        ///template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Own_elements(object diagnostics, object context);
        
        /// <summary>
        /// The names of the parameters of a TemplateSignature are unique.
        ///parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies
        ///   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Unique_parameters(object diagnostics, object context);
    }
}

