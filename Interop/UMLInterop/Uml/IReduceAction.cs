//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ReduceAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReduceAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReduceAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReduceAction")]
    public interface IReduceAction : IModelElement, IAction
    {
        
        /// <summary>
        /// Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("Indicates whether the order of the input collection should determine the order in" +
            " which the reducer Behavior is applied to its elements.\n<p>From package UML::Act" +
            "ions.</p>")]
        [CategoryAttribute("ReduceAction")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        bool IsOrdered
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InputPin that provides the collection to be reduced.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("collection")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPin Collection
        {
            get;
            set;
        }
        
        /// <summary>
        /// A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("reducer")]
        [DescriptionAttribute("A Behavior that is repreatedly applied to two elements of the input collection to" +
            " produce a value that is of the same type as elements of the collection.\n<p>From" +
            " package UML::Actions.</p>")]
        [CategoryAttribute("ReduceAction")]
        [XmlElementNameAttribute("reducer")]
        [XmlAttributeAttribute(true)]
        IBehavior Reducer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The output pin on which the result value is placed.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IOutputPin Result
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reducer Behavior must have two input ownedParameters and one output ownedParameter, where the type of the output Parameter and the type of elements of the input collection conform to the types of the input Parameters.
        ///let inputs: OrderedSet(Parameter) = reducer.inputParameters() in
        ///let outputs: OrderedSet(Parameter) = reducer.outputParameters() in
        ///inputs-&gt;size()=2 and outputs-&gt;size()=1 and
        ///inputs.type-&gt;forAll(t | 
        ///	outputs.type-&gt;forAll(conformsTo(t)) and 
        ///	-- Note that the following only checks the case when the collection is via multiple tokens.
        ///	collection.upperBound()&gt;1 implies collection.type.conformsTo(t))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Reducer_inputs_output(object diagnostics, object context);
        
        /// <summary>
        /// The type of the collection InputPin must be a collection.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Input_type_is_collection(object diagnostics, object context);
        
        /// <summary>
        /// The type of the output of the reducer Behavior must conform to the type of the result OutputPin.
        ///reducer.outputParameters().type-&gt;forAll(conformsTo(result.type))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Output_types_are_compatible(object diagnostics, object context);
    }
}
