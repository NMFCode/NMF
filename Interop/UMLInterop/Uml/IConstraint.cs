//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Constraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Constraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(Constraint))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Constraint")]
    public interface IConstraint : IModelElement, IPackageableElement
    {
        
        /// <summary>
        /// The ordered set of Elements referenced by this Constraint.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("constrainedElement")]
        [DescriptionAttribute("The ordered set of Elements referenced by this Constraint.\n<p>From package UML::C" +
            "ommonStructure.</p>")]
        [CategoryAttribute("Constraint")]
        [XmlElementNameAttribute("constrainedElement")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<IElement> ConstrainedElement
        {
            get;
        }
        
        /// <summary>
        /// Specifies the Namespace that owns the Constraint.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("context")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedRule")]
        NMF.Interop.Uml.INamespace Context
        {
            get;
            set;
        }
        
        /// <summary>
        /// A condition that must be true when evaluated in order for the Constraint to be satisfied.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("specification")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Specification
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ValueSpecification for a Constraint must evaluate to a Boolean value.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Boolean_value(object diagnostics, object context);
        
        /// <summary>
        /// Evaluating the ValueSpecification for a Constraint must not have side effects.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool No_side_effects(object diagnostics, object context);
        
        /// <summary>
        /// A Constraint cannot be applied to itself.
        ///not constrainedElement->includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_apply_to_self(object diagnostics, object context);
    }
}

