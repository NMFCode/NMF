//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for DeploymentSpecification
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DeploymentSpecification))]
    [XmlDefaultImplementationTypeAttribute(typeof(DeploymentSpecification))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//DeploymentSpecification")]
    public interface IDeploymentSpecification : IModelElement, IArtifact
    {
        
        /// <summary>
        /// The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DisplayNameAttribute("deploymentLocation")]
        [DescriptionAttribute("The location where an Artifact is deployed onto a Node. This is typically a \'dire" +
            "ctory\' or \'memory address.\'\n<p>From package UML::Deployments.</p>")]
        [CategoryAttribute("DeploymentSpecification")]
        [XmlElementNameAttribute("deploymentLocation")]
        [XmlAttributeAttribute(true)]
        string DeploymentLocation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The location where a component Artifact executes. This may be a local or remote location.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DisplayNameAttribute("executionLocation")]
        [DescriptionAttribute("The location where a component Artifact executes. This may be a local or remote l" +
            "ocation.\n<p>From package UML::Deployments.</p>")]
        [CategoryAttribute("DeploymentSpecification")]
        [XmlElementNameAttribute("executionLocation")]
        [XmlAttributeAttribute(true)]
        string ExecutionLocation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The deployment with which the DeploymentSpecification is associated.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("deployment")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("configuration")]
        IDeployment Deployment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.
        ///deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Deployment_target(object diagnostics, object context);
        
        /// <summary>
        /// The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e., the configured components).
        ///deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Deployed_elements(object diagnostics, object context);
    }
}

