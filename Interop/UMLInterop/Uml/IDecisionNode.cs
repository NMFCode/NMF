//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for DecisionNode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DecisionNode))]
    [XmlDefaultImplementationTypeAttribute(typeof(DecisionNode))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//DecisionNode")]
    public interface IDecisionNode : IModelElement, IControlNode
    {
        
        /// <summary>
        /// A Behavior that is executed to provide an input to guard ValueSpecifications on ActivityEdges outgoing from the DecisionNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("decisionInput")]
        [DescriptionAttribute("A Behavior that is executed to provide an input to guard ValueSpecifications on A" +
            "ctivityEdges outgoing from the DecisionNode.\n<p>From package UML::Activities.</p" +
            ">")]
        [CategoryAttribute("DecisionNode")]
        [XmlElementNameAttribute("decisionInput")]
        [XmlAttributeAttribute(true)]
        IBehavior DecisionInput
        {
            get;
            set;
        }
        
        /// <summary>
        /// An additional ActivityEdge incoming to the DecisionNode that provides a decision input value for the guards ValueSpecifications on ActivityEdges outgoing from the DecisionNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("decisionInputFlow")]
        [DescriptionAttribute("An additional ActivityEdge incoming to the DecisionNode that provides a decision " +
            "input value for the guards ValueSpecifications on ActivityEdges outgoing from th" +
            "e DecisionNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("DecisionNode")]
        [XmlElementNameAttribute("decisionInputFlow")]
        [XmlAttributeAttribute(true)]
        IObjectFlow DecisionInputFlow
        {
            get;
            set;
        }
        
        /// <summary>
        /// If the DecisionNode has no decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has no in parameters.
        ///(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies
        ///   decisionInput.inputParameters()->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Zero_input_parameters(object diagnostics, object context);
        
        /// <summary>
        /// The ActivityEdges incoming to and outgoing from a DecisionNode, other than the decisionInputFlow (if any), must be either all ObjectFlows or all ControlFlows.
        ///let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in
        ///let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in
        ///allRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))
        ///
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Edges(object diagnostics, object context);
        
        /// <summary>
        /// The decisionInputFlow of a DecisionNode must be an incoming ActivityEdge of the DecisionNode.
        ///incoming->includes(decisionInputFlow)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Decision_input_flow_incoming(object diagnostics, object context);
        
        /// <summary>
        /// If the DecisionNode has a decisionInputFlow and an second incoming ObjectFlow, then any decisionInput has two in Parameters, the first of which has a type that is the same as or a supertype of the type of object tokens offered on the non-decisionInputFlow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.
        ///(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
        ///	decisionInput.inputParameters()->size()=2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Two_input_parameters(object diagnostics, object context);
        
        /// <summary>
        /// A DecisionNode has one or two incoming ActivityEdges and at least one outgoing ActivityEdge.
        ///(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Incoming_outgoing_edges(object diagnostics, object context);
        
        /// <summary>
        /// If the DecisionNode has a decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.
        ///(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies
        ///	decisionInput.inputParameters()->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Incoming_control_one_input_parameter(object diagnostics, object context);
        
        /// <summary>
        /// A decisionInput Behavior has no out parameters, no inout parameters, and one return parameter.
        ///decisionInput<>null implies 
        ///  (decisionInput.ownedParameter->forAll(par | 
        ///     par.direction <> ParameterDirectionKind::out and 
        ///     par.direction <> ParameterDirectionKind::inout ) and
        ///   decisionInput.ownedParameter->one(par | 
        ///     par.direction <> ParameterDirectionKind::return))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Parameters(object diagnostics, object context);
        
        /// <summary>
        /// If the DecisionNode has no decisionInputFlow and an incoming ObjectFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming ObjectFlow.
        ///(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
        ///	decisionInput.inputParameters()->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Incoming_object_one_input_parameter(object diagnostics, object context);
    }
}

