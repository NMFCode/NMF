//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for PackageImport
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PackageImport))]
    [XmlDefaultImplementationTypeAttribute(typeof(PackageImport))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//PackageImport")]
    public interface IPackageImport : IModelElement, IDirectedRelationship
    {
        
        /// <summary>
        /// Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(VisibilityKind.Public)]
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute(@"Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.
<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("PackageImport")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        VisibilityKind Visibility
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Package whose members are imported into a Namespace.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("importedPackage")]
        [DescriptionAttribute("Specifies the Package whose members are imported into a Namespace.\n<p>From packag" +
            "e UML::CommonStructure.</p>")]
        [CategoryAttribute("PackageImport")]
        [XmlElementNameAttribute("importedPackage")]
        [XmlAttributeAttribute(true)]
        IPackage ImportedPackage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Namespace that imports the members from a Package.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("importingNamespace")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("packageImport")]
        NMF.Interop.Uml.INamespace ImportingNamespace
        {
            get;
            set;
        }
        
        /// <summary>
        /// The visibility of a PackageImport is either public or private.
        ///visibility = VisibilityKind::public or visibility = VisibilityKind::private
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Public_or_private(object diagnostics, object context);
    }
}
