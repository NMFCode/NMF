//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for FunctionBehavior
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FunctionBehavior))]
    [XmlDefaultImplementationTypeAttribute(typeof(FunctionBehavior))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//FunctionBehavior")]
    public interface IFunctionBehavior : IModelElement, IOpaqueBehavior
    {
        
        /// <summary>
        /// A FunctionBehavior has at least one output Parameter.
        ///self.ownedParameter->
        ///  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool One_output_parameter(object diagnostics, object context);
        
        /// <summary>
        /// The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes.
        ///ownedParameter->forAll(p | p.type <> null and
        ///  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Types_of_parameters(object diagnostics, object context);
        
        /// <summary>
        /// The hasAllDataTypeAttributes query tests whether the types of the attributes of the given DataType are all DataTypes, and similarly for all those DataTypes.
        ///result = (d.ownedAttribute->forAll(a |
        ///    a.type.oclIsKindOf(DataType) and
        ///      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        /// <param name="d"></param>
        bool HasAllDataTypeAttributes(NMF.Interop.Uml.IDataType d);
    }
}

