//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Region")]
    [DebuggerDisplayAttribute("Region {Name}")]
    public partial class Region : Namespace, IRegion, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deep_history_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeep_history_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _shallow_history_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveShallow_history_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _ownedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOwnedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _initial_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInitial_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _belongsToPSMOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBelongsToPSMOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _containingStateMachineOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveContainingStateMachineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefinitionContextOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefinitionContextOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _extendedRegionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExtendedRegionReference);
        
        /// <summary>
        /// The backing field for the ExtendedRegion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IRegion _extendedRegion;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _stateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStateReference);
        
        /// <summary>
        /// The backing field for the State property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IState _state;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _stateMachineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStateMachineReference);
        
        /// <summary>
        /// The backing field for the StateMachine property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStateMachine _stateMachine;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _transitionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTransitionReference);
        
        /// <summary>
        /// The backing field for the Transition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private RegionTransitionCollection _transition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subvertexReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubvertexReference);
        
        /// <summary>
        /// The backing field for the Subvertex property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private RegionSubvertexCollection _subvertex;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefinition_consistentOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefinition_consistentOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _non_leaf_redefinitionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNon_leaf_redefinitionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefinition_context_validOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefinition_context_validOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isConsistentWithOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsConsistentWithOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isRedefinitionContextValidOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsRedefinitionContextValidOperation);
        
        /// <summary>
        /// The backing field for the IsLeaf property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isLeaf = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isLeafAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsLeafAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Region()
        {
            this._transition = new RegionTransitionCollection(this);
            this._transition.CollectionChanging += this.TransitionCollectionChanging;
            this._transition.CollectionChanged += this.TransitionCollectionChanged;
            this._subvertex = new RegionSubvertexCollection(this);
            this._subvertex.CollectionChanging += this.SubvertexCollectionChanging;
            this._subvertex.CollectionChanged += this.SubvertexCollectionChanged;
        }
        
        /// <summary>
        /// The region of which this region is an extension.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DisplayNameAttribute("extendedRegion")]
        [DescriptionAttribute("The region of which this region is an extension.\n<p>From package UML::StateMachin" +
            "es.</p>")]
        [CategoryAttribute("Region")]
        [XmlElementNameAttribute("extendedRegion")]
        [XmlAttributeAttribute(true)]
        public IRegion ExtendedRegion
        {
            get
            {
                return this._extendedRegion;
            }
            set
            {
                if ((this._extendedRegion != value))
                {
                    IRegion old = this._extendedRegion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ExtendedRegion", e, _extendedRegionReference);
                    this._extendedRegion = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetExtendedRegion;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetExtendedRegion;
                    }
                    this.OnPropertyChanged("ExtendedRegion", e, _extendedRegionReference);
                }
            }
        }
        
        /// <summary>
        /// The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("state")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("region")]
        public IState State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    IState old = this._state;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("State", e, _stateReference);
                    this._state = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Region.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Region.Add(this);
                    }
                    this.OnPropertyChanged("State", e, _stateReference);
                }
            }
        }
        
        /// <summary>
        /// The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("stateMachine")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("region")]
        public IStateMachine StateMachine
        {
            get
            {
                return this._stateMachine;
            }
            set
            {
                if ((this._stateMachine != value))
                {
                    IStateMachine old = this._stateMachine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("StateMachine", e, _stateMachineReference);
                    this._stateMachine = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Region.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Region.Add(this);
                    }
                    this.OnPropertyChanged("StateMachine", e, _stateMachineReference);
                }
            }
        }
        
        /// <summary>
        /// The set of Transitions owned by the Region.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("transition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("container")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITransition> Transition
        {
            get
            {
                return this._transition;
            }
        }
        
        /// <summary>
        /// The set of Vertices that are owned by this Region.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("subvertex")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("container")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IVertex> Subvertex
        {
            get
            {
                return this._subvertex;
            }
        }
        
        /// <summary>
        /// Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isLeaf")]
        [DescriptionAttribute("Indicates whether it is possible to further redefine a RedefinableElement. If the" +
            " value is true, then it is not possible to further redefine the RedefinableEleme" +
            "nt.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("RedefinableElement")]
        [XmlElementNameAttribute("isLeaf")]
        [XmlAttributeAttribute(true)]
        public bool IsLeaf
        {
            get
            {
                return this._isLeaf;
            }
            set
            {
                if ((this._isLeaf != value))
                {
                    bool old = this._isLeaf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsLeaf", e, _isLeafAttribute);
                    this._isLeaf = value;
                    this.OnPropertyChanged("IsLeaf", e, _isLeafAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RegionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Region")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A Region can have at most one deep history Vertex.
        ///self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
        ///   select(kind = PseudostateKind::deepHistory)->size() <= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Deep_history_vertex(object diagnostics, object context)
        {
            System.Func<IRegion, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, object, object, bool>>(_deep_history_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method deep_history_vertex registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deep_history_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deep_history_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deep_history_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeep_history_vertexOperation()
        {
            return ClassInstance.LookupOperation("deep_history_vertex");
        }
        
        /// <summary>
        /// A Region can have at most one shallow history Vertex.
        ///subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
        ///  select(kind = PseudostateKind::shallowHistory)->size() <= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Shallow_history_vertex(object diagnostics, object context)
        {
            System.Func<IRegion, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, object, object, bool>>(_shallow_history_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method shallow_history_vertex registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _shallow_history_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _shallow_history_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _shallow_history_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveShallow_history_vertexOperation()
        {
            return ClassInstance.LookupOperation("shallow_history_vertex");
        }
        
        /// <summary>
        /// If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.
        ///(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Owned(object diagnostics, object context)
        {
            System.Func<IRegion, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, object, object, bool>>(_ownedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method owned registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _ownedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _ownedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _ownedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOwnedOperation()
        {
            return ClassInstance.LookupOperation("owned");
        }
        
        /// <summary>
        /// A Region can have at most one initial Vertex.
        ///self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
        ///  select(kind = PseudostateKind::initial)->size() <= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Initial_vertex(object diagnostics, object context)
        {
            System.Func<IRegion, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, object, object, bool>>(_initial_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method initial_vertex registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _initial_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _initial_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _initial_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInitial_vertexOperation()
        {
            return ClassInstance.LookupOperation("initial_vertex");
        }
        
        /// <summary>
        /// The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine.
        ///result = (if  stateMachine <> null 
        ///then
        ///  stateMachine.oclIsKindOf(ProtocolStateMachine)
        ///else 
        ///  state <> null  implies  state.container.belongsToPSM()
        ///endif )
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public bool BelongsToPSM()
        {
            System.Func<IRegion, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, bool>>(_belongsToPSMOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method belongsToPSM registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _belongsToPSMOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _belongsToPSMOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _belongsToPSMOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBelongsToPSMOperation()
        {
            return ClassInstance.LookupOperation("belongsToPSM");
        }
        
        /// <summary>
        /// The operation containingStateMachine() returns the StateMachine in which this Region is defined.
        ///result = (if stateMachine = null 
        ///then
        ///  state.containingStateMachine()
        ///else
        ///  stateMachine
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public IStateMachine ContainingStateMachine()
        {
            System.Func<IRegion, IStateMachine> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, IStateMachine>>(_containingStateMachineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method containingStateMachine registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _containingStateMachineOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _containingStateMachineOperation.Value, e));
            IStateMachine result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _containingStateMachineOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveContainingStateMachineOperation()
        {
            return ClassInstance.LookupOperation("containingStateMachine");
        }
        
        /// <summary>
        /// The redefinition context of a Region is the nearest containing StateMachine.
        ///result = (let sm : StateMachine = containingStateMachine() in
        ///if sm._'context' = null or sm.general->notEmpty() then
        ///  sm
        ///else
        ///  sm._'context'
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public IClassifier RedefinitionContext()
        {
            System.Func<IRegion, IClassifier> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRegion, IClassifier>>(_redefinitionContextOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefinitionContext registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefinitionContextOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefinitionContextOperation.Value, e));
            IClassifier result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefinitionContextOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefinitionContextOperation()
        {
            return ClassInstance.LookupOperation("redefinitionContext");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExtendedRegionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Region.ClassInstance)).Resolve("extendedRegion")));
        }
        
        /// <summary>
        /// Handles the event that the ExtendedRegion property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExtendedRegion(object sender, System.EventArgs eventArgs)
        {
            this.ExtendedRegion = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Region.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Handles the event that the State property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetState(object sender, System.EventArgs eventArgs)
        {
            this.State = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStateMachineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Region.ClassInstance)).Resolve("stateMachine")));
        }
        
        /// <summary>
        /// Handles the event that the StateMachine property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStateMachine(object sender, System.EventArgs eventArgs)
        {
            this.StateMachine = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTransitionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Region.ClassInstance)).Resolve("transition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Transition", e, _transitionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransitionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transition", e, _transitionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubvertexReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Region.ClassInstance)).Resolve("subvertex")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Subvertex property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubvertexCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Subvertex", e, _subvertexReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Subvertex property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubvertexCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Subvertex", e, _subvertexReference);
        }
        
        /// <summary>
        /// A redefining element must be consistent with each redefined element.
        ///redefinedElement->forAll(re | re.isConsistentWith(self))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefinition_consistent(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_redefinition_consistentOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefinition_consistent registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefinition_consistentOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefinition_consistentOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefinition_consistentOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefinition_consistentOperation()
        {
            return ClassInstance.LookupOperation("redefinition_consistent");
        }
        
        /// <summary>
        /// A RedefinableElement can only redefine non-leaf RedefinableElements.
        ///redefinedElement->forAll(re | not re.isLeaf)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Non_leaf_redefinition(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_non_leaf_redefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method non_leaf_redefinition registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _non_leaf_redefinitionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _non_leaf_redefinitionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _non_leaf_redefinitionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNon_leaf_redefinitionOperation()
        {
            return ClassInstance.LookupOperation("non_leaf_redefinition");
        }
        
        /// <summary>
        /// At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.
        ///redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefinition_context_valid(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_redefinition_context_validOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefinition_context_valid registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefinition_context_validOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefinition_context_validOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefinition_context_validOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefinition_context_validOperation()
        {
            return ClassInstance.LookupOperation("redefinition_context_valid");
        }
        
        /// <summary>
        /// The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.
        ///redefiningElement.isRedefinitionContextValid(self)
        ///result = (false)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        /// <param name="redefiningElement"></param>
        public bool IsConsistentWith(IRedefinableElement redefiningElement)
        {
            System.Func<IRedefinableElement, IRedefinableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, IRedefinableElement, bool>>(_isConsistentWithOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isConsistentWith registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isConsistentWithOperation.Value, redefiningElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isConsistentWithOperation.Value, e));
            bool result = handler.Invoke(this, redefiningElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isConsistentWithOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsConsistentWithOperation()
        {
            return ClassInstance.LookupOperation("isConsistentWith");
        }
        
        /// <summary>
        /// The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.
        ///result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))
        ///<p>From package UML::Classification.</p>
        /// </summary>
        /// <param name="redefinedElement"></param>
        public bool IsRedefinitionContextValid(IRedefinableElement redefinedElement)
        {
            System.Func<IRedefinableElement, IRedefinableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, IRedefinableElement, bool>>(_isRedefinitionContextValidOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isRedefinitionContextValid registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isRedefinitionContextValidOperation.Value, redefinedElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isRedefinitionContextValidOperation.Value, e));
            bool result = handler.Invoke(this, redefinedElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isRedefinitionContextValidOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsRedefinitionContextValidOperation()
        {
            return ClassInstance.LookupOperation("isRedefinitionContextValid");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsLeafAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.RedefinableElement.ClassInstance)).Resolve("isLeaf")));
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int transitionIndex = ModelHelper.IndexOfReference(this.Transition, element);
            if ((transitionIndex != -1))
            {
                return ModelHelper.CreatePath("transition", transitionIndex);
            }
            int subvertexIndex = ModelHelper.IndexOfReference(this.Subvertex, element);
            if ((subvertexIndex != -1))
            {
                return ModelHelper.CreatePath("subvertex", subvertexIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EXTENDEDREGION"))
            {
                return this.ExtendedRegion;
            }
            if ((reference == "STATE"))
            {
                return this.State;
            }
            if ((reference == "STATEMACHINE"))
            {
                return this.StateMachine;
            }
            if ((reference == "TRANSITION"))
            {
                if ((index < this.Transition.Count))
                {
                    return this.Transition[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SUBVERTEX"))
            {
                if ((index < this.Subvertex.Count))
                {
                    return this.Subvertex[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISLEAF"))
            {
                return this.IsLeaf;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSITION"))
            {
                return this._transition;
            }
            if ((feature == "SUBVERTEX"))
            {
                return this._subvertex;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EXTENDEDREGION"))
            {
                this.ExtendedRegion = ((IRegion)(value));
                return;
            }
            if ((feature == "STATE"))
            {
                this.State = ((IState)(value));
                return;
            }
            if ((feature == "STATEMACHINE"))
            {
                this.StateMachine = ((IStateMachine)(value));
                return;
            }
            if ((feature == "ISLEAF"))
            {
                this.IsLeaf = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISLEAF"))
            {
                return Observable.Box(new IsLeafProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EXTENDEDREGION"))
            {
                return new ExtendedRegionProxy(this);
            }
            if ((reference == "STATE"))
            {
                return new StateProxy(this);
            }
            if ((reference == "STATEMACHINE"))
            {
                return new StateMachineProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._transition))
            {
                return "transition";
            }
            if ((container == this._subvertex))
            {
                return "subvertex";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Region")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Region class
        /// </summary>
        public class RegionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Region _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegionChildrenCollection(Region parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Transition.Count);
                    count = (count + this._parent.Subvertex.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Transition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Subvertex.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Transition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Subvertex.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransition transitionCasted = item.As<ITransition>();
                if ((transitionCasted != null))
                {
                    this._parent.Transition.Add(transitionCasted);
                }
                IVertex subvertexCasted = item.As<IVertex>();
                if ((subvertexCasted != null))
                {
                    this._parent.Subvertex.Add(subvertexCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Transition.Clear();
                this._parent.Subvertex.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Transition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Subvertex.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> transitionEnumerator = this._parent.Transition.GetEnumerator();
                try
                {
                    for (
                    ; transitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> subvertexEnumerator = this._parent.Subvertex.GetEnumerator();
                try
                {
                    for (
                    ; subvertexEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subvertexEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subvertexEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transition.Remove(transitionItem)))
                {
                    return true;
                }
                IVertex vertexItem = item.As<IVertex>();
                if (((vertexItem != null) 
                            && this._parent.Subvertex.Remove(vertexItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Transition).Concat(this._parent.Subvertex).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Region class
        /// </summary>
        public class RegionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Region _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegionReferencedElementsCollection(Region parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ExtendedRegion != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.State != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StateMachine != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Transition.Count);
                    count = (count + this._parent.Subvertex.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Transition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Subvertex.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Transition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Subvertex.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ExtendedRegion == null))
                {
                    IRegion extendedRegionCasted = item.As<IRegion>();
                    if ((extendedRegionCasted != null))
                    {
                        this._parent.ExtendedRegion = extendedRegionCasted;
                        return;
                    }
                }
                if ((this._parent.State == null))
                {
                    IState stateCasted = item.As<IState>();
                    if ((stateCasted != null))
                    {
                        this._parent.State = stateCasted;
                        return;
                    }
                }
                if ((this._parent.StateMachine == null))
                {
                    IStateMachine stateMachineCasted = item.As<IStateMachine>();
                    if ((stateMachineCasted != null))
                    {
                        this._parent.StateMachine = stateMachineCasted;
                        return;
                    }
                }
                ITransition transitionCasted = item.As<ITransition>();
                if ((transitionCasted != null))
                {
                    this._parent.Transition.Add(transitionCasted);
                }
                IVertex subvertexCasted = item.As<IVertex>();
                if ((subvertexCasted != null))
                {
                    this._parent.Subvertex.Add(subvertexCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ExtendedRegion = null;
                this._parent.State = null;
                this._parent.StateMachine = null;
                this._parent.Transition.Clear();
                this._parent.Subvertex.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ExtendedRegion))
                {
                    return true;
                }
                if ((item == this._parent.State))
                {
                    return true;
                }
                if ((item == this._parent.StateMachine))
                {
                    return true;
                }
                if (this._parent.Transition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Subvertex.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ExtendedRegion != null))
                {
                    array[arrayIndex] = this._parent.ExtendedRegion;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.State != null))
                {
                    array[arrayIndex] = this._parent.State;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StateMachine != null))
                {
                    array[arrayIndex] = this._parent.StateMachine;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transitionEnumerator = this._parent.Transition.GetEnumerator();
                try
                {
                    for (
                    ; transitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transitionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> subvertexEnumerator = this._parent.Subvertex.GetEnumerator();
                try
                {
                    for (
                    ; subvertexEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subvertexEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subvertexEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ExtendedRegion == item))
                {
                    this._parent.ExtendedRegion = null;
                    return true;
                }
                if ((this._parent.State == item))
                {
                    this._parent.State = null;
                    return true;
                }
                if ((this._parent.StateMachine == item))
                {
                    this._parent.StateMachine = null;
                    return true;
                }
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Transition.Remove(transitionItem)))
                {
                    return true;
                }
                IVertex vertexItem = item.As<IVertex>();
                if (((vertexItem != null) 
                            && this._parent.Subvertex.Remove(vertexItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ExtendedRegion).Concat(this._parent.State).Concat(this._parent.StateMachine).Concat(this._parent.Transition).Concat(this._parent.Subvertex).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the extendedRegion property
        /// </summary>
        private sealed class ExtendedRegionProxy : ModelPropertyChange<IRegion, IRegion>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExtendedRegionProxy(IRegion modelElement) : 
                    base(modelElement, "extendedRegion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegion Value
            {
                get
                {
                    return this.ModelElement.ExtendedRegion;
                }
                set
                {
                    this.ModelElement.ExtendedRegion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<IRegion, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(IRegion modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stateMachine property
        /// </summary>
        private sealed class StateMachineProxy : ModelPropertyChange<IRegion, IStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateMachineProxy(IRegion modelElement) : 
                    base(modelElement, "stateMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStateMachine Value
            {
                get
                {
                    return this.ModelElement.StateMachine;
                }
                set
                {
                    this.ModelElement.StateMachine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isLeaf property
        /// </summary>
        private sealed class IsLeafProxy : ModelPropertyChange<IRedefinableElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsLeafProxy(IRedefinableElement modelElement) : 
                    base(modelElement, "isLeaf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsLeaf;
                }
                set
                {
                    this.ModelElement.IsLeaf = value;
                }
            }
        }
    }
}

