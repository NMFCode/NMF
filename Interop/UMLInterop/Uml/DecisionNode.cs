//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A DecisionNode is a ControlNode that chooses between outgoing ActivityEdges for the routing of tokens.
    ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//DecisionNode")]
    [DebuggerDisplayAttribute("DecisionNode {Name}")]
    public partial class DecisionNode : ControlNode, IDecisionNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _zero_input_parametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveZero_input_parametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEdgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _decision_input_flow_incomingOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDecision_input_flow_incomingOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _two_input_parametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTwo_input_parametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _incoming_outgoing_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncoming_outgoing_edgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _incoming_control_one_input_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncoming_control_one_input_parameterOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _incoming_object_one_input_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncoming_object_one_input_parameterOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _decisionInputReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDecisionInputReference);
        
        /// <summary>
        /// The backing field for the DecisionInput property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _decisionInput;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _decisionInputFlowReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDecisionInputFlowReference);
        
        /// <summary>
        /// The backing field for the DecisionInputFlow property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IObjectFlow _decisionInputFlow;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// A Behavior that is executed to provide an input to guard ValueSpecifications on ActivityEdges outgoing from the DecisionNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("decisionInput")]
        [DescriptionAttribute("A Behavior that is executed to provide an input to guard ValueSpecifications on A" +
            "ctivityEdges outgoing from the DecisionNode.\n<p>From package UML::Activities.</p" +
            ">")]
        [CategoryAttribute("DecisionNode")]
        [XmlElementNameAttribute("decisionInput")]
        [XmlAttributeAttribute(true)]
        public IBehavior DecisionInput
        {
            get
            {
                return this._decisionInput;
            }
            set
            {
                if ((this._decisionInput != value))
                {
                    IBehavior old = this._decisionInput;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DecisionInput", e, _decisionInputReference);
                    this._decisionInput = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDecisionInput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDecisionInput;
                    }
                    this.OnPropertyChanged("DecisionInput", e, _decisionInputReference);
                }
            }
        }
        
        /// <summary>
        /// An additional ActivityEdge incoming to the DecisionNode that provides a decision input value for the guards ValueSpecifications on ActivityEdges outgoing from the DecisionNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("decisionInputFlow")]
        [DescriptionAttribute("An additional ActivityEdge incoming to the DecisionNode that provides a decision " +
            "input value for the guards ValueSpecifications on ActivityEdges outgoing from th" +
            "e DecisionNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("DecisionNode")]
        [XmlElementNameAttribute("decisionInputFlow")]
        [XmlAttributeAttribute(true)]
        public IObjectFlow DecisionInputFlow
        {
            get
            {
                return this._decisionInputFlow;
            }
            set
            {
                if ((this._decisionInputFlow != value))
                {
                    IObjectFlow old = this._decisionInputFlow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DecisionInputFlow", e, _decisionInputFlowReference);
                    this._decisionInputFlow = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDecisionInputFlow;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDecisionInputFlow;
                    }
                    this.OnPropertyChanged("DecisionInputFlow", e, _decisionInputFlowReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DecisionNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DecisionNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If the DecisionNode has no decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has no in parameters.
        ///(decisionInput&lt;&gt;null and decisionInputFlow=null and incoming-&gt;exists(oclIsKindOf(ControlFlow))) implies
        ///   decisionInput.inputParameters()-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Zero_input_parameters(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_zero_input_parametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method zero_input_parameters registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _zero_input_parametersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _zero_input_parametersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _zero_input_parametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveZero_input_parametersOperation()
        {
            return ClassInstance.LookupOperation("zero_input_parameters");
        }
        
        /// <summary>
        /// The ActivityEdges incoming to and outgoing from a DecisionNode, other than the decisionInputFlow (if any), must be either all ObjectFlows or all ControlFlows.
        ///let allEdges: Set(ActivityEdge) = incoming-&gt;union(outgoing) in
        ///let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow-&gt;notEmpty() then allEdges-&gt;excluding(decisionInputFlow) else allEdges endif in
        ///allRelevantEdges-&gt;forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges-&gt;forAll(oclIsKindOf(ObjectFlow))
        ///
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Edges(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method edges registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEdgesOperation()
        {
            return ClassInstance.LookupOperation("edges");
        }
        
        /// <summary>
        /// The decisionInputFlow of a DecisionNode must be an incoming ActivityEdge of the DecisionNode.
        ///incoming-&gt;includes(decisionInputFlow)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Decision_input_flow_incoming(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_decision_input_flow_incomingOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method decision_input_flow_incoming registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _decision_input_flow_incomingOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _decision_input_flow_incomingOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _decision_input_flow_incomingOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDecision_input_flow_incomingOperation()
        {
            return ClassInstance.LookupOperation("decision_input_flow_incoming");
        }
        
        /// <summary>
        /// If the DecisionNode has a decisionInputFlow and an second incoming ObjectFlow, then any decisionInput has two in Parameters, the first of which has a type that is the same as or a supertype of the type of object tokens offered on the non-decisionInputFlow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.
        ///(decisionInput&lt;&gt;null and decisionInputFlow&lt;&gt;null and incoming-&gt;forAll(oclIsKindOf(ObjectFlow))) implies
        ///	decisionInput.inputParameters()-&gt;size()=2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Two_input_parameters(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_two_input_parametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method two_input_parameters registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _two_input_parametersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _two_input_parametersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _two_input_parametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTwo_input_parametersOperation()
        {
            return ClassInstance.LookupOperation("two_input_parameters");
        }
        
        /// <summary>
        /// A DecisionNode has one or two incoming ActivityEdges and at least one outgoing ActivityEdge.
        ///(incoming-&gt;size() = 1 or incoming-&gt;size() = 2) and outgoing-&gt;size() &gt; 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Incoming_outgoing_edges(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_incoming_outgoing_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method incoming_outgoing_edges registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _incoming_outgoing_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _incoming_outgoing_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _incoming_outgoing_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncoming_outgoing_edgesOperation()
        {
            return ClassInstance.LookupOperation("incoming_outgoing_edges");
        }
        
        /// <summary>
        /// If the DecisionNode has a decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the decisionInputFlow.
        ///(decisionInput&lt;&gt;null and decisionInputFlow&lt;&gt;null and incoming-&gt;exists(oclIsKindOf(ControlFlow))) implies
        ///	decisionInput.inputParameters()-&gt;size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Incoming_control_one_input_parameter(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_incoming_control_one_input_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method incoming_control_one_input_parameter regist" +
                        "ered. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _incoming_control_one_input_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _incoming_control_one_input_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _incoming_control_one_input_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncoming_control_one_input_parameterOperation()
        {
            return ClassInstance.LookupOperation("incoming_control_one_input_parameter");
        }
        
        /// <summary>
        /// A decisionInput Behavior has no out parameters, no inout parameters, and one return parameter.
        ///decisionInput&lt;&gt;null implies 
        ///  (decisionInput.ownedParameter-&gt;forAll(par | 
        ///     par.direction &lt;&gt; ParameterDirectionKind::out and 
        ///     par.direction &lt;&gt; ParameterDirectionKind::inout ) and
        ///   decisionInput.ownedParameter-&gt;one(par | 
        ///     par.direction &lt;&gt; ParameterDirectionKind::return))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Parameters(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_parametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parameters registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parametersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parametersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParametersOperation()
        {
            return ClassInstance.LookupOperation("parameters");
        }
        
        /// <summary>
        /// If the DecisionNode has no decisionInputFlow and an incoming ObjectFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming ObjectFlow.
        ///(decisionInput&lt;&gt;null and decisionInputFlow=null and incoming-&gt;forAll(oclIsKindOf(ObjectFlow))) implies
        ///	decisionInput.inputParameters()-&gt;size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Incoming_object_one_input_parameter(object diagnostics, object context)
        {
            System.Func<IDecisionNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDecisionNode, object, object, bool>>(_incoming_object_one_input_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method incoming_object_one_input_parameter registe" +
                        "red. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _incoming_object_one_input_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _incoming_object_one_input_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _incoming_object_one_input_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncoming_object_one_input_parameterOperation()
        {
            return ClassInstance.LookupOperation("incoming_object_one_input_parameter");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDecisionInputReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DecisionNode.ClassInstance)).Resolve("decisionInput")));
        }
        
        /// <summary>
        /// Handles the event that the DecisionInput property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDecisionInput(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DecisionInput))
            {
                this.DecisionInput = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDecisionInputFlowReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DecisionNode.ClassInstance)).Resolve("decisionInputFlow")));
        }
        
        /// <summary>
        /// Handles the event that the DecisionInputFlow property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDecisionInputFlow(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DecisionInputFlow))
            {
                this.DecisionInputFlow = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DECISIONINPUT"))
            {
                return this.DecisionInput;
            }
            if ((reference == "DECISIONINPUTFLOW"))
            {
                return this.DecisionInputFlow;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DECISIONINPUT"))
            {
                this.DecisionInput = ((IBehavior)(value));
                return;
            }
            if ((feature == "DECISIONINPUTFLOW"))
            {
                this.DecisionInputFlow = ((IObjectFlow)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DECISIONINPUT"))
            {
                return new DecisionInputProxy(this);
            }
            if ((reference == "DECISIONINPUTFLOW"))
            {
                return new DecisionInputFlowProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DecisionNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DecisionNode class
        /// </summary>
        public class DecisionNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DecisionNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DecisionNodeReferencedElementsCollection(DecisionNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DecisionInput != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DecisionInputFlow != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DecisionInput == null))
                {
                    IBehavior decisionInputCasted = item.As<IBehavior>();
                    if ((decisionInputCasted != null))
                    {
                        this._parent.DecisionInput = decisionInputCasted;
                        return;
                    }
                }
                if ((this._parent.DecisionInputFlow == null))
                {
                    IObjectFlow decisionInputFlowCasted = item.As<IObjectFlow>();
                    if ((decisionInputFlowCasted != null))
                    {
                        this._parent.DecisionInputFlow = decisionInputFlowCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DecisionInput = null;
                this._parent.DecisionInputFlow = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DecisionInput))
                {
                    return true;
                }
                if ((item == this._parent.DecisionInputFlow))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DecisionInput != null))
                {
                    array[arrayIndex] = this._parent.DecisionInput;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DecisionInputFlow != null))
                {
                    array[arrayIndex] = this._parent.DecisionInputFlow;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DecisionInput == item))
                {
                    this._parent.DecisionInput = null;
                    return true;
                }
                if ((this._parent.DecisionInputFlow == item))
                {
                    this._parent.DecisionInputFlow = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DecisionInput).Concat(this._parent.DecisionInputFlow).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the decisionInput property
        /// </summary>
        private sealed class DecisionInputProxy : ModelPropertyChange<IDecisionNode, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DecisionInputProxy(IDecisionNode modelElement) : 
                    base(modelElement, "decisionInput")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.DecisionInput;
                }
                set
                {
                    this.ModelElement.DecisionInput = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the decisionInputFlow property
        /// </summary>
        private sealed class DecisionInputFlowProxy : ModelPropertyChange<IDecisionNode, IObjectFlow>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DecisionInputFlowProxy(IDecisionNode modelElement) : 
                    base(modelElement, "decisionInputFlow")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IObjectFlow Value
            {
                get
                {
                    return this.ModelElement.DecisionInputFlow;
                }
                set
                {
                    this.ModelElement.DecisionInputFlow = value;
                }
            }
        }
    }
}
