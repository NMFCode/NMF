//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Element
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Element))]
    [XmlDefaultImplementationTypeAttribute(typeof(Element))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Element")]
    public interface IElement : IModelElement, IEModelElement
    {
        
        /// <summary>
        /// The Comments owned by this Element.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedComment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IComment> OwnedComment
        {
            get;
        }
        
        /// <summary>
        /// Elements that must be owned must have an owner.
        ///mustBeOwned() implies owner->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Has_owner(object diagnostics, object context);
        
        /// <summary>
        /// An element may not directly or indirectly own itself.
        ///not allOwnedElements()->includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_own_self(object diagnostics, object context);
        
        /// <summary>
        /// Adds the specified keyword to this element.
        /// </summary>
        /// <param name="keyword">The keyword to add.</param>
        bool AddKeyword(string keyword);
        
        /// <summary>
        /// Applies the specified stereotype to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype to apply.</param>
        IEObject ApplyStereotype(IStereotype stereotype);
        
        /// <summary>
        /// Creates an annotation with the specified source and this element as its model element.
        /// </summary>
        /// <param name="source">The source for the new annotation.</param>
        IEAnnotation CreateEAnnotation(string source);
        
        /// <summary>
        /// Destroys this element by removing all cross references to/from it and removing it from its containing resource or object.
        /// </summary>
        void Destroy();
        
        /// <summary>
        /// Retrieves the keywords for this element.
        /// </summary>
        ISetExpression<string> GetKeywords();
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the applicable stereotype to retrieve.</param>
        IStereotype GetApplicableStereotype(string qualifiedName);
        
        /// <summary>
        /// Retrieves the stereotypes that are applicable to this element, including those that are required and/or may already be applied.
        /// </summary>
        ISetExpression<IStereotype> GetApplicableStereotypes();
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the applied stereotype to retrieve.</param>
        IStereotype GetAppliedStereotype(string qualifiedName);
        
        /// <summary>
        /// Retrieves the stereotypes that are applied to this element.
        /// </summary>
        ISetExpression<IStereotype> GetAppliedStereotypes();
        
        /// <summary>
        /// Retrieves the substereotype of the specified stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is applied.
        /// </summary>
        /// <param name="stereotype">The superstereotype of the applied substereotype to retrieve.</param>
        /// <param name="qualifiedName">The qualified name of the applied substereotype to retrieve.</param>
        IStereotype GetAppliedSubstereotype(IStereotype stereotype, string qualifiedName);
        
        /// <summary>
        /// Retrieves the substereotypes of the specified stereotype that are applied to this element.
        /// </summary>
        /// <param name="stereotype">The superstereotype of the applied substereotypes to retrieve.</param>
        ISetExpression<IStereotype> GetAppliedSubstereotypes(IStereotype stereotype);
        
        /// <summary>
        /// Retrieves the model that owns (either directly or indirectly) this element.
        /// </summary>
        NMF.Interop.Uml.IModel GetModel();
        
        /// <summary>
        /// Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package).
        /// </summary>
        IPackage GetNearestPackage();
        
        /// <summary>
        /// Retrieves the relationships in which this element is involved.
        /// </summary>
        ISetExpression<IRelationship> GetRelationships();
        
        /// <summary>
        /// Retrieves the relationships of the specified type in which this element is involved.
        /// </summary>
        /// <param name="eClass">The (meta)type of the relationships to retrieve.</param>
        ISetExpression<IRelationship> GetRelationships(IEClass eClass);
        
        /// <summary>
        /// Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required.
        /// </summary>
        /// <param name="qualifiedName">The qualified name of the required stereotype to retrieve.</param>
        IStereotype GetRequiredStereotype(string qualifiedName);
        
        /// <summary>
        /// Retrieves the stereotypes that are required for this element.
        /// </summary>
        ISetExpression<IStereotype> GetRequiredStereotypes();
        
        /// <summary>
        /// Retrieves the directed relationships for which this element is a source.
        /// </summary>
        ISetExpression<IDirectedRelationship> GetSourceDirectedRelationships();
        
        /// <summary>
        /// Retrieves the directed relationships of the specified type for which this element is a source.
        /// </summary>
        /// <param name="eClass">The (meta)type of the directed relationships to retrieve.</param>
        ISetExpression<IDirectedRelationship> GetSourceDirectedRelationships(IEClass eClass);
        
        /// <summary>
        /// Retrieves the application of the specified stereotype for this element, or null if no such stereotype application exists.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to retrieve an application.</param>
        IEObject GetStereotypeApplication(IStereotype stereotype);
        
        /// <summary>
        /// Retrieves the stereotype applications for this element.
        /// </summary>
        ISetExpression<IEObject> GetStereotypeApplications();
        
        /// <summary>
        /// Retrieves the directed relationships for which this element is a target.
        /// </summary>
        ISetExpression<IDirectedRelationship> GetTargetDirectedRelationships();
        
        /// <summary>
        /// Retrieves the directed relationships of the specified type for which this element is a target.
        /// </summary>
        /// <param name="eClass">The (meta)type of the directed relationships to retrieve.</param>
        ISetExpression<IDirectedRelationship> GetTargetDirectedRelationships(IEClass eClass);
        
        /// <summary>
        /// Retrieves the value of the property with the specified name in the specified stereotype for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to retrieve the value.</param>
        /// <param name="propertyName">The name of the property whose value to retrieve.</param>
        object GetValue(IStereotype stereotype, string propertyName);
        
        /// <summary>
        /// Determines whether this element has the specified keyword.
        /// </summary>
        /// <param name="keyword">The keyword in question.</param>
        bool HasKeyword(string keyword);
        
        /// <summary>
        /// Determines whether this element has a (non-default) value for the property with the specified name in the specified stereotype.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to test the property.</param>
        /// <param name="propertyName">The name of the property in question.</param>
        bool HasValue(IStereotype stereotype, string propertyName);
        
        /// <summary>
        /// Determines whether the specified stereotype is applicable to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        bool IsStereotypeApplicable(IStereotype stereotype);
        
        /// <summary>
        /// Determines whether the specified stereotype is applied to this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        bool IsStereotypeApplied(IStereotype stereotype);
        
        /// <summary>
        /// Determines whether the specified stereotype is required for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype in question.</param>
        bool IsStereotypeRequired(IStereotype stereotype);
        
        /// <summary>
        /// Removes the specified keyword from this element.
        /// </summary>
        /// <param name="keyword">The keyword to remove.</param>
        bool RemoveKeyword(string keyword);
        
        /// <summary>
        /// Sets the value of the property with the specified name in the specified stereotype for this element.
        /// </summary>
        /// <param name="stereotype">The stereotype for which to set the value.</param>
        /// <param name="propertyName">The name of the property whose value to set.</param>
        /// <param name="newValue">The new value for the property.</param>
        void SetValue(IStereotype stereotype, string propertyName, object newValue);
        
        /// <summary>
        /// Unapplies the specified stereotype from this element.
        /// </summary>
        /// <param name="stereotype">The stereotype to unapply.</param>
        IEObject UnapplyStereotype(IStereotype stereotype);
        
        /// <summary>
        /// The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.
        ///result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        ISetExpression<IElement> AllOwnedElements();
        
        /// <summary>
        /// The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
        ///result = (true)
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        bool MustBeOwned();
    }
}

