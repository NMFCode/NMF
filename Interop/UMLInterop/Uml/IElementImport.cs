//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ElementImport
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElementImport))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElementImport))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ElementImport")]
    public interface IElementImport : IModelElement, IDirectedRelationship
    {
        
        /// <summary>
        /// Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("alias")]
        [DescriptionAttribute(@"Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.
<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("alias")]
        [XmlAttributeAttribute(true)]
        string Alias
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(VisibilityKind.Public)]
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute(@"Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.
<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        VisibilityKind Visibility
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the PackageableElement whose name is to be added to a Namespace.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("importedElement")]
        [DescriptionAttribute("Specifies the PackageableElement whose name is to be added to a Namespace.\n<p>Fro" +
            "m package UML::CommonStructure.</p>")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("importedElement")]
        [XmlAttributeAttribute(true)]
        IPackageableElement ImportedElement
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Namespace that imports a PackageableElement from another Namespace.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("importingNamespace")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("elementImport")]
        NMF.Interop.Uml.INamespace ImportingNamespace
        {
            get;
            set;
        }
        
        /// <summary>
        /// An importedElement has either public visibility or no visibility at all.
        ///importedElement.visibility &lt;&gt; null implies importedElement.visibility = VisibilityKind::public
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Imported_element_is_public(object diagnostics, object context);
        
        /// <summary>
        /// The visibility of an ElementImport is either public or private.
        ///visibility = VisibilityKind::public or visibility = VisibilityKind::private
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Visibility_public_or_private(object diagnostics, object context);
        
        /// <summary>
        /// The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.
        ///result = (if alias-&gt;notEmpty() then
        ///  alias
        ///else
        ///  importedElement.name
        ///endif)
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        string GetName();
    }
}
