//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// LinkEndCreationData is LinkEndData used to provide values for one end of a link to be created by a CreateLinkAction.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndCreationData")]
    public partial class LinkEndCreationData : LinkEndData, ILinkEndCreationData, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _insertAt_pinOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInsertAt_pinOperation);
        
        /// <summary>
        /// The backing field for the IsReplaceAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isReplaceAll = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isReplaceAllAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsReplaceAllAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _insertAtReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInsertAtReference);
        
        /// <summary>
        /// The backing field for the InsertAt property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _insertAt;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReplaceAll")]
        [DescriptionAttribute("Specifies whether the existing links emanating from the object on this end should" +
            " be destroyed before creating a new link.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("LinkEndCreationData")]
        [XmlElementNameAttribute("isReplaceAll")]
        [XmlAttributeAttribute(true)]
        public bool IsReplaceAll
        {
            get
            {
                return this._isReplaceAll;
            }
            set
            {
                if ((this._isReplaceAll != value))
                {
                    bool old = this._isReplaceAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsReplaceAll", e, _isReplaceAllAttribute);
                    this._isReplaceAll = value;
                    this.OnPropertyChanged("IsReplaceAll", e, _isReplaceAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// For ordered Association ends, the InputPin that provides the position where the new link should be inserted or where an existing link should be moved to. The type of the insertAt InputPin is UnlimitedNatural, but the input cannot be zero. It is omitted for Association ends that are not ordered.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("insertAt")]
        [DescriptionAttribute(@"For ordered Association ends, the InputPin that provides the position where the new link should be inserted or where an existing link should be moved to. The type of the insertAt InputPin is UnlimitedNatural, but the input cannot be zero. It is omitted for Association ends that are not ordered.
<p>From package UML::Actions.</p>")]
        [CategoryAttribute("LinkEndCreationData")]
        [XmlElementNameAttribute("insertAt")]
        [XmlAttributeAttribute(true)]
        public IInputPin InsertAt
        {
            get
            {
                return this._insertAt;
            }
            set
            {
                if ((this._insertAt != value))
                {
                    IInputPin old = this._insertAt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("InsertAt", e, _insertAtReference);
                    this._insertAt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInsertAt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInsertAt;
                    }
                    this.OnPropertyChanged("InsertAt", e, _insertAtReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LinkEndCreationDataReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndCreationData")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// LinkEndCreationData for ordered Association ends must have a single insertAt InputPin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, if isReplaceAll=false, and must have no InputPin for the insertion point when the association ends are unordered.
        ///if  not end.isOrdered
        ///then insertAt = null
        ///else
        ///	not isReplaceAll=false implies
        ///	insertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool InsertAt_pin(object diagnostics, object context)
        {
            System.Func<ILinkEndCreationData, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILinkEndCreationData, object, object, bool>>(_insertAt_pinOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method insertAt_pin registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _insertAt_pinOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _insertAt_pinOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _insertAt_pinOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInsertAt_pinOperation()
        {
            return ClassInstance.LookupOperation("insertAt_pin");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsReplaceAllAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.LinkEndCreationData.ClassInstance)).Resolve("isReplaceAll")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInsertAtReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.LinkEndCreationData.ClassInstance)).Resolve("insertAt")));
        }
        
        /// <summary>
        /// Handles the event that the InsertAt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInsertAt(object sender, System.EventArgs eventArgs)
        {
            this.InsertAt = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INSERTAT"))
            {
                return this.InsertAt;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISREPLACEALL"))
            {
                return this.IsReplaceAll;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSERTAT"))
            {
                this.InsertAt = ((IInputPin)(value));
                return;
            }
            if ((feature == "ISREPLACEALL"))
            {
                this.IsReplaceAll = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISREPLACEALL"))
            {
                return Observable.Box(new IsReplaceAllProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INSERTAT"))
            {
                return new InsertAtProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndCreationData")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LinkEndCreationData class
        /// </summary>
        public class LinkEndCreationDataReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LinkEndCreationData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LinkEndCreationDataReferencedElementsCollection(LinkEndCreationData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InsertAt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InsertAt == null))
                {
                    IInputPin insertAtCasted = item.As<IInputPin>();
                    if ((insertAtCasted != null))
                    {
                        this._parent.InsertAt = insertAtCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InsertAt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InsertAt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InsertAt != null))
                {
                    array[arrayIndex] = this._parent.InsertAt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InsertAt == item))
                {
                    this._parent.InsertAt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InsertAt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isReplaceAll property
        /// </summary>
        private sealed class IsReplaceAllProxy : ModelPropertyChange<ILinkEndCreationData, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsReplaceAllProxy(ILinkEndCreationData modelElement) : 
                    base(modelElement, "isReplaceAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsReplaceAll;
                }
                set
                {
                    this.ModelElement.IsReplaceAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insertAt property
        /// </summary>
        private sealed class InsertAtProxy : ModelPropertyChange<ILinkEndCreationData, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsertAtProxy(ILinkEndCreationData modelElement) : 
                    base(modelElement, "insertAt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.InsertAt;
                }
                set
                {
                    this.ModelElement.InsertAt = value;
                }
            }
        }
    }
}

