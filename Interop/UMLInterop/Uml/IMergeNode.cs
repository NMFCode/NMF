//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for MergeNode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MergeNode))]
    [XmlDefaultImplementationTypeAttribute(typeof(MergeNode))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//MergeNode")]
    public interface IMergeNode : IModelElement, IControlNode
    {
        
        /// <summary>
        /// A MergeNode has one outgoing ActivityEdge.
        ///outgoing-&gt;size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool One_outgoing_edge(object diagnostics, object context);
        
        /// <summary>
        /// The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows.
        ///let allEdges : Set(ActivityEdge) = incoming-&gt;union(outgoing) in
        ///allEdges-&gt;forAll(oclIsKindOf(ControlFlow)) or allEdges-&gt;forAll(oclIsKindOf(ObjectFlow))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Edges(object diagnostics, object context);
    }
}
