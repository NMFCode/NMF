//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A TemplateParameter exposes a ParameterableElement as a formal parameter of a template.
    ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameter")]
    public partial class TemplateParameter : Element, ITemplateParameter, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _must_be_compatibleOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMust_be_compatibleOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedDefaultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedDefaultReference);
        
        /// <summary>
        /// The backing field for the OwnedDefault property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IParameterableElement _ownedDefault;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _signatureReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSignatureReference);
        
        /// <summary>
        /// The backing field for the Signature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITemplateSignature _signature;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameteredElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameteredElementReference);
        
        /// <summary>
        /// The backing field for the OwnedParameteredElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IParameterableElement _ownedParameteredElement;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The ParameterableElement that is owned by this TemplateParameter for the purpose of providing a default.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("ownedDefault")]
        [DescriptionAttribute("The ParameterableElement that is owned by this TemplateParameter for the purpose " +
            "of providing a default.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameter")]
        [XmlElementNameAttribute("ownedDefault")]
        [XmlAttributeAttribute(true)]
        public IParameterableElement OwnedDefault
        {
            get
            {
                return this._ownedDefault;
            }
            set
            {
                if ((this._ownedDefault != value))
                {
                    IParameterableElement old = this._ownedDefault;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwnedDefault", e, _ownedDefaultReference);
                    this._ownedDefault = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOwnedDefault;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOwnedDefault;
                    }
                    this.OnPropertyChanged("OwnedDefault", e, _ownedDefaultReference);
                }
            }
        }
        
        /// <summary>
        /// The TemplateSignature that owns this TemplateParameter.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("signature")]
        [DescriptionAttribute("The TemplateSignature that owns this TemplateParameter.\n<p>From package UML::Comm" +
            "onStructure.</p>")]
        [CategoryAttribute("TemplateParameter")]
        [XmlElementNameAttribute("signature")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedParameter")]
        public ITemplateSignature Signature
        {
            get
            {
                return this._signature;
            }
            set
            {
                if ((this._signature != value))
                {
                    ITemplateSignature old = this._signature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Signature", e, _signatureReference);
                    this._signature = value;
                    if ((old != null))
                    {
                        old.OwnedParameter.Remove(this);
                        old.Deleted -= this.OnResetSignature;
                    }
                    if ((value != null))
                    {
                        value.OwnedParameter.Add(this);
                        value.Deleted += this.OnResetSignature;
                    }
                    this.OnPropertyChanged("Signature", e, _signatureReference);
                }
            }
        }
        
        /// <summary>
        /// The ParameterableElement that is owned by this TemplateParameter for the purpose of exposing it as the parameteredElement.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("ownedParameteredElement")]
        [DescriptionAttribute("The ParameterableElement that is owned by this TemplateParameter for the purpose " +
            "of exposing it as the parameteredElement.\n<p>From package UML::CommonStructure.<" +
            "/p>")]
        [CategoryAttribute("TemplateParameter")]
        [XmlElementNameAttribute("ownedParameteredElement")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("owningTemplateParameter")]
        public IParameterableElement OwnedParameteredElement
        {
            get
            {
                return this._ownedParameteredElement;
            }
            set
            {
                if ((this._ownedParameteredElement != value))
                {
                    IParameterableElement old = this._ownedParameteredElement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwnedParameteredElement", e, _ownedParameteredElementReference);
                    this._ownedParameteredElement = value;
                    if ((old != null))
                    {
                        old.OwningTemplateParameter = null;
                        old.Deleted -= this.OnResetOwnedParameteredElement;
                    }
                    if ((value != null))
                    {
                        value.OwningTemplateParameter = this;
                        value.Deleted += this.OnResetOwnedParameteredElement;
                    }
                    this.OnPropertyChanged("OwnedParameteredElement", e, _ownedParameteredElementReference);
                }
            }
        }
        
        IParameterableElement ITemplateParameter.Default
        {
            get
            {
                ITemplateParameter _this = this;
                return _this.OwnedDefault;
            }
            set
            {
                ITemplateParameter _this = this;
                _this.OwnedDefault = value;
            }
        }
        
        IParameterableElement ITemplateParameter.ParameteredElement
        {
            get
            {
                ITemplateParameter _this = this;
                return _this.OwnedParameteredElement;
            }
            set
            {
                ITemplateParameter _this = this;
                _this.OwnedParameteredElement = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TemplateParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The default must be compatible with the formal TemplateParameter.
        ///default &lt;&gt; null implies default.isCompatibleWith(parameteredElement)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Must_be_compatible(object diagnostics, object context)
        {
            System.Func<ITemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateParameter, object, object, bool>>(_must_be_compatibleOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method must_be_compatible registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _must_be_compatibleOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _must_be_compatibleOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _must_be_compatibleOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMust_be_compatibleOperation()
        {
            return ClassInstance.LookupOperation("must_be_compatible");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedDefaultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameter.ClassInstance)).Resolve("ownedDefault")));
        }
        
        /// <summary>
        /// Handles the event that the OwnedDefault property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwnedDefault(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.OwnedDefault))
            {
                this.OwnedDefault = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSignatureReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameter.ClassInstance)).Resolve("signature")));
        }
        
        /// <summary>
        /// Handles the event that the Signature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSignature(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Signature))
            {
                this.Signature = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameteredElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameter.ClassInstance)).Resolve("ownedParameteredElement")));
        }
        
        /// <summary>
        /// Handles the event that the OwnedParameteredElement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwnedParameteredElement(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.OwnedParameteredElement))
            {
                this.OwnedParameteredElement = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNEDDEFAULT"))
            {
                return this.OwnedDefault;
            }
            if ((reference == "SIGNATURE"))
            {
                return this.Signature;
            }
            if ((reference == "OWNEDPARAMETEREDELEMENT"))
            {
                return this.OwnedParameteredElement;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OWNEDDEFAULT"))
            {
                this.OwnedDefault = ((IParameterableElement)(value));
                return;
            }
            if ((feature == "SIGNATURE"))
            {
                this.Signature = ((ITemplateSignature)(value));
                return;
            }
            if ((feature == "OWNEDPARAMETEREDELEMENT"))
            {
                this.OwnedParameteredElement = ((IParameterableElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OWNEDDEFAULT"))
            {
                return new OwnedDefaultProxy(this);
            }
            if ((reference == "SIGNATURE"))
            {
                return new SignatureProxy(this);
            }
            if ((reference == "OWNEDPARAMETEREDELEMENT"))
            {
                return new OwnedParameteredElementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TemplateParameter class
        /// </summary>
        public class TemplateParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TemplateParameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TemplateParameterReferencedElementsCollection(TemplateParameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the default property
        /// </summary>
        private sealed class DefaultProxy : ModelPropertyChange<ITemplateParameter, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultProxy(ITemplateParameter modelElement) : 
                    base(modelElement, "default")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.Default;
                }
                set
                {
                    this.ModelElement.Default = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ownedDefault property
        /// </summary>
        private sealed class OwnedDefaultProxy : ModelPropertyChange<ITemplateParameter, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnedDefaultProxy(ITemplateParameter modelElement) : 
                    base(modelElement, "ownedDefault")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.OwnedDefault;
                }
                set
                {
                    this.ModelElement.OwnedDefault = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parameteredElement property
        /// </summary>
        private sealed class ParameteredElementProxy : ModelPropertyChange<ITemplateParameter, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParameteredElementProxy(ITemplateParameter modelElement) : 
                    base(modelElement, "parameteredElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.ParameteredElement;
                }
                set
                {
                    this.ModelElement.ParameteredElement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the signature property
        /// </summary>
        private sealed class SignatureProxy : ModelPropertyChange<ITemplateParameter, ITemplateSignature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SignatureProxy(ITemplateParameter modelElement) : 
                    base(modelElement, "signature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateSignature Value
            {
                get
                {
                    return this.ModelElement.Signature;
                }
                set
                {
                    this.ModelElement.Signature = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ownedParameteredElement property
        /// </summary>
        private sealed class OwnedParameteredElementProxy : ModelPropertyChange<ITemplateParameter, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnedParameteredElementProxy(ITemplateParameter modelElement) : 
                    base(modelElement, "ownedParameteredElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.OwnedParameteredElement;
                }
                set
                {
                    this.ModelElement.OwnedParameteredElement = value;
                }
            }
        }
    }
}
