//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Node
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Node))]
    [XmlDefaultImplementationTypeAttribute(typeof(Node))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Node")]
    public interface INode : IModelElement, IDeploymentTarget, NMF.Interop.Uml.IClass
    {
        
        /// <summary>
        /// The Nodes that are defined (nested) within the Node.
        ///&lt;p&gt;From package UML::Deployments.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedNode")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<INode> NestedNode
        {
            get;
        }
        
        /// <summary>
        /// The internal structure of a Node (if defined) consists solely of parts of type Node.
        ///part-&gt;forAll(oclIsKindOf(Node))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Internal_structure(object diagnostics, object context);
        
        /// <summary>
        /// Creates a (binary) communication path between this node and the specified other node, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this node&apos;s nearest package.
        /// </summary>
        /// <param name="end1IsNavigable">The navigability for the first end of the new communication path.</param>
        /// <param name="end1Aggregation">The aggregation for the first end of the new communication path.</param>
        /// <param name="end1Name">The name for the first end of the new communication path.</param>
        /// <param name="end1Lower">The lower bound for the first end of the new communication path.</param>
        /// <param name="end1Upper">The upper bound for the first end of the new communication path.</param>
        /// <param name="end1Node">The type for the first end of the new communication path.</param>
        /// <param name="end2IsNavigable">The navigability for the second end of the new communication path.</param>
        /// <param name="end2Aggregation">The aggregation for the second end of the new communication path.</param>
        /// <param name="end2Name">The name for the second end of the new communication path.</param>
        /// <param name="end2Lower">The lower bound for the second end of the new communication path.</param>
        /// <param name="end2Upper">The upper bound for the second end of the new communication path.</param>
        ICommunicationPath CreateCommunicationPath(bool end1IsNavigable, AggregationKind end1Aggregation, string end1Name, int end1Lower, object end1Upper, INode end1Node, bool end2IsNavigable, AggregationKind end2Aggregation, string end2Name, int end2Lower, object end2Upper);
        
        /// <summary>
        /// Retrieves the communication paths in which this node is involved.
        /// </summary>
        ISetExpression<ICommunicationPath> GetCommunicationPaths();
    }
}
