//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.
    ///&lt;p&gt;From package UML::Deployments.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//DeploymentSpecification")]
    [DebuggerDisplayAttribute("DeploymentSpecification {Name}")]
    public partial class DeploymentSpecification : Artifact, IDeploymentSpecification, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deployment_targetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeployment_targetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deployed_elementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeployed_elementsOperation);
        
        /// <summary>
        /// The backing field for the DeploymentLocation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _deploymentLocation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _deploymentLocationAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeploymentLocationAttribute);
        
        /// <summary>
        /// The backing field for the ExecutionLocation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _executionLocation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _executionLocationAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExecutionLocationAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _deploymentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeploymentReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The location where an Artifact is deployed onto a Node. This is typically a &apos;directory&apos; or &apos;memory address.&apos;
        ///&lt;p&gt;From package UML::Deployments.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("deploymentLocation")]
        [DescriptionAttribute("The location where an Artifact is deployed onto a Node. This is typically a \'dire" +
            "ctory\' or \'memory address.\'\n<p>From package UML::Deployments.</p>")]
        [CategoryAttribute("DeploymentSpecification")]
        [XmlElementNameAttribute("deploymentLocation")]
        [XmlAttributeAttribute(true)]
        public string DeploymentLocation
        {
            get
            {
                return this._deploymentLocation;
            }
            set
            {
                if ((this._deploymentLocation != value))
                {
                    string old = this._deploymentLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DeploymentLocation", e, _deploymentLocationAttribute);
                    this._deploymentLocation = value;
                    this.OnPropertyChanged("DeploymentLocation", e, _deploymentLocationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The location where a component Artifact executes. This may be a local or remote location.
        ///&lt;p&gt;From package UML::Deployments.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("executionLocation")]
        [DescriptionAttribute("The location where a component Artifact executes. This may be a local or remote l" +
            "ocation.\n<p>From package UML::Deployments.</p>")]
        [CategoryAttribute("DeploymentSpecification")]
        [XmlElementNameAttribute("executionLocation")]
        [XmlAttributeAttribute(true)]
        public string ExecutionLocation
        {
            get
            {
                return this._executionLocation;
            }
            set
            {
                if ((this._executionLocation != value))
                {
                    string old = this._executionLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ExecutionLocation", e, _executionLocationAttribute);
                    this._executionLocation = value;
                    this.OnPropertyChanged("ExecutionLocation", e, _executionLocationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deployment with which the DeploymentSpecification is associated.
        ///&lt;p&gt;From package UML::Deployments.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("deployment")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("configuration")]
        public IDeployment Deployment
        {
            get
            {
                return ModelHelper.CastAs<IDeployment>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DeploymentSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DeploymentSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.
        ///deployment-&gt;forAll (location.oclIsKindOf(ExecutionEnvironment))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Deployment_target(object diagnostics, object context)
        {
            System.Func<IDeploymentSpecification, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDeploymentSpecification, object, object, bool>>(_deployment_targetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method deployment_target registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deployment_targetOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deployment_targetOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deployment_targetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeployment_targetOperation()
        {
            return ClassInstance.LookupOperation("deployment_target");
        }
        
        /// <summary>
        /// The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e., the configured components).
        ///deployment-&gt;forAll (location.deployedElement-&gt;forAll (oclIsKindOf(Component)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Deployed_elements(object diagnostics, object context)
        {
            System.Func<IDeploymentSpecification, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDeploymentSpecification, object, object, bool>>(_deployed_elementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method deployed_elements registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deployed_elementsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deployed_elementsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deployed_elementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeployed_elementsOperation()
        {
            return ClassInstance.LookupOperation("deployed_elements");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeploymentLocationAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DeploymentSpecification.ClassInstance)).Resolve("deploymentLocation")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExecutionLocationAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DeploymentSpecification.ClassInstance)).Resolve("executionLocation")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeploymentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DeploymentSpecification.ClassInstance)).Resolve("deployment")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IDeployment oldDeployment = ModelHelper.CastAs<IDeployment>(oldParent);
            IDeployment newDeployment = ModelHelper.CastAs<IDeployment>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeployment, newDeployment);
            this.OnPropertyChanging("Deployment", e, _deploymentReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IDeployment oldDeployment = ModelHelper.CastAs<IDeployment>(oldParent);
            IDeployment newDeployment = ModelHelper.CastAs<IDeployment>(newParent);
            if ((oldDeployment != null))
            {
                oldDeployment.Configuration.Remove(this);
            }
            if ((newDeployment != null))
            {
                newDeployment.Configuration.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeployment, newDeployment);
            this.OnPropertyChanged("Deployment", e, _deploymentReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DEPLOYMENT"))
            {
                return this.Deployment;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEPLOYMENTLOCATION"))
            {
                return this.DeploymentLocation;
            }
            if ((attribute == "EXECUTIONLOCATION"))
            {
                return this.ExecutionLocation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DEPLOYMENT"))
            {
                this.Deployment = ((IDeployment)(value));
                return;
            }
            if ((feature == "DEPLOYMENTLOCATION"))
            {
                this.DeploymentLocation = ((string)(value));
                return;
            }
            if ((feature == "EXECUTIONLOCATION"))
            {
                this.ExecutionLocation = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DEPLOYMENTLOCATION"))
            {
                return new DeploymentLocationProxy(this);
            }
            if ((attribute == "EXECUTIONLOCATION"))
            {
                return new ExecutionLocationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DEPLOYMENT"))
            {
                return new DeploymentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DeploymentSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DeploymentSpecification class
        /// </summary>
        public class DeploymentSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DeploymentSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DeploymentSpecificationReferencedElementsCollection(DeploymentSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deploymentLocation property
        /// </summary>
        private sealed class DeploymentLocationProxy : ModelPropertyChange<IDeploymentSpecification, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeploymentLocationProxy(IDeploymentSpecification modelElement) : 
                    base(modelElement, "deploymentLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DeploymentLocation;
                }
                set
                {
                    this.ModelElement.DeploymentLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the executionLocation property
        /// </summary>
        private sealed class ExecutionLocationProxy : ModelPropertyChange<IDeploymentSpecification, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExecutionLocationProxy(IDeploymentSpecification modelElement) : 
                    base(modelElement, "executionLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ExecutionLocation;
                }
                set
                {
                    this.ModelElement.ExecutionLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deployment property
        /// </summary>
        private sealed class DeploymentProxy : ModelPropertyChange<IDeploymentSpecification, IDeployment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeploymentProxy(IDeploymentSpecification modelElement) : 
                    base(modelElement, "deployment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDeployment Value
            {
                get
                {
                    return this.ModelElement.Deployment;
                }
                set
                {
                    this.ModelElement.Deployment = value;
                }
            }
        }
    }
}
