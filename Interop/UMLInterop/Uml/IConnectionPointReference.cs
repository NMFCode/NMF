//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ConnectionPointReference
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConnectionPointReference))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConnectionPointReference))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectionPointReference")]
    public interface IConnectionPointReference : IModelElement, IVertex
    {
        
        /// <summary>
        /// The entryPoint Pseudostates corresponding to this connection point.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("entry")]
        [DescriptionAttribute("The entryPoint Pseudostates corresponding to this connection point.\n<p>From packa" +
            "ge UML::StateMachines.</p>")]
        [CategoryAttribute("ConnectionPointReference")]
        [XmlElementNameAttribute("entry")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IPseudostate> Entry
        {
            get;
        }
        
        /// <summary>
        /// The exitPoints kind Pseudostates corresponding to this connection point.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("exit")]
        [DescriptionAttribute("The exitPoints kind Pseudostates corresponding to this connection point.\n<p>From " +
            "package UML::StateMachines.</p>")]
        [CategoryAttribute("ConnectionPointReference")]
        [XmlElementNameAttribute("exit")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IPseudostate> Exit
        {
            get;
        }
        
        /// <summary>
        /// The State in which the ConnectionPointReference is defined.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("state")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("connection")]
        IState State
        {
            get;
            set;
        }
        
        /// <summary>
        /// The exit Pseudostates must be Pseudostates with kind exitPoint.
        ///exit->forAll(kind = PseudostateKind::exitPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Exit_pseudostates(object diagnostics, object context);
        
        /// <summary>
        /// The entry Pseudostates must be Pseudostates with kind entryPoint.
        ///entry->forAll(kind = PseudostateKind::entryPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Entry_pseudostates(object diagnostics, object context);
    }
}

