//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for BroadcastSignalAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BroadcastSignalAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(BroadcastSignalAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//BroadcastSignalAction")]
    public interface IBroadcastSignalAction : IModelElement, IInvocationAction
    {
        
        /// <summary>
        /// The Signal whose instances are to be sent.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("signal")]
        [DescriptionAttribute("The Signal whose instances are to be sent.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("BroadcastSignalAction")]
        [XmlElementNameAttribute("signal")]
        [XmlAttributeAttribute(true)]
        ISignal Signal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The number of argument InputPins must be the same as the number of attributes in the signal.
        ///argument->size() = signal.allAttributes()->size()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Number_of_arguments(object diagnostics, object context);
        
        /// <summary>
        /// The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal.
        ///let attribute: OrderedSet(Property) = signal.allAttributes() in
        ///Sequence{1..argument->size()}->forAll(i | 
        ///	argument->at(i).type.conformsTo(attribute->at(i).type) and 
        ///	argument->at(i).isOrdered = attribute->at(i).isOrdered and
        ///	argument->at(i).compatibleWith(attribute->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Type_ordering_multiplicity(object diagnostics, object context);
        
        /// <summary>
        /// A BroadcaseSignalAction may not specify onPort.
        ///onPort=null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool No_onport(object diagnostics, object context);
    }
}

