//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// StructuralFeatureAction is an abstract class for all Actions that operate on StructuralFeatures.
    ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeatureAction")]
    [DebuggerDisplayAttribute("StructuralFeatureAction {Name}")]
    public abstract partial class StructuralFeatureAction : Action, IStructuralFeatureAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _object_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveObject_typeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_staticOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_staticOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_featuring_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_featuring_classifierOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _objectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveObjectReference);
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _object;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _structuralFeatureReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStructuralFeatureReference);
        
        /// <summary>
        /// The backing field for the StructuralFeature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStructuralFeature _structuralFeature;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The InputPin from which the object whose StructuralFeature is to be read or written is obtained.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IInputPin old = this._object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Object", e, _objectReference);
                    this._object = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object", e, _objectReference);
                }
            }
        }
        
        /// <summary>
        /// The StructuralFeature to be read or written.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("structuralFeature")]
        [DescriptionAttribute("The StructuralFeature to be read or written.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("StructuralFeatureAction")]
        [XmlElementNameAttribute("structuralFeature")]
        [XmlAttributeAttribute(true)]
        public IStructuralFeature StructuralFeature
        {
            get
            {
                return this._structuralFeature;
            }
            set
            {
                if ((this._structuralFeature != value))
                {
                    IStructuralFeature old = this._structuralFeature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("StructuralFeature", e, _structuralFeatureReference);
                    this._structuralFeature = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStructuralFeature;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStructuralFeature;
                    }
                    this.OnPropertyChanged("StructuralFeature", e, _structuralFeatureReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StructuralFeatureActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StructuralFeatureActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeatureAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin must be 1..1.
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity(object diagnostics, object context)
        {
            System.Func<IStructuralFeatureAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuralFeatureAction, object, object, bool>>(_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("multiplicity");
        }
        
        /// <summary>
        /// The structuralFeature must either be an owned or inherited feature of the type of the object InputPin, or it must be an owned end of a binary Association whose opposite end had as a type to which the type of the object InputPin conforms.
        ///object.type.oclAsType(Classifier).allFeatures()-&gt;includes(structuralFeature) or
        ///	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Object_type(object diagnostics, object context)
        {
            System.Func<IStructuralFeatureAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuralFeatureAction, object, object, bool>>(_object_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method object_type registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _object_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _object_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _object_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveObject_typeOperation()
        {
            return ClassInstance.LookupOperation("object_type");
        }
        
        /// <summary>
        /// The structuralFeature must not be static.
        ///not structuralFeature.isStatic
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_static(object diagnostics, object context)
        {
            System.Func<IStructuralFeatureAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuralFeatureAction, object, object, bool>>(_not_staticOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_static registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_staticOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_staticOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_staticOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_staticOperation()
        {
            return ClassInstance.LookupOperation("not_static");
        }
        
        /// <summary>
        /// The structuralFeature must have exactly one featuringClassifier.
        ///structuralFeature.featuringClassifier-&gt;size() = 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_featuring_classifier(object diagnostics, object context)
        {
            System.Func<IStructuralFeatureAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuralFeatureAction, object, object, bool>>(_one_featuring_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_featuring_classifier registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_featuring_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_featuring_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_featuring_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_featuring_classifierOperation()
        {
            return ClassInstance.LookupOperation("one_featuring_classifier");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveObjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuralFeatureAction.ClassInstance)).Resolve("object")));
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Object))
            {
                this.Object = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStructuralFeatureReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuralFeatureAction.ClassInstance)).Resolve("structuralFeature")));
        }
        
        /// <summary>
        /// Handles the event that the StructuralFeature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStructuralFeature(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.StructuralFeature))
            {
                this.StructuralFeature = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Object))
            {
                return ModelHelper.CreatePath("object");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OBJECT"))
            {
                return this.Object;
            }
            if ((reference == "STRUCTURALFEATURE"))
            {
                return this.StructuralFeature;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OBJECT"))
            {
                this.Object = ((IInputPin)(value));
                return;
            }
            if ((feature == "STRUCTURALFEATURE"))
            {
                this.StructuralFeature = ((IStructuralFeature)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OBJECT"))
            {
                return new ObjectProxy(this);
            }
            if ((reference == "STRUCTURALFEATURE"))
            {
                return new StructuralFeatureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeatureAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructuralFeatureAction class
        /// </summary>
        public class StructuralFeatureActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructuralFeatureAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructuralFeatureActionChildrenCollection(StructuralFeatureAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructuralFeatureAction class
        /// </summary>
        public class StructuralFeatureActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructuralFeatureAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructuralFeatureActionReferencedElementsCollection(StructuralFeatureAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StructuralFeature != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                if ((this._parent.StructuralFeature == null))
                {
                    IStructuralFeature structuralFeatureCasted = item.As<IStructuralFeature>();
                    if ((structuralFeatureCasted != null))
                    {
                        this._parent.StructuralFeature = structuralFeatureCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
                this._parent.StructuralFeature = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if ((item == this._parent.StructuralFeature))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StructuralFeature != null))
                {
                    array[arrayIndex] = this._parent.StructuralFeature;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                if ((this._parent.StructuralFeature == item))
                {
                    this._parent.StructuralFeature = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).Concat(this._parent.StructuralFeature).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the object property
        /// </summary>
        private sealed class ObjectProxy : ModelPropertyChange<IStructuralFeatureAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjectProxy(IStructuralFeatureAction modelElement) : 
                    base(modelElement, "object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Object;
                }
                set
                {
                    this.ModelElement.Object = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the structuralFeature property
        /// </summary>
        private sealed class StructuralFeatureProxy : ModelPropertyChange<IStructuralFeatureAction, IStructuralFeature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StructuralFeatureProxy(IStructuralFeatureAction modelElement) : 
                    base(modelElement, "structuralFeature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStructuralFeature Value
            {
                get
                {
                    return this.ModelElement.StructuralFeature;
                }
                set
                {
                    this.ModelElement.StructuralFeature = value;
                }
            }
        }
    }
}
