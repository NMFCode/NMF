//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StateMachine")]
    [DebuggerDisplayAttribute("StateMachine {Name}")]
    public partial class StateMachine : Behavior, IStateMachine, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _connection_pointsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConnection_pointsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _classifier_contextOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClassifier_contextOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _methodOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMethodOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _context_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveContext_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lCAOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLCAOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _ancestorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAncestorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lCAStateOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLCAStateOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _connectionPointReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConnectionPointReference);
        
        /// <summary>
        /// The backing field for the ConnectionPoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StateMachineConnectionPointCollection _connectionPoint;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _submachineStateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubmachineStateReference);
        
        /// <summary>
        /// The backing field for the SubmachineState property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StateMachineSubmachineStateCollection _submachineState;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _regionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRegionReference);
        
        /// <summary>
        /// The backing field for the Region property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StateMachineRegionCollection _region;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _extendedStateMachineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExtendedStateMachineReference);
        
        /// <summary>
        /// The backing field for the ExtendedStateMachine property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IStateMachine> _extendedStateMachine;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public StateMachine()
        {
            this._connectionPoint = new StateMachineConnectionPointCollection(this);
            this._connectionPoint.CollectionChanging += this.ConnectionPointCollectionChanging;
            this._connectionPoint.CollectionChanged += this.ConnectionPointCollectionChanged;
            this._submachineState = new StateMachineSubmachineStateCollection(this);
            this._submachineState.CollectionChanging += this.SubmachineStateCollectionChanging;
            this._submachineState.CollectionChanged += this.SubmachineStateCollectionChanged;
            this._region = new StateMachineRegionCollection(this);
            this._region.CollectionChanging += this.RegionCollectionChanging;
            this._region.CollectionChanged += this.RegionCollectionChanged;
            this._extendedStateMachine = new ObservableAssociationSet<IStateMachine>();
            this._extendedStateMachine.CollectionChanging += this.ExtendedStateMachineCollectionChanging;
            this._extendedStateMachine.CollectionChanged += this.ExtendedStateMachineCollectionChanged;
        }
        
        /// <summary>
        /// The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("connectionPoint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("stateMachine")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPseudostate> ConnectionPoint
        {
            get
            {
                return this._connectionPoint;
            }
        }
        
        /// <summary>
        /// References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("submachineState")]
        [DescriptionAttribute("References the submachine(s) in case of a submachine State. Multiple machines are" +
            " referenced in case of a concurrent State.\n<p>From package UML::StateMachines.</" +
            "p>")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("submachineState")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("submachine")]
        [ConstantAttribute()]
        public ISetExpression<IState> SubmachineState
        {
            get
            {
                return this._submachineState;
            }
        }
        
        /// <summary>
        /// The Regions owned directly by the StateMachine.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("region")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("stateMachine")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IRegion> Region
        {
            get
            {
                return this._region;
            }
        }
        
        /// <summary>
        /// The StateMachines of which this is an extension.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("extendedStateMachine")]
        [DescriptionAttribute("The StateMachines of which this is an extension.\n<p>From package UML::StateMachin" +
            "es.</p>")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("extendedStateMachine")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IStateMachine> ExtendedStateMachine
        {
            get
            {
                return this._extendedStateMachine;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StateMachineChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StateMachineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StateMachine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The connection points of a StateMachine are Pseudostates of kind entry point or exit point.
        ///connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Connection_points(object diagnostics, object context)
        {
            System.Func<IStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, object, object, bool>>(_connection_pointsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method connection_points registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _connection_pointsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _connection_pointsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _connection_pointsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConnection_pointsOperation()
        {
            return ClassInstance.LookupOperation("connection_points");
        }
        
        /// <summary>
        /// The Classifier context of a StateMachine cannot be an Interface.
        ///_'context' <> null implies not _'context'.oclIsKindOf(Interface)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Classifier_context(object diagnostics, object context)
        {
            System.Func<IStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, object, object, bool>>(_classifier_contextOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method classifier_context registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _classifier_contextOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _classifier_contextOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _classifier_contextOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClassifier_contextOperation()
        {
            return ClassInstance.LookupOperation("classifier_context");
        }
        
        /// <summary>
        /// A StateMachine as the method for a BehavioralFeature cannot have entry/exit connection points.
        ///specification <> null implies connectionPoint->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Method(object diagnostics, object context)
        {
            System.Func<IStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, object, object, bool>>(_methodOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method method registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _methodOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _methodOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _methodOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMethodOperation()
        {
            return ClassInstance.LookupOperation("method");
        }
        
        /// <summary>
        /// The context Classifier of the method StateMachine of a BehavioralFeature must be the Classifier that owns the BehavioralFeature.
        ///specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Context_classifier(object diagnostics, object context)
        {
            System.Func<IStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, object, object, bool>>(_context_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method context_classifier registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _context_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _context_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _context_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveContext_classifierOperation()
        {
            return ClassInstance.LookupOperation("context_classifier");
        }
        
        /// <summary>
        /// The operation LCA(s1,s2) returns the Region that is the least common ancestor of Vertices s1 and s2, based on the StateMachine containment hierarchy.
        ///result = (if ancestor(s1, s2) then 
        ///    s2.container
        ///else
        ///	if ancestor(s2, s1) then
        ///	    s1.container 
        ///	else 
        ///	    LCA(s1.container.state, s2.container.state)
        ///	endif
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="s1"></param>
        /// <param name="s2"></param>
        public IRegion LCA(IVertex s1, IVertex s2)
        {
            System.Func<IStateMachine, IVertex, IVertex, IRegion> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, IVertex, IVertex, IRegion>>(_lCAOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method LCA registered. Use the method broker to re" +
                        "gister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lCAOperation.Value, s1, s2);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lCAOperation.Value, e));
            IRegion result = handler.Invoke(this, s1, s2);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lCAOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLCAOperation()
        {
            return ClassInstance.LookupOperation("LCA");
        }
        
        /// <summary>
        /// The query ancestor(s1, s2) checks whether Vertex s2 is an ancestor of Vertex s1.
        ///result = (if (s2 = s1) then 
        ///	true 
        ///else 
        ///	if s1.container.stateMachine->notEmpty() then 
        ///	    true
        ///	else 
        ///	    if s2.container.stateMachine->notEmpty() then 
        ///	        false
        ///	    else
        ///	        ancestor(s1, s2.container.state)
        ///	     endif
        ///	 endif
        ///endif  )
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="s1"></param>
        /// <param name="s2"></param>
        public bool Ancestor(IVertex s1, IVertex s2)
        {
            System.Func<IStateMachine, IVertex, IVertex, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, IVertex, IVertex, bool>>(_ancestorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method ancestor registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _ancestorOperation.Value, s1, s2);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _ancestorOperation.Value, e));
            bool result = handler.Invoke(this, s1, s2);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _ancestorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAncestorOperation()
        {
            return ClassInstance.LookupOperation("ancestor");
        }
        
        /// <summary>
        /// This utility funciton is like the LCA, except that it returns the nearest composite State that contains both input Vertices.
        ///result = (if v2.oclIsTypeOf(State) and ancestor(v1, v2) then
        ///	v2.oclAsType(State)
        ///else if v1.oclIsTypeOf(State) and ancestor(v2, v1) then
        ///	v1.oclAsType(State)
        ///else if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then 
        ///	null.oclAsType(State)
        ///else LCAState(v1.container.state, v2.container.state)
        ///endif endif endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="v1"></param>
        /// <param name="v2"></param>
        public IState LCAState(IVertex v1, IVertex v2)
        {
            System.Func<IStateMachine, IVertex, IVertex, IState> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStateMachine, IVertex, IVertex, IState>>(_lCAStateOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method LCAState registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lCAStateOperation.Value, v1, v2);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lCAStateOperation.Value, e));
            IState result = handler.Invoke(this, v1, v2);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lCAStateOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLCAStateOperation()
        {
            return ClassInstance.LookupOperation("LCAState");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConnectionPointReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StateMachine.ClassInstance)).Resolve("connectionPoint")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConnectionPoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectionPointCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConnectionPoint", e, _connectionPointReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConnectionPoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectionPointCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConnectionPoint", e, _connectionPointReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubmachineStateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StateMachine.ClassInstance)).Resolve("submachineState")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubmachineState property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubmachineStateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SubmachineState", e, _submachineStateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubmachineState property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubmachineStateCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubmachineState", e, _submachineStateReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRegionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StateMachine.ClassInstance)).Resolve("region")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Region property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Region", e, _regionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Region property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Region", e, _regionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExtendedStateMachineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StateMachine.ClassInstance)).Resolve("extendedStateMachine")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ExtendedStateMachine property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtendedStateMachineCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ExtendedStateMachine", e, _extendedStateMachineReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ExtendedStateMachine property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtendedStateMachineCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ExtendedStateMachine", e, _extendedStateMachineReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int connectionPointIndex = ModelHelper.IndexOfReference(this.ConnectionPoint, element);
            if ((connectionPointIndex != -1))
            {
                return ModelHelper.CreatePath("connectionPoint", connectionPointIndex);
            }
            int regionIndex = ModelHelper.IndexOfReference(this.Region, element);
            if ((regionIndex != -1))
            {
                return ModelHelper.CreatePath("region", regionIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONNECTIONPOINT"))
            {
                if ((index < this.ConnectionPoint.Count))
                {
                    return this.ConnectionPoint[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "REGION"))
            {
                if ((index < this.Region.Count))
                {
                    return this.Region[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONNECTIONPOINT"))
            {
                return this._connectionPoint;
            }
            if ((feature == "SUBMACHINESTATE"))
            {
                return this._submachineState;
            }
            if ((feature == "REGION"))
            {
                return this._region;
            }
            if ((feature == "EXTENDEDSTATEMACHINE"))
            {
                return this._extendedStateMachine;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._connectionPoint))
            {
                return "connectionPoint";
            }
            if ((container == this._region))
            {
                return "region";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StateMachine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StateMachine class
        /// </summary>
        public class StateMachineChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateMachineChildrenCollection(StateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConnectionPoint.Count);
                    count = (count + this._parent.Region.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConnectionPoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Region.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConnectionPoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Region.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPseudostate connectionPointCasted = item.As<IPseudostate>();
                if ((connectionPointCasted != null))
                {
                    this._parent.ConnectionPoint.Add(connectionPointCasted);
                }
                IRegion regionCasted = item.As<IRegion>();
                if ((regionCasted != null))
                {
                    this._parent.Region.Add(regionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConnectionPoint.Clear();
                this._parent.Region.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConnectionPoint.Contains(item))
                {
                    return true;
                }
                if (this._parent.Region.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> connectionPointEnumerator = this._parent.ConnectionPoint.GetEnumerator();
                try
                {
                    for (
                    ; connectionPointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectionPointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectionPointEnumerator.Dispose();
                }
                IEnumerator<IModelElement> regionEnumerator = this._parent.Region.GetEnumerator();
                try
                {
                    for (
                    ; regionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = regionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    regionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPseudostate pseudostateItem = item.As<IPseudostate>();
                if (((pseudostateItem != null) 
                            && this._parent.ConnectionPoint.Remove(pseudostateItem)))
                {
                    return true;
                }
                IRegion regionItem = item.As<IRegion>();
                if (((regionItem != null) 
                            && this._parent.Region.Remove(regionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConnectionPoint).Concat(this._parent.Region).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StateMachine class
        /// </summary>
        public class StateMachineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateMachineReferencedElementsCollection(StateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConnectionPoint.Count);
                    count = (count + this._parent.SubmachineState.Count);
                    count = (count + this._parent.Region.Count);
                    count = (count + this._parent.ExtendedStateMachine.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConnectionPoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubmachineState.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Region.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ExtendedStateMachine.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConnectionPoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubmachineState.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Region.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ExtendedStateMachine.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPseudostate connectionPointCasted = item.As<IPseudostate>();
                if ((connectionPointCasted != null))
                {
                    this._parent.ConnectionPoint.Add(connectionPointCasted);
                }
                IState submachineStateCasted = item.As<IState>();
                if ((submachineStateCasted != null))
                {
                    this._parent.SubmachineState.Add(submachineStateCasted);
                }
                IRegion regionCasted = item.As<IRegion>();
                if ((regionCasted != null))
                {
                    this._parent.Region.Add(regionCasted);
                }
                IStateMachine extendedStateMachineCasted = item.As<IStateMachine>();
                if ((extendedStateMachineCasted != null))
                {
                    this._parent.ExtendedStateMachine.Add(extendedStateMachineCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConnectionPoint.Clear();
                this._parent.SubmachineState.Clear();
                this._parent.Region.Clear();
                this._parent.ExtendedStateMachine.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConnectionPoint.Contains(item))
                {
                    return true;
                }
                if (this._parent.SubmachineState.Contains(item))
                {
                    return true;
                }
                if (this._parent.Region.Contains(item))
                {
                    return true;
                }
                if (this._parent.ExtendedStateMachine.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> connectionPointEnumerator = this._parent.ConnectionPoint.GetEnumerator();
                try
                {
                    for (
                    ; connectionPointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectionPointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectionPointEnumerator.Dispose();
                }
                IEnumerator<IModelElement> submachineStateEnumerator = this._parent.SubmachineState.GetEnumerator();
                try
                {
                    for (
                    ; submachineStateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = submachineStateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    submachineStateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> regionEnumerator = this._parent.Region.GetEnumerator();
                try
                {
                    for (
                    ; regionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = regionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    regionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> extendedStateMachineEnumerator = this._parent.ExtendedStateMachine.GetEnumerator();
                try
                {
                    for (
                    ; extendedStateMachineEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extendedStateMachineEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extendedStateMachineEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPseudostate pseudostateItem = item.As<IPseudostate>();
                if (((pseudostateItem != null) 
                            && this._parent.ConnectionPoint.Remove(pseudostateItem)))
                {
                    return true;
                }
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.SubmachineState.Remove(stateItem)))
                {
                    return true;
                }
                IRegion regionItem = item.As<IRegion>();
                if (((regionItem != null) 
                            && this._parent.Region.Remove(regionItem)))
                {
                    return true;
                }
                IStateMachine stateMachineItem = item.As<IStateMachine>();
                if (((stateMachineItem != null) 
                            && this._parent.ExtendedStateMachine.Remove(stateMachineItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConnectionPoint).Concat(this._parent.SubmachineState).Concat(this._parent.Region).Concat(this._parent.ExtendedStateMachine).GetEnumerator();
            }
        }
    }
}

