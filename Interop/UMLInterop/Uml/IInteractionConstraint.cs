//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for InteractionConstraint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InteractionConstraint))]
    [XmlDefaultImplementationTypeAttribute(typeof(InteractionConstraint))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionConstraint")]
    public interface IInteractionConstraint : IModelElement, IConstraint
    {
        
        /// <summary>
        /// The maximum number of iterations of a loop
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("maxint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Maxint
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimum number of iterations of a loop
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("minint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Minint
        {
            get;
            set;
        }
        
        /// <summary>
        /// Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.
        ///maxint-&gt;notEmpty() or minint-&gt;notEmpty() implies
        ///interactionOperand.combinedFragment.interactionOperator =
        ///InteractionOperatorKind::loop
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Minint_maxint(object diagnostics, object context);
        
        /// <summary>
        /// If minint is specified, then the expression must evaluate to a non-negative integer.
        ///minint-&gt;notEmpty() implies 
        ///minint-&gt;asSequence()-&gt;first().integerValue() &gt;= 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Minint_non_negative(object diagnostics, object context);
        
        /// <summary>
        /// If maxint is specified, then the expression must evaluate to a positive integer.
        ///maxint-&gt;notEmpty() implies 
        ///maxint-&gt;asSequence()-&gt;first().integerValue() &gt; 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maxint_positive(object diagnostics, object context);
        
        /// <summary>
        /// The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Dynamic_variables(object diagnostics, object context);
        
        /// <summary>
        /// The constraint may contain references to global data or write-once data.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Global_data(object diagnostics, object context);
        
        /// <summary>
        /// If maxint is specified, then minint must be specified and the evaluation of maxint must be &gt;= the evaluation of minint.
        ///maxint-&gt;notEmpty() implies (minint-&gt;notEmpty() and 
        ///maxint-&gt;asSequence()-&gt;first().integerValue() &gt;=
        ///minint-&gt;asSequence()-&gt;first().integerValue() )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maxint_greater_equal_minint(object diagnostics, object context);
    }
}
