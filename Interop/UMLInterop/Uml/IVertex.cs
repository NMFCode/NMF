//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Vertex
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Vertex))]
    [XmlDefaultImplementationTypeAttribute(typeof(Vertex))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Vertex")]
    public interface IVertex : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The Region that contains this Vertex.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("container")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("subvertex")]
        IRegion Container
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operation containingStateMachine() returns the StateMachine in which this Vertex is defined.
        ///result = (if container &lt;&gt; null
        ///then
        ///-- the container is a region
        ///   container.containingStateMachine()
        ///else 
        ///   if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then
        ///      self.oclAsType(Pseudostate).stateMachine
        ///   else 
        ///      if (self.oclIsKindOf(ConnectionPointReference)) then
        ///          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible
        ///      else 
        ///          null
        ///      endif
        ///   endif
        ///endif
        ///)
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        IStateMachine ContainingStateMachine();
        
        /// <summary>
        /// Derivation for Vertex::/incoming.
        ///result = (Transition.allInstances()-&gt;select(target=self))
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        ISetExpression<ITransition> GetIncomings();
        
        /// <summary>
        /// Derivation for Vertex::/outgoing
        ///result = (Transition.allInstances()-&gt;select(source=self))
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        ISetExpression<ITransition> GetOutgoings();
        
        /// <summary>
        /// This utility operation returns true if the Vertex is contained in the State s (input argument).
        ///result = (if not s.isComposite() or container-&gt;isEmpty() then
        ///	false
        ///else
        ///	if container.state = s then 
        ///		true
        ///	else
        ///		container.state.isContainedInState(s)
        ///	endif
        ///endif)
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        /// <param name="s"></param>
        bool IsContainedInState(IState s);
        
        /// <summary>
        /// This utility query returns true if the Vertex is contained in the Region r (input argument).
        ///result = (if (container = r) then
        ///	true
        ///else
        ///	if (r.state-&gt;isEmpty()) then
        ///		false
        ///	else
        ///		container.state.isContainedInRegion(r)
        ///	endif
        ///endif)
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        /// <param name="r"></param>
        bool IsContainedInRegion(IRegion r);
    }
}
