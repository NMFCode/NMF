//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement.
    ///<p>From package UML::StructuredClassifiers.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectorEnd")]
    public partial class ConnectorEnd : MultiplicityElement, IConnectorEnd, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _role_and_part_with_portOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRole_and_part_with_portOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _part_with_port_emptyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrievePart_with_port_emptyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _self_part_with_portOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSelf_part_with_portOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDefiningEndOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDefiningEndOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _partWithPortReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePartWithPortReference);
        
        /// <summary>
        /// The backing field for the PartWithPort property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProperty _partWithPort;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _roleReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRoleReference);
        
        /// <summary>
        /// The backing field for the Role property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConnectableElement _role;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Indicates the role of the internal structure of a Classifier with the Port to which the ConnectorEnd is attached.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DisplayNameAttribute("partWithPort")]
        [DescriptionAttribute("Indicates the role of the internal structure of a Classifier with the Port to whi" +
            "ch the ConnectorEnd is attached.\n<p>From package UML::StructuredClassifiers.</p>" +
            "")]
        [CategoryAttribute("ConnectorEnd")]
        [XmlElementNameAttribute("partWithPort")]
        [XmlAttributeAttribute(true)]
        public IProperty PartWithPort
        {
            get
            {
                return this._partWithPort;
            }
            set
            {
                if ((this._partWithPort != value))
                {
                    IProperty old = this._partWithPort;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("PartWithPort", e, _partWithPortReference);
                    this._partWithPort = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPartWithPort;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPartWithPort;
                    }
                    this.OnPropertyChanged("PartWithPort", e, _partWithPortReference);
                }
            }
        }
        
        /// <summary>
        /// The ConnectableElement attached at this ConnectorEnd. When an instance of the containing Classifier is created, a link may (depending on the multiplicities) be created to an instance of the Classifier that types this ConnectableElement.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DisplayNameAttribute("role")]
        [DescriptionAttribute(@"The ConnectableElement attached at this ConnectorEnd. When an instance of the containing Classifier is created, a link may (depending on the multiplicities) be created to an instance of the Classifier that types this ConnectableElement.
<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("ConnectorEnd")]
        [XmlElementNameAttribute("role")]
        [XmlAttributeAttribute(true)]
        public IConnectableElement Role
        {
            get
            {
                return this._role;
            }
            set
            {
                if ((this._role != value))
                {
                    IConnectableElement old = this._role;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Role", e, _roleReference);
                    this._role = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRole;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRole;
                    }
                    this.OnPropertyChanged("Role", e, _roleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConnectorEndReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectorEnd")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If a ConnectorEnd references a partWithPort, then the role must be a Port that is defined or inherited by the type of the partWithPort.
        ///partWithPort->notEmpty() implies 
        ///  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Role_and_part_with_port(object diagnostics, object context)
        {
            System.Func<IConnectorEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectorEnd, object, object, bool>>(_role_and_part_with_portOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method role_and_part_with_port registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _role_and_part_with_portOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _role_and_part_with_portOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _role_and_part_with_portOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRole_and_part_with_portOperation()
        {
            return ClassInstance.LookupOperation("role_and_part_with_port");
        }
        
        /// <summary>
        /// If a ConnectorEnd is attached to a Port of the containing Classifier, partWithPort will be empty.
        ///(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Part_with_port_empty(object diagnostics, object context)
        {
            System.Func<IConnectorEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectorEnd, object, object, bool>>(_part_with_port_emptyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method part_with_port_empty registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _part_with_port_emptyOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _part_with_port_emptyOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _part_with_port_emptyOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrievePart_with_port_emptyOperation()
        {
            return ClassInstance.LookupOperation("part_with_port_empty");
        }
        
        /// <summary>
        /// The multiplicity of the ConnectorEnd may not be more general than the multiplicity of the corresponding end of the Association typing the owning Connector, if any.
        ///self.compatibleWith(definingEnd)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity(object diagnostics, object context)
        {
            System.Func<IConnectorEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectorEnd, object, object, bool>>(_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("multiplicity");
        }
        
        /// <summary>
        /// The Property held in self.partWithPort must not be a Port.
        ///partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Self_part_with_port(object diagnostics, object context)
        {
            System.Func<IConnectorEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectorEnd, object, object, bool>>(_self_part_with_portOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method self_part_with_port registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _self_part_with_portOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _self_part_with_portOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _self_part_with_portOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSelf_part_with_portOperation()
        {
            return ClassInstance.LookupOperation("self_part_with_port");
        }
        
        /// <summary>
        /// Derivation for ConnectorEnd::/definingEnd : Property
        ///result = (if connector.type = null 
        ///then
        ///  null 
        ///else
        ///  let index : Integer = connector.end->indexOf(self) in
        ///    connector.type.memberEnd->at(index)
        ///endif)
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        public IProperty GetDefiningEnd()
        {
            System.Func<IConnectorEnd, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectorEnd, IProperty>>(_getDefiningEndOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDefiningEnd registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDefiningEndOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDefiningEndOperation.Value, e));
            IProperty result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDefiningEndOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDefiningEndOperation()
        {
            return ClassInstance.LookupOperation("getDefiningEnd");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePartWithPortReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConnectorEnd.ClassInstance)).Resolve("partWithPort")));
        }
        
        /// <summary>
        /// Handles the event that the PartWithPort property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPartWithPort(object sender, System.EventArgs eventArgs)
        {
            this.PartWithPort = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRoleReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConnectorEnd.ClassInstance)).Resolve("role")));
        }
        
        /// <summary>
        /// Handles the event that the Role property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRole(object sender, System.EventArgs eventArgs)
        {
            this.Role = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PARTWITHPORT"))
            {
                return this.PartWithPort;
            }
            if ((reference == "ROLE"))
            {
                return this.Role;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARTWITHPORT"))
            {
                this.PartWithPort = ((IProperty)(value));
                return;
            }
            if ((feature == "ROLE"))
            {
                this.Role = ((IConnectableElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PARTWITHPORT"))
            {
                return new PartWithPortProxy(this);
            }
            if ((reference == "ROLE"))
            {
                return new RoleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectorEnd")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConnectorEnd class
        /// </summary>
        public class ConnectorEndReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConnectorEnd _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConnectorEndReferencedElementsCollection(ConnectorEnd parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PartWithPort != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Role != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PartWithPort == null))
                {
                    IProperty partWithPortCasted = item.As<IProperty>();
                    if ((partWithPortCasted != null))
                    {
                        this._parent.PartWithPort = partWithPortCasted;
                        return;
                    }
                }
                if ((this._parent.Role == null))
                {
                    IConnectableElement roleCasted = item.As<IConnectableElement>();
                    if ((roleCasted != null))
                    {
                        this._parent.Role = roleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PartWithPort = null;
                this._parent.Role = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PartWithPort))
                {
                    return true;
                }
                if ((item == this._parent.Role))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PartWithPort != null))
                {
                    array[arrayIndex] = this._parent.PartWithPort;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Role != null))
                {
                    array[arrayIndex] = this._parent.Role;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PartWithPort == item))
                {
                    this._parent.PartWithPort = null;
                    return true;
                }
                if ((this._parent.Role == item))
                {
                    this._parent.Role = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PartWithPort).Concat(this._parent.Role).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the partWithPort property
        /// </summary>
        private sealed class PartWithPortProxy : ModelPropertyChange<IConnectorEnd, IProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PartWithPortProxy(IConnectorEnd modelElement) : 
                    base(modelElement, "partWithPort")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProperty Value
            {
                get
                {
                    return this.ModelElement.PartWithPort;
                }
                set
                {
                    this.ModelElement.PartWithPort = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the role property
        /// </summary>
        private sealed class RoleProxy : ModelPropertyChange<IConnectorEnd, IConnectableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RoleProxy(IConnectorEnd modelElement) : 
                    base(modelElement, "role")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectableElement Value
            {
                get
                {
                    return this.ModelElement.Role;
                }
                set
                {
                    this.ModelElement.Role = value;
                }
            }
        }
    }
}

