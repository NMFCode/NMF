//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Profile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Profile))]
    [XmlDefaultImplementationTypeAttribute(typeof(Profile))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Profile")]
    public interface IProfile : IModelElement, IPackage
    {
        
        /// <summary>
        /// References a metaclass that may be extended.
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("metaclassReference")]
        [DescriptionAttribute("References a metaclass that may be extended.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Profile")]
        [XmlElementNameAttribute("metaclassReference")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IElementImport> MetaclassReference
        {
            get;
        }
        
        /// <summary>
        /// References a package containing (directly or indirectly) metaclasses that may be extended.
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("metamodelReference")]
        [DescriptionAttribute("References a package containing (directly or indirectly) metaclasses that may be " +
            "extended.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Profile")]
        [XmlElementNameAttribute("metamodelReference")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IPackageImport> MetamodelReference
        {
            get;
        }
        
        /// <summary>
        /// An element imported as a metaclassReference is not specialized or generalized in a Profile.
        ///metaclassReference.importedElement->
        ///	select(c | c.oclIsKindOf(Classifier) and
        ///		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()
        ///and 
        ///packagedElement->
        ///    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->
        ///       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Metaclass_reference_not_specialized(object diagnostics, object context);
        
        /// <summary>
        /// All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.
        ///metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->
        ///  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool References_same_metamodel(object diagnostics, object context);
        
        /// <summary>
        /// Creates and returns an instance of (the Ecore representation of) the specified classifier defined in this profile.
        /// </summary>
        /// <param name="classifier">The classifier of which to create an instance.</param>
        IEObject Create(IClassifier classifier);
        
        /// <summary>
        /// Defines this profile by (re)creating Ecore representations of its current contents.
        /// </summary>
        IEPackage Define();
        
        /// <summary>
        /// Defines this profile by (re)creating Ecore representations of its current contents, using the specified options, diagnostics, and context.
        /// </summary>
        /// <param name="options">The options to use.</param>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        IEPackage Define(object options, object diagnostics, object context);
        
        /// <summary>
        /// Retrieves the current definition (Ecore representation) of this profile.
        /// </summary>
        IEPackage GetDefinition();
        
        /// <summary>
        /// Retrieves the current definition (Ecore representation) of the specified named element in this profile.
        /// </summary>
        /// <param name="namedElement">The named element whose definition to retrieve.</param>
        IENamedElement GetDefinition(INamedElement namedElement);
        
        /// <summary>
        /// Retrieves the extensions owned by this profile, excluding non-required extensions if indicated.
        /// </summary>
        /// <param name="requiredOnly">Whether to retrieve only required extensions.</param>
        ISetExpression<NMF.Interop.Uml.IExtension> GetOwnedExtensions(bool requiredOnly);
        
        /// <summary>
        /// Retrieves the metaclasses referenced by this profile.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IClass> GetReferencedMetaclasses();
        
        /// <summary>
        /// Retrieves the metamodels referenced by this profile.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IModel> GetReferencedMetamodels();
        
        /// <summary>
        /// Determines whether this profile is defined.
        /// </summary>
        bool IsDefined();
    }
}

