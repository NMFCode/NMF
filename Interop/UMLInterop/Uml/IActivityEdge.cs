//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ActivityEdge
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ActivityEdge))]
    [XmlDefaultImplementationTypeAttribute(typeof(ActivityEdge))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge")]
    public interface IActivityEdge : IModelElement, IRedefinableElement
    {
        
        /// <summary>
        /// The Activity containing the ActivityEdge, if it is directly owned by an Activity.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("activity")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("edge")]
        IActivity Activity
        {
            get;
            set;
        }
        
        /// <summary>
        /// A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("guard")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Guard
        {
            get;
            set;
        }
        
        /// <summary>
        /// ActivityPartitions containing the ActivityEdge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inPartition")]
        [DescriptionAttribute("ActivityPartitions containing the ActivityEdge.\n<p>From package UML::Activities.<" +
            "/p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("inPartition")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("edge")]
        [ConstantAttribute()]
        ISetExpression<IActivityPartition> InPartition
        {
            get;
        }
        
        /// <summary>
        /// The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("interrupts")]
        [DescriptionAttribute("The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdg" +
            "e.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("interrupts")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("interruptingEdge")]
        IInterruptibleActivityRegion Interrupts
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inStructuredNode")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("edge")]
        IStructuredActivityNode InStructuredNode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivityNode to which tokens are put when they traverse the ActivityEdge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("target")]
        [DescriptionAttribute("The ActivityNode to which tokens are put when they traverse the ActivityEdge.\n<p>" +
            "From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("incoming")]
        IActivityNode Target
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivityNode from which tokens are taken when they traverse the ActivityEdge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("source")]
        [DescriptionAttribute("The ActivityNode from which tokens are taken when they traverse the ActivityEdge." +
            "\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outgoing")]
        IActivityNode Source
        {
            get;
            set;
        }
        
        /// <summary>
        /// ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedEdge")]
        [DescriptionAttribute("ActivityEdges from a generalization of the Activity containing this ActivityEdge " +
            "that are redefined by this ActivityEdge.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("redefinedEdge")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IActivityEdge> RedefinedEdge
        {
            get;
        }
        
        /// <summary>
        /// The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("weight")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Weight
        {
            get;
            set;
        }
        
        /// <summary>
        /// If an ActivityEdge is directly owned by an Activity, then its source and target must be directly or indirectly contained in the same Activity.
        ///activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Source_and_target(object diagnostics, object context);
    }
}

