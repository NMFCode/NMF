//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for CombinedFragment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CombinedFragment))]
    [XmlDefaultImplementationTypeAttribute(typeof(CombinedFragment))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//CombinedFragment")]
    public interface ICombinedFragment : IModelElement, IInteractionFragment
    {
        
        /// <summary>
        /// Specifies the operation which defines the semantics of this combination of InteractionFragments.
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [DefaultValueAttribute(InteractionOperatorKind.Seq)]
        [DisplayNameAttribute("interactionOperator")]
        [DescriptionAttribute("Specifies the operation which defines the semantics of this combination of Intera" +
            "ctionFragments.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("CombinedFragment")]
        [XmlElementNameAttribute("interactionOperator")]
        [XmlAttributeAttribute(true)]
        InteractionOperatorKind InteractionOperator
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the gates that form the interface between this CombinedFragment and its surroundings
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("cfragmentGate")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IGate> CfragmentGate
        {
            get;
        }
        
        /// <summary>
        /// The set of operands of the combined fragment.
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("operand")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IInteractionOperand> Operand
        {
            get;
        }
        
        /// <summary>
        /// If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines covered by the enclosing InteractionFragment.
        ///interactionOperator=InteractionOperatorKind::break  implies   
        ///enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(
        ///   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Break(object diagnostics, object context);
        
        /// <summary>
        /// The interaction operators 'consider' and 'ignore' can only be used for the ConsiderIgnoreFragment subtype of CombinedFragment
        ///((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Consider_and_ignore(object diagnostics, object context);
        
        /// <summary>
        /// If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand.
        ///(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or
        ///interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or
        ///interactionOperator = InteractionOperatorKind::neg)
        ///implies operand->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Opt_loop_break_neg(object diagnostics, object context);
    }
}

