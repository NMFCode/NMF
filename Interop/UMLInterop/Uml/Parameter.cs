//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations.
    ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Parameter")]
    [DebuggerDisplayAttribute("Parameter {Name}")]
    public partial class Parameter : ConnectableElement, NMF.Interop.Uml.IParameter, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _in_and_outOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIn_and_outOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_exceptionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_exceptionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _connector_endOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConnector_endOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _reentrant_behaviorsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReentrant_behaviorsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _stream_and_exceptionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveStream_and_exceptionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _object_effectOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveObject_effectOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isSetDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsSetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setBooleanDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetBooleanDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setIntegerDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetIntegerDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setNullDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetNullDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setRealDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetRealDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setStringDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetStringDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setUnlimitedNaturalDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetUnlimitedNaturalDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unsetDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnsetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDefaultOperation);
        
        /// <summary>
        /// The backing field for the Direction property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ParameterDirectionKind _direction = ParameterDirectionKind.In;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _directionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDirectionAttribute);
        
        /// <summary>
        /// The backing field for the Effect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<ParameterEffectKind> _effect;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _effectAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEffectAttribute);
        
        /// <summary>
        /// The backing field for the IsException property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isException = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isExceptionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsExceptionAttribute);
        
        /// <summary>
        /// The backing field for the IsStream property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isStream = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isStreamAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsStreamAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _defaultValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDefaultValueReference);
        
        /// <summary>
        /// The backing field for the DefaultValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _defaultValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _operationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOperationReference);
        
        /// <summary>
        /// The backing field for the Operation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Uml.IOperation _operation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _parameterSetReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveParameterSetReference);
        
        /// <summary>
        /// The backing field for the ParameterSet property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ParameterParameterSetCollection _parameterSet;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_ge_lowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_ge_lowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_ge_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_ge_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _value_specification_no_side_effectsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValue_specification_no_side_effectsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _value_specification_constantOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValue_specification_constantOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_is_integerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_is_integerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_is_unlimitedNaturalOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_is_unlimitedNaturalOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setLowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetLowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setUpperOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetUpperOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _compatibleWithOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCompatibleWithOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesMultiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesMultiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMultivaluedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMultivaluedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getLowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetLowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lowerBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLowerBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getUpperOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetUpperOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upperBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpperBoundOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerValueReference);
        
        /// <summary>
        /// The backing field for the LowerValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _lowerValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperValueReference);
        
        /// <summary>
        /// The backing field for the UpperValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _upperValue;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Parameter()
        {
            this._parameterSet = new ParameterParameterSetCollection(this);
            this._parameterSet.CollectionChanging += this.ParameterSetCollectionChanging;
            this._parameterSet.CollectionChanged += this.ParameterSetCollectionChanged;
        }
        
        /// <summary>
        /// Indicates whether a parameter is being sent into or out of a behavioral element.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(ParameterDirectionKind.In)]
        [DisplayNameAttribute("direction")]
        [DescriptionAttribute("Indicates whether a parameter is being sent into or out of a behavioral element.\n" +
            "<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        public ParameterDirectionKind Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    ParameterDirectionKind old = this._direction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Direction", e, _directionAttribute);
                    this._direction = value;
                    this.OnPropertyChanged("Direction", e, _directionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the effect that executions of the owner of the Parameter have on objects passed in or out of the parameter.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("effect")]
        [DescriptionAttribute("Specifies the effect that executions of the owner of the Parameter have on object" +
            "s passed in or out of the parameter.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("effect")]
        [XmlAttributeAttribute(true)]
        public Nullable<ParameterEffectKind> Effect
        {
            get
            {
                return this._effect;
            }
            set
            {
                if ((this._effect != value))
                {
                    Nullable<ParameterEffectKind> old = this._effect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Effect", e, _effectAttribute);
                    this._effect = value;
                    this.OnPropertyChanged("Effect", e, _effectAttribute);
                }
            }
        }
        
        /// <summary>
        /// Tells whether an output parameter may emit a value to the exclusion of the other outputs.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isException")]
        [DescriptionAttribute("Tells whether an output parameter may emit a value to the exclusion of the other " +
            "outputs.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("isException")]
        [XmlAttributeAttribute(true)]
        public bool IsException
        {
            get
            {
                return this._isException;
            }
            set
            {
                if ((this._isException != value))
                {
                    bool old = this._isException;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsException", e, _isExceptionAttribute);
                    this._isException = value;
                    this.OnPropertyChanged("IsException", e, _isExceptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter may post values while the behavior is executing.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isStream")]
        [DescriptionAttribute("Tells whether an input parameter may accept values while its behavior is executin" +
            "g, or whether an output parameter may post values while the behavior is executin" +
            "g.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("isStream")]
        [XmlAttributeAttribute(true)]
        public bool IsStream
        {
            get
            {
                return this._isStream;
            }
            set
            {
                if ((this._isStream != value))
                {
                    bool old = this._isStream;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsStream", e, _isStreamAttribute);
                    this._isStream = value;
                    this.OnPropertyChanged("IsStream", e, _isStreamAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("defaultValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification DefaultValue
        {
            get
            {
                return this._defaultValue;
            }
            set
            {
                if ((this._defaultValue != value))
                {
                    IValueSpecification old = this._defaultValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DefaultValue", e, _defaultValueReference);
                    this._defaultValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetDefaultValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetDefaultValue;
                    }
                    this.OnPropertyChanged("DefaultValue", e, _defaultValueReference);
                }
            }
        }
        
        /// <summary>
        /// The Operation owning this parameter.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("operation")]
        [DescriptionAttribute("The Operation owning this parameter.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("operation")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Uml.IOperation Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    NMF.Interop.Uml.IOperation old = this._operation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Operation", e, _operationReference);
                    this._operation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperation;
                    }
                    this.OnPropertyChanged("Operation", e, _operationReference);
                }
            }
        }
        
        /// <summary>
        /// The ParameterSets containing the parameter. See ParameterSet.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("parameterSet")]
        [DescriptionAttribute("The ParameterSets containing the parameter. See ParameterSet.\n<p>From package UML" +
            "::Classification.</p>")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("parameterSet")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("parameter")]
        [ConstantAttribute()]
        public ISetExpression<IParameterSet> ParameterSet
        {
            get
            {
                return this._parameterSet;
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this MultiplicityElement are sequentially ordered.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("For a multivalued multiplicity, this attribute specifies whether the values in an" +
            " instantiation of this MultiplicityElement are sequentially ordered.\n<p>From pac" +
            "kage UML::CommonStructure.</p>")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this MultiplicityElement are unique.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnique")]
        [DescriptionAttribute("For a multivalued multiplicity, this attributes specifies whether the values in a" +
            "n instantiation of this MultiplicityElement are unique.\n<p>From package UML::Com" +
            "monStructure.</p>")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The specification of the lower bound for this multiplicity.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("lowerValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification LowerValue
        {
            get
            {
                return this._lowerValue;
            }
            set
            {
                if ((this._lowerValue != value))
                {
                    IValueSpecification old = this._lowerValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("LowerValue", e, _lowerValueReference);
                    this._lowerValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetLowerValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetLowerValue;
                    }
                    this.OnPropertyChanged("LowerValue", e, _lowerValueReference);
                }
            }
        }
        
        /// <summary>
        /// The specification of the upper bound for this multiplicity.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("upperValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification UpperValue
        {
            get
            {
                return this._upperValue;
            }
            set
            {
                if ((this._upperValue != value))
                {
                    IValueSpecification old = this._upperValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("UpperValue", e, _upperValueReference);
                    this._upperValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetUpperValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetUpperValue;
                    }
                    this.OnPropertyChanged("UpperValue", e, _upperValueReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ParameterChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Parameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Only in and inout Parameters may have a delete effect. Only out, inout, and return Parameters may have a create effect.
        ///(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_&apos;in&apos; or direction = ParameterDirectionKind::inout))
        ///and
        ///(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool In_and_out(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_in_and_outOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method in_and_out registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _in_and_outOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _in_and_outOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _in_and_outOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIn_and_outOperation()
        {
            return ClassInstance.LookupOperation("in_and_out");
        }
        
        /// <summary>
        /// An input Parameter cannot be an exception.
        ///isException implies (direction &lt;&gt; ParameterDirectionKind::_&apos;in&apos; and direction &lt;&gt; ParameterDirectionKind::inout)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_exception(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_not_exceptionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_exception registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_exceptionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_exceptionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_exceptionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_exceptionOperation()
        {
            return ClassInstance.LookupOperation("not_exception");
        }
        
        /// <summary>
        /// A Parameter may only be associated with a Connector end within the context of a Collaboration.
        ///end-&gt;notEmpty() implies collaboration-&gt;notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Connector_end(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_connector_endOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method connector_end registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _connector_endOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _connector_endOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _connector_endOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConnector_endOperation()
        {
            return ClassInstance.LookupOperation("connector_end");
        }
        
        /// <summary>
        /// Reentrant behaviors cannot have stream Parameters.
        ///(isStream and behavior &lt;&gt; null) implies not behavior.isReentrant
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Reentrant_behaviors(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_reentrant_behaviorsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method reentrant_behaviors registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _reentrant_behaviorsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _reentrant_behaviorsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _reentrant_behaviorsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReentrant_behaviorsOperation()
        {
            return ClassInstance.LookupOperation("reentrant_behaviors");
        }
        
        /// <summary>
        /// A Parameter cannot be a stream and exception at the same time.
        ///not (isException and isStream)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Stream_and_exception(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_stream_and_exceptionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method stream_and_exception registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _stream_and_exceptionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _stream_and_exceptionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _stream_and_exceptionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveStream_and_exceptionOperation()
        {
            return ClassInstance.LookupOperation("stream_and_exception");
        }
        
        /// <summary>
        /// Parameters typed by DataTypes cannot have an effect.
        ///(type.oclIsKindOf(DataType)) implies (effect = null)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Object_effect(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, object, object, bool>>(_object_effectOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method object_effect registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _object_effectOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _object_effectOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _object_effectOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveObject_effectOperation()
        {
            return ClassInstance.LookupOperation("object_effect");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public bool IsSetDefault()
        {
            System.Func<NMF.Interop.Uml.IParameter, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, bool>>(_isSetDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isSetDefault registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isSetDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isSetDefaultOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isSetDefaultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsSetDefaultOperation()
        {
            return ClassInstance.LookupOperation("isSetDefault");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the specified Boolean value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetBooleanDefaultValue(bool value)
        {
            System.Action<NMF.Interop.Uml.IParameter, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, bool>>(_setBooleanDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setBooleanDefaultValue registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setBooleanDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setBooleanDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setBooleanDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetBooleanDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setBooleanDefaultValue");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newDefault"></param>
        public void SetDefault(string newDefault)
        {
            System.Action<NMF.Interop.Uml.IParameter, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, string>>(_setDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setDefault registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setDefaultOperation.Value, newDefault);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setDefaultOperation.Value, e));
            handler.Invoke(this, newDefault);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setDefaultOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetDefaultOperation()
        {
            return ClassInstance.LookupOperation("setDefault");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the specified integer value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetIntegerDefaultValue(int value)
        {
            System.Action<NMF.Interop.Uml.IParameter, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, int>>(_setIntegerDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setIntegerDefaultValue registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setIntegerDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setIntegerDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setIntegerDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetIntegerDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setIntegerDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the null value.
        /// </summary>
        public void SetNullDefaultValue()
        {
            System.Action<NMF.Interop.Uml.IParameter> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter>>(_setNullDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setNullDefaultValue registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setNullDefaultValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setNullDefaultValueOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setNullDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetNullDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setNullDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the specified real value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetRealDefaultValue(double value)
        {
            System.Action<NMF.Interop.Uml.IParameter, double> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, double>>(_setRealDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setRealDefaultValue registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setRealDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setRealDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setRealDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetRealDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setRealDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the specified string value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetStringDefaultValue(string value)
        {
            System.Action<NMF.Interop.Uml.IParameter, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, string>>(_setStringDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setStringDefaultValue registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setStringDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setStringDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setStringDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetStringDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setStringDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this parameter to the specified unlimited natural value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetUnlimitedNaturalDefaultValue(object value)
        {
            System.Action<NMF.Interop.Uml.IParameter, object> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter, object>>(_setUnlimitedNaturalDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setUnlimitedNaturalDefaultValue registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setUnlimitedNaturalDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setUnlimitedNaturalDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setUnlimitedNaturalDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetUnlimitedNaturalDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setUnlimitedNaturalDefaultValue");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void UnsetDefault()
        {
            System.Action<NMF.Interop.Uml.IParameter> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<NMF.Interop.Uml.IParameter>>(_unsetDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unsetDefault registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unsetDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unsetDefaultOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unsetDefaultOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnsetDefaultOperation()
        {
            return ClassInstance.LookupOperation("unsetDefault");
        }
        
        /// <summary>
        /// Derivation for Parameter::/default
        ///result = (if self.type = String then defaultValue.stringValue() else null endif)
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        public string GetDefault()
        {
            System.Func<NMF.Interop.Uml.IParameter, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IParameter, string>>(_getDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDefault registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDefaultOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDefaultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDefaultOperation()
        {
            return ClassInstance.LookupOperation("getDefault");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDirectionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("direction")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEffectAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("effect")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsExceptionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("isException")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsStreamAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("isStream")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDefaultValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("defaultValue")));
        }
        
        /// <summary>
        /// Handles the event that the DefaultValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefaultValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DefaultValue))
            {
                this.DefaultValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("operation")));
        }
        
        /// <summary>
        /// Handles the event that the Operation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperation(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Operation))
            {
                this.Operation = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveParameterSetReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Parameter.ClassInstance)).Resolve("parameterSet")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterSetCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ParameterSet", e, _parameterSetReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterSetCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ParameterSet", e, _parameterSetReference);
        }
        
        /// <summary>
        /// The upper bound must be greater than or equal to the lower bound.
        ///upperBound() &gt;= lowerBound()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Upper_ge_lower(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_ge_lowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_ge_lower registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_ge_lowerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_ge_lowerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_ge_lowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_ge_lowerOperation()
        {
            return ClassInstance.LookupOperation("upper_ge_lower");
        }
        
        /// <summary>
        /// The lower bound must be a non-negative integer literal.
        ///lowerBound() &gt;= 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Lower_ge_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_ge_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_ge_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_ge_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_ge_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_ge_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_ge_0Operation()
        {
            return ClassInstance.LookupOperation("lower_ge_0");
        }
        
        /// <summary>
        /// If a non-literal ValueSpecification is used for lowerValue or upperValue, then evaluating that specification must not have side effects.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Value_specification_no_side_effects(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_value_specification_no_side_effectsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value_specification_no_side_effects registe" +
                        "red. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _value_specification_no_side_effectsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _value_specification_no_side_effectsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _value_specification_no_side_effectsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValue_specification_no_side_effectsOperation()
        {
            return ClassInstance.LookupOperation("value_specification_no_side_effects");
        }
        
        /// <summary>
        /// If a non-literal ValueSpecification is used for lowerValue or upperValue, then that specification must be a constant expression.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Value_specification_constant(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_value_specification_constantOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value_specification_constant registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _value_specification_constantOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _value_specification_constantOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _value_specification_constantOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValue_specification_constantOperation()
        {
            return ClassInstance.LookupOperation("value_specification_constant");
        }
        
        /// <summary>
        /// If it is not empty, then lowerValue must have an Integer value.
        ///lowerValue &lt;&gt; null implies lowerValue.integerValue() &lt;&gt; null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Lower_is_integer(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_is_integerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_is_integer registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_is_integerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_is_integerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_is_integerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_is_integerOperation()
        {
            return ClassInstance.LookupOperation("lower_is_integer");
        }
        
        /// <summary>
        /// If it is not empty, then upperValue must have an UnlimitedNatural value.
        ///upperValue &lt;&gt; null implies upperValue.unlimitedValue() &lt;&gt; null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Upper_is_unlimitedNatural(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_is_unlimitedNaturalOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_is_unlimitedNatural registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_is_unlimitedNaturalOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_is_unlimitedNaturalOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_is_unlimitedNaturalOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_is_unlimitedNaturalOperation()
        {
            return ClassInstance.LookupOperation("upper_is_unlimitedNatural");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newLower"></param>
        public void SetLower(int newLower)
        {
            System.Action<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IMultiplicityElement, int>>(_setLowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setLower registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setLowerOperation.Value, newLower);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setLowerOperation.Value, e));
            handler.Invoke(this, newLower);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setLowerOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetLowerOperation()
        {
            return ClassInstance.LookupOperation("setLower");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newUpper"></param>
        public void SetUpper(object newUpper)
        {
            System.Action<IMultiplicityElement, object> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IMultiplicityElement, object>>(_setUpperOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setUpper registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setUpperOperation.Value, newUpper);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setUpperOperation.Value, e));
            handler.Invoke(this, newUpper);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setUpperOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetUpperOperation()
        {
            return ClassInstance.LookupOperation("setUpper");
        }
        
        /// <summary>
        /// The operation compatibleWith takes another multiplicity as input. It returns true if the other multiplicity is wider than, or the same as, self.
        ///result = ((other.lowerBound() &lt;= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() &lt;= other.upperBound())))
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        /// <param name="other"></param>
        public bool CompatibleWith(IMultiplicityElement other)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_compatibleWithOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method compatibleWith registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _compatibleWithOperation.Value, other);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _compatibleWithOperation.Value, e));
            bool result = handler.Invoke(this, other);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _compatibleWithOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCompatibleWithOperation()
        {
            return ClassInstance.LookupOperation("compatibleWith");
        }
        
        /// <summary>
        /// The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
        ///self.upperBound()-&gt;notEmpty() and self.lowerBound()-&gt;notEmpty() and M.upperBound()-&gt;notEmpty() and M.lowerBound()-&gt;notEmpty()
        ///result = ((self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() &gt;= M.upperBound()))
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        /// <param name="m"></param>
        public bool IncludesMultiplicity(IMultiplicityElement m)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_includesMultiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesMultiplicity registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesMultiplicityOperation.Value, m);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesMultiplicityOperation.Value, e));
            bool result = handler.Invoke(this, m);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesMultiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("includesMultiplicity");
        }
        
        /// <summary>
        /// The operation is determines if the upper and lower bound of the ranges are the ones given.
        ///result = (lowerbound = self.lowerBound() and upperbound = self.upperBound())
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        /// <param name="lowerbound"></param>
        /// <param name="upperbound"></param>
        public bool Is(int lowerbound, object upperbound)
        {
            System.Func<IMultiplicityElement, int, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int, object, bool>>(_isOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method is registered. Use the method broker to reg" +
                        "ister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isOperation.Value, lowerbound, upperbound);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isOperation.Value, e));
            bool result = handler.Invoke(this, lowerbound, upperbound);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsOperation()
        {
            return ClassInstance.LookupOperation("is");
        }
        
        /// <summary>
        /// The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
        ///upperBound()-&gt;notEmpty()
        ///result = (upperBound() &gt; 1)
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        public bool IsMultivalued()
        {
            System.Func<IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, bool>>(_isMultivaluedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMultivalued registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMultivaluedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMultivaluedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMultivaluedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMultivaluedOperation()
        {
            return ClassInstance.LookupOperation("isMultivalued");
        }
        
        /// <summary>
        /// The derived lower attribute must equal the lowerBound.
        ///result = (lowerBound())
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        public int GetLower()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_getLowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getLower registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getLowerOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getLowerOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getLowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetLowerOperation()
        {
            return ClassInstance.LookupOperation("getLower");
        }
        
        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise.
        ///result = (if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        public int LowerBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_lowerBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lowerBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lowerBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lowerBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lowerBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLowerBoundOperation()
        {
            return ClassInstance.LookupOperation("lowerBound");
        }
        
        /// <summary>
        /// The derived upper attribute must equal the upperBound.
        ///result = (upperBound())
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        public void GetUpper()
        {
            System.Action<IMultiplicityElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IMultiplicityElement>>(_getUpperOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getUpper registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getUpperOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getUpperOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getUpperOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetUpperOperation()
        {
            return ClassInstance.LookupOperation("getUpper");
        }
        
        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
        ///result = (if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        public void UpperBound()
        {
            System.Action<IMultiplicityElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IMultiplicityElement>>(_upperBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upperBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upperBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upperBoundOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upperBoundOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpperBoundOperation()
        {
            return ClassInstance.LookupOperation("upperBound");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.MultiplicityElement.ClassInstance)).Resolve("lowerValue")));
        }
        
        /// <summary>
        /// Handles the event that the LowerValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLowerValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.LowerValue))
            {
                this.LowerValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.MultiplicityElement.ClassInstance)).Resolve("upperValue")));
        }
        
        /// <summary>
        /// Handles the event that the UpperValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUpperValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.UpperValue))
            {
                this.UpperValue = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.DefaultValue))
            {
                return ModelHelper.CreatePath("defaultValue");
            }
            if ((element == this.LowerValue))
            {
                return ModelHelper.CreatePath("lowerValue");
            }
            if ((element == this.UpperValue))
            {
                return ModelHelper.CreatePath("upperValue");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DEFAULTVALUE"))
            {
                return this.DefaultValue;
            }
            if ((reference == "OPERATION"))
            {
                return this.Operation;
            }
            if ((reference == "LOWERVALUE"))
            {
                return this.LowerValue;
            }
            if ((reference == "UPPERVALUE"))
            {
                return this.UpperValue;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DIRECTION"))
            {
                return this.Direction;
            }
            if ((attribute == "EFFECT"))
            {
                return this.Effect;
            }
            if ((attribute == "ISEXCEPTION"))
            {
                return this.IsException;
            }
            if ((attribute == "ISSTREAM"))
            {
                return this.IsStream;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PARAMETERSET"))
            {
                return this._parameterSet;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DEFAULTVALUE"))
            {
                this.DefaultValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "OPERATION"))
            {
                this.Operation = ((NMF.Interop.Uml.IOperation)(value));
                return;
            }
            if ((feature == "LOWERVALUE"))
            {
                this.LowerValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "UPPERVALUE"))
            {
                this.UpperValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "DIRECTION"))
            {
                this.Direction = ((ParameterDirectionKind)(value));
                return;
            }
            if ((feature == "EFFECT"))
            {
                this.Effect = ((ParameterEffectKind)(value));
                return;
            }
            if ((feature == "ISEXCEPTION"))
            {
                this.IsException = ((bool)(value));
                return;
            }
            if ((feature == "ISSTREAM"))
            {
                this.IsStream = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DIRECTION"))
            {
                return Observable.Box(new DirectionProxy(this));
            }
            if ((attribute == "EFFECT"))
            {
                return Observable.Box(new EffectProxy(this));
            }
            if ((attribute == "ISEXCEPTION"))
            {
                return Observable.Box(new IsExceptionProxy(this));
            }
            if ((attribute == "ISSTREAM"))
            {
                return Observable.Box(new IsStreamProxy(this));
            }
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DEFAULTVALUE"))
            {
                return new DefaultValueProxy(this);
            }
            if ((reference == "OPERATION"))
            {
                return new OperationProxy(this);
            }
            if ((reference == "LOWERVALUE"))
            {
                return new LowerValueProxy(this);
            }
            if ((reference == "UPPERVALUE"))
            {
                return new UpperValueProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Parameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterChildrenCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterReferencedElementsCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the direction property
        /// </summary>
        private sealed class DirectionProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, ParameterDirectionKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirectionProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "direction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ParameterDirectionKind Value
            {
                get
                {
                    return this.ModelElement.Direction;
                }
                set
                {
                    this.ModelElement.Direction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the effect property
        /// </summary>
        private sealed class EffectProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, Nullable<ParameterEffectKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EffectProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "effect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ParameterEffectKind> Value
            {
                get
                {
                    return this.ModelElement.Effect;
                }
                set
                {
                    this.ModelElement.Effect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isException property
        /// </summary>
        private sealed class IsExceptionProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsExceptionProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "isException")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsException;
                }
                set
                {
                    this.ModelElement.IsException = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isStream property
        /// </summary>
        private sealed class IsStreamProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsStreamProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "isStream")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsStream;
                }
                set
                {
                    this.ModelElement.IsStream = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultValue property
        /// </summary>
        private sealed class DefaultValueProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultValueProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "defaultValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.DefaultValue;
                }
                set
                {
                    this.ModelElement.DefaultValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operation property
        /// </summary>
        private sealed class OperationProxy : ModelPropertyChange<NMF.Interop.Uml.IParameter, NMF.Interop.Uml.IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationProxy(NMF.Interop.Uml.IParameter modelElement) : 
                    base(modelElement, "operation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IOperation Value
            {
                get
                {
                    return this.ModelElement.Operation;
                }
                set
                {
                    this.ModelElement.Operation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerValue property
        /// </summary>
        private sealed class LowerValueProxy : ModelPropertyChange<IMultiplicityElement, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerValueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lowerValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.LowerValue;
                }
                set
                {
                    this.ModelElement.LowerValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upperValue property
        /// </summary>
        private sealed class UpperValueProxy : ModelPropertyChange<IMultiplicityElement, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperValueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upperValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.UpperValue;
                }
                set
                {
                    this.ModelElement.UpperValue = value;
                }
            }
        }
    }
}
