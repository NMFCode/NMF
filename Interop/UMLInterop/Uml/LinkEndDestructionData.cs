//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// LinkEndDestructionData is LinkEndData used to provide values for one end of a link to be destroyed by a DestroyLinkAction.
    ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndDestructionData")]
    public partial class LinkEndDestructionData : LinkEndData, ILinkEndDestructionData, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _destroyAt_pinOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDestroyAt_pinOperation);
        
        /// <summary>
        /// The backing field for the IsDestroyDuplicates property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDestroyDuplicates = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDestroyDuplicatesAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDestroyDuplicatesAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _destroyAtReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDestroyAtReference);
        
        /// <summary>
        /// The backing field for the DestroyAt property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _destroyAt;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies whether to destroy duplicates of the value in nonunique Association ends.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDestroyDuplicates")]
        [DescriptionAttribute("Specifies whether to destroy duplicates of the value in nonunique Association end" +
            "s.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("LinkEndDestructionData")]
        [XmlElementNameAttribute("isDestroyDuplicates")]
        [XmlAttributeAttribute(true)]
        public bool IsDestroyDuplicates
        {
            get
            {
                return this._isDestroyDuplicates;
            }
            set
            {
                if ((this._isDestroyDuplicates != value))
                {
                    bool old = this._isDestroyDuplicates;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDestroyDuplicates", e, _isDestroyDuplicatesAttribute);
                    this._isDestroyDuplicates = value;
                    this.OnPropertyChanged("IsDestroyDuplicates", e, _isDestroyDuplicatesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The InputPin that provides the position of an existing link to be destroyed in an ordered, nonunique Association end. The type of the destroyAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("destroyAt")]
        [DescriptionAttribute("The InputPin that provides the position of an existing link to be destroyed in an" +
            " ordered, nonunique Association end. The type of the destroyAt InputPin is Unlim" +
            "itedNatural, but the value cannot be zero or unlimited.\n<p>From package UML::Act" +
            "ions.</p>")]
        [CategoryAttribute("LinkEndDestructionData")]
        [XmlElementNameAttribute("destroyAt")]
        [XmlAttributeAttribute(true)]
        public IInputPin DestroyAt
        {
            get
            {
                return this._destroyAt;
            }
            set
            {
                if ((this._destroyAt != value))
                {
                    IInputPin old = this._destroyAt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DestroyAt", e, _destroyAtReference);
                    this._destroyAt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDestroyAt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDestroyAt;
                    }
                    this.OnPropertyChanged("DestroyAt", e, _destroyAtReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LinkEndDestructionDataReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndDestructionData")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// LinkEndDestructionData for ordered, nonunique Association ends must have a single destroyAt InputPin if isDestroyDuplicates is false, which must be of type UnlimitedNatural and have a multiplicity of 1..1. Otherwise, the action has no destroyAt input pin.
        ///if  not end.isOrdered or end.isUnique or isDestroyDuplicates
        ///then destroyAt = null
        ///else
        ///	destroyAt &lt;&gt; null and 
        ///	destroyAt-&gt;forAll(type=UnlimitedNatural and is(1,1))
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool DestroyAt_pin(object diagnostics, object context)
        {
            System.Func<ILinkEndDestructionData, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILinkEndDestructionData, object, object, bool>>(_destroyAt_pinOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method destroyAt_pin registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _destroyAt_pinOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _destroyAt_pinOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _destroyAt_pinOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDestroyAt_pinOperation()
        {
            return ClassInstance.LookupOperation("destroyAt_pin");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDestroyDuplicatesAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.LinkEndDestructionData.ClassInstance)).Resolve("isDestroyDuplicates")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDestroyAtReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.LinkEndDestructionData.ClassInstance)).Resolve("destroyAt")));
        }
        
        /// <summary>
        /// Handles the event that the DestroyAt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDestroyAt(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DestroyAt))
            {
                this.DestroyAt = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DESTROYAT"))
            {
                return this.DestroyAt;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISDESTROYDUPLICATES"))
            {
                return this.IsDestroyDuplicates;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DESTROYAT"))
            {
                this.DestroyAt = ((IInputPin)(value));
                return;
            }
            if ((feature == "ISDESTROYDUPLICATES"))
            {
                this.IsDestroyDuplicates = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISDESTROYDUPLICATES"))
            {
                return Observable.Box(new IsDestroyDuplicatesProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DESTROYAT"))
            {
                return new DestroyAtProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndDestructionData")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LinkEndDestructionData class
        /// </summary>
        public class LinkEndDestructionDataReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LinkEndDestructionData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LinkEndDestructionDataReferencedElementsCollection(LinkEndDestructionData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DestroyAt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DestroyAt == null))
                {
                    IInputPin destroyAtCasted = item.As<IInputPin>();
                    if ((destroyAtCasted != null))
                    {
                        this._parent.DestroyAt = destroyAtCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DestroyAt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DestroyAt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DestroyAt != null))
                {
                    array[arrayIndex] = this._parent.DestroyAt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DestroyAt == item))
                {
                    this._parent.DestroyAt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DestroyAt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDestroyDuplicates property
        /// </summary>
        private sealed class IsDestroyDuplicatesProxy : ModelPropertyChange<ILinkEndDestructionData, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDestroyDuplicatesProxy(ILinkEndDestructionData modelElement) : 
                    base(modelElement, "isDestroyDuplicates")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDestroyDuplicates;
                }
                set
                {
                    this.ModelElement.IsDestroyDuplicates = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the destroyAt property
        /// </summary>
        private sealed class DestroyAtProxy : ModelPropertyChange<ILinkEndDestructionData, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DestroyAtProxy(ILinkEndDestructionData modelElement) : 
                    base(modelElement, "destroyAt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.DestroyAt;
                }
                set
                {
                    this.ModelElement.DestroyAt = value;
                }
            }
        }
    }
}
