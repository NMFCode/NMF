//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ExceptionHandler is an Element that specifies a handlerBody ExecutableNode to execute in case the specified exception occurs during the execution of the protected ExecutableNode.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ExceptionHandler")]
    public partial class ExceptionHandler : Element, IExceptionHandler, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _handler_body_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHandler_body_edgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _output_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutput_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_inputOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_inputOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _edge_source_targetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEdge_source_targetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _handler_body_ownerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHandler_body_ownerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _exception_input_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveException_input_typeOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _exceptionInputReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExceptionInputReference);
        
        /// <summary>
        /// The backing field for the ExceptionInput property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IObjectNode _exceptionInput;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _exceptionTypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExceptionTypeReference);
        
        /// <summary>
        /// The backing field for the ExceptionType property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _exceptionType;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _handlerBodyReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveHandlerBodyReference);
        
        /// <summary>
        /// The backing field for the HandlerBody property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExecutableNode _handlerBody;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _protectedNodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveProtectedNodeReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ExceptionHandler()
        {
            this._exceptionType = new ObservableAssociationSet<IClassifier>();
            this._exceptionType.CollectionChanging += this.ExceptionTypeCollectionChanging;
            this._exceptionType.CollectionChanged += this.ExceptionTypeCollectionChanged;
        }
        
        /// <summary>
        /// An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("exceptionInput")]
        [DescriptionAttribute("An ObjectNode within the handlerBody. When the ExceptionHandler catches an except" +
            "ion, the exception token is placed on this ObjectNode, causing the handlerBody t" +
            "o execute.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ExceptionHandler")]
        [XmlElementNameAttribute("exceptionInput")]
        [XmlAttributeAttribute(true)]
        public IObjectNode ExceptionInput
        {
            get
            {
                return this._exceptionInput;
            }
            set
            {
                if ((this._exceptionInput != value))
                {
                    IObjectNode old = this._exceptionInput;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ExceptionInput", e, _exceptionInputReference);
                    this._exceptionInput = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetExceptionInput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetExceptionInput;
                    }
                    this.OnPropertyChanged("ExceptionInput", e, _exceptionInputReference);
                }
            }
        }
        
        /// <summary>
        /// The Classifiers whose instances the ExceptionHandler catches as exceptions. If an exception occurs whose type is any exceptionType, the ExceptionHandler catches the exception and executes the handlerBody.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("exceptionType")]
        [DescriptionAttribute("The Classifiers whose instances the ExceptionHandler catches as exceptions. If an" +
            " exception occurs whose type is any exceptionType, the ExceptionHandler catches " +
            "the exception and executes the handlerBody.\n<p>From package UML::Activities.</p>" +
            "")]
        [CategoryAttribute("ExceptionHandler")]
        [XmlElementNameAttribute("exceptionType")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> ExceptionType
        {
            get
            {
                return this._exceptionType;
            }
        }
        
        /// <summary>
        /// An ExecutableNode that is executed if the ExceptionHandler catches an exception.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("handlerBody")]
        [DescriptionAttribute("An ExecutableNode that is executed if the ExceptionHandler catches an exception.\n" +
            "<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ExceptionHandler")]
        [XmlElementNameAttribute("handlerBody")]
        [XmlAttributeAttribute(true)]
        public IExecutableNode HandlerBody
        {
            get
            {
                return this._handlerBody;
            }
            set
            {
                if ((this._handlerBody != value))
                {
                    IExecutableNode old = this._handlerBody;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("HandlerBody", e, _handlerBodyReference);
                    this._handlerBody = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHandlerBody;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHandlerBody;
                    }
                    this.OnPropertyChanged("HandlerBody", e, _handlerBodyReference);
                }
            }
        }
        
        /// <summary>
        /// The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("protectedNode")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("handler")]
        public IExecutableNode ProtectedNode
        {
            get
            {
                return ModelHelper.CastAs<IExecutableNode>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ExceptionHandlerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExceptionHandler")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The handlerBody has no incoming or outgoing ActivityEdges and the exceptionInput has no incoming ActivityEdges.
        ///handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Handler_body_edges(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_handler_body_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method handler_body_edges registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _handler_body_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _handler_body_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _handler_body_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHandler_body_edgesOperation()
        {
            return ClassInstance.LookupOperation("handler_body_edges");
        }
        
        /// <summary>
        /// If the protectedNode is an Action with OutputPins, then the handlerBody must also be an Action with the same number of OutputPins, which are compatible in type, ordering, and multiplicity to those of the protectedNode.
        ///(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies
        ///(
        ///  handlerBody.oclIsKindOf(Action) and 
        ///  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,
        ///        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in
        ///    protectedNodeOutput->size() = handlerBodyOutput->size() and
        ///    Sequence{1..protectedNodeOutput->size()}->forAll(i |
        ///    	handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and
        ///    	handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and
        ///    	handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Output_pins(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_output_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method output_pins registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _output_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _output_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _output_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutput_pinsOperation()
        {
            return ClassInstance.LookupOperation("output_pins");
        }
        
        /// <summary>
        /// The handlerBody is an Action with one InputPin, and that InputPin is the same as the exceptionInput.
        ///handlerBody.oclIsKindOf(Action) and
        ///let inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in
        ///inputs->size()=1 and inputs->first()=exceptionInput
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_input(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_one_inputOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_input registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_inputOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_inputOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_inputOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_inputOperation()
        {
            return ClassInstance.LookupOperation("one_input");
        }
        
        /// <summary>
        /// An ActivityEdge that has a source within the handlerBody of an ExceptionHandler must have its target in the handlerBody also, and vice versa.
        ///let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in
        ///nodes.outgoing->forAll(nodes->includes(target)) and
        ///nodes.incoming->forAll(nodes->includes(source))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Edge_source_target(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_edge_source_targetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method edge_source_target registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _edge_source_targetOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _edge_source_targetOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _edge_source_targetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEdge_source_targetOperation()
        {
            return ClassInstance.LookupOperation("edge_source_target");
        }
        
        /// <summary>
        /// The handlerBody must have the same owner as the protectedNode.
        ///handlerBody.owner=protectedNode.owner
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Handler_body_owner(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_handler_body_ownerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method handler_body_owner registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _handler_body_ownerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _handler_body_ownerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _handler_body_ownerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHandler_body_ownerOperation()
        {
            return ClassInstance.LookupOperation("handler_body_owner");
        }
        
        /// <summary>
        /// The exceptionInput must either have no type or every exceptionType must conform to the exceptionInput type.
        ///exceptionInput.type=null or 
        ///exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Exception_input_type(object diagnostics, object context)
        {
            System.Func<IExceptionHandler, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExceptionHandler, object, object, bool>>(_exception_input_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method exception_input_type registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _exception_input_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _exception_input_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _exception_input_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveException_input_typeOperation()
        {
            return ClassInstance.LookupOperation("exception_input_type");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExceptionInputReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExceptionHandler.ClassInstance)).Resolve("exceptionInput")));
        }
        
        /// <summary>
        /// Handles the event that the ExceptionInput property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExceptionInput(object sender, System.EventArgs eventArgs)
        {
            this.ExceptionInput = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExceptionTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExceptionHandler.ClassInstance)).Resolve("exceptionType")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ExceptionType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExceptionTypeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ExceptionType", e, _exceptionTypeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ExceptionType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExceptionTypeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ExceptionType", e, _exceptionTypeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveHandlerBodyReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExceptionHandler.ClassInstance)).Resolve("handlerBody")));
        }
        
        /// <summary>
        /// Handles the event that the HandlerBody property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHandlerBody(object sender, System.EventArgs eventArgs)
        {
            this.HandlerBody = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveProtectedNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExceptionHandler.ClassInstance)).Resolve("protectedNode")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IExecutableNode oldProtectedNode = ModelHelper.CastAs<IExecutableNode>(oldParent);
            IExecutableNode newProtectedNode = ModelHelper.CastAs<IExecutableNode>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldProtectedNode, newProtectedNode);
            this.OnPropertyChanging("ProtectedNode", e, _protectedNodeReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IExecutableNode oldProtectedNode = ModelHelper.CastAs<IExecutableNode>(oldParent);
            IExecutableNode newProtectedNode = ModelHelper.CastAs<IExecutableNode>(newParent);
            if ((oldProtectedNode != null))
            {
                oldProtectedNode.Handler.Remove(this);
            }
            if ((newProtectedNode != null))
            {
                newProtectedNode.Handler.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldProtectedNode, newProtectedNode);
            this.OnPropertyChanged("ProtectedNode", e, _protectedNodeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EXCEPTIONINPUT"))
            {
                return this.ExceptionInput;
            }
            if ((reference == "HANDLERBODY"))
            {
                return this.HandlerBody;
            }
            if ((reference == "PROTECTEDNODE"))
            {
                return this.ProtectedNode;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EXCEPTIONTYPE"))
            {
                return this._exceptionType;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EXCEPTIONINPUT"))
            {
                this.ExceptionInput = ((IObjectNode)(value));
                return;
            }
            if ((feature == "HANDLERBODY"))
            {
                this.HandlerBody = ((IExecutableNode)(value));
                return;
            }
            if ((feature == "PROTECTEDNODE"))
            {
                this.ProtectedNode = ((IExecutableNode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EXCEPTIONINPUT"))
            {
                return new ExceptionInputProxy(this);
            }
            if ((reference == "HANDLERBODY"))
            {
                return new HandlerBodyProxy(this);
            }
            if ((reference == "PROTECTEDNODE"))
            {
                return new ProtectedNodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExceptionHandler")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExceptionHandler class
        /// </summary>
        public class ExceptionHandlerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExceptionHandler _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExceptionHandlerReferencedElementsCollection(ExceptionHandler parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ExceptionInput != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ExceptionType.Count);
                    if ((this._parent.HandlerBody != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProtectedNode != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.ExceptionType.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.ExceptionType.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ExceptionInput == null))
                {
                    IObjectNode exceptionInputCasted = item.As<IObjectNode>();
                    if ((exceptionInputCasted != null))
                    {
                        this._parent.ExceptionInput = exceptionInputCasted;
                        return;
                    }
                }
                IClassifier exceptionTypeCasted = item.As<IClassifier>();
                if ((exceptionTypeCasted != null))
                {
                    this._parent.ExceptionType.Add(exceptionTypeCasted);
                }
                if ((this._parent.HandlerBody == null))
                {
                    IExecutableNode handlerBodyCasted = item.As<IExecutableNode>();
                    if ((handlerBodyCasted != null))
                    {
                        this._parent.HandlerBody = handlerBodyCasted;
                        return;
                    }
                }
                if ((this._parent.ProtectedNode == null))
                {
                    IExecutableNode protectedNodeCasted = item.As<IExecutableNode>();
                    if ((protectedNodeCasted != null))
                    {
                        this._parent.ProtectedNode = protectedNodeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ExceptionInput = null;
                this._parent.ExceptionType.Clear();
                this._parent.HandlerBody = null;
                this._parent.ProtectedNode = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ExceptionInput))
                {
                    return true;
                }
                if (this._parent.ExceptionType.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HandlerBody))
                {
                    return true;
                }
                if ((item == this._parent.ProtectedNode))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ExceptionInput != null))
                {
                    array[arrayIndex] = this._parent.ExceptionInput;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> exceptionTypeEnumerator = this._parent.ExceptionType.GetEnumerator();
                try
                {
                    for (
                    ; exceptionTypeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = exceptionTypeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    exceptionTypeEnumerator.Dispose();
                }
                if ((this._parent.HandlerBody != null))
                {
                    array[arrayIndex] = this._parent.HandlerBody;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProtectedNode != null))
                {
                    array[arrayIndex] = this._parent.ProtectedNode;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ExceptionInput == item))
                {
                    this._parent.ExceptionInput = null;
                    return true;
                }
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.ExceptionType.Remove(classifierItem)))
                {
                    return true;
                }
                if ((this._parent.HandlerBody == item))
                {
                    this._parent.HandlerBody = null;
                    return true;
                }
                if ((this._parent.ProtectedNode == item))
                {
                    this._parent.ProtectedNode = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ExceptionInput).Concat(this._parent.ExceptionType).Concat(this._parent.HandlerBody).Concat(this._parent.ProtectedNode).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the exceptionInput property
        /// </summary>
        private sealed class ExceptionInputProxy : ModelPropertyChange<IExceptionHandler, IObjectNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExceptionInputProxy(IExceptionHandler modelElement) : 
                    base(modelElement, "exceptionInput")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IObjectNode Value
            {
                get
                {
                    return this.ModelElement.ExceptionInput;
                }
                set
                {
                    this.ModelElement.ExceptionInput = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the handlerBody property
        /// </summary>
        private sealed class HandlerBodyProxy : ModelPropertyChange<IExceptionHandler, IExecutableNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HandlerBodyProxy(IExceptionHandler modelElement) : 
                    base(modelElement, "handlerBody")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExecutableNode Value
            {
                get
                {
                    return this.ModelElement.HandlerBody;
                }
                set
                {
                    this.ModelElement.HandlerBody = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the protectedNode property
        /// </summary>
        private sealed class ProtectedNodeProxy : ModelPropertyChange<IExceptionHandler, IExecutableNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProtectedNodeProxy(IExceptionHandler modelElement) : 
                    base(modelElement, "protectedNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExecutableNode Value
            {
                get
                {
                    return this.ModelElement.ProtectedNode;
                }
                set
                {
                    this.ModelElement.ProtectedNode = value;
                }
            }
        }
    }
}

