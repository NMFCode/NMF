//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ActivityPartition
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ActivityPartition))]
    [XmlDefaultImplementationTypeAttribute(typeof(ActivityPartition))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityPartition")]
    public interface IActivityPartition : IModelElement, IActivityGroup
    {
        
        /// <summary>
        /// Indicates whether the ActivityPartition groups other ActivityPartitions along a dimension.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDimension")]
        [DescriptionAttribute("Indicates whether the ActivityPartition groups other ActivityPartitions along a d" +
            "imension.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("isDimension")]
        [XmlAttributeAttribute(true)]
        bool IsDimension
        {
            get;
            set;
        }
        
        /// <summary>
        /// Indicates whether the ActivityPartition represents an entity to which the partitioning structure does not apply.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isExternal")]
        [DescriptionAttribute("Indicates whether the ActivityPartition represents an entity to which the partiti" +
            "oning structure does not apply.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("isExternal")]
        [XmlAttributeAttribute(true)]
        bool IsExternal
        {
            get;
            set;
        }
        
        /// <summary>
        /// ActivityNodes immediately contained in the ActivityPartition.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("node")]
        [DescriptionAttribute("ActivityNodes immediately contained in the ActivityPartition.\n<p>From package UML" +
            "::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inPartition")]
        [ConstantAttribute()]
        ISetExpression<IActivityNode> Node
        {
            get;
        }
        
        /// <summary>
        /// An Element represented by the functionality modeled within the ActivityPartition.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("represents")]
        [DescriptionAttribute("An Element represented by the functionality modeled within the ActivityPartition." +
            "\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("represents")]
        [XmlAttributeAttribute(true)]
        IElement Represents
        {
            get;
            set;
        }
        
        /// <summary>
        /// Other ActivityPartitions immediately contained in this ActivityPartition (as its subgroups).
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("subpartition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("superPartition")]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityPartition> Subpartition
        {
            get;
        }
        
        /// <summary>
        /// Other ActivityPartitions immediately containing this ActivityPartition (as its superGroups).
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("superPartition")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("subpartition")]
        IActivityPartition SuperPartition
        {
            get;
            set;
        }
        
        /// <summary>
        /// ActivityEdges immediately contained in the ActivityPartition.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("edge")]
        [DescriptionAttribute("ActivityEdges immediately contained in the ActivityPartition.\n<p>From package UML" +
            "::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("edge")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inPartition")]
        [ConstantAttribute()]
        ISetExpression<IActivityEdge> Edge
        {
            get;
        }
        
        /// <summary>
        /// If a non-external ActivityPartition represents a Classifier and has a superPartition, then the superPartition must represent a Classifier, and the Classifier of the subpartition must be nested (nestedClassifier or ownedBehavior) in the Classifier represented by the superPartition, or be at the contained end of a composition Association with the Classifier represented by the superPartition.
        ///(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies
        ///(
        ///   let representedClassifier : Classifier = represents.oclAsType(Classifier) in
        ///     superPartition.represents.oclIsKindOf(Classifier) and
        ///      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in
        ///       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and 
        ///        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) 
        ///       or
        ///       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))
        ///       or
        ///       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and 
        ///                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Represents_classifier(object diagnostics, object context);
        
        /// <summary>
        /// If an ActivityPartition represents a Property and has a superPartition, then the Property must be of a Classifier represented by the superPartition, or of a Classifier that is the type of a Property represented by the superPartition.
        ///(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies
        ///(
        ///  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or 
        ///  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Represents_property_and_is_contained(object diagnostics, object context);
        
        /// <summary>
        /// If an ActivityPartition represents a Property and has a superPartition representing a Classifier, then all the other non-external subpartitions of the superPartition must represent Properties directly owned by the same Classifier.
        ///(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies
        ///(
        ///  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)
        ///  in
        ///    superPartition.subpartition->reject(isExternal)->forAll(p | 
        ///       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Represents_property(object diagnostics, object context);
        
        /// <summary>
        /// An ActvivityPartition with isDimension = true may not be contained by another ActivityPartition.
        ///isDimension implies superPartition->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Dimension_not_contained(object diagnostics, object context);
    }
}

