//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.
    ///<p>From package UML::Classification.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Property")]
    [DebuggerDisplayAttribute("Property {Name}")]
    public partial class Property : StructuralFeature, IProperty, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetting_context_conformsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetting_context_conformsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _derived_union_is_read_onlyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDerived_union_is_read_onlyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_compositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_compositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefined_property_inheritedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefined_property_inheritedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetting_rulesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetting_rulesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _binding_to_attributeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBinding_to_attributeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _derived_union_is_derivedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDerived_union_is_derivedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deployment_targetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeployment_targetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsetted_property_namesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsetted_property_namesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _type_of_opposite_endOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveType_of_opposite_endOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _qualified_is_association_endOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveQualified_is_association_endOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOtherEndOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOtherEndOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isSetDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsSetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setBooleanDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetBooleanDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setIntegerDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetIntegerDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setIsCompositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetIsCompositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setIsNavigableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetIsNavigableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setNullDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetNullDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setOppositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetOppositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setRealDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetRealDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setStringDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetStringDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setUnlimitedNaturalDefaultValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetUnlimitedNaturalDefaultValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unsetDefaultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnsetDefaultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isAttributeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsAttributeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isCompositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsCompositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isNavigableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsNavigableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOppositeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOppositeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subsettingContextOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubsettingContextOperation);
        
        /// <summary>
        /// The backing field for the Aggregation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private AggregationKind _aggregation = AggregationKind.None;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _aggregationAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAggregationAttribute);
        
        /// <summary>
        /// The backing field for the IsDerived property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerived = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedAttribute);
        
        /// <summary>
        /// The backing field for the IsDerivedUnion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerivedUnion = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedUnionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedUnionAttribute);
        
        /// <summary>
        /// The backing field for the IsID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isID = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isIDAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsIDAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _datatypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDatatypeReference);
        
        /// <summary>
        /// The backing field for the Datatype property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Uml.IDataType _datatype;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interfaceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInterfaceReference);
        
        /// <summary>
        /// The backing field for the Interface property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInterface _interface;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _associationEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAssociationEndReference);
        
        /// <summary>
        /// The backing field for the AssociationEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProperty _associationEnd;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _qualifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveQualifierReference);
        
        /// <summary>
        /// The backing field for the Qualifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private PropertyQualifierCollection _qualifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassReference);
        
        /// <summary>
        /// The backing field for the Class property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Uml.IClass _class;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _defaultValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDefaultValueReference);
        
        /// <summary>
        /// The backing field for the DefaultValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _defaultValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _owningAssociationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwningAssociationReference);
        
        /// <summary>
        /// The backing field for the OwningAssociation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAssociation _owningAssociation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedPropertyReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedPropertyReference);
        
        /// <summary>
        /// The backing field for the RedefinedProperty property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IProperty> _redefinedProperty;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subsettedPropertyReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubsettedPropertyReference);
        
        /// <summary>
        /// The backing field for the SubsettedProperty property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IProperty> _subsettedProperty;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _associationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAssociationReference);
        
        /// <summary>
        /// The backing field for the Association property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAssociation _association;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getEndsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetEndsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isCompatibleWithOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsCompatibleWithOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isTemplateParameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsTemplateParameterOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _owningTemplateParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwningTemplateParameterReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _templateParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTemplateParameterReference);
        
        /// <summary>
        /// The backing field for the TemplateParameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITemplateParameter _templateParameter;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDeployedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDeployedElementsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _deploymentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeploymentReference);
        
        /// <summary>
        /// The backing field for the Deployment property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private DeploymentTargetDeploymentCollection _deployment;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Property()
        {
            this._qualifier = new PropertyQualifierCollection(this);
            this._qualifier.CollectionChanging += this.QualifierCollectionChanging;
            this._qualifier.CollectionChanged += this.QualifierCollectionChanged;
            this._redefinedProperty = new ObservableAssociationSet<IProperty>();
            this._redefinedProperty.CollectionChanging += this.RedefinedPropertyCollectionChanging;
            this._redefinedProperty.CollectionChanged += this.RedefinedPropertyCollectionChanged;
            this._subsettedProperty = new ObservableAssociationSet<IProperty>();
            this._subsettedProperty.CollectionChanging += this.SubsettedPropertyCollectionChanging;
            this._subsettedProperty.CollectionChanged += this.SubsettedPropertyCollectionChanged;
            this._deployment = new DeploymentTargetDeploymentCollection(this);
            this._deployment.CollectionChanging += this.DeploymentCollectionChanging;
            this._deployment.CollectionChanged += this.DeploymentCollectionChanged;
        }
        
        /// <summary>
        /// Specifies the kind of aggregation that applies to the Property.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(AggregationKind.None)]
        [DisplayNameAttribute("aggregation")]
        [DescriptionAttribute("Specifies the kind of aggregation that applies to the Property.\n<p>From package U" +
            "ML::Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("aggregation")]
        [XmlAttributeAttribute(true)]
        public AggregationKind Aggregation
        {
            get
            {
                return this._aggregation;
            }
            set
            {
                if ((this._aggregation != value))
                {
                    AggregationKind old = this._aggregation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Aggregation", e, _aggregationAttribute);
                    this._aggregation = value;
                    this.OnPropertyChanged("Aggregation", e, _aggregationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("Specifies whether the Property is derived, i.e., whether its value or values can " +
            "be computed from other information.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        public bool IsDerived
        {
            get
            {
                return this._isDerived;
            }
            set
            {
                if ((this._isDerived != value))
                {
                    bool old = this._isDerived;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerived", e, _isDerivedAttribute);
                    this._isDerived = value;
                    this.OnPropertyChanged("IsDerived", e, _isDerivedAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the property is derived as the union of all of the Properties that are constrained to subset it.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerivedUnion")]
        [DescriptionAttribute("Specifies whether the property is derived as the union of all of the Properties t" +
            "hat are constrained to subset it.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerivedUnion")]
        [XmlAttributeAttribute(true)]
        public bool IsDerivedUnion
        {
            get
            {
                return this._isDerivedUnion;
            }
            set
            {
                if ((this._isDerivedUnion != value))
                {
                    bool old = this._isDerivedUnion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerivedUnion", e, _isDerivedUnionAttribute);
                    this._isDerivedUnion = value;
                    this.OnPropertyChanged("IsDerivedUnion", e, _isDerivedUnionAttribute);
                }
            }
        }
        
        /// <summary>
        /// True indicates this property can be used to uniquely identify an instance of the containing Class.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isID")]
        [DescriptionAttribute("True indicates this property can be used to uniquely identify an instance of the " +
            "containing Class.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isID")]
        [XmlAttributeAttribute(true)]
        public bool IsID
        {
            get
            {
                return this._isID;
            }
            set
            {
                if ((this._isID != value))
                {
                    bool old = this._isID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsID", e, _isIDAttribute);
                    this._isID = value;
                    this.OnPropertyChanged("IsID", e, _isIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DataType that owns this Property, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedAttribute")]
        public NMF.Interop.Uml.IDataType Datatype
        {
            get
            {
                return this._datatype;
            }
            set
            {
                if ((this._datatype != value))
                {
                    NMF.Interop.Uml.IDataType old = this._datatype;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Datatype", e, _datatypeReference);
                    this._datatype = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedAttribute.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedAttribute.Add(this);
                    }
                    this.OnPropertyChanged("Datatype", e, _datatypeReference);
                }
            }
        }
        
        /// <summary>
        /// The Interface that owns this Property, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("interface")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedAttribute")]
        public IInterface Interface
        {
            get
            {
                return this._interface;
            }
            set
            {
                if ((this._interface != value))
                {
                    IInterface old = this._interface;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Interface", e, _interfaceReference);
                    this._interface = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedAttribute.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedAttribute.Add(this);
                    }
                    this.OnPropertyChanged("Interface", e, _interfaceReference);
                }
            }
        }
        
        /// <summary>
        /// Designates the optional association end that owns a qualifier attribute.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("associationEnd")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("qualifier")]
        public IProperty AssociationEnd
        {
            get
            {
                return this._associationEnd;
            }
            set
            {
                if ((this._associationEnd != value))
                {
                    IProperty old = this._associationEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("AssociationEnd", e, _associationEndReference);
                    this._associationEnd = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Qualifier.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Qualifier.Add(this);
                    }
                    this.OnPropertyChanged("AssociationEnd", e, _associationEndReference);
                }
            }
        }
        
        /// <summary>
        /// An optional list of ordered qualifier attributes for the end.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("qualifier")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("associationEnd")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> Qualifier
        {
            get
            {
                return this._qualifier;
            }
        }
        
        /// <summary>
        /// The Class that owns this Property, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("class")]
        [DescriptionAttribute("The Class that owns this Property, if any.\n<p>From package UML::Classification.</" +
            "p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Uml.IClass Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    NMF.Interop.Uml.IClass old = this._class;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Class", e, _classReference);
                    this._class = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetClass;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetClass;
                    }
                    this.OnPropertyChanged("Class", e, _classReference);
                }
            }
        }
        
        /// <summary>
        /// A ValueSpecification that is evaluated to give a default value for the Property when an instance of the owning Classifier is instantiated.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("defaultValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification DefaultValue
        {
            get
            {
                return this._defaultValue;
            }
            set
            {
                if ((this._defaultValue != value))
                {
                    IValueSpecification old = this._defaultValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DefaultValue", e, _defaultValueReference);
                    this._defaultValue = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetDefaultValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetDefaultValue;
                    }
                    this.OnPropertyChanged("DefaultValue", e, _defaultValueReference);
                }
            }
        }
        
        /// <summary>
        /// The owning association of this property, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningAssociation")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedEnd")]
        public IAssociation OwningAssociation
        {
            get
            {
                return this._owningAssociation;
            }
            set
            {
                if ((this._owningAssociation != value))
                {
                    IAssociation old = this._owningAssociation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwningAssociation", e, _owningAssociationReference);
                    this._owningAssociation = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedEnd.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedEnd.Add(this);
                    }
                    this.OnPropertyChanged("OwningAssociation", e, _owningAssociationReference);
                }
            }
        }
        
        /// <summary>
        /// The properties that are redefined by this property, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedProperty")]
        [DescriptionAttribute("The properties that are redefined by this property, if any.\n<p>From package UML::" +
            "Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("redefinedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IProperty> RedefinedProperty
        {
            get
            {
                return this._redefinedProperty;
            }
        }
        
        /// <summary>
        /// The properties of which this Property is constrained to be a subset, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("subsettedProperty")]
        [DescriptionAttribute("The properties of which this Property is constrained to be a subset, if any.\n<p>F" +
            "rom package UML::Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("subsettedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IProperty> SubsettedProperty
        {
            get
            {
                return this._subsettedProperty;
            }
        }
        
        /// <summary>
        /// The Association of which this Property is a member, if any.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("association")]
        [DescriptionAttribute("The Association of which this Property is a member, if any.\n<p>From package UML::" +
            "Classification.</p>")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("association")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("memberEnd")]
        public IAssociation Association
        {
            get
            {
                return this._association;
            }
            set
            {
                if ((this._association != value))
                {
                    IAssociation old = this._association;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Association", e, _associationReference);
                    this._association = value;
                    if ((old != null))
                    {
                        old.MemberEnd.Remove(this);
                        old.Deleted -= this.OnResetAssociation;
                    }
                    if ((value != null))
                    {
                        value.MemberEnd.Add(this);
                        value.Deleted += this.OnResetAssociation;
                    }
                    this.OnPropertyChanged("Association", e, _associationReference);
                }
            }
        }
        
        /// <summary>
        /// The formal TemplateParameter that owns this ParameterableElement.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningTemplateParameter")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedParameteredElement")]
        public ITemplateParameter OwningTemplateParameter
        {
            get
            {
                return ModelHelper.CastAs<ITemplateParameter>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The TemplateParameter that exposes this ParameterableElement as a formal parameter.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DisplayNameAttribute("templateParameter")]
        [DescriptionAttribute("The TemplateParameter that exposes this ParameterableElement as a formal paramete" +
            "r.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("ParameterableElement")]
        [XmlElementNameAttribute("templateParameter")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("parameteredElement")]
        public ITemplateParameter TemplateParameter
        {
            get
            {
                return this._templateParameter;
            }
            set
            {
                if ((this._templateParameter != value))
                {
                    ITemplateParameter old = this._templateParameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("TemplateParameter", e, _templateParameterReference);
                    this._templateParameter = value;
                    if ((old != null))
                    {
                        old.ParameteredElement = null;
                        old.Deleted -= this.OnResetTemplateParameter;
                    }
                    if ((value != null))
                    {
                        value.ParameteredElement = this;
                        value.Deleted += this.OnResetTemplateParameter;
                    }
                    this.OnPropertyChanged("TemplateParameter", e, _templateParameterReference);
                }
            }
        }
        
        /// <summary>
        /// The set of Deployments for a DeploymentTarget.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("deployment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("location")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IDeployment> Deployment
        {
            get
            {
                return this._deployment;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PropertyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Property")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.
        ///subsettedProperty->notEmpty() implies
        ///  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |
        ///    subsettedProperty->forAll(sp |
        ///      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetting_context_conforms(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetting_context_conformsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetting_context_conforms registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetting_context_conformsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetting_context_conformsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetting_context_conformsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetting_context_conformsOperation()
        {
            return ClassInstance.LookupOperation("subsetting_context_conforms");
        }
        
        /// <summary>
        /// A derived union is read only.
        ///isDerivedUnion implies isReadOnly
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Derived_union_is_read_only(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_derived_union_is_read_onlyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method derived_union_is_read_only registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _derived_union_is_read_onlyOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _derived_union_is_read_onlyOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _derived_union_is_read_onlyOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDerived_union_is_read_onlyOperation()
        {
            return ClassInstance.LookupOperation("derived_union_is_read_only");
        }
        
        /// <summary>
        /// A multiplicity on the composing end of a composite aggregation must not have an upper bound greater than 1.
        ///isComposite and association <> null implies opposite.upperBound() <= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_composite(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_multiplicity_of_compositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_composite registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_compositeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_compositeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_compositeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_compositeOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_composite");
        }
        
        /// <summary>
        /// A redefined Property must be inherited from a more general Classifier.
        ///(redefinedProperty->notEmpty()) implies
        ///  (redefinitionContext->notEmpty() and
        ///      redefinedProperty->forAll(rp|
        ///        ((redefinitionContext->collect(fc|
        ///          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefined_property_inherited(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_redefined_property_inheritedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefined_property_inherited registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefined_property_inheritedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefined_property_inheritedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefined_property_inheritedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefined_property_inheritedOperation()
        {
            return ClassInstance.LookupOperation("redefined_property_inherited");
        }
        
        /// <summary>
        /// A subsetting Property may strengthen the type of the subsetted Property, and its upper bound may be less.
        ///subsettedProperty->forAll(sp |
        ///  self.type.conformsTo(sp.type) and
        ///    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
        ///      self.upperBound() <= sp.upperBound() ))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetting_rules(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetting_rulesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetting_rules registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetting_rulesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetting_rulesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetting_rulesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetting_rulesOperation()
        {
            return ClassInstance.LookupOperation("subsetting_rules");
        }
        
        /// <summary>
        /// A binding of a PropertyTemplateParameter representing an attribute must be to an attribute.
        ///(self.isAttribute()
        ///and (templateParameterSubstitution->notEmpty())
        ///implies (templateParameterSubstitution->forAll(ts |
        ///    ts.formal.oclIsKindOf(Property)
        ///    and ts.formal.oclAsType(Property).isAttribute())))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Binding_to_attribute(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_binding_to_attributeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method binding_to_attribute registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _binding_to_attributeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _binding_to_attributeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _binding_to_attributeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBinding_to_attributeOperation()
        {
            return ClassInstance.LookupOperation("binding_to_attribute");
        }
        
        /// <summary>
        /// A derived union is derived.
        ///isDerivedUnion implies isDerived
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Derived_union_is_derived(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_derived_union_is_derivedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method derived_union_is_derived registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _derived_union_is_derivedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _derived_union_is_derivedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _derived_union_is_derivedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDerived_union_is_derivedOperation()
        {
            return ClassInstance.LookupOperation("derived_union_is_derived");
        }
        
        /// <summary>
        /// A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.
        ///deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Deployment_target(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_deployment_targetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method deployment_target registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deployment_targetOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deployment_targetOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deployment_targetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeployment_targetOperation()
        {
            return ClassInstance.LookupOperation("deployment_target");
        }
        
        /// <summary>
        /// A Property may not subset a Property with the same name.
        ///subsettedProperty->forAll(sp | sp.name <> name)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subsetted_property_names(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_subsetted_property_namesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsetted_property_names registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsetted_property_namesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsetted_property_namesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsetted_property_namesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsetted_property_namesOperation()
        {
            return ClassInstance.LookupOperation("subsetted_property_names");
        }
        
        /// <summary>
        /// If a Property is a classifier-owned end of a binary Association, its owner must be the type of the opposite end.
        ///(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Type_of_opposite_end(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_type_of_opposite_endOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method type_of_opposite_end registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _type_of_opposite_endOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _type_of_opposite_endOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _type_of_opposite_endOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveType_of_opposite_endOperation()
        {
            return ClassInstance.LookupOperation("type_of_opposite_end");
        }
        
        /// <summary>
        /// All qualified Properties must be Association ends
        ///qualifier->notEmpty() implies association->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Qualified_is_association_end(object diagnostics, object context)
        {
            System.Func<IProperty, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, object, object, bool>>(_qualified_is_association_endOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method qualified_is_association_end registered. Us" +
                        "e the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _qualified_is_association_endOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _qualified_is_association_endOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _qualified_is_association_endOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveQualified_is_association_endOperation()
        {
            return ClassInstance.LookupOperation("qualified_is_association_end");
        }
        
        /// <summary>
        /// Retrieves a string representation of the default value for this property.
        /// </summary>
        public string GetDefault()
        {
            System.Func<IProperty, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, string>>(_getDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDefault registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDefaultOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDefaultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDefaultOperation()
        {
            return ClassInstance.LookupOperation("getDefault");
        }
        
        /// <summary>
        /// Retrieves the other end of the (binary) association in which this property is a member end.
        /// </summary>
        public IProperty GetOtherEnd()
        {
            System.Func<IProperty, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, IProperty>>(_getOtherEndOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getOtherEnd registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOtherEndOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOtherEndOperation.Value, e));
            IProperty result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOtherEndOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOtherEndOperation()
        {
            return ClassInstance.LookupOperation("getOtherEnd");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public bool IsSetDefault()
        {
            System.Func<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, bool>>(_isSetDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isSetDefault registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isSetDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isSetDefaultOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isSetDefaultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsSetDefaultOperation()
        {
            return ClassInstance.LookupOperation("isSetDefault");
        }
        
        /// <summary>
        /// Sets the default value for this property to the specified Boolean value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetBooleanDefaultValue(bool value)
        {
            System.Action<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, bool>>(_setBooleanDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setBooleanDefaultValue registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setBooleanDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setBooleanDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setBooleanDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetBooleanDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setBooleanDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this property based on the specified string representation.
        /// </summary>
        /// <param name="newDefault">A string repesentation of the new default value.</param>
        public void SetDefault(string newDefault)
        {
            System.Action<IProperty, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, string>>(_setDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setDefault registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setDefaultOperation.Value, newDefault);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setDefaultOperation.Value, e));
            handler.Invoke(this, newDefault);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setDefaultOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetDefaultOperation()
        {
            return ClassInstance.LookupOperation("setDefault");
        }
        
        /// <summary>
        /// Sets the default value for this property to the specified integer value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetIntegerDefaultValue(int value)
        {
            System.Action<IProperty, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, int>>(_setIntegerDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setIntegerDefaultValue registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setIntegerDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setIntegerDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setIntegerDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetIntegerDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setIntegerDefaultValue");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newIsComposite"></param>
        public void SetIsComposite(bool newIsComposite)
        {
            System.Action<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, bool>>(_setIsCompositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setIsComposite registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setIsCompositeOperation.Value, newIsComposite);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setIsCompositeOperation.Value, e));
            handler.Invoke(this, newIsComposite);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setIsCompositeOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetIsCompositeOperation()
        {
            return ClassInstance.LookupOperation("setIsComposite");
        }
        
        /// <summary>
        /// Sets the navigability of this property as indicated.
        /// </summary>
        /// <param name="isNavigable">The new navigability.</param>
        public void SetIsNavigable(bool isNavigable)
        {
            System.Action<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, bool>>(_setIsNavigableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setIsNavigable registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setIsNavigableOperation.Value, isNavigable);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setIsNavigableOperation.Value, e));
            handler.Invoke(this, isNavigable);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setIsNavigableOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetIsNavigableOperation()
        {
            return ClassInstance.LookupOperation("setIsNavigable");
        }
        
        /// <summary>
        /// Sets the default value for this property to the null value.
        /// </summary>
        public void SetNullDefaultValue()
        {
            System.Action<IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty>>(_setNullDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setNullDefaultValue registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setNullDefaultValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setNullDefaultValueOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setNullDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetNullDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setNullDefaultValue");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newOpposite"></param>
        public void SetOpposite(IProperty newOpposite)
        {
            System.Action<IProperty, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, IProperty>>(_setOppositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setOpposite registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setOppositeOperation.Value, newOpposite);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setOppositeOperation.Value, e));
            handler.Invoke(this, newOpposite);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setOppositeOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetOppositeOperation()
        {
            return ClassInstance.LookupOperation("setOpposite");
        }
        
        /// <summary>
        /// Sets the default value for this property to the specified real value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetRealDefaultValue(double value)
        {
            System.Action<IProperty, double> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, double>>(_setRealDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setRealDefaultValue registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setRealDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setRealDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setRealDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetRealDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setRealDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this property to the specified string value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetStringDefaultValue(string value)
        {
            System.Action<IProperty, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, string>>(_setStringDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setStringDefaultValue registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setStringDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setStringDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setStringDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetStringDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setStringDefaultValue");
        }
        
        /// <summary>
        /// Sets the default value for this property to the specified unlimited natural value.
        /// </summary>
        /// <param name="value">The new default value.</param>
        public void SetUnlimitedNaturalDefaultValue(object value)
        {
            System.Action<IProperty, object> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty, object>>(_setUnlimitedNaturalDefaultValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setUnlimitedNaturalDefaultValue registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setUnlimitedNaturalDefaultValueOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setUnlimitedNaturalDefaultValueOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setUnlimitedNaturalDefaultValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetUnlimitedNaturalDefaultValueOperation()
        {
            return ClassInstance.LookupOperation("setUnlimitedNaturalDefaultValue");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public void UnsetDefault()
        {
            System.Action<IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IProperty>>(_unsetDefaultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unsetDefault registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unsetDefaultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unsetDefaultOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unsetDefaultOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnsetDefaultOperation()
        {
            return ClassInstance.LookupOperation("unsetDefault");
        }
        
        /// <summary>
        /// The query isAttribute() is true if the Property is defined as an attribute of some Classifier.
        ///result = (not classifier->isEmpty())
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public bool IsAttribute()
        {
            System.Func<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, bool>>(_isAttributeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isAttribute registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isAttributeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isAttributeOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isAttributeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsAttributeOperation()
        {
            return ClassInstance.LookupOperation("isAttribute");
        }
        
        /// <summary>
        /// The value of isComposite is true only if aggregation is composite.
        ///result = (aggregation = AggregationKind::composite)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public bool IsComposite()
        {
            System.Func<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, bool>>(_isCompositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isComposite registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isCompositeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isCompositeOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isCompositeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsCompositeOperation()
        {
            return ClassInstance.LookupOperation("isComposite");
        }
        
        /// <summary>
        /// The query isNavigable() indicates whether it is possible to navigate across the property.
        ///result = (not classifier->isEmpty() or association.navigableOwnedEnd->includes(self))
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public bool IsNavigable()
        {
            System.Func<IProperty, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, bool>>(_isNavigableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isNavigable registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isNavigableOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isNavigableOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isNavigableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsNavigableOperation()
        {
            return ClassInstance.LookupOperation("isNavigable");
        }
        
        /// <summary>
        /// If this property is a memberEnd of a binary association, then opposite gives the other end.
        ///result = (if association <> null and association.memberEnd->size() = 2
        ///then
        ///    association.memberEnd->any(e | e <> self)
        ///else
        ///    null
        ///endif)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public IProperty GetOpposite()
        {
            System.Func<IProperty, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, IProperty>>(_getOppositeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getOpposite registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOppositeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOppositeOperation.Value, e));
            IProperty result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOppositeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOppositeOperation()
        {
            return ClassInstance.LookupOperation("getOpposite");
        }
        
        /// <summary>
        /// The query subsettingContext() gives the context for subsetting a Property. It consists, in the case of an attribute, of the corresponding Classifier, and in the case of an association end, all of the Classifiers at the other ends.
        ///result = (if association <> null
        ///then association.memberEnd->excluding(self)->collect(type)->asSet()
        ///else 
        ///  if classifier<>null
        ///  then classifier->asSet()
        ///  else Set{} 
        ///  endif
        ///endif)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public ISetExpression<NMF.Interop.Uml.IType> SubsettingContext()
        {
            System.Func<IProperty, ISetExpression<NMF.Interop.Uml.IType>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProperty, ISetExpression<NMF.Interop.Uml.IType>>>(_subsettingContextOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subsettingContext registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subsettingContextOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subsettingContextOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IType> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subsettingContextOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubsettingContextOperation()
        {
            return ClassInstance.LookupOperation("subsettingContext");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAggregationAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("aggregation")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("isDerived")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedUnionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("isDerivedUnion")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsIDAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("isID")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDatatypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("datatype")));
        }
        
        /// <summary>
        /// Handles the event that the Datatype property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDatatype(object sender, System.EventArgs eventArgs)
        {
            this.Datatype = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInterfaceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("interface")));
        }
        
        /// <summary>
        /// Handles the event that the Interface property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInterface(object sender, System.EventArgs eventArgs)
        {
            this.Interface = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAssociationEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("associationEnd")));
        }
        
        /// <summary>
        /// Handles the event that the AssociationEnd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssociationEnd(object sender, System.EventArgs eventArgs)
        {
            this.AssociationEnd = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveQualifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("qualifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Qualifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Qualifier", e, _qualifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Qualifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Qualifier", e, _qualifierReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("class")));
        }
        
        /// <summary>
        /// Handles the event that the Class property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClass(object sender, System.EventArgs eventArgs)
        {
            this.Class = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDefaultValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("defaultValue")));
        }
        
        /// <summary>
        /// Handles the event that the DefaultValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefaultValue(object sender, System.EventArgs eventArgs)
        {
            this.DefaultValue = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwningAssociationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("owningAssociation")));
        }
        
        /// <summary>
        /// Handles the event that the OwningAssociation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwningAssociation(object sender, System.EventArgs eventArgs)
        {
            this.OwningAssociation = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedPropertyReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("redefinedProperty")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedPropertyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedProperty", e, _redefinedPropertyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedPropertyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedProperty", e, _redefinedPropertyReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubsettedPropertyReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("subsettedProperty")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubsettedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubsettedPropertyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SubsettedProperty", e, _subsettedPropertyReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubsettedProperty property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubsettedPropertyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubsettedProperty", e, _subsettedPropertyReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAssociationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Property.ClassInstance)).Resolve("association")));
        }
        
        /// <summary>
        /// Handles the event that the Association property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssociation(object sender, System.EventArgs eventArgs)
        {
            this.Association = null;
        }
        
        /// <summary>
        /// Derivation for ConnectableElement::/end : ConnectorEnd
        ///result = (ConnectorEnd.allInstances()->select(role = self))
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        public ISetExpression<IConnectorEnd> GetEnds()
        {
            System.Func<IConnectableElement, ISetExpression<IConnectorEnd>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectableElement, ISetExpression<IConnectorEnd>>>(_getEndsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getEnds registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getEndsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getEndsOperation.Value, e));
            ISetExpression<IConnectorEnd> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getEndsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetEndsOperation()
        {
            return ClassInstance.LookupOperation("getEnds");
        }
        
        /// <summary>
        /// The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.
        ///result = (self.oclIsKindOf(p.oclType()))
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        /// <param name="p"></param>
        public bool IsCompatibleWith(IParameterableElement p)
        {
            System.Func<IParameterableElement, IParameterableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IParameterableElement, IParameterableElement, bool>>(_isCompatibleWithOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isCompatibleWith registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isCompatibleWithOperation.Value, p);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isCompatibleWithOperation.Value, e));
            bool result = handler.Invoke(this, p);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isCompatibleWithOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsCompatibleWithOperation()
        {
            return ClassInstance.LookupOperation("isCompatibleWith");
        }
        
        /// <summary>
        /// The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.
        ///result = (templateParameter->notEmpty())
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public bool IsTemplateParameter()
        {
            System.Func<IParameterableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IParameterableElement, bool>>(_isTemplateParameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isTemplateParameter registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isTemplateParameterOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isTemplateParameterOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isTemplateParameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsTemplateParameterOperation()
        {
            return ClassInstance.LookupOperation("isTemplateParameter");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwningTemplateParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ParameterableElement.ClassInstance)).Resolve("owningTemplateParameter")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateParameter oldOwningTemplateParameter = ModelHelper.CastAs<ITemplateParameter>(oldParent);
            ITemplateParameter newOwningTemplateParameter = ModelHelper.CastAs<ITemplateParameter>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningTemplateParameter, newOwningTemplateParameter);
            this.OnPropertyChanging("OwningTemplateParameter", e, _owningTemplateParameterReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateParameter oldOwningTemplateParameter = ModelHelper.CastAs<ITemplateParameter>(oldParent);
            ITemplateParameter newOwningTemplateParameter = ModelHelper.CastAs<ITemplateParameter>(newParent);
            if ((oldOwningTemplateParameter != null))
            {
                oldOwningTemplateParameter.OwnedParameteredElement = null;
            }
            if ((newOwningTemplateParameter != null))
            {
                newOwningTemplateParameter.OwnedParameteredElement = this;
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningTemplateParameter, newOwningTemplateParameter);
            this.OnPropertyChanged("OwningTemplateParameter", e, _owningTemplateParameterReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTemplateParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ParameterableElement.ClassInstance)).Resolve("templateParameter")));
        }
        
        /// <summary>
        /// Handles the event that the TemplateParameter property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTemplateParameter(object sender, System.EventArgs eventArgs)
        {
            this.TemplateParameter = null;
        }
        
        /// <summary>
        /// Derivation for DeploymentTarget::/deployedElement
        ///result = (deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        public ISetExpression<IPackageableElement> GetDeployedElements()
        {
            System.Func<IDeploymentTarget, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDeploymentTarget, ISetExpression<IPackageableElement>>>(_getDeployedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDeployedElements registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDeployedElementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDeployedElementsOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDeployedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDeployedElementsOperation()
        {
            return ClassInstance.LookupOperation("getDeployedElements");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeploymentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DeploymentTarget.ClassInstance)).Resolve("deployment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Deployment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeploymentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Deployment", e, _deploymentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Deployment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeploymentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Deployment", e, _deploymentReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int qualifierIndex = ModelHelper.IndexOfReference(this.Qualifier, element);
            if ((qualifierIndex != -1))
            {
                return ModelHelper.CreatePath("qualifier", qualifierIndex);
            }
            if ((element == this.DefaultValue))
            {
                return ModelHelper.CreatePath("defaultValue");
            }
            int deploymentIndex = ModelHelper.IndexOfReference(this.Deployment, element);
            if ((deploymentIndex != -1))
            {
                return ModelHelper.CreatePath("deployment", deploymentIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DATATYPE"))
            {
                return this.Datatype;
            }
            if ((reference == "INTERFACE"))
            {
                return this.Interface;
            }
            if ((reference == "ASSOCIATIONEND"))
            {
                return this.AssociationEnd;
            }
            if ((reference == "QUALIFIER"))
            {
                if ((index < this.Qualifier.Count))
                {
                    return this.Qualifier[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "CLASS"))
            {
                return this.Class;
            }
            if ((reference == "DEFAULTVALUE"))
            {
                return this.DefaultValue;
            }
            if ((reference == "OWNINGASSOCIATION"))
            {
                return this.OwningAssociation;
            }
            if ((reference == "ASSOCIATION"))
            {
                return this.Association;
            }
            if ((reference == "OWNINGTEMPLATEPARAMETER"))
            {
                return this.OwningTemplateParameter;
            }
            if ((reference == "TEMPLATEPARAMETER"))
            {
                return this.TemplateParameter;
            }
            if ((reference == "DEPLOYMENT"))
            {
                if ((index < this.Deployment.Count))
                {
                    return this.Deployment[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AGGREGATION"))
            {
                return this.Aggregation;
            }
            if ((attribute == "ISDERIVED"))
            {
                return this.IsDerived;
            }
            if ((attribute == "ISDERIVEDUNION"))
            {
                return this.IsDerivedUnion;
            }
            if ((attribute == "ISID"))
            {
                return this.IsID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "QUALIFIER"))
            {
                return this._qualifier;
            }
            if ((feature == "REDEFINEDPROPERTY"))
            {
                return this._redefinedProperty;
            }
            if ((feature == "SUBSETTEDPROPERTY"))
            {
                return this._subsettedProperty;
            }
            if ((feature == "DEPLOYMENT"))
            {
                return this._deployment;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DATATYPE"))
            {
                this.Datatype = ((NMF.Interop.Uml.IDataType)(value));
                return;
            }
            if ((feature == "INTERFACE"))
            {
                this.Interface = ((IInterface)(value));
                return;
            }
            if ((feature == "ASSOCIATIONEND"))
            {
                this.AssociationEnd = ((IProperty)(value));
                return;
            }
            if ((feature == "CLASS"))
            {
                this.Class = ((NMF.Interop.Uml.IClass)(value));
                return;
            }
            if ((feature == "DEFAULTVALUE"))
            {
                this.DefaultValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "OWNINGASSOCIATION"))
            {
                this.OwningAssociation = ((IAssociation)(value));
                return;
            }
            if ((feature == "ASSOCIATION"))
            {
                this.Association = ((IAssociation)(value));
                return;
            }
            if ((feature == "OWNINGTEMPLATEPARAMETER"))
            {
                this.OwningTemplateParameter = ((ITemplateParameter)(value));
                return;
            }
            if ((feature == "TEMPLATEPARAMETER"))
            {
                this.TemplateParameter = ((ITemplateParameter)(value));
                return;
            }
            if ((feature == "AGGREGATION"))
            {
                this.Aggregation = ((AggregationKind)(value));
                return;
            }
            if ((feature == "ISDERIVED"))
            {
                this.IsDerived = ((bool)(value));
                return;
            }
            if ((feature == "ISDERIVEDUNION"))
            {
                this.IsDerivedUnion = ((bool)(value));
                return;
            }
            if ((feature == "ISID"))
            {
                this.IsID = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AGGREGATION"))
            {
                return Observable.Box(new AggregationProxy(this));
            }
            if ((attribute == "ISDERIVED"))
            {
                return Observable.Box(new IsDerivedProxy(this));
            }
            if ((attribute == "ISDERIVEDUNION"))
            {
                return Observable.Box(new IsDerivedUnionProxy(this));
            }
            if ((attribute == "ISID"))
            {
                return Observable.Box(new IsIDProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DATATYPE"))
            {
                return new DatatypeProxy(this);
            }
            if ((reference == "INTERFACE"))
            {
                return new InterfaceProxy(this);
            }
            if ((reference == "ASSOCIATIONEND"))
            {
                return new AssociationEndProxy(this);
            }
            if ((reference == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((reference == "DEFAULTVALUE"))
            {
                return new DefaultValueProxy(this);
            }
            if ((reference == "OWNINGASSOCIATION"))
            {
                return new OwningAssociationProxy(this);
            }
            if ((reference == "ASSOCIATION"))
            {
                return new AssociationProxy(this);
            }
            if ((reference == "OWNINGTEMPLATEPARAMETER"))
            {
                return new OwningTemplateParameterProxy(this);
            }
            if ((reference == "TEMPLATEPARAMETER"))
            {
                return new TemplateParameterProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._qualifier))
            {
                return "qualifier";
            }
            if ((container == this._deployment))
            {
                return "deployment";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Property")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyChildrenCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Qualifier.Count);
                    if ((this._parent.DefaultValue != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Deployment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Qualifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Qualifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProperty qualifierCasted = item.As<IProperty>();
                if ((qualifierCasted != null))
                {
                    this._parent.Qualifier.Add(qualifierCasted);
                }
                if ((this._parent.DefaultValue == null))
                {
                    IValueSpecification defaultValueCasted = item.As<IValueSpecification>();
                    if ((defaultValueCasted != null))
                    {
                        this._parent.DefaultValue = defaultValueCasted;
                        return;
                    }
                }
                IDeployment deploymentCasted = item.As<IDeployment>();
                if ((deploymentCasted != null))
                {
                    this._parent.Deployment.Add(deploymentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Qualifier.Clear();
                this._parent.DefaultValue = null;
                this._parent.Deployment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Qualifier.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DefaultValue))
                {
                    return true;
                }
                if (this._parent.Deployment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> qualifierEnumerator = this._parent.Qualifier.GetEnumerator();
                try
                {
                    for (
                    ; qualifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qualifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qualifierEnumerator.Dispose();
                }
                if ((this._parent.DefaultValue != null))
                {
                    array[arrayIndex] = this._parent.DefaultValue;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> deploymentEnumerator = this._parent.Deployment.GetEnumerator();
                try
                {
                    for (
                    ; deploymentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deploymentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deploymentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.Qualifier.Remove(propertyItem)))
                {
                    return true;
                }
                if ((this._parent.DefaultValue == item))
                {
                    this._parent.DefaultValue = null;
                    return true;
                }
                IDeployment deploymentItem = item.As<IDeployment>();
                if (((deploymentItem != null) 
                            && this._parent.Deployment.Remove(deploymentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Qualifier).Concat(this._parent.DefaultValue).Concat(this._parent.Deployment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyReferencedElementsCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Datatype != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Interface != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssociationEnd != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Qualifier.Count);
                    if ((this._parent.Class != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DefaultValue != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OwningAssociation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RedefinedProperty.Count);
                    count = (count + this._parent.SubsettedProperty.Count);
                    if ((this._parent.Association != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OwningTemplateParameter != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TemplateParameter != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Deployment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Qualifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.RedefinedProperty.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubsettedProperty.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Qualifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.RedefinedProperty.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubsettedProperty.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Datatype == null))
                {
                    NMF.Interop.Uml.IDataType datatypeCasted = item.As<NMF.Interop.Uml.IDataType>();
                    if ((datatypeCasted != null))
                    {
                        this._parent.Datatype = datatypeCasted;
                        return;
                    }
                }
                if ((this._parent.Interface == null))
                {
                    IInterface interfaceCasted = item.As<IInterface>();
                    if ((interfaceCasted != null))
                    {
                        this._parent.Interface = interfaceCasted;
                        return;
                    }
                }
                if ((this._parent.AssociationEnd == null))
                {
                    IProperty associationEndCasted = item.As<IProperty>();
                    if ((associationEndCasted != null))
                    {
                        this._parent.AssociationEnd = associationEndCasted;
                        return;
                    }
                }
                IProperty qualifierCasted = item.As<IProperty>();
                if ((qualifierCasted != null))
                {
                    this._parent.Qualifier.Add(qualifierCasted);
                }
                if ((this._parent.Class == null))
                {
                    NMF.Interop.Uml.IClass classCasted = item.As<NMF.Interop.Uml.IClass>();
                    if ((classCasted != null))
                    {
                        this._parent.Class = classCasted;
                        return;
                    }
                }
                if ((this._parent.DefaultValue == null))
                {
                    IValueSpecification defaultValueCasted = item.As<IValueSpecification>();
                    if ((defaultValueCasted != null))
                    {
                        this._parent.DefaultValue = defaultValueCasted;
                        return;
                    }
                }
                if ((this._parent.OwningAssociation == null))
                {
                    IAssociation owningAssociationCasted = item.As<IAssociation>();
                    if ((owningAssociationCasted != null))
                    {
                        this._parent.OwningAssociation = owningAssociationCasted;
                        return;
                    }
                }
                IProperty redefinedPropertyCasted = item.As<IProperty>();
                if ((redefinedPropertyCasted != null))
                {
                    this._parent.RedefinedProperty.Add(redefinedPropertyCasted);
                }
                IProperty subsettedPropertyCasted = item.As<IProperty>();
                if ((subsettedPropertyCasted != null))
                {
                    this._parent.SubsettedProperty.Add(subsettedPropertyCasted);
                }
                if ((this._parent.Association == null))
                {
                    IAssociation associationCasted = item.As<IAssociation>();
                    if ((associationCasted != null))
                    {
                        this._parent.Association = associationCasted;
                        return;
                    }
                }
                if ((this._parent.OwningTemplateParameter == null))
                {
                    ITemplateParameter owningTemplateParameterCasted = item.As<ITemplateParameter>();
                    if ((owningTemplateParameterCasted != null))
                    {
                        this._parent.OwningTemplateParameter = owningTemplateParameterCasted;
                        return;
                    }
                }
                if ((this._parent.TemplateParameter == null))
                {
                    ITemplateParameter templateParameterCasted = item.As<ITemplateParameter>();
                    if ((templateParameterCasted != null))
                    {
                        this._parent.TemplateParameter = templateParameterCasted;
                        return;
                    }
                }
                IDeployment deploymentCasted = item.As<IDeployment>();
                if ((deploymentCasted != null))
                {
                    this._parent.Deployment.Add(deploymentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Datatype = null;
                this._parent.Interface = null;
                this._parent.AssociationEnd = null;
                this._parent.Qualifier.Clear();
                this._parent.Class = null;
                this._parent.DefaultValue = null;
                this._parent.OwningAssociation = null;
                this._parent.RedefinedProperty.Clear();
                this._parent.SubsettedProperty.Clear();
                this._parent.Association = null;
                this._parent.OwningTemplateParameter = null;
                this._parent.TemplateParameter = null;
                this._parent.Deployment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Datatype))
                {
                    return true;
                }
                if ((item == this._parent.Interface))
                {
                    return true;
                }
                if ((item == this._parent.AssociationEnd))
                {
                    return true;
                }
                if (this._parent.Qualifier.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Class))
                {
                    return true;
                }
                if ((item == this._parent.DefaultValue))
                {
                    return true;
                }
                if ((item == this._parent.OwningAssociation))
                {
                    return true;
                }
                if (this._parent.RedefinedProperty.Contains(item))
                {
                    return true;
                }
                if (this._parent.SubsettedProperty.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Association))
                {
                    return true;
                }
                if ((item == this._parent.OwningTemplateParameter))
                {
                    return true;
                }
                if ((item == this._parent.TemplateParameter))
                {
                    return true;
                }
                if (this._parent.Deployment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Datatype != null))
                {
                    array[arrayIndex] = this._parent.Datatype;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Interface != null))
                {
                    array[arrayIndex] = this._parent.Interface;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssociationEnd != null))
                {
                    array[arrayIndex] = this._parent.AssociationEnd;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> qualifierEnumerator = this._parent.Qualifier.GetEnumerator();
                try
                {
                    for (
                    ; qualifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qualifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qualifierEnumerator.Dispose();
                }
                if ((this._parent.Class != null))
                {
                    array[arrayIndex] = this._parent.Class;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DefaultValue != null))
                {
                    array[arrayIndex] = this._parent.DefaultValue;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OwningAssociation != null))
                {
                    array[arrayIndex] = this._parent.OwningAssociation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> redefinedPropertyEnumerator = this._parent.RedefinedProperty.GetEnumerator();
                try
                {
                    for (
                    ; redefinedPropertyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedPropertyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedPropertyEnumerator.Dispose();
                }
                IEnumerator<IModelElement> subsettedPropertyEnumerator = this._parent.SubsettedProperty.GetEnumerator();
                try
                {
                    for (
                    ; subsettedPropertyEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subsettedPropertyEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subsettedPropertyEnumerator.Dispose();
                }
                if ((this._parent.Association != null))
                {
                    array[arrayIndex] = this._parent.Association;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OwningTemplateParameter != null))
                {
                    array[arrayIndex] = this._parent.OwningTemplateParameter;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TemplateParameter != null))
                {
                    array[arrayIndex] = this._parent.TemplateParameter;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> deploymentEnumerator = this._parent.Deployment.GetEnumerator();
                try
                {
                    for (
                    ; deploymentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deploymentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deploymentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Datatype == item))
                {
                    this._parent.Datatype = null;
                    return true;
                }
                if ((this._parent.Interface == item))
                {
                    this._parent.Interface = null;
                    return true;
                }
                if ((this._parent.AssociationEnd == item))
                {
                    this._parent.AssociationEnd = null;
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.Qualifier.Remove(propertyItem)))
                {
                    return true;
                }
                if ((this._parent.Class == item))
                {
                    this._parent.Class = null;
                    return true;
                }
                if ((this._parent.DefaultValue == item))
                {
                    this._parent.DefaultValue = null;
                    return true;
                }
                if ((this._parent.OwningAssociation == item))
                {
                    this._parent.OwningAssociation = null;
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.RedefinedProperty.Remove(propertyItem)))
                {
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.SubsettedProperty.Remove(propertyItem)))
                {
                    return true;
                }
                if ((this._parent.Association == item))
                {
                    this._parent.Association = null;
                    return true;
                }
                if ((this._parent.OwningTemplateParameter == item))
                {
                    this._parent.OwningTemplateParameter = null;
                    return true;
                }
                if ((this._parent.TemplateParameter == item))
                {
                    this._parent.TemplateParameter = null;
                    return true;
                }
                IDeployment deploymentItem = item.As<IDeployment>();
                if (((deploymentItem != null) 
                            && this._parent.Deployment.Remove(deploymentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Datatype).Concat(this._parent.Interface).Concat(this._parent.AssociationEnd).Concat(this._parent.Qualifier).Concat(this._parent.Class).Concat(this._parent.DefaultValue).Concat(this._parent.OwningAssociation).Concat(this._parent.RedefinedProperty).Concat(this._parent.SubsettedProperty).Concat(this._parent.Association).Concat(this._parent.OwningTemplateParameter).Concat(this._parent.TemplateParameter).Concat(this._parent.Deployment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aggregation property
        /// </summary>
        private sealed class AggregationProxy : ModelPropertyChange<IProperty, AggregationKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AggregationProxy(IProperty modelElement) : 
                    base(modelElement, "aggregation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override AggregationKind Value
            {
                get
                {
                    return this.ModelElement.Aggregation;
                }
                set
                {
                    this.ModelElement.Aggregation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerived property
        /// </summary>
        private sealed class IsDerivedProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedProxy(IProperty modelElement) : 
                    base(modelElement, "isDerived")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerived;
                }
                set
                {
                    this.ModelElement.IsDerived = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerivedUnion property
        /// </summary>
        private sealed class IsDerivedUnionProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedUnionProxy(IProperty modelElement) : 
                    base(modelElement, "isDerivedUnion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerivedUnion;
                }
                set
                {
                    this.ModelElement.IsDerivedUnion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isID property
        /// </summary>
        private sealed class IsIDProxy : ModelPropertyChange<IProperty, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsIDProxy(IProperty modelElement) : 
                    base(modelElement, "isID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsID;
                }
                set
                {
                    this.ModelElement.IsID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the datatype property
        /// </summary>
        private sealed class DatatypeProxy : ModelPropertyChange<IProperty, NMF.Interop.Uml.IDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DatatypeProxy(IProperty modelElement) : 
                    base(modelElement, "datatype")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IDataType Value
            {
                get
                {
                    return this.ModelElement.Datatype;
                }
                set
                {
                    this.ModelElement.Datatype = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interface property
        /// </summary>
        private sealed class InterfaceProxy : ModelPropertyChange<IProperty, IInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterfaceProxy(IProperty modelElement) : 
                    base(modelElement, "interface")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInterface Value
            {
                get
                {
                    return this.ModelElement.Interface;
                }
                set
                {
                    this.ModelElement.Interface = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the associationEnd property
        /// </summary>
        private sealed class AssociationEndProxy : ModelPropertyChange<IProperty, IProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssociationEndProxy(IProperty modelElement) : 
                    base(modelElement, "associationEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProperty Value
            {
                get
                {
                    return this.ModelElement.AssociationEnd;
                }
                set
                {
                    this.ModelElement.AssociationEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<IProperty, NMF.Interop.Uml.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(IProperty modelElement) : 
                    base(modelElement, "class")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IClass Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultValue property
        /// </summary>
        private sealed class DefaultValueProxy : ModelPropertyChange<IProperty, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultValueProxy(IProperty modelElement) : 
                    base(modelElement, "defaultValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.DefaultValue;
                }
                set
                {
                    this.ModelElement.DefaultValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owningAssociation property
        /// </summary>
        private sealed class OwningAssociationProxy : ModelPropertyChange<IProperty, IAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwningAssociationProxy(IProperty modelElement) : 
                    base(modelElement, "owningAssociation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociation Value
            {
                get
                {
                    return this.ModelElement.OwningAssociation;
                }
                set
                {
                    this.ModelElement.OwningAssociation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the association property
        /// </summary>
        private sealed class AssociationProxy : ModelPropertyChange<IProperty, IAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssociationProxy(IProperty modelElement) : 
                    base(modelElement, "association")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociation Value
            {
                get
                {
                    return this.ModelElement.Association;
                }
                set
                {
                    this.ModelElement.Association = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owningTemplateParameter property
        /// </summary>
        private sealed class OwningTemplateParameterProxy : ModelPropertyChange<IParameterableElement, ITemplateParameter>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwningTemplateParameterProxy(IParameterableElement modelElement) : 
                    base(modelElement, "owningTemplateParameter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateParameter Value
            {
                get
                {
                    return this.ModelElement.OwningTemplateParameter;
                }
                set
                {
                    this.ModelElement.OwningTemplateParameter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the templateParameter property
        /// </summary>
        private sealed class TemplateParameterProxy : ModelPropertyChange<IParameterableElement, ITemplateParameter>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TemplateParameterProxy(IParameterableElement modelElement) : 
                    base(modelElement, "templateParameter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateParameter Value
            {
                get
                {
                    return this.ModelElement.TemplateParameter;
                }
                set
                {
                    this.ModelElement.TemplateParameter = value;
                }
            }
        }
    }
}

