//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ReplyAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReplyAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReplyAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReplyAction")]
    public interface IReplyAction : IModelElement, IAction
    {
        
        /// <summary>
        /// The Trigger specifying the Operation whose call is being replied to.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("replyToCall")]
        [DescriptionAttribute("The Trigger specifying the Operation whose call is being replied to.\n<p>From pack" +
            "age UML::Actions.</p>")]
        [CategoryAttribute("ReplyAction")]
        [XmlElementNameAttribute("replyToCall")]
        [XmlAttributeAttribute(true)]
        ITrigger ReplyToCall
        {
            get;
            set;
        }
        
        /// <summary>
        /// A list of InputPins providing the values for the output (inout, out, and return) Parameters of the Operation. These values are returned to the caller.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("replyValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IInputPin> ReplyValue
        {
            get;
        }
        
        /// <summary>
        /// An InputPin that holds the return information value produced by an earlier AcceptCallAction.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("returnInformation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPin ReturnInformation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The replyValue InputPins must match the output (return, out, and inout) parameters of the operation of the event of the replyToCall Trigger in number, type, ordering, and multiplicity.
        ///let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in
        ///replyValue->size()=parameter->size() and
        ///Sequence{1..replyValue->size()}->forAll(i |
        ///	replyValue->at(i).type.conformsTo(parameter->at(i).type) and
        ///	replyValue->at(i).isOrdered=parameter->at(i).isOrdered and
        ///	replyValue->at(i).compatibleWith(parameter->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Pins_match_parameter(object diagnostics, object context);
        
        /// <summary>
        /// The event of the replyToCall Trigger must be a CallEvent.
        ///replyToCall.event.oclIsKindOf(CallEvent)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Event_on_reply_to_call_trigger(object diagnostics, object context);
    }
}

