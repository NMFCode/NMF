//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for StructuralFeatureAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StructuralFeatureAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(StructuralFeatureAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeatureAction")]
    public interface IStructuralFeatureAction : IModelElement, IAction
    {
        
        /// <summary>
        /// The InputPin from which the object whose StructuralFeature is to be read or written is obtained.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPin Object
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StructuralFeature to be read or written.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("structuralFeature")]
        [DescriptionAttribute("The StructuralFeature to be read or written.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("StructuralFeatureAction")]
        [XmlElementNameAttribute("structuralFeature")]
        [XmlAttributeAttribute(true)]
        IStructuralFeature StructuralFeature
        {
            get;
            set;
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin must be 1..1.
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Multiplicity(object diagnostics, object context);
        
        /// <summary>
        /// The structuralFeature must either be an owned or inherited feature of the type of the object InputPin, or it must be an owned end of a binary Association whose opposite end had as a type to which the type of the object InputPin conforms.
        ///object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or
        ///	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Object_type(object diagnostics, object context);
        
        /// <summary>
        /// The visibility of the structuralFeature must allow access from the object performing the ReadStructuralFeatureAction.
        ///structuralFeature.visibility = VisibilityKind::public or
        ///_'context'.allFeatures()->includes(structuralFeature) or
        ///structuralFeature.visibility=VisibilityKind::protected and
        ///_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Visibility(object diagnostics, object context);
        
        /// <summary>
        /// The structuralFeature must not be static.
        ///not structuralFeature.isStatic
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_static(object diagnostics, object context);
        
        /// <summary>
        /// The structuralFeature must have exactly one featuringClassifier.
        ///structuralFeature.featuringClassifier->size() = 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool One_featuring_classifier(object diagnostics, object context);
    }
}

