//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ConsiderIgnoreFragment is a kind of CombinedFragment that is used for the consider and ignore cases, which require lists of pertinent Messages to be specified.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConsiderIgnoreFragment")]
    [DebuggerDisplayAttribute("ConsiderIgnoreFragment {Name}")]
    public partial class ConsiderIgnoreFragment : CombinedFragment, IConsiderIgnoreFragment, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _consider_or_ignoreOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConsider_or_ignoreOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTypeOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _messageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMessageReference);
        
        /// <summary>
        /// The backing field for the Message property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<INamedElement> _message;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ConsiderIgnoreFragment()
        {
            this._message = new ObservableAssociationSet<INamedElement>();
            this._message.CollectionChanging += this.MessageCollectionChanging;
            this._message.CollectionChanged += this.MessageCollectionChanged;
        }
        
        /// <summary>
        /// The set of messages that apply to this fragment.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("message")]
        [DescriptionAttribute("The set of messages that apply to this fragment.\n<p>From package UML::Interaction" +
            "s.</p>")]
        [CategoryAttribute("ConsiderIgnoreFragment")]
        [XmlElementNameAttribute("message")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<INamedElement> Message
        {
            get
            {
                return this._message;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConsiderIgnoreFragmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConsiderIgnoreFragment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The interaction operator of a ConsiderIgnoreFragment must be either &apos;consider&apos; or &apos;ignore&apos;.
        ///(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Consider_or_ignore(object diagnostics, object context)
        {
            System.Func<IConsiderIgnoreFragment, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConsiderIgnoreFragment, object, object, bool>>(_consider_or_ignoreOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method consider_or_ignore registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _consider_or_ignoreOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _consider_or_ignoreOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _consider_or_ignoreOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConsider_or_ignoreOperation()
        {
            return ClassInstance.LookupOperation("consider_or_ignore");
        }
        
        /// <summary>
        /// The NamedElements must be of a type of element that can be a signature for a message (i.e.., an Operation, or a Signal).
        ///message-&gt;forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Type(object diagnostics, object context)
        {
            System.Func<IConsiderIgnoreFragment, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConsiderIgnoreFragment, object, object, bool>>(_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method type registered. Use the method broker to r" +
                        "egister a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTypeOperation()
        {
            return ClassInstance.LookupOperation("type");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMessageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConsiderIgnoreFragment.ClassInstance)).Resolve("message")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Message property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MessageCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Message", e, _messageReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Message property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MessageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Message", e, _messageReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MESSAGE"))
            {
                return this._message;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConsiderIgnoreFragment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConsiderIgnoreFragment class
        /// </summary>
        public class ConsiderIgnoreFragmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConsiderIgnoreFragment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConsiderIgnoreFragmentReferencedElementsCollection(ConsiderIgnoreFragment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Message.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Message.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Message.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                INamedElement messageCasted = item.As<INamedElement>();
                if ((messageCasted != null))
                {
                    this._parent.Message.Add(messageCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Message.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Message.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> messageEnumerator = this._parent.Message.GetEnumerator();
                try
                {
                    for (
                    ; messageEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = messageEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    messageEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                INamedElement namedElementItem = item.As<INamedElement>();
                if (((namedElementItem != null) 
                            && this._parent.Message.Remove(namedElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Message).GetEnumerator();
            }
        }
    }
}
