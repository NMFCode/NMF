//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// Physical definition of a graphical image.
    ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Image")]
    public partial class Image : Element, IImage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Content property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _content;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _contentAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveContentAttribute);
        
        /// <summary>
        /// The backing field for the Format property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _format;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _formatAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFormatAttribute);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _location;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _locationAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLocationAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing &apos;instructions&apos; using a standard such as Scalable Vector Graphic (SVG) (which is XML based).
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("content")]
        [DescriptionAttribute(@"This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).
<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Image")]
        [XmlElementNameAttribute("content")]
        [XmlAttributeAttribute(true)]
        public string Content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    string old = this._content;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Content", e, _contentAttribute);
                    this._content = value;
                    this.OnPropertyChanged("Content", e, _contentAttribute);
                }
            }
        }
        
        /// <summary>
        /// This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix &apos;MIME: &apos; is also reserved. This option can be used as an alternative to express the reserved values above, for example &quot;SVG&quot; could instead be expressed as &quot;MIME: image/svg+xml&quot;.
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("format")]
        [DescriptionAttribute(@"This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example ""SVG"" could instead be expressed as ""MIME: image/svg+xml"".
<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Image")]
        [XmlElementNameAttribute("format")]
        [XmlAttributeAttribute(true)]
        public string Format
        {
            get
            {
                return this._format;
            }
            set
            {
                if ((this._format != value))
                {
                    string old = this._format;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Format", e, _formatAttribute);
                    this._format = value;
                    this.OnPropertyChanged("Format", e, _formatAttribute);
                }
            }
        }
        
        /// <summary>
        /// This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("location")]
        [DescriptionAttribute("This contains a location that can be used by a tool to locate the image as an alt" +
            "ernative to embedding it in the stereotype.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Image")]
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    string old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Location", e, _locationAttribute);
                    this._location = value;
                    this.OnPropertyChanged("Location", e, _locationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Image")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveContentAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Image.ClassInstance)).Resolve("content")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFormatAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Image.ClassInstance)).Resolve("format")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLocationAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Image.ClassInstance)).Resolve("location")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONTENT"))
            {
                return this.Content;
            }
            if ((attribute == "FORMAT"))
            {
                return this.Format;
            }
            if ((attribute == "LOCATION"))
            {
                return this.Location;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONTENT"))
            {
                this.Content = ((string)(value));
                return;
            }
            if ((feature == "FORMAT"))
            {
                this.Format = ((string)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONTENT"))
            {
                return new ContentProxy(this);
            }
            if ((attribute == "FORMAT"))
            {
                return new FormatProxy(this);
            }
            if ((attribute == "LOCATION"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Image")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the content property
        /// </summary>
        private sealed class ContentProxy : ModelPropertyChange<IImage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContentProxy(IImage modelElement) : 
                    base(modelElement, "content")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Content;
                }
                set
                {
                    this.ModelElement.Content = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the format property
        /// </summary>
        private sealed class FormatProxy : ModelPropertyChange<IImage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FormatProxy(IImage modelElement) : 
                    base(modelElement, "format")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Format;
                }
                set
                {
                    this.ModelElement.Format = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IImage, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IImage modelElement) : 
                    base(modelElement, "location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
    }
}
