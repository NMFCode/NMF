//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a Message.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//MessageEnd")]
    [DebuggerDisplayAttribute("MessageEnd {Name}")]
    public abstract partial class MessageEnd : NamedElement, IMessageEnd, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _oppositeEndOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOppositeEndOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isSendOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsSendOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isReceiveOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsReceiveOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _enclosingFragmentOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEnclosingFragmentOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _messageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMessageReference);
        
        /// <summary>
        /// The backing field for the Message property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMessage _message;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// References a Message.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("message")]
        [DescriptionAttribute("References a Message.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("MessageEnd")]
        [XmlElementNameAttribute("message")]
        [XmlAttributeAttribute(true)]
        public IMessage Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    IMessage old = this._message;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Message", e, _messageReference);
                    this._message = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMessage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMessage;
                    }
                    this.OnPropertyChanged("Message", e, _messageReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MessageEndReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//MessageEnd")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.
        ///message-&gt;notEmpty()
        ///result = (message-&gt;asSet().messageEnd-&gt;asSet()-&gt;excluding(self))
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        public ISetExpression<IMessageEnd> OppositeEnd()
        {
            System.Func<IMessageEnd, ISetExpression<IMessageEnd>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMessageEnd, ISetExpression<IMessageEnd>>>(_oppositeEndOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method oppositeEnd registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _oppositeEndOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _oppositeEndOperation.Value, e));
            ISetExpression<IMessageEnd> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _oppositeEndOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOppositeEndOperation()
        {
            return ClassInstance.LookupOperation("oppositeEnd");
        }
        
        /// <summary>
        /// This query returns value true if this MessageEnd is a sendEvent.
        ///message-&gt;notEmpty()
        ///result = (message.sendEvent-&gt;asSet()-&gt;includes(self))
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        public bool IsSend()
        {
            System.Func<IMessageEnd, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMessageEnd, bool>>(_isSendOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isSend registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isSendOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isSendOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isSendOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsSendOperation()
        {
            return ClassInstance.LookupOperation("isSend");
        }
        
        /// <summary>
        /// This query returns value true if this MessageEnd is a receiveEvent.
        ///message-&gt;notEmpty()
        ///result = (message.receiveEvent-&gt;asSet()-&gt;includes(self))
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        public bool IsReceive()
        {
            System.Func<IMessageEnd, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMessageEnd, bool>>(_isReceiveOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isReceive registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isReceiveOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isReceiveOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isReceiveOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsReceiveOperation()
        {
            return ClassInstance.LookupOperation("isReceive");
        }
        
        /// <summary>
        /// This query returns a set including the enclosing InteractionFragment this MessageEnd is enclosed within.
        ///result = (if self-&gt;select(oclIsKindOf(Gate))-&gt;notEmpty() 
        ///then -- it is a Gate
        ///let endGate : Gate = 
        ///  self-&gt;select(oclIsKindOf(Gate)).oclAsType(Gate)-&gt;asOrderedSet()-&gt;first()
        ///  in
        ///  if endGate.isOutsideCF() 
        ///  then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
        ///     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
        ///  else if endGate.isInsideCF() 
        ///    then endGate.combinedFragment.oclAsType(InteractionFragment)-&gt;asSet()
        ///    else if endGate.isFormal() 
        ///      then endGate.interaction.oclAsType(InteractionFragment)-&gt;asSet()
        ///      else if endGate.isActual() 
        ///        then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
        ///     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
        ///        else null
        ///        endif
        ///      endif
        ///    endif
        ///  endif
        ///else -- it is a MessageOccurrenceSpecification
        ///let endMOS : MessageOccurrenceSpecification  = 
        ///  self-&gt;select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)-&gt;asOrderedSet()-&gt;first() 
        ///  in
        ///  if endMOS.enclosingInteraction-&gt;notEmpty() 
        ///  then endMOS.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()
        ///  else endMOS.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet()
        ///  endif
        ///endif)
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        public ISetExpression<IInteractionFragment> EnclosingFragment()
        {
            System.Func<IMessageEnd, ISetExpression<IInteractionFragment>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMessageEnd, ISetExpression<IInteractionFragment>>>(_enclosingFragmentOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method enclosingFragment registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _enclosingFragmentOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _enclosingFragmentOperation.Value, e));
            ISetExpression<IInteractionFragment> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _enclosingFragmentOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEnclosingFragmentOperation()
        {
            return ClassInstance.LookupOperation("enclosingFragment");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMessageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.MessageEnd.ClassInstance)).Resolve("message")));
        }
        
        /// <summary>
        /// Handles the event that the Message property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMessage(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Message))
            {
                this.Message = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MESSAGE"))
            {
                return this.Message;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MESSAGE"))
            {
                this.Message = ((IMessage)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MESSAGE"))
            {
                return new MessageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//MessageEnd")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MessageEnd class
        /// </summary>
        public class MessageEndReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MessageEnd _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MessageEndReferencedElementsCollection(MessageEnd parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Message != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Message == null))
                {
                    IMessage messageCasted = item.As<IMessage>();
                    if ((messageCasted != null))
                    {
                        this._parent.Message = messageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Message = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Message))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Message != null))
                {
                    array[arrayIndex] = this._parent.Message;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Message == item))
                {
                    this._parent.Message = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Message).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the message property
        /// </summary>
        private sealed class MessageProxy : ModelPropertyChange<IMessageEnd, IMessage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MessageProxy(IMessageEnd modelElement) : 
                    base(modelElement, "message")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMessage Value
            {
                get
                {
                    return this.ModelElement.Message;
                }
                set
                {
                    this.ModelElement.Message = value;
                }
            }
        }
    }
}
