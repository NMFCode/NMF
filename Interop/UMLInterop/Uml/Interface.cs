//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// Interfaces declare coherent services that are implemented by BehavioredClassifiers that implement the Interfaces via InterfaceRealizations.
    ///<p>From package UML::SimpleClassifiers.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Interface")]
    [DebuggerDisplayAttribute("Interface {Name}")]
    public partial class Interface : Classifier, IInterface, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _visibilityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveVisibilityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOwnedAttributeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOwnedAttributeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOwnedOperationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOwnedOperationOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nestedClassifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNestedClassifierReference);
        
        /// <summary>
        /// The backing field for the NestedClassifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IClassifier> _nestedClassifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedAttributeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedAttributeReference);
        
        /// <summary>
        /// The backing field for the OwnedAttribute property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InterfaceOwnedAttributeCollection _ownedAttribute;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedReceptionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedReceptionReference);
        
        /// <summary>
        /// The backing field for the OwnedReception property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IReception> _ownedReception;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _protocolReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveProtocolReference);
        
        /// <summary>
        /// The backing field for the Protocol property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProtocolStateMachine _protocol;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedInterfaceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedInterfaceReference);
        
        /// <summary>
        /// The backing field for the RedefinedInterface property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IInterface> _redefinedInterface;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedOperationReference);
        
        /// <summary>
        /// The backing field for the OwnedOperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InterfaceOwnedOperationCollection _ownedOperation;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Interface()
        {
            this._nestedClassifier = new ObservableCompositionOrderedSet<IClassifier>(this);
            this._nestedClassifier.CollectionChanging += this.NestedClassifierCollectionChanging;
            this._nestedClassifier.CollectionChanged += this.NestedClassifierCollectionChanged;
            this._ownedAttribute = new InterfaceOwnedAttributeCollection(this);
            this._ownedAttribute.CollectionChanging += this.OwnedAttributeCollectionChanging;
            this._ownedAttribute.CollectionChanged += this.OwnedAttributeCollectionChanged;
            this._ownedReception = new ObservableCompositionOrderedSet<IReception>(this);
            this._ownedReception.CollectionChanging += this.OwnedReceptionCollectionChanging;
            this._ownedReception.CollectionChanged += this.OwnedReceptionCollectionChanged;
            this._redefinedInterface = new ObservableAssociationSet<IInterface>();
            this._redefinedInterface.CollectionChanging += this.RedefinedInterfaceCollectionChanging;
            this._redefinedInterface.CollectionChanged += this.RedefinedInterfaceCollectionChanged;
            this._ownedOperation = new InterfaceOwnedOperationCollection(this);
            this._ownedOperation.CollectionChanging += this.OwnedOperationCollectionChanging;
            this._ownedOperation.CollectionChanged += this.OwnedOperationCollectionChanged;
        }
        
        /// <summary>
        /// References all the Classifiers that are defined (nested) within the Interface.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedClassifier")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IClassifier> NestedClassifier
        {
            get
            {
                return this._nestedClassifier;
            }
        }
        
        /// <summary>
        /// The attributes (i.e., the Properties) owned by the Interface.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedAttribute")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("interface")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> OwnedAttribute
        {
            get
            {
                return this._ownedAttribute;
            }
        }
        
        /// <summary>
        /// Receptions that objects providing this Interface are willing to accept.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedReception")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IReception> OwnedReception
        {
            get
            {
                return this._ownedReception;
            }
        }
        
        /// <summary>
        /// References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("protocol")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IProtocolStateMachine Protocol
        {
            get
            {
                return this._protocol;
            }
            set
            {
                if ((this._protocol != value))
                {
                    IProtocolStateMachine old = this._protocol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Protocol", e, _protocolReference);
                    this._protocol = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetProtocol;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetProtocol;
                    }
                    this.OnPropertyChanged("Protocol", e, _protocolReference);
                }
            }
        }
        
        /// <summary>
        /// References all the Interfaces redefined by this Interface.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedInterface")]
        [DescriptionAttribute("References all the Interfaces redefined by this Interface.\n<p>From package UML::S" +
            "impleClassifiers.</p>")]
        [CategoryAttribute("Interface")]
        [XmlElementNameAttribute("redefinedInterface")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IInterface> RedefinedInterface
        {
            get
            {
                return this._redefinedInterface;
            }
        }
        
        /// <summary>
        /// The Operations owned by the Interface.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedOperation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("interface")]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Uml.IOperation> OwnedOperation
        {
            get
            {
                return this._ownedOperation;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InterfaceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InterfaceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Interface")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The visibility of all Features owned by an Interface must be public.
        ///feature->forAll(visibility = VisibilityKind::public)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Visibility(object diagnostics, object context)
        {
            System.Func<IInterface, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInterface, object, object, bool>>(_visibilityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method visibility registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _visibilityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _visibilityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _visibilityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveVisibilityOperation()
        {
            return ClassInstance.LookupOperation("visibility");
        }
        
        /// <summary>
        /// Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this interface.
        /// </summary>
        /// <param name="name">The name for the new attribute, or null.</param>
        /// <param name="type">The type for the new attribute, or null.</param>
        /// <param name="lower">The lower bound for the new attribute.</param>
        /// <param name="upper">The upper bound for the new attribute.</param>
        public IProperty CreateOwnedAttribute(string name, NMF.Interop.Uml.IType type, int lower, object upper)
        {
            System.Func<IInterface, string, NMF.Interop.Uml.IType, int, object, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInterface, string, NMF.Interop.Uml.IType, int, object, IProperty>>(_createOwnedAttributeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createOwnedAttribute registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOwnedAttributeOperation.Value, name, type, lower, upper);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOwnedAttributeOperation.Value, e));
            IProperty result = handler.Invoke(this, name, type, lower, upper);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOwnedAttributeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOwnedAttributeOperation()
        {
            return ClassInstance.LookupOperation("createOwnedAttribute");
        }
        
        /// <summary>
        /// Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this interface.
        /// </summary>
        /// <param name="name">The name for the new operation, or null.</param>
        /// <param name="parameterNames">The parameter names for the new operation, or null.</param>
        /// <param name="parameterTypes">The parameter types for the new operation, or null.</param>
        /// <param name="returnType">The return type for the new operation, or null.</param>
        public NMF.Interop.Uml.IOperation CreateOwnedOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes, NMF.Interop.Uml.IType returnType)
        {
            System.Func<IInterface, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInterface, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation>>(_createOwnedOperationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createOwnedOperation registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOwnedOperationOperation.Value, name, parameterNames, parameterTypes, returnType);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOwnedOperationOperation.Value, e));
            NMF.Interop.Uml.IOperation result = handler.Invoke(this, name, parameterNames, parameterTypes, returnType);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOwnedOperationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOwnedOperationOperation()
        {
            return ClassInstance.LookupOperation("createOwnedOperation");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNestedClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("nestedClassifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NestedClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NestedClassifier", e, _nestedClassifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NestedClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NestedClassifier", e, _nestedClassifierReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedAttributeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("ownedAttribute")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedAttribute property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedAttributeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedAttribute", e, _ownedAttributeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedAttribute property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedAttributeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedAttribute", e, _ownedAttributeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedReceptionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("ownedReception")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedReception property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedReceptionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedReception", e, _ownedReceptionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedReception property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedReceptionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedReception", e, _ownedReceptionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveProtocolReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("protocol")));
        }
        
        /// <summary>
        /// Handles the event that the Protocol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProtocol(object sender, System.EventArgs eventArgs)
        {
            this.Protocol = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedInterfaceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("redefinedInterface")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedInterface property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedInterfaceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedInterface", e, _redefinedInterfaceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedInterface property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedInterfaceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedInterface", e, _redefinedInterfaceReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interface.ClassInstance)).Resolve("ownedOperation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedOperation", e, _ownedOperationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedOperation", e, _ownedOperationReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int nestedClassifierIndex = ModelHelper.IndexOfReference(this.NestedClassifier, element);
            if ((nestedClassifierIndex != -1))
            {
                return ModelHelper.CreatePath("nestedClassifier", nestedClassifierIndex);
            }
            int ownedAttributeIndex = ModelHelper.IndexOfReference(this.OwnedAttribute, element);
            if ((ownedAttributeIndex != -1))
            {
                return ModelHelper.CreatePath("ownedAttribute", ownedAttributeIndex);
            }
            int ownedReceptionIndex = ModelHelper.IndexOfReference(this.OwnedReception, element);
            if ((ownedReceptionIndex != -1))
            {
                return ModelHelper.CreatePath("ownedReception", ownedReceptionIndex);
            }
            if ((element == this.Protocol))
            {
                return ModelHelper.CreatePath("protocol");
            }
            int ownedOperationIndex = ModelHelper.IndexOfReference(this.OwnedOperation, element);
            if ((ownedOperationIndex != -1))
            {
                return ModelHelper.CreatePath("ownedOperation", ownedOperationIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NESTEDCLASSIFIER"))
            {
                if ((index < this.NestedClassifier.Count))
                {
                    return this.NestedClassifier[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDATTRIBUTE"))
            {
                if ((index < this.OwnedAttribute.Count))
                {
                    return this.OwnedAttribute[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDRECEPTION"))
            {
                if ((index < this.OwnedReception.Count))
                {
                    return this.OwnedReception[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "PROTOCOL"))
            {
                return this.Protocol;
            }
            if ((reference == "OWNEDOPERATION"))
            {
                if ((index < this.OwnedOperation.Count))
                {
                    return this.OwnedOperation[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NESTEDCLASSIFIER"))
            {
                return this._nestedClassifier;
            }
            if ((feature == "OWNEDATTRIBUTE"))
            {
                return this._ownedAttribute;
            }
            if ((feature == "OWNEDRECEPTION"))
            {
                return this._ownedReception;
            }
            if ((feature == "REDEFINEDINTERFACE"))
            {
                return this._redefinedInterface;
            }
            if ((feature == "OWNEDOPERATION"))
            {
                return this._ownedOperation;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROTOCOL"))
            {
                this.Protocol = ((IProtocolStateMachine)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PROTOCOL"))
            {
                return new ProtocolProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._nestedClassifier))
            {
                return "nestedClassifier";
            }
            if ((container == this._ownedAttribute))
            {
                return "ownedAttribute";
            }
            if ((container == this._ownedReception))
            {
                return "ownedReception";
            }
            if ((container == this._ownedOperation))
            {
                return "ownedOperation";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Interface")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Interface class
        /// </summary>
        public class InterfaceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Interface _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InterfaceChildrenCollection(Interface parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NestedClassifier.Count);
                    count = (count + this._parent.OwnedAttribute.Count);
                    count = (count + this._parent.OwnedReception.Count);
                    if ((this._parent.Protocol != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OwnedOperation.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier nestedClassifierCasted = item.As<IClassifier>();
                if ((nestedClassifierCasted != null))
                {
                    this._parent.NestedClassifier.Add(nestedClassifierCasted);
                }
                IProperty ownedAttributeCasted = item.As<IProperty>();
                if ((ownedAttributeCasted != null))
                {
                    this._parent.OwnedAttribute.Add(ownedAttributeCasted);
                }
                IReception ownedReceptionCasted = item.As<IReception>();
                if ((ownedReceptionCasted != null))
                {
                    this._parent.OwnedReception.Add(ownedReceptionCasted);
                }
                if ((this._parent.Protocol == null))
                {
                    IProtocolStateMachine protocolCasted = item.As<IProtocolStateMachine>();
                    if ((protocolCasted != null))
                    {
                        this._parent.Protocol = protocolCasted;
                        return;
                    }
                }
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NestedClassifier.Clear();
                this._parent.OwnedAttribute.Clear();
                this._parent.OwnedReception.Clear();
                this._parent.Protocol = null;
                this._parent.OwnedOperation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NestedClassifier.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedAttribute.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedReception.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Protocol))
                {
                    return true;
                }
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nestedClassifierEnumerator = this._parent.NestedClassifier.GetEnumerator();
                try
                {
                    for (
                    ; nestedClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedClassifierEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedAttributeEnumerator = this._parent.OwnedAttribute.GetEnumerator();
                try
                {
                    for (
                    ; ownedAttributeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedAttributeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedAttributeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedReceptionEnumerator = this._parent.OwnedReception.GetEnumerator();
                try
                {
                    for (
                    ; ownedReceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedReceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedReceptionEnumerator.Dispose();
                }
                if ((this._parent.Protocol != null))
                {
                    array[arrayIndex] = this._parent.Protocol;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.NestedClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.OwnedAttribute.Remove(propertyItem)))
                {
                    return true;
                }
                IReception receptionItem = item.As<IReception>();
                if (((receptionItem != null) 
                            && this._parent.OwnedReception.Remove(receptionItem)))
                {
                    return true;
                }
                if ((this._parent.Protocol == item))
                {
                    this._parent.Protocol = null;
                    return true;
                }
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NestedClassifier).Concat(this._parent.OwnedAttribute).Concat(this._parent.OwnedReception).Concat(this._parent.Protocol).Concat(this._parent.OwnedOperation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Interface class
        /// </summary>
        public class InterfaceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Interface _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InterfaceReferencedElementsCollection(Interface parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NestedClassifier.Count);
                    count = (count + this._parent.OwnedAttribute.Count);
                    count = (count + this._parent.OwnedReception.Count);
                    if ((this._parent.Protocol != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RedefinedInterface.Count);
                    count = (count + this._parent.OwnedOperation.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.RedefinedInterface.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.RedefinedInterface.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier nestedClassifierCasted = item.As<IClassifier>();
                if ((nestedClassifierCasted != null))
                {
                    this._parent.NestedClassifier.Add(nestedClassifierCasted);
                }
                IProperty ownedAttributeCasted = item.As<IProperty>();
                if ((ownedAttributeCasted != null))
                {
                    this._parent.OwnedAttribute.Add(ownedAttributeCasted);
                }
                IReception ownedReceptionCasted = item.As<IReception>();
                if ((ownedReceptionCasted != null))
                {
                    this._parent.OwnedReception.Add(ownedReceptionCasted);
                }
                if ((this._parent.Protocol == null))
                {
                    IProtocolStateMachine protocolCasted = item.As<IProtocolStateMachine>();
                    if ((protocolCasted != null))
                    {
                        this._parent.Protocol = protocolCasted;
                        return;
                    }
                }
                IInterface redefinedInterfaceCasted = item.As<IInterface>();
                if ((redefinedInterfaceCasted != null))
                {
                    this._parent.RedefinedInterface.Add(redefinedInterfaceCasted);
                }
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NestedClassifier.Clear();
                this._parent.OwnedAttribute.Clear();
                this._parent.OwnedReception.Clear();
                this._parent.Protocol = null;
                this._parent.RedefinedInterface.Clear();
                this._parent.OwnedOperation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NestedClassifier.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedAttribute.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedReception.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Protocol))
                {
                    return true;
                }
                if (this._parent.RedefinedInterface.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nestedClassifierEnumerator = this._parent.NestedClassifier.GetEnumerator();
                try
                {
                    for (
                    ; nestedClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedClassifierEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedAttributeEnumerator = this._parent.OwnedAttribute.GetEnumerator();
                try
                {
                    for (
                    ; ownedAttributeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedAttributeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedAttributeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedReceptionEnumerator = this._parent.OwnedReception.GetEnumerator();
                try
                {
                    for (
                    ; ownedReceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedReceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedReceptionEnumerator.Dispose();
                }
                if ((this._parent.Protocol != null))
                {
                    array[arrayIndex] = this._parent.Protocol;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> redefinedInterfaceEnumerator = this._parent.RedefinedInterface.GetEnumerator();
                try
                {
                    for (
                    ; redefinedInterfaceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedInterfaceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedInterfaceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.NestedClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.OwnedAttribute.Remove(propertyItem)))
                {
                    return true;
                }
                IReception receptionItem = item.As<IReception>();
                if (((receptionItem != null) 
                            && this._parent.OwnedReception.Remove(receptionItem)))
                {
                    return true;
                }
                if ((this._parent.Protocol == item))
                {
                    this._parent.Protocol = null;
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.RedefinedInterface.Remove(interfaceItem)))
                {
                    return true;
                }
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NestedClassifier).Concat(this._parent.OwnedAttribute).Concat(this._parent.OwnedReception).Concat(this._parent.Protocol).Concat(this._parent.RedefinedInterface).Concat(this._parent.OwnedOperation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the protocol property
        /// </summary>
        private sealed class ProtocolProxy : ModelPropertyChange<IInterface, IProtocolStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProtocolProxy(IInterface modelElement) : 
                    base(modelElement, "protocol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProtocolStateMachine Value
            {
                get
                {
                    return this.ModelElement.Protocol;
                }
                set
                {
                    this.ModelElement.Protocol = value;
                }
            }
        }
    }
}

