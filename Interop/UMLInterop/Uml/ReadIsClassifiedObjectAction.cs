//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ReadIsClassifiedObjectAction is an Action that determines whether an object is classified by a given Classifier.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReadIsClassifiedObjectAction")]
    [DebuggerDisplayAttribute("ReadIsClassifiedObjectAction {Name}")]
    public partial class ReadIsClassifiedObjectAction : Action, IReadIsClassifiedObjectAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_typeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_outputOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_outputOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _boolean_resultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBoolean_resultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_inputOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_inputOperation);
        
        /// <summary>
        /// The backing field for the IsDirect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDirect = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDirectAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDirectAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassifierReference);
        
        /// <summary>
        /// The backing field for the Classifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassifier _classifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _objectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveObjectReference);
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _object;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOutputPin _result;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Indicates whether the input object must be directly classified by the given Classifier or whether it may also be an instance of a specialization of the given Classifier.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDirect")]
        [DescriptionAttribute("Indicates whether the input object must be directly classified by the given Class" +
            "ifier or whether it may also be an instance of a specialization of the given Cla" +
            "ssifier.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("ReadIsClassifiedObjectAction")]
        [XmlElementNameAttribute("isDirect")]
        [XmlAttributeAttribute(true)]
        public bool IsDirect
        {
            get
            {
                return this._isDirect;
            }
            set
            {
                if ((this._isDirect != value))
                {
                    bool old = this._isDirect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDirect", e, _isDirectAttribute);
                    this._isDirect = value;
                    this.OnPropertyChanged("IsDirect", e, _isDirectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Classifier against which the classification of the input object is tested.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("classifier")]
        [DescriptionAttribute("The Classifier against which the classification of the input object is tested.\n<p" +
            ">From package UML::Actions.</p>")]
        [CategoryAttribute("ReadIsClassifiedObjectAction")]
        [XmlElementNameAttribute("classifier")]
        [XmlAttributeAttribute(true)]
        public IClassifier Classifier
        {
            get
            {
                return this._classifier;
            }
            set
            {
                if ((this._classifier != value))
                {
                    IClassifier old = this._classifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Classifier", e, _classifierReference);
                    this._classifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetClassifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetClassifier;
                    }
                    this.OnPropertyChanged("Classifier", e, _classifierReference);
                }
            }
        }
        
        /// <summary>
        /// The InputPin that holds the object whose classification is to be tested.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IInputPin old = this._object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Object", e, _objectReference);
                    this._object = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object", e, _objectReference);
                }
            }
        }
        
        /// <summary>
        /// The OutputPin that holds the Boolean result of the test.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOutputPin Result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    IOutputPin old = this._result;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Result", e, _resultReference);
                    this._result = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetResult;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetResult;
                    }
                    this.OnPropertyChanged("Result", e, _resultReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ReadIsClassifiedObjectActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReadIsClassifiedObjectActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReadIsClassifiedObjectAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The object InputPin has no type.
        ///object.type = null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_type(object diagnostics, object context)
        {
            System.Func<IReadIsClassifiedObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReadIsClassifiedObjectAction, object, object, bool>>(_no_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_type registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_typeOperation()
        {
            return ClassInstance.LookupOperation("no_type");
        }
        
        /// <summary>
        /// The multiplicity of the result OutputPin is 1..1.
        ///result.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_output(object diagnostics, object context)
        {
            System.Func<IReadIsClassifiedObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReadIsClassifiedObjectAction, object, object, bool>>(_multiplicity_of_outputOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_output registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_outputOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_outputOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_outputOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_outputOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_output");
        }
        
        /// <summary>
        /// The type of the result OutputPin is Boolean.
        ///result.type = Boolean
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Boolean_result(object diagnostics, object context)
        {
            System.Func<IReadIsClassifiedObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReadIsClassifiedObjectAction, object, object, bool>>(_boolean_resultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method boolean_result registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _boolean_resultOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _boolean_resultOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _boolean_resultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBoolean_resultOperation()
        {
            return ClassInstance.LookupOperation("boolean_result");
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin is 1..1.
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_input(object diagnostics, object context)
        {
            System.Func<IReadIsClassifiedObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReadIsClassifiedObjectAction, object, object, bool>>(_multiplicity_of_inputOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_input registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_inputOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_inputOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_inputOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_inputOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_input");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDirectAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReadIsClassifiedObjectAction.ClassInstance)).Resolve("isDirect")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReadIsClassifiedObjectAction.ClassInstance)).Resolve("classifier")));
        }
        
        /// <summary>
        /// Handles the event that the Classifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClassifier(object sender, System.EventArgs eventArgs)
        {
            this.Classifier = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveObjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReadIsClassifiedObjectAction.ClassInstance)).Resolve("object")));
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, System.EventArgs eventArgs)
        {
            this.Object = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReadIsClassifiedObjectAction.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Handles the event that the Result property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResult(object sender, System.EventArgs eventArgs)
        {
            this.Result = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Object))
            {
                return ModelHelper.CreatePath("object");
            }
            if ((element == this.Result))
            {
                return ModelHelper.CreatePath("result");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASSIFIER"))
            {
                return this.Classifier;
            }
            if ((reference == "OBJECT"))
            {
                return this.Object;
            }
            if ((reference == "RESULT"))
            {
                return this.Result;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISDIRECT"))
            {
                return this.IsDirect;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASSIFIER"))
            {
                this.Classifier = ((IClassifier)(value));
                return;
            }
            if ((feature == "OBJECT"))
            {
                this.Object = ((IInputPin)(value));
                return;
            }
            if ((feature == "RESULT"))
            {
                this.Result = ((IOutputPin)(value));
                return;
            }
            if ((feature == "ISDIRECT"))
            {
                this.IsDirect = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISDIRECT"))
            {
                return Observable.Box(new IsDirectProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASSIFIER"))
            {
                return new ClassifierProxy(this);
            }
            if ((reference == "OBJECT"))
            {
                return new ObjectProxy(this);
            }
            if ((reference == "RESULT"))
            {
                return new ResultProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReadIsClassifiedObjectAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReadIsClassifiedObjectAction class
        /// </summary>
        public class ReadIsClassifiedObjectActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReadIsClassifiedObjectAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReadIsClassifiedObjectActionChildrenCollection(ReadIsClassifiedObjectAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Result != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                if ((this._parent.Result == null))
                {
                    IOutputPin resultCasted = item.As<IOutputPin>();
                    if ((resultCasted != null))
                    {
                        this._parent.Result = resultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
                this._parent.Result = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if ((item == this._parent.Result))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Result != null))
                {
                    array[arrayIndex] = this._parent.Result;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                if ((this._parent.Result == item))
                {
                    this._parent.Result = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReadIsClassifiedObjectAction class
        /// </summary>
        public class ReadIsClassifiedObjectActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReadIsClassifiedObjectAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReadIsClassifiedObjectActionReferencedElementsCollection(ReadIsClassifiedObjectAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Classifier != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Result != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Classifier == null))
                {
                    IClassifier classifierCasted = item.As<IClassifier>();
                    if ((classifierCasted != null))
                    {
                        this._parent.Classifier = classifierCasted;
                        return;
                    }
                }
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                if ((this._parent.Result == null))
                {
                    IOutputPin resultCasted = item.As<IOutputPin>();
                    if ((resultCasted != null))
                    {
                        this._parent.Result = resultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Classifier = null;
                this._parent.Object = null;
                this._parent.Result = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Classifier))
                {
                    return true;
                }
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if ((item == this._parent.Result))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Classifier != null))
                {
                    array[arrayIndex] = this._parent.Classifier;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Result != null))
                {
                    array[arrayIndex] = this._parent.Result;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Classifier == item))
                {
                    this._parent.Classifier = null;
                    return true;
                }
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                if ((this._parent.Result == item))
                {
                    this._parent.Result = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Classifier).Concat(this._parent.Object).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDirect property
        /// </summary>
        private sealed class IsDirectProxy : ModelPropertyChange<IReadIsClassifiedObjectAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDirectProxy(IReadIsClassifiedObjectAction modelElement) : 
                    base(modelElement, "isDirect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDirect;
                }
                set
                {
                    this.ModelElement.IsDirect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classifier property
        /// </summary>
        private sealed class ClassifierProxy : ModelPropertyChange<IReadIsClassifiedObjectAction, IClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassifierProxy(IReadIsClassifiedObjectAction modelElement) : 
                    base(modelElement, "classifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassifier Value
            {
                get
                {
                    return this.ModelElement.Classifier;
                }
                set
                {
                    this.ModelElement.Classifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the object property
        /// </summary>
        private sealed class ObjectProxy : ModelPropertyChange<IReadIsClassifiedObjectAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjectProxy(IReadIsClassifiedObjectAction modelElement) : 
                    base(modelElement, "object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Object;
                }
                set
                {
                    this.ModelElement.Object = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the result property
        /// </summary>
        private sealed class ResultProxy : ModelPropertyChange<IReadIsClassifiedObjectAction, IOutputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResultProxy(IReadIsClassifiedObjectAction modelElement) : 
                    base(modelElement, "result")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputPin Value
            {
                get
                {
                    return this.ModelElement.Result;
                }
                set
                {
                    this.ModelElement.Result = value;
                }
            }
        }
    }
}

