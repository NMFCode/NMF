//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Port
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Port))]
    [XmlDefaultImplementationTypeAttribute(typeof(Port))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Port")]
    public interface IPort : IModelElement, IProperty
    {
        
        /// <summary>
        /// Specifies whether requests arriving at this Port are sent to the classifier behavior of this EncapsulatedClassifier. Such a Port is referred to as a behavior Port. Any invocation of a BehavioralFeature targeted at a behavior Port will be handled by the instance of the owning EncapsulatedClassifier itself, rather than by any instances that it may contain.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isBehavior")]
        [DescriptionAttribute(@"Specifies whether requests arriving at this Port are sent to the classifier behavior of this EncapsulatedClassifier. Such a Port is referred to as a behavior Port. Any invocation of a BehavioralFeature targeted at a behavior Port will be handled by the instance of the owning EncapsulatedClassifier itself, rather than by any instances that it may contain.
<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Port")]
        [XmlElementNameAttribute("isBehavior")]
        [XmlAttributeAttribute(true)]
        bool IsBehavior
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the way that the provided and required Interfaces are derived from the Port’s Type.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isConjugated")]
        [DescriptionAttribute("Specifies the way that the provided and required Interfaces are derived from the " +
            "Port’s Type.\n<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Port")]
        [XmlElementNameAttribute("isConjugated")]
        [XmlAttributeAttribute(true)]
        bool IsConjugated
        {
            get;
            set;
        }
        
        /// <summary>
        /// If true, indicates that this Port is used to provide the published functionality of an EncapsulatedClassifier.  If false, this Port is used to implement the EncapsulatedClassifier but is not part of the essential externally-visible functionality of the EncapsulatedClassifier and can, therefore, be altered or deleted along with the internal implementation of the EncapsulatedClassifier and other properties that are considered part of its implementation.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isService")]
        [DescriptionAttribute(@"If true, indicates that this Port is used to provide the published functionality of an EncapsulatedClassifier.  If false, this Port is used to implement the EncapsulatedClassifier but is not part of the essential externally-visible functionality of the EncapsulatedClassifier and can, therefore, be altered or deleted along with the internal implementation of the EncapsulatedClassifier and other properties that are considered part of its implementation.
<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Port")]
        [XmlElementNameAttribute("isService")]
        [XmlAttributeAttribute(true)]
        bool IsService
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional ProtocolStateMachine which describes valid interactions at this interaction point.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("protocol")]
        [DescriptionAttribute("An optional ProtocolStateMachine which describes valid interactions at this inter" +
            "action point.\n<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Port")]
        [XmlElementNameAttribute("protocol")]
        [XmlAttributeAttribute(true)]
        IProtocolStateMachine Protocol
        {
            get;
            set;
        }
        
        /// <summary>
        /// A Port may be redefined when its containing EncapsulatedClassifier is specialized. The redefining Port may have additional Interfaces to those that are associated with the redefined Port or it may replace an Interface by one of its subtypes.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedPort")]
        [DescriptionAttribute(@"A Port may be redefined when its containing EncapsulatedClassifier is specialized. The redefining Port may have additional Interfaces to those that are associated with the redefined Port or it may replace an Interface by one of its subtypes.
<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Port")]
        [XmlElementNameAttribute("redefinedPort")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IPort> RedefinedPort
        {
            get;
        }
        
        /// <summary>
        /// Port.aggregation must be composite.
        ///aggregation = AggregationKind::composite
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Port_aggregation(object diagnostics, object context);
        
        /// <summary>
        /// A defaultValue for port cannot be specified when the type of the Port is an Interface.
        ///type.oclIsKindOf(Interface) implies defaultValue-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Default_value(object diagnostics, object context);
        
        /// <summary>
        /// All Ports are owned by an EncapsulatedClassifier.
        ///owner = encapsulatedClassifier
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Encapsulated_owner(object diagnostics, object context);
        
        /// <summary>
        /// Derivation for Port::/provided
        ///result = (if isConjugated then basicRequired() else basicProvided() endif)
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> GetProvideds();
        
        /// <summary>
        /// Derivation for Port::/required
        ///result = (if isConjugated then basicProvided() else basicRequired() endif)
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> GetRequireds();
        
        /// <summary>
        /// The union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly the type of the Port if the Port is typed by an Interface.
        ///result = (if type.oclIsKindOf(Interface) 
        ///then type.oclAsType(Interface)-&gt;asSet() 
        ///else type.oclAsType(Classifier).allRealizedInterfaces() 
        ///endif)
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> BasicProvided();
        
        /// <summary>
        /// The union of the sets of Interfaces used by the type of the Port and its supertypes.
        ///result = ( type.oclAsType(Classifier).allUsedInterfaces() )
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> BasicRequired();
    }
}
