//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A StartObjectBehaviorAction is an InvocationAction that starts the execution either of a directly instantiated Behavior or of the classifierBehavior of an object. Argument values may be supplied for the input Parameters of the Behavior. If the Behavior is invoked synchronously, then output values may be obtained for output Parameters.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StartObjectBehaviorAction")]
    [DebuggerDisplayAttribute("StartObjectBehaviorAction {Name}")]
    public partial class StartObjectBehaviorAction : CallAction, IStartObjectBehaviorAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicity_of_objectOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicity_of_objectOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _type_of_objectOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveType_of_objectOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_onportOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_onportOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBehaviorOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _objectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveObjectReference);
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _object;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// An InputPin that holds the object that is either a Behavior to be started or has a classifierBehavior to be started.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IInputPin old = this._object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Object", e, _objectReference);
                    this._object = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object", e, _objectReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StartObjectBehaviorActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StartObjectBehaviorActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StartObjectBehaviorAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin must be 1..1.
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity_of_object(object diagnostics, object context)
        {
            System.Func<IStartObjectBehaviorAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStartObjectBehaviorAction, object, object, bool>>(_multiplicity_of_objectOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity_of_object registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicity_of_objectOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicity_of_objectOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicity_of_objectOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicity_of_objectOperation()
        {
            return ClassInstance.LookupOperation("multiplicity_of_object");
        }
        
        /// <summary>
        /// The type of the object InputPin must be either a Behavior or a BehavioredClassifier with a classifierBehavior.
        ///self.behavior()<>null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Type_of_object(object diagnostics, object context)
        {
            System.Func<IStartObjectBehaviorAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStartObjectBehaviorAction, object, object, bool>>(_type_of_objectOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method type_of_object registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _type_of_objectOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _type_of_objectOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _type_of_objectOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveType_of_objectOperation()
        {
            return ClassInstance.LookupOperation("type_of_object");
        }
        
        /// <summary>
        /// A StartObjectBehaviorAction may not specify onPort.
        ///onPort->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_onport(object diagnostics, object context)
        {
            System.Func<IStartObjectBehaviorAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStartObjectBehaviorAction, object, object, bool>>(_no_onportOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_onport registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_onportOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_onportOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_onportOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_onportOperation()
        {
            return ClassInstance.LookupOperation("no_onport");
        }
        
        /// <summary>
        /// If the type of the object InputPin is a Behavior, then that Behavior. Otherwise, if the type of the object InputPin is a BehavioredClassifier, then the classifierBehavior of that BehavioredClassifier.
        ///result = (if object.type.oclIsKindOf(Behavior) then
        ///  object.type.oclAsType(Behavior)
        ///else if object.type.oclIsKindOf(BehavioredClassifier) then
        ///  object.type.oclAsType(BehavioredClassifier).classifierBehavior
        ///else
        ///  null
        ///endif
        ///endif)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        public IBehavior Behavior()
        {
            System.Func<IStartObjectBehaviorAction, IBehavior> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStartObjectBehaviorAction, IBehavior>>(_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method behavior registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _behaviorOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _behaviorOperation.Value, e));
            IBehavior result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBehaviorOperation()
        {
            return ClassInstance.LookupOperation("behavior");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveObjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StartObjectBehaviorAction.ClassInstance)).Resolve("object")));
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, System.EventArgs eventArgs)
        {
            this.Object = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Object))
            {
                return ModelHelper.CreatePath("object");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OBJECT"))
            {
                return this.Object;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OBJECT"))
            {
                this.Object = ((IInputPin)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OBJECT"))
            {
                return new ObjectProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StartObjectBehaviorAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StartObjectBehaviorAction class
        /// </summary>
        public class StartObjectBehaviorActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StartObjectBehaviorAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StartObjectBehaviorActionChildrenCollection(StartObjectBehaviorAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StartObjectBehaviorAction class
        /// </summary>
        public class StartObjectBehaviorActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StartObjectBehaviorAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StartObjectBehaviorActionReferencedElementsCollection(StartObjectBehaviorAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the object property
        /// </summary>
        private sealed class ObjectProxy : ModelPropertyChange<IStartObjectBehaviorAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjectProxy(IStartObjectBehaviorAction modelElement) : 
                    base(modelElement, "object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Object;
                }
                set
                {
                    this.ModelElement.Object = value;
                }
            }
        }
    }
}

