//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for BehavioralFeature
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BehavioralFeature))]
    [XmlDefaultImplementationTypeAttribute(typeof(BehavioralFeature))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//BehavioralFeature")]
    public interface IBehavioralFeature : IModelElement, IFeature, NMF.Interop.Uml.INamespace
    {
        
        /// <summary>
        /// Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(CallConcurrencyKind.Sequential)]
        [DisplayNameAttribute("concurrency")]
        [DescriptionAttribute("Specifies the semantics of concurrent calls to the same passive instance (i.e., a" +
            "n instance originating from a Class with isActive being false). Active instances" +
            " control access to their own BehavioralFeatures.\n<p>From package UML::Classifica" +
            "tion.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("concurrency")]
        [XmlAttributeAttribute(true)]
        CallConcurrencyKind Concurrency
        {
            get;
            set;
        }
        
        /// <summary>
        /// If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isAbstract")]
        [DescriptionAttribute(@"If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("isAbstract")]
        [XmlAttributeAttribute(true)]
        bool IsAbstract
        {
            get;
            set;
        }
        
        /// <summary>
        /// A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior).
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("method")]
        [DescriptionAttribute("A Behavior that implements the BehavioralFeature. There may be at most one Behavi" +
            "or for a particular pairing of a Classifier (as owner of the Behavior) and a Beh" +
            "avioralFeature (as specification of the Behavior).\n<p>From package UML::Classifi" +
            "cation.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("method")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("specification")]
        [ConstantAttribute()]
        ISetExpression<IBehavior> Method
        {
            get;
        }
        
        /// <summary>
        /// The ordered set of formal Parameters of this BehavioralFeature.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<NMF.Interop.Uml.IParameter> OwnedParameter
        {
            get;
        }
        
        /// <summary>
        /// The ParameterSets owned by this BehavioralFeature.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameterSet")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IParameterSet> OwnedParameterSet
        {
            get;
        }
        
        /// <summary>
        /// The Types representing exceptions that may be raised during an invocation of this BehavioralFeature.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("raisedException")]
        [DescriptionAttribute("The Types representing exceptions that may be raised during an invocation of this" +
            " BehavioralFeature.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("raisedException")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<NMF.Interop.Uml.IType> RaisedException
        {
            get;
        }
        
        /// <summary>
        /// When isAbstract is true there are no methods.
        ///isAbstract implies method-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Abstract_no_method(object diagnostics, object context);
        
        /// <summary>
        /// Creates a return result parameter with the specified name and type.
        /// </summary>
        /// <param name="name">The name for the new return result, or null.</param>
        /// <param name="type">The type for the new return result, or null.</param>
        NMF.Interop.Uml.IParameter CreateReturnResult(string name, NMF.Interop.Uml.IType type);
        
        /// <summary>
        /// The ownedParameters with direction in and inout.
        ///result = (ownedParameter-&gt;select(direction=ParameterDirectionKind::_&apos;in&apos; or direction=ParameterDirectionKind::inout))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        IOrderedSetExpression<NMF.Interop.Uml.IParameter> InputParameters();
        
        /// <summary>
        /// The ownedParameters with direction out, inout, or return.
        ///result = (ownedParameter-&gt;select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        IOrderedSetExpression<NMF.Interop.Uml.IParameter> OutputParameters();
    }
}
