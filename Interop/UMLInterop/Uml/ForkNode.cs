//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ForkNode is a ControlNode that splits a flow into multiple concurrent flows.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ForkNode")]
    [DebuggerDisplayAttribute("ForkNode {Name}")]
    public partial class ForkNode : ControlNode, IForkNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEdgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_incoming_edgeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_incoming_edgeOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ForkNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.
        ///let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
        ///allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Edges(object diagnostics, object context)
        {
            System.Func<IForkNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IForkNode, object, object, bool>>(_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method edges registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEdgesOperation()
        {
            return ClassInstance.LookupOperation("edges");
        }
        
        /// <summary>
        /// A ForkNode has one incoming ActivityEdge.
        ///incoming->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_incoming_edge(object diagnostics, object context)
        {
            System.Func<IForkNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IForkNode, object, object, bool>>(_one_incoming_edgeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_incoming_edge registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_incoming_edgeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_incoming_edgeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_incoming_edgeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_incoming_edgeOperation()
        {
            return ClassInstance.LookupOperation("one_incoming_edge");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ForkNode")));
            }
            return _classInstance;
        }
    }
}

