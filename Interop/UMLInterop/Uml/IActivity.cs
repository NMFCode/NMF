//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Activity
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Activity))]
    [XmlDefaultImplementationTypeAttribute(typeof(Activity))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Activity")]
    public interface IActivity : IModelElement, IBehavior
    {
        
        /// <summary>
        /// If true, this Activity must not make any changes to objects. The default is false (an Activity may make nonlocal changes). (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the Activity, then the model is ill-formed.)
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReadOnly")]
        [DescriptionAttribute(@"If true, this Activity must not make any changes to objects. The default is false (an Activity may make nonlocal changes). (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the Activity, then the model is ill-formed.)
<p>From package UML::Activities.</p>")]
        [CategoryAttribute("Activity")]
        [XmlElementNameAttribute("isReadOnly")]
        [XmlAttributeAttribute(true)]
        bool IsReadOnly
        {
            get;
            set;
        }
        
        /// <summary>
        /// If true, all invocations of the Activity are handled by the same execution.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isSingleExecution")]
        [DescriptionAttribute("If true, all invocations of the Activity are handled by the same execution.\n<p>Fr" +
            "om package UML::Activities.</p>")]
        [CategoryAttribute("Activity")]
        [XmlElementNameAttribute("isSingleExecution")]
        [XmlAttributeAttribute(true)]
        bool IsSingleExecution
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ownedGroup property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("group")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityGroup> OwnedGroup
        {
            get;
        }
        
        /// <summary>
        /// ActivityEdges expressing flow between the nodes of the Activity.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("edge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("activity")]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityEdge> Edge
        {
            get;
        }
        
        /// <summary>
        /// Top-level Variables defined by the Activity.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("activityScope")]
        [ConstantAttribute()]
        IOrderedSetExpression<IVariable> Variable
        {
            get;
        }
        
        /// <summary>
        /// The ownedNode property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityNode> OwnedNode
        {
            get;
        }
        
        /// <summary>
        /// Top-level ActivityPartitions in the Activity.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("partition")]
        [DescriptionAttribute("Top-level ActivityPartitions in the Activity.\n<p>From package UML::Activities.</p" +
            ">")]
        [CategoryAttribute("Activity")]
        [XmlElementNameAttribute("partition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IActivityPartition> Partition
        {
            get;
        }
        
        /// <summary>
        /// Top-level StructuredActivityNodes in the Activity.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("structuredNode")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IStructuredActivityNode> StructuredNode
        {
            get;
        }
        
        /// <summary>
        /// A Parameter with direction other than inout must have exactly one ActivityParameterNode in an Activity.
        ///ownedParameter->forAll(p | 
        ///   p.direction <> ParameterDirectionKind::inout implies node->select(
        ///       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maximum_one_parameter_node(object diagnostics, object context);
        
        /// <summary>
        /// A Parameter with direction inout must have exactly two ActivityParameterNodes in an Activity, at most one with incoming ActivityEdges and at most one with outgoing ActivityEdges.
        ///ownedParameter->forAll(p | 
        ///p.direction = ParameterDirectionKind::inout implies
        ///let associatedNodes : Set(ActivityNode) = node->select(
        ///       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in 
        ///  associatedNodes->size()=2 and
        ///  associatedNodes->select(incoming->notEmpty())->size()<=1 and
        ///  associatedNodes->select(outgoing->notEmpty())->size()<=1
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maximum_two_parameter_nodes(object diagnostics, object context);
    }
}

