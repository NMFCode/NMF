//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Class
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Class))]
    [XmlDefaultImplementationTypeAttribute(typeof(Class))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Class")]
    public interface IClass : IModelElement, IBehavioredClassifier, IEncapsulatedClassifier
    {
        
        /// <summary>
        /// Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isActive")]
        [DescriptionAttribute("Determines whether an object specified by this Class is active or not. If true, t" +
            "hen the owning Class is referred to as an active Class. If false, then such a Cl" +
            "ass is referred to as a passive Class.\n<p>From package UML::StructuredClassifier" +
            "s.</p>")]
        [CategoryAttribute("Class")]
        [XmlElementNameAttribute("isActive")]
        [XmlAttributeAttribute(true)]
        bool IsActive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Operations owned by the Class.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedOperation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("class")]
        [ConstantAttribute()]
        IOrderedSetExpression<NMF.Interop.Uml.IOperation> OwnedOperation
        {
            get;
        }
        
        /// <summary>
        /// The Classifiers owned by the Class that are not ownedBehaviors.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedClassifier")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IClassifier> NestedClassifier
        {
            get;
        }
        
        /// <summary>
        /// The Receptions owned by the Class.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedReception")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IReception> OwnedReception
        {
            get;
        }
        
        /// <summary>
        /// Only an active Class may own Receptions and have a classifierBehavior.
        ///not isActive implies (ownedReception-&gt;isEmpty() and classifierBehavior = null)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Passive_class(object diagnostics, object context);
        
        /// <summary>
        /// Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this class.
        /// </summary>
        /// <param name="name">The name for the new operation, or null.</param>
        /// <param name="parameterNames">The parameter names for the new operation, or null.</param>
        /// <param name="parameterTypes">The parameter types for the new operation, or null.</param>
        /// <param name="returnType">The return type for the new operation, or null.</param>
        NMF.Interop.Uml.IOperation CreateOwnedOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes, NMF.Interop.Uml.IType returnType);
        
        /// <summary>
        /// Determines whether this class is a metaclass.
        /// </summary>
        bool IsMetaclass();
        
        /// <summary>
        /// Derivation for Class::/extension : Extension
        ///result = (Extension.allInstances()-&gt;select(ext | 
        ///  let endTypes : Sequence(Classifier) = ext.memberEnd-&gt;collect(type.oclAsType(Classifier)) in
        ///  endTypes-&gt;includes(self) or endTypes.allParents()-&gt;includes(self) ))
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IExtension> GetExtensions();
        
        /// <summary>
        /// Derivation for Class::/superClass : Class
        ///result = (self.general()-&gt;select(oclIsKindOf(Class))-&gt;collect(oclAsType(Class))-&gt;asSet())
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IClass> GetSuperClasses();
    }
}
