//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A StructuredActivityNode is an Action that is also an ActivityGroup and whose behavior is specified by the ActivityNodes and ActivityEdges it so contains. Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the ActivityNodes and ActivityEdges it contains, and so a node or edge can only be directly contained in one StructuredActivityNode, though StructuredActivityNodes may be nested.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StructuredActivityNode")]
    [DebuggerDisplayAttribute("StructuredActivityNode {Name}")]
    public partial class StructuredActivityNode : Action, IStructuredActivityNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _output_pin_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutput_pin_edgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEdgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _input_pin_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInput_pin_edgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _sourceNodesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSourceNodesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _targetNodesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTargetNodesOperation);
        
        /// <summary>
        /// The backing field for the MustIsolate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _mustIsolate = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _mustIsolateAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMustIsolateAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _edgeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEdgeReference);
        
        /// <summary>
        /// The backing field for the Edge property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StructuredActivityNodeEdgeCollection _edge;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _structuredNodeInputReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStructuredNodeInputReference);
        
        /// <summary>
        /// The backing field for the StructuredNodeInput property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IInputPin> _structuredNodeInput;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _structuredNodeOutputReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStructuredNodeOutputReference);
        
        /// <summary>
        /// The backing field for the StructuredNodeOutput property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOutputPin> _structuredNodeOutput;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _variableReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveVariableReference);
        
        /// <summary>
        /// The backing field for the Variable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StructuredActivityNodeVariableCollection _variable;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNodeReference);
        
        /// <summary>
        /// The backing field for the Node property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StructuredActivityNodeNodeCollection _node;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _members_distinguishableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMembers_distinguishableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _cannot_import_selfOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCannot_import_selfOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _cannot_import_ownedMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCannot_import_ownedMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createElementImportOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateElementImportOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createPackageImportOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreatePackageImportOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getImportedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetImportedElementsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getImportedPackagesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetImportedPackagesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOwnedMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOwnedMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _excludeCollisionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveExcludeCollisionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getNamesOfMemberOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetNamesOfMemberOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _importMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveImportMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getImportedMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetImportedMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _membersAreDistinguishableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMembersAreDistinguishableOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedRuleReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedRuleReference);
        
        /// <summary>
        /// The backing field for the OwnedRule property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NamespaceOwnedRuleCollection _ownedRule;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _elementImportReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveElementImportReference);
        
        /// <summary>
        /// The backing field for the ElementImport property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NamespaceElementImportCollection _elementImport;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packageImportReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackageImportReference);
        
        /// <summary>
        /// The backing field for the PackageImport property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NamespacePackageImportCollection _packageImport;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _nodes_and_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNodes_and_edgesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_containedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_containedOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public StructuredActivityNode()
        {
            this._edge = new StructuredActivityNodeEdgeCollection(this);
            this._edge.CollectionChanging += this.EdgeCollectionChanging;
            this._edge.CollectionChanged += this.EdgeCollectionChanged;
            this._structuredNodeInput = new ObservableCompositionOrderedSet<IInputPin>(this);
            this._structuredNodeInput.CollectionChanging += this.StructuredNodeInputCollectionChanging;
            this._structuredNodeInput.CollectionChanged += this.StructuredNodeInputCollectionChanged;
            this._structuredNodeOutput = new ObservableCompositionOrderedSet<IOutputPin>(this);
            this._structuredNodeOutput.CollectionChanging += this.StructuredNodeOutputCollectionChanging;
            this._structuredNodeOutput.CollectionChanged += this.StructuredNodeOutputCollectionChanged;
            this._variable = new StructuredActivityNodeVariableCollection(this);
            this._variable.CollectionChanging += this.VariableCollectionChanging;
            this._variable.CollectionChanged += this.VariableCollectionChanged;
            this._node = new StructuredActivityNodeNodeCollection(this);
            this._node.CollectionChanging += this.NodeCollectionChanging;
            this._node.CollectionChanged += this.NodeCollectionChanged;
            this._ownedRule = new NamespaceOwnedRuleCollection(this);
            this._ownedRule.CollectionChanging += this.OwnedRuleCollectionChanging;
            this._ownedRule.CollectionChanged += this.OwnedRuleCollectionChanged;
            this._elementImport = new NamespaceElementImportCollection(this);
            this._elementImport.CollectionChanging += this.ElementImportCollectionChanging;
            this._elementImport.CollectionChanged += this.ElementImportCollectionChanged;
            this._packageImport = new NamespacePackageImportCollection(this);
            this._packageImport.CollectionChanging += this.PackageImportCollectionChanging;
            this._packageImport.CollectionChanged += this.PackageImportCollectionChanged;
        }
        
        /// <summary>
        /// If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("mustIsolate")]
        [DescriptionAttribute(@"If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.
<p>From package UML::Actions.</p>")]
        [CategoryAttribute("StructuredActivityNode")]
        [XmlElementNameAttribute("mustIsolate")]
        [XmlAttributeAttribute(true)]
        public bool MustIsolate
        {
            get
            {
                return this._mustIsolate;
            }
            set
            {
                if ((this._mustIsolate != value))
                {
                    bool old = this._mustIsolate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("MustIsolate", e, _mustIsolateAttribute);
                    this._mustIsolate = value;
                    this.OnPropertyChanged("MustIsolate", e, _mustIsolateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ActivityEdges immediately contained in the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("edge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("inStructuredNode")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IActivityEdge> Edge
        {
            get
            {
                return this._edge;
            }
        }
        
        /// <summary>
        /// The InputPins owned by the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("structuredNodeInput")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInputPin> StructuredNodeInput
        {
            get
            {
                return this._structuredNodeInput;
            }
        }
        
        /// <summary>
        /// The OutputPins owned by the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("structuredNodeOutput")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOutputPin> StructuredNodeOutput
        {
            get
            {
                return this._structuredNodeOutput;
            }
        }
        
        /// <summary>
        /// The Variables defined in the scope of the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("scope")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IVariable> Variable
        {
            get
            {
                return this._variable;
            }
        }
        
        /// <summary>
        /// The ActivityNodes immediately contained in the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("inStructuredNode")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IActivityNode> Node
        {
            get
            {
                return this._node;
            }
        }
        
        /// <summary>
        /// Specifies a set of Constraints owned by this Namespace.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedRule")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("context")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IConstraint> OwnedRule
        {
            get
            {
                return this._ownedRule;
            }
        }
        
        /// <summary>
        /// References the ElementImports owned by the Namespace.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("elementImport")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("importingNamespace")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IElementImport> ElementImport
        {
            get
            {
                return this._elementImport;
            }
        }
        
        /// <summary>
        /// References the PackageImports owned by the Namespace.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packageImport")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("importingNamespace")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPackageImport> PackageImport
        {
            get
            {
                return this._packageImport;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StructuredActivityNodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StructuredActivityNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StructuredActivityNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The outgoing ActivityEdges of the OutputPins of a StructuredActivityNode must have targets that are not within the StructuredActivityNode.
        ///output.outgoing.target->excludesAll(allOwnedNodes()-input)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Output_pin_edges(object diagnostics, object context)
        {
            System.Func<IStructuredActivityNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuredActivityNode, object, object, bool>>(_output_pin_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method output_pin_edges registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _output_pin_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _output_pin_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _output_pin_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutput_pin_edgesOperation()
        {
            return ClassInstance.LookupOperation("output_pin_edges");
        }
        
        /// <summary>
        /// The edges of a StructuredActivityNode are all the ActivityEdges with source and target ActivityNodes contained directly or indirectly within the StructuredActivityNode and at least one of the source or target not contained in any more deeply nested StructuredActivityNode.
        ///edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->
        ///	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Edges(object diagnostics, object context)
        {
            System.Func<IStructuredActivityNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuredActivityNode, object, object, bool>>(_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method edges registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEdgesOperation()
        {
            return ClassInstance.LookupOperation("edges");
        }
        
        /// <summary>
        /// The incoming ActivityEdges of an InputPin of a StructuredActivityNode must have sources that are not within the StructuredActivityNode.
        ///input.incoming.source->excludesAll(allOwnedNodes()-output)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Input_pin_edges(object diagnostics, object context)
        {
            System.Func<IStructuredActivityNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuredActivityNode, object, object, bool>>(_input_pin_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method input_pin_edges registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _input_pin_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _input_pin_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _input_pin_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInput_pin_edgesOperation()
        {
            return ClassInstance.LookupOperation("input_pin_edges");
        }
        
        /// <summary>
        /// Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as sources of edges owned by the StructuredActivityNode.
        ///result = (node->union(input.oclAsType(ActivityNode)->asSet())->
        ///  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet())
        ///<p>From package UML::Actions.</p>
        /// </summary>
        public ISetExpression<IActivityNode> SourceNodes()
        {
            System.Func<IStructuredActivityNode, ISetExpression<IActivityNode>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuredActivityNode, ISetExpression<IActivityNode>>>(_sourceNodesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method sourceNodes registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _sourceNodesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _sourceNodesOperation.Value, e));
            ISetExpression<IActivityNode> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _sourceNodesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSourceNodesOperation()
        {
            return ClassInstance.LookupOperation("sourceNodes");
        }
        
        /// <summary>
        /// Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as targets of edges owned by the StructuredActivityNode.
        ///result = (node->union(output.oclAsType(ActivityNode)->asSet())->
        ///  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet())
        ///<p>From package UML::Actions.</p>
        /// </summary>
        public ISetExpression<IActivityNode> TargetNodes()
        {
            System.Func<IStructuredActivityNode, ISetExpression<IActivityNode>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStructuredActivityNode, ISetExpression<IActivityNode>>>(_targetNodesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method targetNodes registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _targetNodesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _targetNodesOperation.Value, e));
            ISetExpression<IActivityNode> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _targetNodesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTargetNodesOperation()
        {
            return ClassInstance.LookupOperation("targetNodes");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMustIsolateAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("mustIsolate")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEdgeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("edge")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Edge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EdgeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Edge", e, _edgeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Edge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EdgeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Edge", e, _edgeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStructuredNodeInputReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("structuredNodeInput")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the StructuredNodeInput property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructuredNodeInputCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("StructuredNodeInput", e, _structuredNodeInputReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the StructuredNodeInput property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructuredNodeInputCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("StructuredNodeInput", e, _structuredNodeInputReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStructuredNodeOutputReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("structuredNodeOutput")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the StructuredNodeOutput property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructuredNodeOutputCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("StructuredNodeOutput", e, _structuredNodeOutputReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the StructuredNodeOutput property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructuredNodeOutputCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("StructuredNodeOutput", e, _structuredNodeOutputReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveVariableReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("variable")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Variable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VariableCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Variable", e, _variableReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Variable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VariableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Variable", e, _variableReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StructuredActivityNode.ClassInstance)).Resolve("node")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Node", e, _nodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Node", e, _nodeReference);
        }
        
        /// <summary>
        /// All the members of a Namespace are distinguishable within it.
        ///membersAreDistinguishable()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Members_distinguishable(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.INamespace, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, object, object, bool>>(_members_distinguishableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method members_distinguishable registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _members_distinguishableOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _members_distinguishableOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _members_distinguishableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMembers_distinguishableOperation()
        {
            return ClassInstance.LookupOperation("members_distinguishable");
        }
        
        /// <summary>
        /// A Namespace cannot have a PackageImport to itself.
        ///packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Cannot_import_self(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.INamespace, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, object, object, bool>>(_cannot_import_selfOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method cannot_import_self registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _cannot_import_selfOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _cannot_import_selfOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _cannot_import_selfOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCannot_import_selfOperation()
        {
            return ClassInstance.LookupOperation("cannot_import_self");
        }
        
        /// <summary>
        /// A Namespace cannot have an ElementImport to one of its ownedMembers.
        ///elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Cannot_import_ownedMembers(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.INamespace, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, object, object, bool>>(_cannot_import_ownedMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method cannot_import_ownedMembers registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _cannot_import_ownedMembersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _cannot_import_ownedMembersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _cannot_import_ownedMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCannot_import_ownedMembersOperation()
        {
            return ClassInstance.LookupOperation("cannot_import_ownedMembers");
        }
        
        /// <summary>
        /// Creates an import of the specified element into this namespace with the specified visibility.
        /// </summary>
        /// <param name="element">The element to import.</param>
        /// <param name="visibility">The visibility for the new element import.</param>
        public IElementImport CreateElementImport(IPackageableElement element, VisibilityKind visibility)
        {
            System.Func<NMF.Interop.Uml.INamespace, IPackageableElement, VisibilityKind, IElementImport> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, IPackageableElement, VisibilityKind, IElementImport>>(_createElementImportOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createElementImport registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createElementImportOperation.Value, element, visibility);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createElementImportOperation.Value, e));
            IElementImport result = handler.Invoke(this, element, visibility);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createElementImportOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateElementImportOperation()
        {
            return ClassInstance.LookupOperation("createElementImport");
        }
        
        /// <summary>
        /// Creates an import of the specified package into this namespace with the specified visibility.
        /// </summary>
        /// <param name="package_">The package to import.</param>
        /// <param name="visibility">The visibility for the new package import.</param>
        public IPackageImport CreatePackageImport(IPackage package_, VisibilityKind visibility)
        {
            System.Func<NMF.Interop.Uml.INamespace, IPackage, VisibilityKind, IPackageImport> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, IPackage, VisibilityKind, IPackageImport>>(_createPackageImportOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createPackageImport registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createPackageImportOperation.Value, package_, visibility);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createPackageImportOperation.Value, e));
            IPackageImport result = handler.Invoke(this, package_, visibility);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createPackageImportOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreatePackageImportOperation()
        {
            return ClassInstance.LookupOperation("createPackageImport");
        }
        
        /// <summary>
        /// Retrieves the elements imported by this namespace.
        /// </summary>
        public ISetExpression<IPackageableElement> GetImportedElements()
        {
            System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackageableElement>>>(_getImportedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getImportedElements registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getImportedElementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getImportedElementsOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getImportedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetImportedElementsOperation()
        {
            return ClassInstance.LookupOperation("getImportedElements");
        }
        
        /// <summary>
        /// Retrieves the packages imported by this namespace.
        /// </summary>
        public ISetExpression<IPackage> GetImportedPackages()
        {
            System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackage>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackage>>>(_getImportedPackagesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getImportedPackages registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getImportedPackagesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getImportedPackagesOperation.Value, e));
            ISetExpression<IPackage> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getImportedPackagesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetImportedPackagesOperation()
        {
            return ClassInstance.LookupOperation("getImportedPackages");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public ISetExpression<INamedElement> GetOwnedMembers()
        {
            System.Func<NMF.Interop.Uml.INamespace, ISetExpression<INamedElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, ISetExpression<INamedElement>>>(_getOwnedMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getOwnedMembers registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOwnedMembersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOwnedMembersOperation.Value, e));
            ISetExpression<INamedElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOwnedMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOwnedMembersOperation()
        {
            return ClassInstance.LookupOperation("getOwnedMembers");
        }
        
        /// <summary>
        /// The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace.
        ///result = (imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        /// <param name="imps"></param>
        public ISetExpression<IPackageableElement> ExcludeCollisions(IEnumerable<IPackageableElement> imps)
        {
            System.Func<NMF.Interop.Uml.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>>>(_excludeCollisionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method excludeCollisions registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _excludeCollisionsOperation.Value, imps);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _excludeCollisionsOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this, imps);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _excludeCollisionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveExcludeCollisionsOperation()
        {
            return ClassInstance.LookupOperation("excludeCollisions");
        }
        
        /// <summary>
        /// The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases.
        ///result = (if self.ownedMember ->includes(element)
        ///then Set{element.name}
        ///else let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in
        ///  if elementImports->notEmpty()
        ///  then
        ///     elementImports->collect(el | el.getName())->asSet()
        ///  else 
        ///     self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()
        ///  endif
        ///endif)
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        /// <param name="element"></param>
        public ISetExpression<string> GetNamesOfMember(INamedElement element)
        {
            System.Func<NMF.Interop.Uml.INamespace, INamedElement, ISetExpression<string>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, INamedElement, ISetExpression<string>>>(_getNamesOfMemberOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getNamesOfMember registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getNamesOfMemberOperation.Value, element);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getNamesOfMemberOperation.Value, e));
            ISetExpression<string> result = handler.Invoke(this, element);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getNamesOfMemberOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetNamesOfMemberOperation()
        {
            return ClassInstance.LookupOperation("getNamesOfMember");
        }
        
        /// <summary>
        /// The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported.
        ///result = (self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self))))
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        /// <param name="imps"></param>
        public ISetExpression<IPackageableElement> ImportMembers(IEnumerable<IPackageableElement> imps)
        {
            System.Func<NMF.Interop.Uml.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>>>(_importMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method importMembers registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _importMembersOperation.Value, imps);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _importMembersOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this, imps);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _importMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveImportMembersOperation()
        {
            return ClassInstance.LookupOperation("importMembers");
        }
        
        /// <summary>
        /// The importedMember property is derived as the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.
        ///result = (self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public ISetExpression<IPackageableElement> GetImportedMembers()
        {
            System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, ISetExpression<IPackageableElement>>>(_getImportedMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getImportedMembers registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getImportedMembersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getImportedMembersOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getImportedMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetImportedMembersOperation()
        {
            return ClassInstance.LookupOperation("getImportedMembers");
        }
        
        /// <summary>
        /// The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it.
        ///result = (member->forAll( memb |
        ///   member->excluding(memb)->forAll(other |
        ///       memb.isDistinguishableFrom(other, self))))
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public bool MembersAreDistinguishable()
        {
            System.Func<NMF.Interop.Uml.INamespace, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.INamespace, bool>>(_membersAreDistinguishableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method membersAreDistinguishable registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _membersAreDistinguishableOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _membersAreDistinguishableOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _membersAreDistinguishableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMembersAreDistinguishableOperation()
        {
            return ClassInstance.LookupOperation("membersAreDistinguishable");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedRuleReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Namespace.ClassInstance)).Resolve("ownedRule")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedRule property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedRuleCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedRule", e, _ownedRuleReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedRule property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedRuleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedRule", e, _ownedRuleReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveElementImportReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Namespace.ClassInstance)).Resolve("elementImport")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElementImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementImportCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ElementImport", e, _elementImportReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElementImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementImportCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElementImport", e, _elementImportReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackageImportReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Namespace.ClassInstance)).Resolve("packageImport")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PackageImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageImportCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PackageImport", e, _packageImportReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PackageImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageImportCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PackageImport", e, _packageImportReference);
        }
        
        /// <summary>
        /// All containedNodes and containeEdges of an ActivityGroup must be in the same Activity as the group.
        ///containedNode->forAll(activity = self.containingActivity()) and 
        ///containedEdge->forAll(activity = self.containingActivity())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Nodes_and_edges(object diagnostics, object context)
        {
            System.Func<IActivityGroup, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityGroup, object, object, bool>>(_nodes_and_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method nodes_and_edges registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _nodes_and_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _nodes_and_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _nodes_and_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNodes_and_edgesOperation()
        {
            return ClassInstance.LookupOperation("nodes_and_edges");
        }
        
        /// <summary>
        /// No containedNode or containedEdge of an ActivityGroup may be contained by its subgroups or its superGroups, transitively.
        ///subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and
        ///superGroup->closure(superGroup).containedNode->excludesAll(containedNode) and 
        ///subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and 
        ///superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_contained(object diagnostics, object context)
        {
            System.Func<IActivityGroup, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityGroup, object, object, bool>>(_not_containedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_contained registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_containedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_containedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_containedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_containedOperation()
        {
            return ClassInstance.LookupOperation("not_contained");
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int edgeIndex = ModelHelper.IndexOfReference(this.Edge, element);
            if ((edgeIndex != -1))
            {
                return ModelHelper.CreatePath("edge", edgeIndex);
            }
            int structuredNodeInputIndex = ModelHelper.IndexOfReference(this.StructuredNodeInput, element);
            if ((structuredNodeInputIndex != -1))
            {
                return ModelHelper.CreatePath("structuredNodeInput", structuredNodeInputIndex);
            }
            int structuredNodeOutputIndex = ModelHelper.IndexOfReference(this.StructuredNodeOutput, element);
            if ((structuredNodeOutputIndex != -1))
            {
                return ModelHelper.CreatePath("structuredNodeOutput", structuredNodeOutputIndex);
            }
            int variableIndex = ModelHelper.IndexOfReference(this.Variable, element);
            if ((variableIndex != -1))
            {
                return ModelHelper.CreatePath("variable", variableIndex);
            }
            int nodeIndex = ModelHelper.IndexOfReference(this.Node, element);
            if ((nodeIndex != -1))
            {
                return ModelHelper.CreatePath("node", nodeIndex);
            }
            int ownedRuleIndex = ModelHelper.IndexOfReference(this.OwnedRule, element);
            if ((ownedRuleIndex != -1))
            {
                return ModelHelper.CreatePath("ownedRule", ownedRuleIndex);
            }
            int elementImportIndex = ModelHelper.IndexOfReference(this.ElementImport, element);
            if ((elementImportIndex != -1))
            {
                return ModelHelper.CreatePath("elementImport", elementImportIndex);
            }
            int packageImportIndex = ModelHelper.IndexOfReference(this.PackageImport, element);
            if ((packageImportIndex != -1))
            {
                return ModelHelper.CreatePath("packageImport", packageImportIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EDGE"))
            {
                if ((index < this.Edge.Count))
                {
                    return this.Edge[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "STRUCTUREDNODEINPUT"))
            {
                if ((index < this.StructuredNodeInput.Count))
                {
                    return this.StructuredNodeInput[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "STRUCTUREDNODEOUTPUT"))
            {
                if ((index < this.StructuredNodeOutput.Count))
                {
                    return this.StructuredNodeOutput[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "VARIABLE"))
            {
                if ((index < this.Variable.Count))
                {
                    return this.Variable[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NODE"))
            {
                if ((index < this.Node.Count))
                {
                    return this.Node[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDRULE"))
            {
                if ((index < this.OwnedRule.Count))
                {
                    return this.OwnedRule[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ELEMENTIMPORT"))
            {
                if ((index < this.ElementImport.Count))
                {
                    return this.ElementImport[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "PACKAGEIMPORT"))
            {
                if ((index < this.PackageImport.Count))
                {
                    return this.PackageImport[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MUSTISOLATE"))
            {
                return this.MustIsolate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EDGE"))
            {
                return this._edge;
            }
            if ((feature == "STRUCTUREDNODEINPUT"))
            {
                return this._structuredNodeInput;
            }
            if ((feature == "STRUCTUREDNODEOUTPUT"))
            {
                return this._structuredNodeOutput;
            }
            if ((feature == "VARIABLE"))
            {
                return this._variable;
            }
            if ((feature == "NODE"))
            {
                return this._node;
            }
            if ((feature == "OWNEDRULE"))
            {
                return this._ownedRule;
            }
            if ((feature == "ELEMENTIMPORT"))
            {
                return this._elementImport;
            }
            if ((feature == "PACKAGEIMPORT"))
            {
                return this._packageImport;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MUSTISOLATE"))
            {
                this.MustIsolate = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MUSTISOLATE"))
            {
                return Observable.Box(new MustIsolateProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._edge))
            {
                return "edge";
            }
            if ((container == this._structuredNodeInput))
            {
                return "structuredNodeInput";
            }
            if ((container == this._structuredNodeOutput))
            {
                return "structuredNodeOutput";
            }
            if ((container == this._variable))
            {
                return "variable";
            }
            if ((container == this._node))
            {
                return "node";
            }
            if ((container == this._ownedRule))
            {
                return "ownedRule";
            }
            if ((container == this._elementImport))
            {
                return "elementImport";
            }
            if ((container == this._packageImport))
            {
                return "packageImport";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StructuredActivityNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructuredActivityNode class
        /// </summary>
        public class StructuredActivityNodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructuredActivityNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructuredActivityNodeChildrenCollection(StructuredActivityNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Edge.Count);
                    count = (count + this._parent.StructuredNodeInput.Count);
                    count = (count + this._parent.StructuredNodeOutput.Count);
                    count = (count + this._parent.Variable.Count);
                    count = (count + this._parent.Node.Count);
                    count = (count + this._parent.OwnedRule.Count);
                    count = (count + this._parent.ElementImport.Count);
                    count = (count + this._parent.PackageImport.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Edge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StructuredNodeInput.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StructuredNodeOutput.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedRule.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Edge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StructuredNodeInput.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StructuredNodeOutput.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedRule.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IActivityEdge edgeCasted = item.As<IActivityEdge>();
                if ((edgeCasted != null))
                {
                    this._parent.Edge.Add(edgeCasted);
                }
                IInputPin structuredNodeInputCasted = item.As<IInputPin>();
                if ((structuredNodeInputCasted != null))
                {
                    this._parent.StructuredNodeInput.Add(structuredNodeInputCasted);
                }
                IOutputPin structuredNodeOutputCasted = item.As<IOutputPin>();
                if ((structuredNodeOutputCasted != null))
                {
                    this._parent.StructuredNodeOutput.Add(structuredNodeOutputCasted);
                }
                IVariable variableCasted = item.As<IVariable>();
                if ((variableCasted != null))
                {
                    this._parent.Variable.Add(variableCasted);
                }
                IActivityNode nodeCasted = item.As<IActivityNode>();
                if ((nodeCasted != null))
                {
                    this._parent.Node.Add(nodeCasted);
                }
                IConstraint ownedRuleCasted = item.As<IConstraint>();
                if ((ownedRuleCasted != null))
                {
                    this._parent.OwnedRule.Add(ownedRuleCasted);
                }
                IElementImport elementImportCasted = item.As<IElementImport>();
                if ((elementImportCasted != null))
                {
                    this._parent.ElementImport.Add(elementImportCasted);
                }
                IPackageImport packageImportCasted = item.As<IPackageImport>();
                if ((packageImportCasted != null))
                {
                    this._parent.PackageImport.Add(packageImportCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Edge.Clear();
                this._parent.StructuredNodeInput.Clear();
                this._parent.StructuredNodeOutput.Clear();
                this._parent.Variable.Clear();
                this._parent.Node.Clear();
                this._parent.OwnedRule.Clear();
                this._parent.ElementImport.Clear();
                this._parent.PackageImport.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Edge.Contains(item))
                {
                    return true;
                }
                if (this._parent.StructuredNodeInput.Contains(item))
                {
                    return true;
                }
                if (this._parent.StructuredNodeOutput.Contains(item))
                {
                    return true;
                }
                if (this._parent.Variable.Contains(item))
                {
                    return true;
                }
                if (this._parent.Node.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedRule.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElementImport.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackageImport.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> edgeEnumerator = this._parent.Edge.GetEnumerator();
                try
                {
                    for (
                    ; edgeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = edgeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    edgeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> structuredNodeInputEnumerator = this._parent.StructuredNodeInput.GetEnumerator();
                try
                {
                    for (
                    ; structuredNodeInputEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structuredNodeInputEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structuredNodeInputEnumerator.Dispose();
                }
                IEnumerator<IModelElement> structuredNodeOutputEnumerator = this._parent.StructuredNodeOutput.GetEnumerator();
                try
                {
                    for (
                    ; structuredNodeOutputEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structuredNodeOutputEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structuredNodeOutputEnumerator.Dispose();
                }
                IEnumerator<IModelElement> variableEnumerator = this._parent.Variable.GetEnumerator();
                try
                {
                    for (
                    ; variableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nodeEnumerator = this._parent.Node.GetEnumerator();
                try
                {
                    for (
                    ; nodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedRuleEnumerator = this._parent.OwnedRule.GetEnumerator();
                try
                {
                    for (
                    ; ownedRuleEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedRuleEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedRuleEnumerator.Dispose();
                }
                IEnumerator<IModelElement> elementImportEnumerator = this._parent.ElementImport.GetEnumerator();
                try
                {
                    for (
                    ; elementImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementImportEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packageImportEnumerator = this._parent.PackageImport.GetEnumerator();
                try
                {
                    for (
                    ; packageImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageImportEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.Edge.Remove(activityEdgeItem)))
                {
                    return true;
                }
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.StructuredNodeInput.Remove(inputPinItem)))
                {
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.StructuredNodeOutput.Remove(outputPinItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.Variable.Remove(variableItem)))
                {
                    return true;
                }
                IActivityNode activityNodeItem = item.As<IActivityNode>();
                if (((activityNodeItem != null) 
                            && this._parent.Node.Remove(activityNodeItem)))
                {
                    return true;
                }
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.OwnedRule.Remove(constraintItem)))
                {
                    return true;
                }
                IElementImport elementImportItem = item.As<IElementImport>();
                if (((elementImportItem != null) 
                            && this._parent.ElementImport.Remove(elementImportItem)))
                {
                    return true;
                }
                IPackageImport packageImportItem = item.As<IPackageImport>();
                if (((packageImportItem != null) 
                            && this._parent.PackageImport.Remove(packageImportItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Edge).Concat(this._parent.StructuredNodeInput).Concat(this._parent.StructuredNodeOutput).Concat(this._parent.Variable).Concat(this._parent.Node).Concat(this._parent.OwnedRule).Concat(this._parent.ElementImport).Concat(this._parent.PackageImport).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructuredActivityNode class
        /// </summary>
        public class StructuredActivityNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructuredActivityNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructuredActivityNodeReferencedElementsCollection(StructuredActivityNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Edge.Count);
                    count = (count + this._parent.StructuredNodeInput.Count);
                    count = (count + this._parent.StructuredNodeOutput.Count);
                    count = (count + this._parent.Variable.Count);
                    count = (count + this._parent.Node.Count);
                    count = (count + this._parent.OwnedRule.Count);
                    count = (count + this._parent.ElementImport.Count);
                    count = (count + this._parent.PackageImport.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Edge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StructuredNodeInput.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StructuredNodeOutput.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedRule.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Edge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StructuredNodeInput.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StructuredNodeOutput.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedRule.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IActivityEdge edgeCasted = item.As<IActivityEdge>();
                if ((edgeCasted != null))
                {
                    this._parent.Edge.Add(edgeCasted);
                }
                IInputPin structuredNodeInputCasted = item.As<IInputPin>();
                if ((structuredNodeInputCasted != null))
                {
                    this._parent.StructuredNodeInput.Add(structuredNodeInputCasted);
                }
                IOutputPin structuredNodeOutputCasted = item.As<IOutputPin>();
                if ((structuredNodeOutputCasted != null))
                {
                    this._parent.StructuredNodeOutput.Add(structuredNodeOutputCasted);
                }
                IVariable variableCasted = item.As<IVariable>();
                if ((variableCasted != null))
                {
                    this._parent.Variable.Add(variableCasted);
                }
                IActivityNode nodeCasted = item.As<IActivityNode>();
                if ((nodeCasted != null))
                {
                    this._parent.Node.Add(nodeCasted);
                }
                IConstraint ownedRuleCasted = item.As<IConstraint>();
                if ((ownedRuleCasted != null))
                {
                    this._parent.OwnedRule.Add(ownedRuleCasted);
                }
                IElementImport elementImportCasted = item.As<IElementImport>();
                if ((elementImportCasted != null))
                {
                    this._parent.ElementImport.Add(elementImportCasted);
                }
                IPackageImport packageImportCasted = item.As<IPackageImport>();
                if ((packageImportCasted != null))
                {
                    this._parent.PackageImport.Add(packageImportCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Edge.Clear();
                this._parent.StructuredNodeInput.Clear();
                this._parent.StructuredNodeOutput.Clear();
                this._parent.Variable.Clear();
                this._parent.Node.Clear();
                this._parent.OwnedRule.Clear();
                this._parent.ElementImport.Clear();
                this._parent.PackageImport.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Edge.Contains(item))
                {
                    return true;
                }
                if (this._parent.StructuredNodeInput.Contains(item))
                {
                    return true;
                }
                if (this._parent.StructuredNodeOutput.Contains(item))
                {
                    return true;
                }
                if (this._parent.Variable.Contains(item))
                {
                    return true;
                }
                if (this._parent.Node.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedRule.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElementImport.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackageImport.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> edgeEnumerator = this._parent.Edge.GetEnumerator();
                try
                {
                    for (
                    ; edgeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = edgeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    edgeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> structuredNodeInputEnumerator = this._parent.StructuredNodeInput.GetEnumerator();
                try
                {
                    for (
                    ; structuredNodeInputEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structuredNodeInputEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structuredNodeInputEnumerator.Dispose();
                }
                IEnumerator<IModelElement> structuredNodeOutputEnumerator = this._parent.StructuredNodeOutput.GetEnumerator();
                try
                {
                    for (
                    ; structuredNodeOutputEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structuredNodeOutputEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structuredNodeOutputEnumerator.Dispose();
                }
                IEnumerator<IModelElement> variableEnumerator = this._parent.Variable.GetEnumerator();
                try
                {
                    for (
                    ; variableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nodeEnumerator = this._parent.Node.GetEnumerator();
                try
                {
                    for (
                    ; nodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedRuleEnumerator = this._parent.OwnedRule.GetEnumerator();
                try
                {
                    for (
                    ; ownedRuleEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedRuleEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedRuleEnumerator.Dispose();
                }
                IEnumerator<IModelElement> elementImportEnumerator = this._parent.ElementImport.GetEnumerator();
                try
                {
                    for (
                    ; elementImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementImportEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packageImportEnumerator = this._parent.PackageImport.GetEnumerator();
                try
                {
                    for (
                    ; packageImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageImportEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.Edge.Remove(activityEdgeItem)))
                {
                    return true;
                }
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.StructuredNodeInput.Remove(inputPinItem)))
                {
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.StructuredNodeOutput.Remove(outputPinItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.Variable.Remove(variableItem)))
                {
                    return true;
                }
                IActivityNode activityNodeItem = item.As<IActivityNode>();
                if (((activityNodeItem != null) 
                            && this._parent.Node.Remove(activityNodeItem)))
                {
                    return true;
                }
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.OwnedRule.Remove(constraintItem)))
                {
                    return true;
                }
                IElementImport elementImportItem = item.As<IElementImport>();
                if (((elementImportItem != null) 
                            && this._parent.ElementImport.Remove(elementImportItem)))
                {
                    return true;
                }
                IPackageImport packageImportItem = item.As<IPackageImport>();
                if (((packageImportItem != null) 
                            && this._parent.PackageImport.Remove(packageImportItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Edge).Concat(this._parent.StructuredNodeInput).Concat(this._parent.StructuredNodeOutput).Concat(this._parent.Variable).Concat(this._parent.Node).Concat(this._parent.OwnedRule).Concat(this._parent.ElementImport).Concat(this._parent.PackageImport).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mustIsolate property
        /// </summary>
        private sealed class MustIsolateProxy : ModelPropertyChange<IStructuredActivityNode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MustIsolateProxy(IStructuredActivityNode modelElement) : 
                    base(modelElement, "mustIsolate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MustIsolate;
                }
                set
                {
                    this.ModelElement.MustIsolate = value;
                }
            }
        }
    }
}

