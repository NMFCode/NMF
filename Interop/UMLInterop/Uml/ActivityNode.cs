//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// ActivityNode is an abstract class for points in the flow of an Activity connected by ActivityEdges.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode")]
    [DebuggerDisplayAttribute("ActivityNode {Name}")]
    public abstract partial class ActivityNode : RedefinableElement, IActivityNode, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inInterruptibleRegionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInInterruptibleRegionReference);
        
        /// <summary>
        /// The backing field for the InInterruptibleRegion property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityNodeInInterruptibleRegionCollection _inInterruptibleRegion;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inStructuredNodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInStructuredNodeReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _incomingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIncomingReference);
        
        /// <summary>
        /// The backing field for the Incoming property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityNodeIncomingCollection _incoming;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _outgoingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOutgoingReference);
        
        /// <summary>
        /// The backing field for the Outgoing property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityNodeOutgoingCollection _outgoing;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedNodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedNodeReference);
        
        /// <summary>
        /// The backing field for the RedefinedNode property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IActivityNode> _redefinedNode;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inPartitionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInPartitionReference);
        
        /// <summary>
        /// The backing field for the InPartition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityNodeInPartitionCollection _inPartition;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _containingActivityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveContainingActivityOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ActivityNode()
        {
            this._inInterruptibleRegion = new ActivityNodeInInterruptibleRegionCollection(this);
            this._inInterruptibleRegion.CollectionChanging += this.InInterruptibleRegionCollectionChanging;
            this._inInterruptibleRegion.CollectionChanged += this.InInterruptibleRegionCollectionChanged;
            this._incoming = new ActivityNodeIncomingCollection(this);
            this._incoming.CollectionChanging += this.IncomingCollectionChanging;
            this._incoming.CollectionChanged += this.IncomingCollectionChanged;
            this._outgoing = new ActivityNodeOutgoingCollection(this);
            this._outgoing.CollectionChanging += this.OutgoingCollectionChanging;
            this._outgoing.CollectionChanged += this.OutgoingCollectionChanged;
            this._redefinedNode = new ObservableAssociationSet<IActivityNode>();
            this._redefinedNode.CollectionChanging += this.RedefinedNodeCollectionChanging;
            this._redefinedNode.CollectionChanged += this.RedefinedNodeCollectionChanged;
            this._inPartition = new ActivityNodeInPartitionCollection(this);
            this._inPartition.CollectionChanging += this.InPartitionCollectionChanging;
            this._inPartition.CollectionChanged += this.InPartitionCollectionChanged;
        }
        
        /// <summary>
        /// InterruptibleActivityRegions containing the ActivityNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inInterruptibleRegion")]
        [DescriptionAttribute("InterruptibleActivityRegions containing the ActivityNode.\n<p>From package UML::Ac" +
            "tivities.</p>")]
        [CategoryAttribute("ActivityNode")]
        [XmlElementNameAttribute("inInterruptibleRegion")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("node")]
        [ConstantAttribute()]
        public ISetExpression<IInterruptibleActivityRegion> InInterruptibleRegion
        {
            get
            {
                return this._inInterruptibleRegion;
            }
        }
        
        /// <summary>
        /// The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inStructuredNode")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("node")]
        public IStructuredActivityNode InStructuredNode
        {
            get
            {
                return ModelHelper.CastAs<IStructuredActivityNode>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// ActivityEdges that have the ActivityNode as their target.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("incoming")]
        [DescriptionAttribute("ActivityEdges that have the ActivityNode as their target.\n<p>From package UML::Ac" +
            "tivities.</p>")]
        [CategoryAttribute("ActivityNode")]
        [XmlElementNameAttribute("incoming")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("target")]
        [ConstantAttribute()]
        public ISetExpression<IActivityEdge> Incoming
        {
            get
            {
                return this._incoming;
            }
        }
        
        /// <summary>
        /// ActivityEdges that have the ActivityNode as their source.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("outgoing")]
        [DescriptionAttribute("ActivityEdges that have the ActivityNode as their source.\n<p>From package UML::Ac" +
            "tivities.</p>")]
        [CategoryAttribute("ActivityNode")]
        [XmlElementNameAttribute("outgoing")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("source")]
        [ConstantAttribute()]
        public ISetExpression<IActivityEdge> Outgoing
        {
            get
            {
                return this._outgoing;
            }
        }
        
        /// <summary>
        /// ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedNode")]
        [DescriptionAttribute("ActivityNodes from a generalization of the Activity containining this ActivityNod" +
            "e that are redefined by this ActivityNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityNode")]
        [XmlElementNameAttribute("redefinedNode")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IActivityNode> RedefinedNode
        {
            get
            {
                return this._redefinedNode;
            }
        }
        
        /// <summary>
        /// ActivityPartitions containing the ActivityNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inPartition")]
        [DescriptionAttribute("ActivityPartitions containing the ActivityNode.\n<p>From package UML::Activities.<" +
            "/p>")]
        [CategoryAttribute("ActivityNode")]
        [XmlElementNameAttribute("inPartition")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("node")]
        [ConstantAttribute()]
        public ISetExpression<IActivityPartition> InPartition
        {
            get
            {
                return this._inPartition;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ActivityNodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ActivityNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInInterruptibleRegionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("inInterruptibleRegion")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InInterruptibleRegion property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InInterruptibleRegionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InInterruptibleRegion", e, _inInterruptibleRegionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InInterruptibleRegion property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InInterruptibleRegionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InInterruptibleRegion", e, _inInterruptibleRegionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInStructuredNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("inStructuredNode")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IStructuredActivityNode oldInStructuredNode = ModelHelper.CastAs<IStructuredActivityNode>(oldParent);
            IStructuredActivityNode newInStructuredNode = ModelHelper.CastAs<IStructuredActivityNode>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInStructuredNode, newInStructuredNode);
            this.OnPropertyChanging("InStructuredNode", e, _inStructuredNodeReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IStructuredActivityNode oldInStructuredNode = ModelHelper.CastAs<IStructuredActivityNode>(oldParent);
            IStructuredActivityNode newInStructuredNode = ModelHelper.CastAs<IStructuredActivityNode>(newParent);
            if ((oldInStructuredNode != null))
            {
                oldInStructuredNode.Node.Remove(this);
            }
            if ((newInStructuredNode != null))
            {
                newInStructuredNode.Node.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInStructuredNode, newInStructuredNode);
            this.OnPropertyChanged("InStructuredNode", e, _inStructuredNodeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIncomingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("incoming")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Incoming property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Incoming", e, _incomingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Incoming property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Incoming", e, _incomingReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOutgoingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("outgoing")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Outgoing property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Outgoing", e, _outgoingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Outgoing property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Outgoing", e, _outgoingReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("redefinedNode")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedNodeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedNode", e, _redefinedNodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedNodeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedNode", e, _redefinedNodeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInPartitionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityNode.ClassInstance)).Resolve("inPartition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InPartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InPartitionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InPartition", e, _inPartitionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InPartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InPartitionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InPartition", e, _inPartitionReference);
        }
        
        /// <summary>
        /// 
        /// </summary>
        public IActivity ContainingActivity()
        {
            System.Func<IActivityContent, IActivity> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityContent, IActivity>>(_containingActivityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method containingActivity registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _containingActivityOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _containingActivityOperation.Value, e));
            IActivity result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _containingActivityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveContainingActivityOperation()
        {
            return ClassInstance.LookupOperation("containingActivity");
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INSTRUCTUREDNODE"))
            {
                return this.InStructuredNode;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ININTERRUPTIBLEREGION"))
            {
                return this._inInterruptibleRegion;
            }
            if ((feature == "INCOMING"))
            {
                return this._incoming;
            }
            if ((feature == "OUTGOING"))
            {
                return this._outgoing;
            }
            if ((feature == "REDEFINEDNODE"))
            {
                return this._redefinedNode;
            }
            if ((feature == "INPARTITION"))
            {
                return this._inPartition;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTRUCTUREDNODE"))
            {
                this.InStructuredNode = ((IStructuredActivityNode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INSTRUCTUREDNODE"))
            {
                return new InStructuredNodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityNode class
        /// </summary>
        public class ActivityNodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityNodeChildrenCollection(ActivityNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
            }
            
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityNode class
        /// </summary>
        public class ActivityNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityNodeReferencedElementsCollection(ActivityNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InInterruptibleRegion.Count);
                    if ((this._parent.InStructuredNode != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Incoming.Count);
                    count = (count + this._parent.Outgoing.Count);
                    count = (count + this._parent.RedefinedNode.Count);
                    count = (count + this._parent.InPartition.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InInterruptibleRegion.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Incoming.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Outgoing.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RedefinedNode.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InPartition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InInterruptibleRegion.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Incoming.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Outgoing.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RedefinedNode.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InPartition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInterruptibleActivityRegion inInterruptibleRegionCasted = item.As<IInterruptibleActivityRegion>();
                if ((inInterruptibleRegionCasted != null))
                {
                    this._parent.InInterruptibleRegion.Add(inInterruptibleRegionCasted);
                }
                if ((this._parent.InStructuredNode == null))
                {
                    IStructuredActivityNode inStructuredNodeCasted = item.As<IStructuredActivityNode>();
                    if ((inStructuredNodeCasted != null))
                    {
                        this._parent.InStructuredNode = inStructuredNodeCasted;
                        return;
                    }
                }
                IActivityEdge incomingCasted = item.As<IActivityEdge>();
                if ((incomingCasted != null))
                {
                    this._parent.Incoming.Add(incomingCasted);
                }
                IActivityEdge outgoingCasted = item.As<IActivityEdge>();
                if ((outgoingCasted != null))
                {
                    this._parent.Outgoing.Add(outgoingCasted);
                }
                IActivityNode redefinedNodeCasted = item.As<IActivityNode>();
                if ((redefinedNodeCasted != null))
                {
                    this._parent.RedefinedNode.Add(redefinedNodeCasted);
                }
                IActivityPartition inPartitionCasted = item.As<IActivityPartition>();
                if ((inPartitionCasted != null))
                {
                    this._parent.InPartition.Add(inPartitionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InInterruptibleRegion.Clear();
                this._parent.InStructuredNode = null;
                this._parent.Incoming.Clear();
                this._parent.Outgoing.Clear();
                this._parent.RedefinedNode.Clear();
                this._parent.InPartition.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InInterruptibleRegion.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.InStructuredNode))
                {
                    return true;
                }
                if (this._parent.Incoming.Contains(item))
                {
                    return true;
                }
                if (this._parent.Outgoing.Contains(item))
                {
                    return true;
                }
                if (this._parent.RedefinedNode.Contains(item))
                {
                    return true;
                }
                if (this._parent.InPartition.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inInterruptibleRegionEnumerator = this._parent.InInterruptibleRegion.GetEnumerator();
                try
                {
                    for (
                    ; inInterruptibleRegionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inInterruptibleRegionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inInterruptibleRegionEnumerator.Dispose();
                }
                if ((this._parent.InStructuredNode != null))
                {
                    array[arrayIndex] = this._parent.InStructuredNode;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> incomingEnumerator = this._parent.Incoming.GetEnumerator();
                try
                {
                    for (
                    ; incomingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = incomingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    incomingEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outgoingEnumerator = this._parent.Outgoing.GetEnumerator();
                try
                {
                    for (
                    ; outgoingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outgoingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outgoingEnumerator.Dispose();
                }
                IEnumerator<IModelElement> redefinedNodeEnumerator = this._parent.RedefinedNode.GetEnumerator();
                try
                {
                    for (
                    ; redefinedNodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedNodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedNodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> inPartitionEnumerator = this._parent.InPartition.GetEnumerator();
                try
                {
                    for (
                    ; inPartitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inPartitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inPartitionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInterruptibleActivityRegion interruptibleActivityRegionItem = item.As<IInterruptibleActivityRegion>();
                if (((interruptibleActivityRegionItem != null) 
                            && this._parent.InInterruptibleRegion.Remove(interruptibleActivityRegionItem)))
                {
                    return true;
                }
                if ((this._parent.InStructuredNode == item))
                {
                    this._parent.InStructuredNode = null;
                    return true;
                }
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.Incoming.Remove(activityEdgeItem)))
                {
                    return true;
                }
                if (((activityEdgeItem != null) 
                            && this._parent.Outgoing.Remove(activityEdgeItem)))
                {
                    return true;
                }
                IActivityNode activityNodeItem = item.As<IActivityNode>();
                if (((activityNodeItem != null) 
                            && this._parent.RedefinedNode.Remove(activityNodeItem)))
                {
                    return true;
                }
                IActivityPartition activityPartitionItem = item.As<IActivityPartition>();
                if (((activityPartitionItem != null) 
                            && this._parent.InPartition.Remove(activityPartitionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InInterruptibleRegion).Concat(this._parent.InStructuredNode).Concat(this._parent.Incoming).Concat(this._parent.Outgoing).Concat(this._parent.RedefinedNode).Concat(this._parent.InPartition).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inStructuredNode property
        /// </summary>
        private sealed class InStructuredNodeProxy : ModelPropertyChange<IActivityNode, IStructuredActivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InStructuredNodeProxy(IActivityNode modelElement) : 
                    base(modelElement, "inStructuredNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStructuredActivityNode Value
            {
                get
                {
                    return this.ModelElement.InStructuredNode;
                }
                set
                {
                    this.ModelElement.InStructuredNode = value;
                }
            }
        }
    }
}

