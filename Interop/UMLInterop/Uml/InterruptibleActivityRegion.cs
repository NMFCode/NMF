//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An InterruptibleActivityRegion is an ActivityGroup that supports the termination of tokens flowing in the portions of an activity within it.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InterruptibleActivityRegion")]
    [DebuggerDisplayAttribute("InterruptibleActivityRegion {Name}")]
    public partial class InterruptibleActivityRegion : ActivityGroup, IInterruptibleActivityRegion, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _interrupting_edgesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInterrupting_edgesOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interruptingEdgeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInterruptingEdgeReference);
        
        /// <summary>
        /// The backing field for the InterruptingEdge property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InterruptibleActivityRegionInterruptingEdgeCollection _interruptingEdge;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNodeReference);
        
        /// <summary>
        /// The backing field for the Node property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InterruptibleActivityRegionNodeCollection _node;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public InterruptibleActivityRegion()
        {
            this._interruptingEdge = new InterruptibleActivityRegionInterruptingEdgeCollection(this);
            this._interruptingEdge.CollectionChanging += this.InterruptingEdgeCollectionChanging;
            this._interruptingEdge.CollectionChanged += this.InterruptingEdgeCollectionChanged;
            this._node = new InterruptibleActivityRegionNodeCollection(this);
            this._node.CollectionChanging += this.NodeCollectionChanging;
            this._node.CollectionChanged += this.NodeCollectionChanged;
        }
        
        /// <summary>
        /// The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing token will result in the termination of other tokens flowing in the InterruptibleActivityRegion.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("interruptingEdge")]
        [DescriptionAttribute("The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing t" +
            "oken will result in the termination of other tokens flowing in the Interruptible" +
            "ActivityRegion.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("InterruptibleActivityRegion")]
        [XmlElementNameAttribute("interruptingEdge")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("interrupts")]
        [ConstantAttribute()]
        public ISetExpression<IActivityEdge> InterruptingEdge
        {
            get
            {
                return this._interruptingEdge;
            }
        }
        
        /// <summary>
        /// ActivityNodes immediately contained in the InterruptibleActivityRegion.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("node")]
        [DescriptionAttribute("ActivityNodes immediately contained in the InterruptibleActivityRegion.\n<p>From p" +
            "ackage UML::Activities.</p>")]
        [CategoryAttribute("InterruptibleActivityRegion")]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inInterruptibleRegion")]
        [ConstantAttribute()]
        public ISetExpression<IActivityNode> Node
        {
            get
            {
                return this._node;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InterruptibleActivityRegionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InterruptibleActivityRegion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The interruptingEdges of an InterruptibleActivityRegion must have their source in the region and their target outside the region, but within the same Activity containing the region.
        ///interruptingEdge->forAll(edge | 
        ///  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Interrupting_edges(object diagnostics, object context)
        {
            System.Func<IInterruptibleActivityRegion, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInterruptibleActivityRegion, object, object, bool>>(_interrupting_edgesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method interrupting_edges registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _interrupting_edgesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _interrupting_edgesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _interrupting_edgesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInterrupting_edgesOperation()
        {
            return ClassInstance.LookupOperation("interrupting_edges");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInterruptingEdgeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InterruptibleActivityRegion.ClassInstance)).Resolve("interruptingEdge")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InterruptingEdge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InterruptingEdgeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InterruptingEdge", e, _interruptingEdgeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InterruptingEdge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InterruptingEdgeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InterruptingEdge", e, _interruptingEdgeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InterruptibleActivityRegion.ClassInstance)).Resolve("node")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Node", e, _nodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Node", e, _nodeReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INTERRUPTINGEDGE"))
            {
                return this._interruptingEdge;
            }
            if ((feature == "NODE"))
            {
                return this._node;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InterruptibleActivityRegion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InterruptibleActivityRegion class
        /// </summary>
        public class InterruptibleActivityRegionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InterruptibleActivityRegion _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InterruptibleActivityRegionReferencedElementsCollection(InterruptibleActivityRegion parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InterruptingEdge.Count);
                    count = (count + this._parent.Node.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InterruptingEdge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InterruptingEdge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Node.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IActivityEdge interruptingEdgeCasted = item.As<IActivityEdge>();
                if ((interruptingEdgeCasted != null))
                {
                    this._parent.InterruptingEdge.Add(interruptingEdgeCasted);
                }
                IActivityNode nodeCasted = item.As<IActivityNode>();
                if ((nodeCasted != null))
                {
                    this._parent.Node.Add(nodeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InterruptingEdge.Clear();
                this._parent.Node.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InterruptingEdge.Contains(item))
                {
                    return true;
                }
                if (this._parent.Node.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> interruptingEdgeEnumerator = this._parent.InterruptingEdge.GetEnumerator();
                try
                {
                    for (
                    ; interruptingEdgeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interruptingEdgeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interruptingEdgeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nodeEnumerator = this._parent.Node.GetEnumerator();
                try
                {
                    for (
                    ; nodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.InterruptingEdge.Remove(activityEdgeItem)))
                {
                    return true;
                }
                IActivityNode activityNodeItem = item.As<IActivityNode>();
                if (((activityNodeItem != null) 
                            && this._parent.Node.Remove(activityNodeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InterruptingEdge).Concat(this._parent.Node).GetEnumerator();
            }
        }
    }
}

