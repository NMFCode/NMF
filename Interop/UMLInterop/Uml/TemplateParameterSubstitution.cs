//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.
    ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameterSubstitution")]
    public partial class TemplateParameterSubstitution : Element, ITemplateParameterSubstitution, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _must_be_compatibleOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMust_be_compatibleOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _formalReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFormalReference);
        
        /// <summary>
        /// The backing field for the Formal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITemplateParameter _formal;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedActualReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedActualReference);
        
        /// <summary>
        /// The backing field for the OwnedActual property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IParameterableElement _ownedActual;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _templateBindingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTemplateBindingReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("formal")]
        [DescriptionAttribute("The formal TemplateParameter that is associated with this TemplateParameterSubsti" +
            "tution.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameterSubstitution")]
        [XmlElementNameAttribute("formal")]
        [XmlAttributeAttribute(true)]
        public ITemplateParameter Formal
        {
            get
            {
                return this._formal;
            }
            set
            {
                if ((this._formal != value))
                {
                    ITemplateParameter old = this._formal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Formal", e, _formalReference);
                    this._formal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFormal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFormal;
                    }
                    this.OnPropertyChanged("Formal", e, _formalReference);
                }
            }
        }
        
        /// <summary>
        /// The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("ownedActual")]
        [DescriptionAttribute("The ParameterableElement that is owned by this TemplateParameterSubstitution as i" +
            "ts actual parameter.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameterSubstitution")]
        [XmlElementNameAttribute("ownedActual")]
        [XmlAttributeAttribute(true)]
        public IParameterableElement OwnedActual
        {
            get
            {
                return this._ownedActual;
            }
            set
            {
                if ((this._ownedActual != value))
                {
                    IParameterableElement old = this._ownedActual;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwnedActual", e, _ownedActualReference);
                    this._ownedActual = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOwnedActual;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOwnedActual;
                    }
                    this.OnPropertyChanged("OwnedActual", e, _ownedActualReference);
                }
            }
        }
        
        /// <summary>
        /// The TemplateBinding that owns this TemplateParameterSubstitution.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("templateBinding")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("parameterSubstitution")]
        public ITemplateBinding TemplateBinding
        {
            get
            {
                return ModelHelper.CastAs<ITemplateBinding>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        IParameterableElement ITemplateParameterSubstitution.Actual
        {
            get
            {
                ITemplateParameterSubstitution _this = this;
                return _this.OwnedActual;
            }
            set
            {
                ITemplateParameterSubstitution _this = this;
                _this.OwnedActual = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TemplateParameterSubstitutionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameterSubstitution")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The actual ParameterableElement must be compatible with the formal TemplateParameter, e.g., the actual ParameterableElement for a Class TemplateParameter must be a Class.
        ///actual-&gt;forAll(a | a.isCompatibleWith(formal.parameteredElement))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Must_be_compatible(object diagnostics, object context)
        {
            System.Func<ITemplateParameterSubstitution, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateParameterSubstitution, object, object, bool>>(_must_be_compatibleOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method must_be_compatible registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _must_be_compatibleOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _must_be_compatibleOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _must_be_compatibleOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMust_be_compatibleOperation()
        {
            return ClassInstance.LookupOperation("must_be_compatible");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFormalReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameterSubstitution.ClassInstance)).Resolve("formal")));
        }
        
        /// <summary>
        /// Handles the event that the Formal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFormal(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Formal))
            {
                this.Formal = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedActualReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameterSubstitution.ClassInstance)).Resolve("ownedActual")));
        }
        
        /// <summary>
        /// Handles the event that the OwnedActual property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwnedActual(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.OwnedActual))
            {
                this.OwnedActual = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTemplateBindingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateParameterSubstitution.ClassInstance)).Resolve("templateBinding")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateBinding oldTemplateBinding = ModelHelper.CastAs<ITemplateBinding>(oldParent);
            ITemplateBinding newTemplateBinding = ModelHelper.CastAs<ITemplateBinding>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTemplateBinding, newTemplateBinding);
            this.OnPropertyChanging("TemplateBinding", e, _templateBindingReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateBinding oldTemplateBinding = ModelHelper.CastAs<ITemplateBinding>(oldParent);
            ITemplateBinding newTemplateBinding = ModelHelper.CastAs<ITemplateBinding>(newParent);
            if ((oldTemplateBinding != null))
            {
                oldTemplateBinding.ParameterSubstitution.Remove(this);
            }
            if ((newTemplateBinding != null))
            {
                newTemplateBinding.ParameterSubstitution.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTemplateBinding, newTemplateBinding);
            this.OnPropertyChanged("TemplateBinding", e, _templateBindingReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FORMAL"))
            {
                return this.Formal;
            }
            if ((reference == "OWNEDACTUAL"))
            {
                return this.OwnedActual;
            }
            if ((reference == "TEMPLATEBINDING"))
            {
                return this.TemplateBinding;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FORMAL"))
            {
                this.Formal = ((ITemplateParameter)(value));
                return;
            }
            if ((feature == "OWNEDACTUAL"))
            {
                this.OwnedActual = ((IParameterableElement)(value));
                return;
            }
            if ((feature == "TEMPLATEBINDING"))
            {
                this.TemplateBinding = ((ITemplateBinding)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FORMAL"))
            {
                return new FormalProxy(this);
            }
            if ((reference == "OWNEDACTUAL"))
            {
                return new OwnedActualProxy(this);
            }
            if ((reference == "TEMPLATEBINDING"))
            {
                return new TemplateBindingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameterSubstitution")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TemplateParameterSubstitution class
        /// </summary>
        public class TemplateParameterSubstitutionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TemplateParameterSubstitution _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TemplateParameterSubstitutionReferencedElementsCollection(TemplateParameterSubstitution parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actual property
        /// </summary>
        private sealed class ActualProxy : ModelPropertyChange<ITemplateParameterSubstitution, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActualProxy(ITemplateParameterSubstitution modelElement) : 
                    base(modelElement, "actual")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.Actual;
                }
                set
                {
                    this.ModelElement.Actual = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the formal property
        /// </summary>
        private sealed class FormalProxy : ModelPropertyChange<ITemplateParameterSubstitution, ITemplateParameter>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FormalProxy(ITemplateParameterSubstitution modelElement) : 
                    base(modelElement, "formal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateParameter Value
            {
                get
                {
                    return this.ModelElement.Formal;
                }
                set
                {
                    this.ModelElement.Formal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ownedActual property
        /// </summary>
        private sealed class OwnedActualProxy : ModelPropertyChange<ITemplateParameterSubstitution, IParameterableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnedActualProxy(ITemplateParameterSubstitution modelElement) : 
                    base(modelElement, "ownedActual")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParameterableElement Value
            {
                get
                {
                    return this.ModelElement.OwnedActual;
                }
                set
                {
                    this.ModelElement.OwnedActual = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the templateBinding property
        /// </summary>
        private sealed class TemplateBindingProxy : ModelPropertyChange<ITemplateParameterSubstitution, ITemplateBinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TemplateBindingProxy(ITemplateParameterSubstitution modelElement) : 
                    base(modelElement, "templateBinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateBinding Value
            {
                get
                {
                    return this.ModelElement.TemplateBinding;
                }
                set
                {
                    this.ModelElement.TemplateBinding = value;
                }
            }
        }
    }
}
