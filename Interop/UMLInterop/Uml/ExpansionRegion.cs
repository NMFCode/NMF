//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ExpansionRegion is a StructuredActivityNode that executes its content multiple times corresponding to elements of input collection(s).
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ExpansionRegion")]
    [DebuggerDisplayAttribute("ExpansionRegion {Name}")]
    public partial class ExpansionRegion : StructuredActivityNode, IExpansionRegion, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Mode property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ExpansionKind _mode = ExpansionKind.Iterative;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _modeAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveModeAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _outputElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOutputElementReference);
        
        /// <summary>
        /// The backing field for the OutputElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ExpansionRegionOutputElementCollection _outputElement;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inputElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInputElementReference);
        
        /// <summary>
        /// The backing field for the InputElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ExpansionRegionInputElementCollection _inputElement;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ExpansionRegion()
        {
            this._outputElement = new ExpansionRegionOutputElementCollection(this);
            this._outputElement.CollectionChanging += this.OutputElementCollectionChanging;
            this._outputElement.CollectionChanged += this.OutputElementCollectionChanged;
            this._inputElement = new ExpansionRegionInputElementCollection(this);
            this._inputElement.CollectionChanging += this.InputElementCollectionChanging;
            this._inputElement.CollectionChanged += this.InputElementCollectionChanged;
        }
        
        /// <summary>
        /// The mode in which the ExpansionRegion executes its contents. If parallel, executions are concurrent. If iterative, executions are sequential. If stream, a stream of values flows into a single execution.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(ExpansionKind.Iterative)]
        [DisplayNameAttribute("mode")]
        [DescriptionAttribute("The mode in which the ExpansionRegion executes its contents. If parallel, executi" +
            "ons are concurrent. If iterative, executions are sequential. If stream, a stream" +
            " of values flows into a single execution.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("ExpansionRegion")]
        [XmlElementNameAttribute("mode")]
        [XmlAttributeAttribute(true)]
        public ExpansionKind Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    ExpansionKind old = this._mode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Mode", e, _modeAttribute);
                    this._mode = value;
                    this.OnPropertyChanged("Mode", e, _modeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ExpansionNodes that form the output collections of the ExpansionRegion.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("outputElement")]
        [DescriptionAttribute("The ExpansionNodes that form the output collections of the ExpansionRegion.\n<p>Fr" +
            "om package UML::Actions.</p>")]
        [CategoryAttribute("ExpansionRegion")]
        [XmlElementNameAttribute("outputElement")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("regionAsOutput")]
        [ConstantAttribute()]
        public ISetExpression<IExpansionNode> OutputElement
        {
            get
            {
                return this._outputElement;
            }
        }
        
        /// <summary>
        /// The ExpansionNodes that hold the input collections for the ExpansionRegion.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inputElement")]
        [DescriptionAttribute("The ExpansionNodes that hold the input collections for the ExpansionRegion.\n<p>Fr" +
            "om package UML::Actions.</p>")]
        [CategoryAttribute("ExpansionRegion")]
        [XmlElementNameAttribute("inputElement")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("regionAsInput")]
        [ConstantAttribute()]
        public ISetExpression<IExpansionNode> InputElement
        {
            get
            {
                return this._inputElement;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ExpansionRegionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExpansionRegion")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveModeAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExpansionRegion.ClassInstance)).Resolve("mode")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOutputElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExpansionRegion.ClassInstance)).Resolve("outputElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutputElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutputElementCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OutputElement", e, _outputElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutputElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutputElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutputElement", e, _outputElementReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInputElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ExpansionRegion.ClassInstance)).Resolve("inputElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InputElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InputElementCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InputElement", e, _inputElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InputElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InputElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InputElement", e, _inputElementReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MODE"))
            {
                return this.Mode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OUTPUTELEMENT"))
            {
                return this._outputElement;
            }
            if ((feature == "INPUTELEMENT"))
            {
                return this._inputElement;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MODE"))
            {
                this.Mode = ((ExpansionKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MODE"))
            {
                return Observable.Box(new ModeProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExpansionRegion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExpansionRegion class
        /// </summary>
        public class ExpansionRegionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExpansionRegion _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExpansionRegionReferencedElementsCollection(ExpansionRegion parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OutputElement.Count);
                    count = (count + this._parent.InputElement.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OutputElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InputElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OutputElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InputElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IExpansionNode outputElementCasted = item.As<IExpansionNode>();
                if ((outputElementCasted != null))
                {
                    this._parent.OutputElement.Add(outputElementCasted);
                }
                IExpansionNode inputElementCasted = item.As<IExpansionNode>();
                if ((inputElementCasted != null))
                {
                    this._parent.InputElement.Add(inputElementCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OutputElement.Clear();
                this._parent.InputElement.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OutputElement.Contains(item))
                {
                    return true;
                }
                if (this._parent.InputElement.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> outputElementEnumerator = this._parent.OutputElement.GetEnumerator();
                try
                {
                    for (
                    ; outputElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outputElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outputElementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> inputElementEnumerator = this._parent.InputElement.GetEnumerator();
                try
                {
                    for (
                    ; inputElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inputElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inputElementEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IExpansionNode expansionNodeItem = item.As<IExpansionNode>();
                if (((expansionNodeItem != null) 
                            && this._parent.OutputElement.Remove(expansionNodeItem)))
                {
                    return true;
                }
                if (((expansionNodeItem != null) 
                            && this._parent.InputElement.Remove(expansionNodeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OutputElement).Concat(this._parent.InputElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mode property
        /// </summary>
        private sealed class ModeProxy : ModelPropertyChange<IExpansionRegion, ExpansionKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModeProxy(IExpansionRegion modelElement) : 
                    base(modelElement, "mode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ExpansionKind Value
            {
                get
                {
                    return this.ModelElement.Mode;
                }
                set
                {
                    this.ModelElement.Mode = value;
                }
            }
        }
    }
}

