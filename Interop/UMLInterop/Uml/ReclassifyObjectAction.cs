//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ReclassifyObjectAction is an Action that changes the Classifiers that classify an object.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReclassifyObjectAction")]
    [DebuggerDisplayAttribute("ReclassifyObjectAction {Name}")]
    public partial class ReclassifyObjectAction : Action, IReclassifyObjectAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _input_pinOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInput_pinOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _classifier_not_abstractOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClassifier_not_abstractOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicityOperation);
        
        /// <summary>
        /// The backing field for the IsReplaceAll property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isReplaceAll = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isReplaceAllAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsReplaceAllAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _newClassifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNewClassifierReference);
        
        /// <summary>
        /// The backing field for the NewClassifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _newClassifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _objectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveObjectReference);
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _object;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _oldClassifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOldClassifierReference);
        
        /// <summary>
        /// The backing field for the OldClassifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _oldClassifier;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ReclassifyObjectAction()
        {
            this._newClassifier = new ObservableAssociationSet<IClassifier>();
            this._newClassifier.CollectionChanging += this.NewClassifierCollectionChanging;
            this._newClassifier.CollectionChanged += this.NewClassifierCollectionChanged;
            this._oldClassifier = new ObservableAssociationSet<IClassifier>();
            this._oldClassifier.CollectionChanging += this.OldClassifierCollectionChanging;
            this._oldClassifier.CollectionChanged += this.OldClassifierCollectionChanged;
        }
        
        /// <summary>
        /// Specifies whether existing Classifiers should be removed before adding the new Classifiers.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReplaceAll")]
        [DescriptionAttribute("Specifies whether existing Classifiers should be removed before adding the new Cl" +
            "assifiers.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("ReclassifyObjectAction")]
        [XmlElementNameAttribute("isReplaceAll")]
        [XmlAttributeAttribute(true)]
        public bool IsReplaceAll
        {
            get
            {
                return this._isReplaceAll;
            }
            set
            {
                if ((this._isReplaceAll != value))
                {
                    bool old = this._isReplaceAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsReplaceAll", e, _isReplaceAllAttribute);
                    this._isReplaceAll = value;
                    this.OnPropertyChanged("IsReplaceAll", e, _isReplaceAllAttribute);
                }
            }
        }
        
        /// <summary>
        /// A set of Classifiers to be added to the Classifiers of the given object.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("newClassifier")]
        [DescriptionAttribute("A set of Classifiers to be added to the Classifiers of the given object.\n<p>From " +
            "package UML::Actions.</p>")]
        [CategoryAttribute("ReclassifyObjectAction")]
        [XmlElementNameAttribute("newClassifier")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> NewClassifier
        {
            get
            {
                return this._newClassifier;
            }
        }
        
        /// <summary>
        /// The InputPin that holds the object to be reclassified.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IInputPin old = this._object;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Object", e, _objectReference);
                    this._object = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object", e, _objectReference);
                }
            }
        }
        
        /// <summary>
        /// A set of Classifiers to be removed from the Classifiers of the given object.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("oldClassifier")]
        [DescriptionAttribute("A set of Classifiers to be removed from the Classifiers of the given object.\n<p>F" +
            "rom package UML::Actions.</p>")]
        [CategoryAttribute("ReclassifyObjectAction")]
        [XmlElementNameAttribute("oldClassifier")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> OldClassifier
        {
            get
            {
                return this._oldClassifier;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ReclassifyObjectActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReclassifyObjectActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReclassifyObjectAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The object InputPin has no type.
        ///object.type = null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Input_pin(object diagnostics, object context)
        {
            System.Func<IReclassifyObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReclassifyObjectAction, object, object, bool>>(_input_pinOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method input_pin registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _input_pinOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _input_pinOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _input_pinOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInput_pinOperation()
        {
            return ClassInstance.LookupOperation("input_pin");
        }
        
        /// <summary>
        /// None of the newClassifiers may be abstract.
        ///not newClassifier->exists(isAbstract)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Classifier_not_abstract(object diagnostics, object context)
        {
            System.Func<IReclassifyObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReclassifyObjectAction, object, object, bool>>(_classifier_not_abstractOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method classifier_not_abstract registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _classifier_not_abstractOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _classifier_not_abstractOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _classifier_not_abstractOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClassifier_not_abstractOperation()
        {
            return ClassInstance.LookupOperation("classifier_not_abstract");
        }
        
        /// <summary>
        /// The multiplicity of the object InputPin is 1..1.
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity(object diagnostics, object context)
        {
            System.Func<IReclassifyObjectAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReclassifyObjectAction, object, object, bool>>(_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("multiplicity");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsReplaceAllAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReclassifyObjectAction.ClassInstance)).Resolve("isReplaceAll")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNewClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReclassifyObjectAction.ClassInstance)).Resolve("newClassifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NewClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NewClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NewClassifier", e, _newClassifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NewClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NewClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NewClassifier", e, _newClassifierReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveObjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReclassifyObjectAction.ClassInstance)).Resolve("object")));
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, System.EventArgs eventArgs)
        {
            this.Object = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOldClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReclassifyObjectAction.ClassInstance)).Resolve("oldClassifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OldClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OldClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OldClassifier", e, _oldClassifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OldClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OldClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OldClassifier", e, _oldClassifierReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Object))
            {
                return ModelHelper.CreatePath("object");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OBJECT"))
            {
                return this.Object;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISREPLACEALL"))
            {
                return this.IsReplaceAll;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NEWCLASSIFIER"))
            {
                return this._newClassifier;
            }
            if ((feature == "OLDCLASSIFIER"))
            {
                return this._oldClassifier;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OBJECT"))
            {
                this.Object = ((IInputPin)(value));
                return;
            }
            if ((feature == "ISREPLACEALL"))
            {
                this.IsReplaceAll = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISREPLACEALL"))
            {
                return Observable.Box(new IsReplaceAllProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OBJECT"))
            {
                return new ObjectProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReclassifyObjectAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReclassifyObjectAction class
        /// </summary>
        public class ReclassifyObjectActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReclassifyObjectAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReclassifyObjectActionChildrenCollection(ReclassifyObjectAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReclassifyObjectAction class
        /// </summary>
        public class ReclassifyObjectActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReclassifyObjectAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReclassifyObjectActionReferencedElementsCollection(ReclassifyObjectAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NewClassifier.Count);
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OldClassifier.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NewClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.OldClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NewClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.OldClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier newClassifierCasted = item.As<IClassifier>();
                if ((newClassifierCasted != null))
                {
                    this._parent.NewClassifier.Add(newClassifierCasted);
                }
                if ((this._parent.Object == null))
                {
                    IInputPin objectCasted = item.As<IInputPin>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
                IClassifier oldClassifierCasted = item.As<IClassifier>();
                if ((oldClassifierCasted != null))
                {
                    this._parent.OldClassifier.Add(oldClassifierCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NewClassifier.Clear();
                this._parent.Object = null;
                this._parent.OldClassifier.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NewClassifier.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Object))
                {
                    return true;
                }
                if (this._parent.OldClassifier.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> newClassifierEnumerator = this._parent.NewClassifier.GetEnumerator();
                try
                {
                    for (
                    ; newClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = newClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    newClassifierEnumerator.Dispose();
                }
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> oldClassifierEnumerator = this._parent.OldClassifier.GetEnumerator();
                try
                {
                    for (
                    ; oldClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = oldClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    oldClassifierEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.NewClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                if (((classifierItem != null) 
                            && this._parent.OldClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NewClassifier).Concat(this._parent.Object).Concat(this._parent.OldClassifier).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isReplaceAll property
        /// </summary>
        private sealed class IsReplaceAllProxy : ModelPropertyChange<IReclassifyObjectAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsReplaceAllProxy(IReclassifyObjectAction modelElement) : 
                    base(modelElement, "isReplaceAll")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsReplaceAll;
                }
                set
                {
                    this.ModelElement.IsReplaceAll = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the object property
        /// </summary>
        private sealed class ObjectProxy : ModelPropertyChange<IReclassifyObjectAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjectProxy(IReclassifyObjectAction modelElement) : 
                    base(modelElement, "object")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Object;
                }
                set
                {
                    this.ModelElement.Object = value;
                }
            }
        }
    }
}

