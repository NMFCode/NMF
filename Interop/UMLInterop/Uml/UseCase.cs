//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A UseCase specifies a set of actions performed by its subjects, which yields an observable result that is of value for one or more Actors or other stakeholders of each subject.
    ///<p>From package UML::UseCases.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//UseCase")]
    [DebuggerDisplayAttribute("UseCase {Name}")]
    public partial class UseCase : BehavioredClassifier, IUseCase, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _binary_associationsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBinary_associationsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_association_to_use_caseOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_association_to_use_caseOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _cannot_include_selfOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCannot_include_selfOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _must_have_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMust_have_nameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allIncludedUseCasesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllIncludedUseCasesOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _extendReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExtendReference);
        
        /// <summary>
        /// The backing field for the Extend property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private UseCaseExtendCollection _extend;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _extensionPointReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExtensionPointReference);
        
        /// <summary>
        /// The backing field for the ExtensionPoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private UseCaseExtensionPointCollection _extensionPoint;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _includeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIncludeReference);
        
        /// <summary>
        /// The backing field for the Include property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private UseCaseIncludeCollection _include;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subjectReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubjectReference);
        
        /// <summary>
        /// The backing field for the Subject property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private UseCaseSubjectCollection _subject;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public UseCase()
        {
            this._extend = new UseCaseExtendCollection(this);
            this._extend.CollectionChanging += this.ExtendCollectionChanging;
            this._extend.CollectionChanged += this.ExtendCollectionChanged;
            this._extensionPoint = new UseCaseExtensionPointCollection(this);
            this._extensionPoint.CollectionChanging += this.ExtensionPointCollectionChanging;
            this._extensionPoint.CollectionChanged += this.ExtensionPointCollectionChanged;
            this._include = new UseCaseIncludeCollection(this);
            this._include.CollectionChanging += this.IncludeCollectionChanging;
            this._include.CollectionChanged += this.IncludeCollectionChanged;
            this._subject = new UseCaseSubjectCollection(this);
            this._subject.CollectionChanging += this.SubjectCollectionChanging;
            this._subject.CollectionChanged += this.SubjectCollectionChanged;
        }
        
        /// <summary>
        /// The Extend relationships owned by this UseCase.
        ///<p>From package UML::UseCases.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("extend")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("extension")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IExtend> Extend
        {
            get
            {
                return this._extend;
            }
        }
        
        /// <summary>
        /// The ExtensionPoints owned by this UseCase.
        ///<p>From package UML::UseCases.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("extensionPoint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("useCase")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IExtensionPoint> ExtensionPoint
        {
            get
            {
                return this._extensionPoint;
            }
        }
        
        /// <summary>
        /// The Include relationships owned by this UseCase.
        ///<p>From package UML::UseCases.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("include")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("includingCase")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInclude> Include
        {
            get
            {
                return this._include;
            }
        }
        
        /// <summary>
        /// The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it.
        ///<p>From package UML::UseCases.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("subject")]
        [DescriptionAttribute("The subjects to which this UseCase applies. Each subject or its parts realize all" +
            " the UseCases that apply to it.\n<p>From package UML::UseCases.</p>")]
        [CategoryAttribute("UseCase")]
        [XmlElementNameAttribute("subject")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("useCase")]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> Subject
        {
            get
            {
                return this._subject;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new UseCaseChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UseCaseReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//UseCase")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// UseCases can only be involved in binary Associations.
        ///Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Binary_associations(object diagnostics, object context)
        {
            System.Func<IUseCase, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUseCase, object, object, bool>>(_binary_associationsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method binary_associations registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _binary_associationsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _binary_associationsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _binary_associationsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBinary_associationsOperation()
        {
            return ClassInstance.LookupOperation("binary_associations");
        }
        
        /// <summary>
        /// UseCases cannot have Associations to UseCases specifying the same subject.
        ///Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies 
        ///   (
        ///   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in
        ///   usecases->size() > 1 implies usecases->collect(subject)->size() > 1
        ///   )
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_association_to_use_case(object diagnostics, object context)
        {
            System.Func<IUseCase, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUseCase, object, object, bool>>(_no_association_to_use_caseOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_association_to_use_case registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_association_to_use_caseOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_association_to_use_caseOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_association_to_use_caseOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_association_to_use_caseOperation()
        {
            return ClassInstance.LookupOperation("no_association_to_use_case");
        }
        
        /// <summary>
        /// A UseCase cannot include UseCases that directly or indirectly include it.
        ///not allIncludedUseCases()->includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Cannot_include_self(object diagnostics, object context)
        {
            System.Func<IUseCase, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUseCase, object, object, bool>>(_cannot_include_selfOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method cannot_include_self registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _cannot_include_selfOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _cannot_include_selfOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _cannot_include_selfOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCannot_include_selfOperation()
        {
            return ClassInstance.LookupOperation("cannot_include_self");
        }
        
        /// <summary>
        /// A UseCase must have a name.
        ///name -> notEmpty ()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Must_have_name(object diagnostics, object context)
        {
            System.Func<IUseCase, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUseCase, object, object, bool>>(_must_have_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method must_have_name registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _must_have_nameOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _must_have_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _must_have_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMust_have_nameOperation()
        {
            return ClassInstance.LookupOperation("must_have_name");
        }
        
        /// <summary>
        /// The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.
        ///result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())
        ///<p>From package UML::UseCases.</p>
        /// </summary>
        public ISetExpression<IUseCase> AllIncludedUseCases()
        {
            System.Func<IUseCase, ISetExpression<IUseCase>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IUseCase, ISetExpression<IUseCase>>>(_allIncludedUseCasesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allIncludedUseCases registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allIncludedUseCasesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allIncludedUseCasesOperation.Value, e));
            ISetExpression<IUseCase> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allIncludedUseCasesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllIncludedUseCasesOperation()
        {
            return ClassInstance.LookupOperation("allIncludedUseCases");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExtendReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UseCase.ClassInstance)).Resolve("extend")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Extend property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtendCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Extend", e, _extendReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Extend property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtendCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Extend", e, _extendReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExtensionPointReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UseCase.ClassInstance)).Resolve("extensionPoint")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ExtensionPoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtensionPointCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ExtensionPoint", e, _extensionPointReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ExtensionPoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtensionPointCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ExtensionPoint", e, _extensionPointReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIncludeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UseCase.ClassInstance)).Resolve("include")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Include property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Include", e, _includeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Include property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Include", e, _includeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubjectReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.UseCase.ClassInstance)).Resolve("subject")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Subject property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubjectCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Subject", e, _subjectReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Subject property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubjectCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Subject", e, _subjectReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int extendIndex = ModelHelper.IndexOfReference(this.Extend, element);
            if ((extendIndex != -1))
            {
                return ModelHelper.CreatePath("extend", extendIndex);
            }
            int extensionPointIndex = ModelHelper.IndexOfReference(this.ExtensionPoint, element);
            if ((extensionPointIndex != -1))
            {
                return ModelHelper.CreatePath("extensionPoint", extensionPointIndex);
            }
            int includeIndex = ModelHelper.IndexOfReference(this.Include, element);
            if ((includeIndex != -1))
            {
                return ModelHelper.CreatePath("include", includeIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EXTEND"))
            {
                if ((index < this.Extend.Count))
                {
                    return this.Extend[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "EXTENSIONPOINT"))
            {
                if ((index < this.ExtensionPoint.Count))
                {
                    return this.ExtensionPoint[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "INCLUDE"))
            {
                if ((index < this.Include.Count))
                {
                    return this.Include[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EXTEND"))
            {
                return this._extend;
            }
            if ((feature == "EXTENSIONPOINT"))
            {
                return this._extensionPoint;
            }
            if ((feature == "INCLUDE"))
            {
                return this._include;
            }
            if ((feature == "SUBJECT"))
            {
                return this._subject;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._extend))
            {
                return "extend";
            }
            if ((container == this._extensionPoint))
            {
                return "extensionPoint";
            }
            if ((container == this._include))
            {
                return "include";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//UseCase")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UseCase class
        /// </summary>
        public class UseCaseChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UseCase _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UseCaseChildrenCollection(UseCase parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extend.Count);
                    count = (count + this._parent.ExtensionPoint.Count);
                    count = (count + this._parent.Include.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extend.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ExtensionPoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extend.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ExtensionPoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IExtend extendCasted = item.As<IExtend>();
                if ((extendCasted != null))
                {
                    this._parent.Extend.Add(extendCasted);
                }
                IExtensionPoint extensionPointCasted = item.As<IExtensionPoint>();
                if ((extensionPointCasted != null))
                {
                    this._parent.ExtensionPoint.Add(extensionPointCasted);
                }
                IInclude includeCasted = item.As<IInclude>();
                if ((includeCasted != null))
                {
                    this._parent.Include.Add(includeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extend.Clear();
                this._parent.ExtensionPoint.Clear();
                this._parent.Include.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extend.Contains(item))
                {
                    return true;
                }
                if (this._parent.ExtensionPoint.Contains(item))
                {
                    return true;
                }
                if (this._parent.Include.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extendEnumerator = this._parent.Extend.GetEnumerator();
                try
                {
                    for (
                    ; extendEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extendEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extendEnumerator.Dispose();
                }
                IEnumerator<IModelElement> extensionPointEnumerator = this._parent.ExtensionPoint.GetEnumerator();
                try
                {
                    for (
                    ; extensionPointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionPointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionPointEnumerator.Dispose();
                }
                IEnumerator<IModelElement> includeEnumerator = this._parent.Include.GetEnumerator();
                try
                {
                    for (
                    ; includeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = includeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    includeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IExtend extendItem = item.As<IExtend>();
                if (((extendItem != null) 
                            && this._parent.Extend.Remove(extendItem)))
                {
                    return true;
                }
                IExtensionPoint extensionPointItem = item.As<IExtensionPoint>();
                if (((extensionPointItem != null) 
                            && this._parent.ExtensionPoint.Remove(extensionPointItem)))
                {
                    return true;
                }
                IInclude includeItem = item.As<IInclude>();
                if (((includeItem != null) 
                            && this._parent.Include.Remove(includeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extend).Concat(this._parent.ExtensionPoint).Concat(this._parent.Include).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UseCase class
        /// </summary>
        public class UseCaseReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UseCase _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UseCaseReferencedElementsCollection(UseCase parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extend.Count);
                    count = (count + this._parent.ExtensionPoint.Count);
                    count = (count + this._parent.Include.Count);
                    count = (count + this._parent.Subject.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extend.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ExtensionPoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Subject.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extend.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ExtensionPoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Subject.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IExtend extendCasted = item.As<IExtend>();
                if ((extendCasted != null))
                {
                    this._parent.Extend.Add(extendCasted);
                }
                IExtensionPoint extensionPointCasted = item.As<IExtensionPoint>();
                if ((extensionPointCasted != null))
                {
                    this._parent.ExtensionPoint.Add(extensionPointCasted);
                }
                IInclude includeCasted = item.As<IInclude>();
                if ((includeCasted != null))
                {
                    this._parent.Include.Add(includeCasted);
                }
                IClassifier subjectCasted = item.As<IClassifier>();
                if ((subjectCasted != null))
                {
                    this._parent.Subject.Add(subjectCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extend.Clear();
                this._parent.ExtensionPoint.Clear();
                this._parent.Include.Clear();
                this._parent.Subject.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extend.Contains(item))
                {
                    return true;
                }
                if (this._parent.ExtensionPoint.Contains(item))
                {
                    return true;
                }
                if (this._parent.Include.Contains(item))
                {
                    return true;
                }
                if (this._parent.Subject.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extendEnumerator = this._parent.Extend.GetEnumerator();
                try
                {
                    for (
                    ; extendEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extendEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extendEnumerator.Dispose();
                }
                IEnumerator<IModelElement> extensionPointEnumerator = this._parent.ExtensionPoint.GetEnumerator();
                try
                {
                    for (
                    ; extensionPointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionPointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionPointEnumerator.Dispose();
                }
                IEnumerator<IModelElement> includeEnumerator = this._parent.Include.GetEnumerator();
                try
                {
                    for (
                    ; includeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = includeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    includeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> subjectEnumerator = this._parent.Subject.GetEnumerator();
                try
                {
                    for (
                    ; subjectEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subjectEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subjectEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IExtend extendItem = item.As<IExtend>();
                if (((extendItem != null) 
                            && this._parent.Extend.Remove(extendItem)))
                {
                    return true;
                }
                IExtensionPoint extensionPointItem = item.As<IExtensionPoint>();
                if (((extensionPointItem != null) 
                            && this._parent.ExtensionPoint.Remove(extensionPointItem)))
                {
                    return true;
                }
                IInclude includeItem = item.As<IInclude>();
                if (((includeItem != null) 
                            && this._parent.Include.Remove(includeItem)))
                {
                    return true;
                }
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.Subject.Remove(classifierItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extend).Concat(this._parent.ExtensionPoint).Concat(this._parent.Include).Concat(this._parent.Subject).GetEnumerator();
            }
        }
    }
}

