//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A RemoveStructuralFeatureValueAction is a WriteStructuralFeatureAction that removes values from a StructuralFeature.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//RemoveStructuralFeatureValueAction")]
    [DebuggerDisplayAttribute("RemoveStructuralFeatureValueAction {Name}")]
    public partial class RemoveStructuralFeatureValueAction : WriteStructuralFeatureAction, IRemoveStructuralFeatureValueAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _removeAt_and_valueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRemoveAt_and_valueOperation);
        
        /// <summary>
        /// The backing field for the IsRemoveDuplicates property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isRemoveDuplicates = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isRemoveDuplicatesAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsRemoveDuplicatesAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _removeAtReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRemoveAtReference);
        
        /// <summary>
        /// The backing field for the RemoveAt property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _removeAt;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies whether to remove duplicates of the value in nonunique StructuralFeatures.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isRemoveDuplicates")]
        [DescriptionAttribute("Specifies whether to remove duplicates of the value in nonunique StructuralFeatur" +
            "es.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("RemoveStructuralFeatureValueAction")]
        [XmlElementNameAttribute("isRemoveDuplicates")]
        [XmlAttributeAttribute(true)]
        public bool IsRemoveDuplicates
        {
            get
            {
                return this._isRemoveDuplicates;
            }
            set
            {
                if ((this._isRemoveDuplicates != value))
                {
                    bool old = this._isRemoveDuplicates;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsRemoveDuplicates", e, _isRemoveDuplicatesAttribute);
                    this._isRemoveDuplicates = value;
                    this.OnPropertyChanged("IsRemoveDuplicates", e, _isRemoveDuplicatesAttribute);
                }
            }
        }
        
        /// <summary>
        /// An InputPin that provides the position of an existing value to remove in ordered, nonunique structural features. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("removeAt")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin RemoveAt
        {
            get
            {
                return this._removeAt;
            }
            set
            {
                if ((this._removeAt != value))
                {
                    IInputPin old = this._removeAt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("RemoveAt", e, _removeAtReference);
                    this._removeAt = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetRemoveAt;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRemoveAt;
                    }
                    this.OnPropertyChanged("RemoveAt", e, _removeAtReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RemoveStructuralFeatureValueActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RemoveStructuralFeatureValueActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//RemoveStructuralFeatureValueAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// RemoveStructuralFeatureValueActions removing a value from ordered, non-unique StructuralFeatures must have a single removeAt InputPin and no value InputPin, if isRemoveDuplicates is false. The removeAt InputPin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the Action has a value InputPin and no removeAt InputPin.
        ///if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then
        ///  value = null and
        ///  removeAt <> null and
        ///  removeAt.type = UnlimitedNatural and
        ///  removeAt.is(1,1)
        ///else
        ///  removeAt = null and value <> null
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool RemoveAt_and_value(object diagnostics, object context)
        {
            System.Func<IRemoveStructuralFeatureValueAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRemoveStructuralFeatureValueAction, object, object, bool>>(_removeAt_and_valueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method removeAt_and_value registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _removeAt_and_valueOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _removeAt_and_valueOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _removeAt_and_valueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRemoveAt_and_valueOperation()
        {
            return ClassInstance.LookupOperation("removeAt_and_value");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsRemoveDuplicatesAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.RemoveStructuralFeatureValueAction.ClassInstance)).Resolve("isRemoveDuplicates")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRemoveAtReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.RemoveStructuralFeatureValueAction.ClassInstance)).Resolve("removeAt")));
        }
        
        /// <summary>
        /// Handles the event that the RemoveAt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRemoveAt(object sender, System.EventArgs eventArgs)
        {
            this.RemoveAt = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.RemoveAt))
            {
                return ModelHelper.CreatePath("removeAt");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "REMOVEAT"))
            {
                return this.RemoveAt;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISREMOVEDUPLICATES"))
            {
                return this.IsRemoveDuplicates;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REMOVEAT"))
            {
                this.RemoveAt = ((IInputPin)(value));
                return;
            }
            if ((feature == "ISREMOVEDUPLICATES"))
            {
                this.IsRemoveDuplicates = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISREMOVEDUPLICATES"))
            {
                return Observable.Box(new IsRemoveDuplicatesProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REMOVEAT"))
            {
                return new RemoveAtProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//RemoveStructuralFeatureValueAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RemoveStructuralFeatureValueAction class
        /// </summary>
        public class RemoveStructuralFeatureValueActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RemoveStructuralFeatureValueAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RemoveStructuralFeatureValueActionChildrenCollection(RemoveStructuralFeatureValueAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RemoveAt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RemoveAt == null))
                {
                    IInputPin removeAtCasted = item.As<IInputPin>();
                    if ((removeAtCasted != null))
                    {
                        this._parent.RemoveAt = removeAtCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RemoveAt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RemoveAt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RemoveAt != null))
                {
                    array[arrayIndex] = this._parent.RemoveAt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RemoveAt == item))
                {
                    this._parent.RemoveAt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RemoveAt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RemoveStructuralFeatureValueAction class
        /// </summary>
        public class RemoveStructuralFeatureValueActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RemoveStructuralFeatureValueAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RemoveStructuralFeatureValueActionReferencedElementsCollection(RemoveStructuralFeatureValueAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RemoveAt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RemoveAt == null))
                {
                    IInputPin removeAtCasted = item.As<IInputPin>();
                    if ((removeAtCasted != null))
                    {
                        this._parent.RemoveAt = removeAtCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RemoveAt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RemoveAt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RemoveAt != null))
                {
                    array[arrayIndex] = this._parent.RemoveAt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RemoveAt == item))
                {
                    this._parent.RemoveAt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RemoveAt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isRemoveDuplicates property
        /// </summary>
        private sealed class IsRemoveDuplicatesProxy : ModelPropertyChange<IRemoveStructuralFeatureValueAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsRemoveDuplicatesProxy(IRemoveStructuralFeatureValueAction modelElement) : 
                    base(modelElement, "isRemoveDuplicates")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsRemoveDuplicates;
                }
                set
                {
                    this.ModelElement.IsRemoveDuplicates = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the removeAt property
        /// </summary>
        private sealed class RemoveAtProxy : ModelPropertyChange<IRemoveStructuralFeatureValueAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoveAtProxy(IRemoveStructuralFeatureValueAction modelElement) : 
                    base(modelElement, "removeAt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.RemoveAt;
                }
                set
                {
                    this.ModelElement.RemoveAt = value;
                }
            }
        }
    }
}

