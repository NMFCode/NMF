//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for CallAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CallAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(CallAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//CallAction")]
    public interface ICallAction : IModelElement, IInvocationAction
    {
        
        /// <summary>
        /// If true, the call is synchronous and the caller waits for completion of the invoked Behavior. If false, the call is asynchronous and the caller proceeds immediately and cannot receive return values.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isSynchronous")]
        [DescriptionAttribute("If true, the call is synchronous and the caller waits for completion of the invok" +
            "ed Behavior. If false, the call is asynchronous and the caller proceeds immediat" +
            "ely and cannot receive return values.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("CallAction")]
        [XmlElementNameAttribute("isSynchronous")]
        [XmlAttributeAttribute(true)]
        bool IsSynchronous
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutputPins on which the reply values from the invocation are placed (if the call is synchronous).
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IOutputPin> Result
        {
            get;
        }
        
        /// <summary>
        /// The number of argument InputPins must be the same as the number of input (in and inout) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each argument InputPin must be consistent with the corresponding input Parameter.
        ///let parameter: OrderedSet(Parameter) = self.inputParameters() in
        ///argument->size() = parameter->size() and
        ///Sequence{1..argument->size()}->forAll(i | 
        ///	argument->at(i).type.conformsTo(parameter->at(i).type) and 
        ///	argument->at(i).isOrdered = parameter->at(i).isOrdered and
        ///	argument->at(i).compatibleWith(parameter->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Argument_pins(object diagnostics, object context);
        
        /// <summary>
        /// The number of result OutputPins must be the same as the number of output (inout, out and return) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.
        ///let parameter: OrderedSet(Parameter) = self.outputParameters() in
        ///result->size() = parameter->size() and
        ///Sequence{1..result->size()}->forAll(i | 
        ///	parameter->at(i).type.conformsTo(result->at(i).type) and 
        ///	parameter->at(i).isOrdered = result->at(i).isOrdered and
        ///	parameter->at(i).compatibleWith(result->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Result_pins(object diagnostics, object context);
        
        /// <summary>
        /// Only synchronous CallActions can have result OutputPins.
        ///result->notEmpty() implies isSynchronous
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Synchronous_call(object diagnostics, object context);
        
        /// <summary>
        /// Return the in and inout ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        IOrderedSetExpression<NMF.Interop.Uml.IParameter> InputParameters();
        
        /// <summary>
        /// Return the inout, out and return ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        IOrderedSetExpression<NMF.Interop.Uml.IParameter> OutputParameters();
    }
}

