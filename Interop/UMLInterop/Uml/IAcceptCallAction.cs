//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for AcceptCallAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AcceptCallAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(AcceptCallAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//AcceptCallAction")]
    public interface IAcceptCallAction : IModelElement, IAcceptEventAction
    {
        
        /// <summary>
        /// An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("returnInformation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IOutputPin ReturnInformation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The number of result OutputPins must be the same as the number of input (in and inout) ownedParameters of the Operation specified by the trigger Event. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.
        ///let parameter: OrderedSet(Parameter) = trigger.event-&gt;asSequence()-&gt;first().oclAsType(CallEvent).operation.inputParameters() in
        ///result-&gt;size() = parameter-&gt;size() and
        ///Sequence{1..result-&gt;size()}-&gt;forAll(i | 
        ///	parameter-&gt;at(i).type.conformsTo(result-&gt;at(i).type) and 
        ///	parameter-&gt;at(i).isOrdered = result-&gt;at(i).isOrdered and
        ///	parameter-&gt;at(i).compatibleWith(result-&gt;at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Result_pins(object diagnostics, object context);
        
        /// <summary>
        /// The action must have exactly one trigger, which must be for a CallEvent.
        ///trigger-&gt;size()=1 and
        ///trigger-&gt;asSequence()-&gt;first().event.oclIsKindOf(CallEvent)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Trigger_call_event(object diagnostics, object context);
        
        /// <summary>
        /// isUnmrashall must be true for an AcceptCallAction.
        ///isUnmarshall = true
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Unmarshall(object diagnostics, object context);
    }
}
