//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionConstraint")]
    [DebuggerDisplayAttribute("InteractionConstraint {Name}")]
    public partial class InteractionConstraint : Constraint, IInteractionConstraint, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _minint_maxintOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMinint_maxintOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _minint_non_negativeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMinint_non_negativeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _maxint_positiveOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMaxint_positiveOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _dynamic_variablesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDynamic_variablesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _global_dataOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGlobal_dataOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _maxint_greater_equal_minintOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMaxint_greater_equal_minintOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _maxintReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMaxintReference);
        
        /// <summary>
        /// The backing field for the Maxint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _maxint;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _minintReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMinintReference);
        
        /// <summary>
        /// The backing field for the Minint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _minint;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The maximum number of iterations of a loop
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("maxint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Maxint
        {
            get
            {
                return this._maxint;
            }
            set
            {
                if ((this._maxint != value))
                {
                    IValueSpecification old = this._maxint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Maxint", e, _maxintReference);
                    this._maxint = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMaxint;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMaxint;
                    }
                    this.OnPropertyChanged("Maxint", e, _maxintReference);
                }
            }
        }
        
        /// <summary>
        /// The minimum number of iterations of a loop
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("minint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Minint
        {
            get
            {
                return this._minint;
            }
            set
            {
                if ((this._minint != value))
                {
                    IValueSpecification old = this._minint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Minint", e, _minintReference);
                    this._minint = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetMinint;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetMinint;
                    }
                    this.OnPropertyChanged("Minint", e, _minintReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InteractionConstraintChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InteractionConstraintReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionConstraint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.
        ///maxint-&gt;notEmpty() or minint-&gt;notEmpty() implies
        ///interactionOperand.combinedFragment.interactionOperator =
        ///InteractionOperatorKind::loop
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Minint_maxint(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_minint_maxintOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method minint_maxint registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _minint_maxintOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _minint_maxintOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _minint_maxintOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMinint_maxintOperation()
        {
            return ClassInstance.LookupOperation("minint_maxint");
        }
        
        /// <summary>
        /// If minint is specified, then the expression must evaluate to a non-negative integer.
        ///minint-&gt;notEmpty() implies 
        ///minint-&gt;asSequence()-&gt;first().integerValue() &gt;= 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Minint_non_negative(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_minint_non_negativeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method minint_non_negative registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _minint_non_negativeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _minint_non_negativeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _minint_non_negativeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMinint_non_negativeOperation()
        {
            return ClassInstance.LookupOperation("minint_non_negative");
        }
        
        /// <summary>
        /// If maxint is specified, then the expression must evaluate to a positive integer.
        ///maxint-&gt;notEmpty() implies 
        ///maxint-&gt;asSequence()-&gt;first().integerValue() &gt; 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Maxint_positive(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_maxint_positiveOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method maxint_positive registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _maxint_positiveOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _maxint_positiveOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _maxint_positiveOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMaxint_positiveOperation()
        {
            return ClassInstance.LookupOperation("maxint_positive");
        }
        
        /// <summary>
        /// The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Dynamic_variables(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_dynamic_variablesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method dynamic_variables registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _dynamic_variablesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _dynamic_variablesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _dynamic_variablesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDynamic_variablesOperation()
        {
            return ClassInstance.LookupOperation("dynamic_variables");
        }
        
        /// <summary>
        /// The constraint may contain references to global data or write-once data.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Global_data(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_global_dataOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method global_data registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _global_dataOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _global_dataOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _global_dataOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGlobal_dataOperation()
        {
            return ClassInstance.LookupOperation("global_data");
        }
        
        /// <summary>
        /// If maxint is specified, then minint must be specified and the evaluation of maxint must be &gt;= the evaluation of minint.
        ///maxint-&gt;notEmpty() implies (minint-&gt;notEmpty() and 
        ///maxint-&gt;asSequence()-&gt;first().integerValue() &gt;=
        ///minint-&gt;asSequence()-&gt;first().integerValue() )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Maxint_greater_equal_minint(object diagnostics, object context)
        {
            System.Func<IInteractionConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionConstraint, object, object, bool>>(_maxint_greater_equal_minintOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method maxint_greater_equal_minint registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _maxint_greater_equal_minintOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _maxint_greater_equal_minintOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _maxint_greater_equal_minintOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMaxint_greater_equal_minintOperation()
        {
            return ClassInstance.LookupOperation("maxint_greater_equal_minint");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMaxintReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionConstraint.ClassInstance)).Resolve("maxint")));
        }
        
        /// <summary>
        /// Handles the event that the Maxint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxint(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Maxint))
            {
                this.Maxint = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMinintReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionConstraint.ClassInstance)).Resolve("minint")));
        }
        
        /// <summary>
        /// Handles the event that the Minint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinint(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Minint))
            {
                this.Minint = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Maxint))
            {
                return ModelHelper.CreatePath("maxint");
            }
            if ((element == this.Minint))
            {
                return ModelHelper.CreatePath("minint");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MAXINT"))
            {
                return this.Maxint;
            }
            if ((reference == "MININT"))
            {
                return this.Minint;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MAXINT"))
            {
                this.Maxint = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "MININT"))
            {
                this.Minint = ((IValueSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MAXINT"))
            {
                return new MaxintProxy(this);
            }
            if ((reference == "MININT"))
            {
                return new MinintProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionConstraint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionConstraint class
        /// </summary>
        public class InteractionConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionConstraint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionConstraintChildrenCollection(InteractionConstraint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionConstraint class
        /// </summary>
        public class InteractionConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionConstraint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionConstraintReferencedElementsCollection(InteractionConstraint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxint property
        /// </summary>
        private sealed class MaxintProxy : ModelPropertyChange<IInteractionConstraint, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxintProxy(IInteractionConstraint modelElement) : 
                    base(modelElement, "maxint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Maxint;
                }
                set
                {
                    this.ModelElement.Maxint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minint property
        /// </summary>
        private sealed class MinintProxy : ModelPropertyChange<IInteractionConstraint, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinintProxy(IInteractionConstraint modelElement) : 
                    base(modelElement, "minint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Minint;
                }
                set
                {
                    this.ModelElement.Minint = value;
                }
            }
        }
    }
}
