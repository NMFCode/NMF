//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionUse")]
    [DebuggerDisplayAttribute("InteractionUse {Name}")]
    public partial class InteractionUse : InteractionFragment, IInteractionUse, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _gates_matchOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGates_matchOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _arguments_are_constantsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveArguments_are_constantsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _returnValueRecipient_coverageOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReturnValueRecipient_coverageOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _arguments_correspond_to_parametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveArguments_correspond_to_parametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _returnValue_type_recipient_correspondenceOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReturnValue_type_recipient_correspondenceOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _all_lifelinesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAll_lifelinesOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _actualGateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveActualGateReference);
        
        /// <summary>
        /// The backing field for the ActualGate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IGate> _actualGate;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _argumentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveArgumentReference);
        
        /// <summary>
        /// The backing field for the Argument property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IValueSpecification> _argument;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _refersToReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRefersToReference);
        
        /// <summary>
        /// The backing field for the RefersTo property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteraction _refersTo;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _returnValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReturnValueReference);
        
        /// <summary>
        /// The backing field for the ReturnValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _returnValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _returnValueRecipientReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReturnValueRecipientReference);
        
        /// <summary>
        /// The backing field for the ReturnValueRecipient property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProperty _returnValueRecipient;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public InteractionUse()
        {
            this._actualGate = new ObservableCompositionOrderedSet<IGate>(this);
            this._actualGate.CollectionChanging += this.ActualGateCollectionChanging;
            this._actualGate.CollectionChanged += this.ActualGateCollectionChanged;
            this._argument = new ObservableCompositionOrderedSet<IValueSpecification>(this);
            this._argument.CollectionChanging += this.ArgumentCollectionChanging;
            this._argument.CollectionChanged += this.ArgumentCollectionChanged;
        }
        
        /// <summary>
        /// The actual gates of the InteractionUse.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("actualGate")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IGate> ActualGate
        {
            get
            {
                return this._actualGate;
            }
        }
        
        /// <summary>
        /// The actual arguments of the Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("argument")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IValueSpecification> Argument
        {
            get
            {
                return this._argument;
            }
        }
        
        /// <summary>
        /// Refers to the Interaction that defines its meaning.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("refersTo")]
        [DescriptionAttribute("Refers to the Interaction that defines its meaning.\n<p>From package UML::Interact" +
            "ions.</p>")]
        [CategoryAttribute("InteractionUse")]
        [XmlElementNameAttribute("refersTo")]
        [XmlAttributeAttribute(true)]
        public IInteraction RefersTo
        {
            get
            {
                return this._refersTo;
            }
            set
            {
                if ((this._refersTo != value))
                {
                    IInteraction old = this._refersTo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("RefersTo", e, _refersToReference);
                    this._refersTo = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRefersTo;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRefersTo;
                    }
                    this.OnPropertyChanged("RefersTo", e, _refersToReference);
                }
            }
        }
        
        /// <summary>
        /// The value of the executed Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("returnValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification ReturnValue
        {
            get
            {
                return this._returnValue;
            }
            set
            {
                if ((this._returnValue != value))
                {
                    IValueSpecification old = this._returnValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ReturnValue", e, _returnValueReference);
                    this._returnValue = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetReturnValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReturnValue;
                    }
                    this.OnPropertyChanged("ReturnValue", e, _returnValueReference);
                }
            }
        }
        
        /// <summary>
        /// The recipient of the return value.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("returnValueRecipient")]
        [DescriptionAttribute("The recipient of the return value.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("InteractionUse")]
        [XmlElementNameAttribute("returnValueRecipient")]
        [XmlAttributeAttribute(true)]
        public IProperty ReturnValueRecipient
        {
            get
            {
                return this._returnValueRecipient;
            }
            set
            {
                if ((this._returnValueRecipient != value))
                {
                    IProperty old = this._returnValueRecipient;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ReturnValueRecipient", e, _returnValueRecipientReference);
                    this._returnValueRecipient = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReturnValueRecipient;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReturnValueRecipient;
                    }
                    this.OnPropertyChanged("ReturnValueRecipient", e, _returnValueRecipientReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InteractionUseChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InteractionUseReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionUse")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal and their messages correspond.
        ///actualGate-&gt;notEmpty() implies 
        ///refersTo.formalGate-&gt;forAll( fg : Gate | self.actualGate-&gt;select(matches(fg))-&gt;size()=1) and
        ///self.actualGate-&gt;forAll(ag : Gate | refersTo.formalGate-&gt;select(matches(ag))-&gt;size()=1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Gates_match(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_gates_matchOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method gates_match registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _gates_matchOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _gates_matchOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _gates_matchOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGates_matchOperation()
        {
            return ClassInstance.LookupOperation("gates_match");
        }
        
        /// <summary>
        /// The arguments must only be constants, parameters of the enclosing Interaction or attributes of the classifier owning the enclosing Interaction.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Arguments_are_constants(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_arguments_are_constantsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method arguments_are_constants registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _arguments_are_constantsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _arguments_are_constantsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _arguments_are_constantsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveArguments_are_constantsOperation()
        {
            return ClassInstance.LookupOperation("arguments_are_constants");
        }
        
        /// <summary>
        /// The returnValueRecipient must be a Property of a ConnectableElement that is represented by a Lifeline covered by this InteractionUse.
        ///returnValueRecipient-&gt;asSet()-&gt;notEmpty() implies
        ///let covCE : Set(ConnectableElement) = covered.represents-&gt;asSet() in 
        ///covCE-&gt;notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)-&gt;asSet() in 
        ///let allProps : Set(Property) = classes.attribute-&gt;union(classes.allParents().attribute)-&gt;asSet() in 
        ///allProps-&gt;includes(returnValueRecipient)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool ReturnValueRecipient_coverage(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_returnValueRecipient_coverageOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method returnValueRecipient_coverage registered. U" +
                        "se the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _returnValueRecipient_coverageOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _returnValueRecipient_coverageOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _returnValueRecipient_coverageOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReturnValueRecipient_coverageOperation()
        {
            return ClassInstance.LookupOperation("returnValueRecipient_coverage");
        }
        
        /// <summary>
        /// The arguments of the InteractionUse must correspond to parameters of the referred Interaction.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Arguments_correspond_to_parameters(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_arguments_correspond_to_parametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method arguments_correspond_to_parameters register" +
                        "ed. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _arguments_correspond_to_parametersOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _arguments_correspond_to_parametersOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _arguments_correspond_to_parametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveArguments_correspond_to_parametersOperation()
        {
            return ClassInstance.LookupOperation("arguments_correspond_to_parameters");
        }
        
        /// <summary>
        /// The type of the returnValue must correspond to the type of the returnValueRecipient.
        ///returnValue.type-&gt;asSequence()-&gt;notEmpty() implies returnValue.type-&gt;asSequence()-&gt;first() = returnValueRecipient.type-&gt;asSequence()-&gt;first()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool ReturnValue_type_recipient_correspondence(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_returnValue_type_recipient_correspondenceOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method returnValue_type_recipient_correspondence r" +
                        "egistered. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _returnValue_type_recipient_correspondenceOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _returnValue_type_recipient_correspondenceOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _returnValue_type_recipient_correspondenceOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReturnValue_type_recipient_correspondenceOperation()
        {
            return ClassInstance.LookupOperation("returnValue_type_recipient_correspondence");
        }
        
        /// <summary>
        /// The InteractionUse must cover all Lifelines of the enclosing Interaction that are common with the lifelines covered by the referred Interaction. Lifelines are common if they have the same selector and represents associationEnd values.
        ///let parentInteraction : Set(Interaction) = enclosingInteraction-&gt;asSet()-&gt;
        ///union(enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)-&gt;
        ///collect(enclosingInteraction).oclAsType(Interaction)-&gt;asSet()) in
        ///parentInteraction-&gt;size()=1 and let refInteraction : Interaction = refersTo in
        ///parentInteraction.covered-&gt; forAll(intLifeline : Lifeline | refInteraction.covered-&gt;
        ///forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and 
        ///(
        ///( refLifeline.selector.oclIsKindOf(LiteralString) implies
        ///  intLifeline.selector.oclIsKindOf(LiteralString) and 
        ///  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and
        ///( refLifeline.selector.oclIsKindOf(LiteralInteger) implies
        ///  intLifeline.selector.oclIsKindOf(LiteralInteger) and 
        ///  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )
        ///)
        /// implies self.covered-&gt;asSet()-&gt;includes(intLifeline)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool All_lifelines(object diagnostics, object context)
        {
            System.Func<IInteractionUse, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionUse, object, object, bool>>(_all_lifelinesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method all_lifelines registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _all_lifelinesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _all_lifelinesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _all_lifelinesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAll_lifelinesOperation()
        {
            return ClassInstance.LookupOperation("all_lifelines");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveActualGateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionUse.ClassInstance)).Resolve("actualGate")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActualGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActualGateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ActualGate", e, _actualGateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActualGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActualGateCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActualGate", e, _actualGateReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveArgumentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionUse.ClassInstance)).Resolve("argument")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Argument property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Argument", e, _argumentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Argument property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Argument", e, _argumentReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRefersToReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionUse.ClassInstance)).Resolve("refersTo")));
        }
        
        /// <summary>
        /// Handles the event that the RefersTo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRefersTo(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.RefersTo))
            {
                this.RefersTo = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReturnValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionUse.ClassInstance)).Resolve("returnValue")));
        }
        
        /// <summary>
        /// Handles the event that the ReturnValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReturnValue(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.ReturnValue))
            {
                this.ReturnValue = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReturnValueRecipientReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionUse.ClassInstance)).Resolve("returnValueRecipient")));
        }
        
        /// <summary>
        /// Handles the event that the ReturnValueRecipient property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReturnValueRecipient(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.ReturnValueRecipient))
            {
                this.ReturnValueRecipient = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int actualGateIndex = ModelHelper.IndexOfReference(this.ActualGate, element);
            if ((actualGateIndex != -1))
            {
                return ModelHelper.CreatePath("actualGate", actualGateIndex);
            }
            int argumentIndex = ModelHelper.IndexOfReference(this.Argument, element);
            if ((argumentIndex != -1))
            {
                return ModelHelper.CreatePath("argument", argumentIndex);
            }
            if ((element == this.ReturnValue))
            {
                return ModelHelper.CreatePath("returnValue");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ACTUALGATE"))
            {
                if ((index < this.ActualGate.Count))
                {
                    return this.ActualGate[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ARGUMENT"))
            {
                if ((index < this.Argument.Count))
                {
                    return this.Argument[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "REFERSTO"))
            {
                return this.RefersTo;
            }
            if ((reference == "RETURNVALUE"))
            {
                return this.ReturnValue;
            }
            if ((reference == "RETURNVALUERECIPIENT"))
            {
                return this.ReturnValueRecipient;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ACTUALGATE"))
            {
                return this._actualGate;
            }
            if ((feature == "ARGUMENT"))
            {
                return this._argument;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REFERSTO"))
            {
                this.RefersTo = ((IInteraction)(value));
                return;
            }
            if ((feature == "RETURNVALUE"))
            {
                this.ReturnValue = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "RETURNVALUERECIPIENT"))
            {
                this.ReturnValueRecipient = ((IProperty)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REFERSTO"))
            {
                return new RefersToProxy(this);
            }
            if ((reference == "RETURNVALUE"))
            {
                return new ReturnValueProxy(this);
            }
            if ((reference == "RETURNVALUERECIPIENT"))
            {
                return new ReturnValueRecipientProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._actualGate))
            {
                return "actualGate";
            }
            if ((container == this._argument))
            {
                return "argument";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionUse")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionUse class
        /// </summary>
        public class InteractionUseChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionUse _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionUseChildrenCollection(InteractionUse parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ActualGate.Count);
                    count = (count + this._parent.Argument.Count);
                    if ((this._parent.ReturnValue != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ActualGate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Argument.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ActualGate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Argument.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGate actualGateCasted = item.As<IGate>();
                if ((actualGateCasted != null))
                {
                    this._parent.ActualGate.Add(actualGateCasted);
                }
                IValueSpecification argumentCasted = item.As<IValueSpecification>();
                if ((argumentCasted != null))
                {
                    this._parent.Argument.Add(argumentCasted);
                }
                if ((this._parent.ReturnValue == null))
                {
                    IValueSpecification returnValueCasted = item.As<IValueSpecification>();
                    if ((returnValueCasted != null))
                    {
                        this._parent.ReturnValue = returnValueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ActualGate.Clear();
                this._parent.Argument.Clear();
                this._parent.ReturnValue = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ActualGate.Contains(item))
                {
                    return true;
                }
                if (this._parent.Argument.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReturnValue))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> actualGateEnumerator = this._parent.ActualGate.GetEnumerator();
                try
                {
                    for (
                    ; actualGateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = actualGateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    actualGateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> argumentEnumerator = this._parent.Argument.GetEnumerator();
                try
                {
                    for (
                    ; argumentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = argumentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    argumentEnumerator.Dispose();
                }
                if ((this._parent.ReturnValue != null))
                {
                    array[arrayIndex] = this._parent.ReturnValue;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGate gateItem = item.As<IGate>();
                if (((gateItem != null) 
                            && this._parent.ActualGate.Remove(gateItem)))
                {
                    return true;
                }
                IValueSpecification valueSpecificationItem = item.As<IValueSpecification>();
                if (((valueSpecificationItem != null) 
                            && this._parent.Argument.Remove(valueSpecificationItem)))
                {
                    return true;
                }
                if ((this._parent.ReturnValue == item))
                {
                    this._parent.ReturnValue = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ActualGate).Concat(this._parent.Argument).Concat(this._parent.ReturnValue).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionUse class
        /// </summary>
        public class InteractionUseReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionUse _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionUseReferencedElementsCollection(InteractionUse parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ActualGate.Count);
                    count = (count + this._parent.Argument.Count);
                    if ((this._parent.RefersTo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReturnValue != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReturnValueRecipient != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ActualGate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Argument.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ActualGate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Argument.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGate actualGateCasted = item.As<IGate>();
                if ((actualGateCasted != null))
                {
                    this._parent.ActualGate.Add(actualGateCasted);
                }
                IValueSpecification argumentCasted = item.As<IValueSpecification>();
                if ((argumentCasted != null))
                {
                    this._parent.Argument.Add(argumentCasted);
                }
                if ((this._parent.RefersTo == null))
                {
                    IInteraction refersToCasted = item.As<IInteraction>();
                    if ((refersToCasted != null))
                    {
                        this._parent.RefersTo = refersToCasted;
                        return;
                    }
                }
                if ((this._parent.ReturnValue == null))
                {
                    IValueSpecification returnValueCasted = item.As<IValueSpecification>();
                    if ((returnValueCasted != null))
                    {
                        this._parent.ReturnValue = returnValueCasted;
                        return;
                    }
                }
                if ((this._parent.ReturnValueRecipient == null))
                {
                    IProperty returnValueRecipientCasted = item.As<IProperty>();
                    if ((returnValueRecipientCasted != null))
                    {
                        this._parent.ReturnValueRecipient = returnValueRecipientCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ActualGate.Clear();
                this._parent.Argument.Clear();
                this._parent.RefersTo = null;
                this._parent.ReturnValue = null;
                this._parent.ReturnValueRecipient = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ActualGate.Contains(item))
                {
                    return true;
                }
                if (this._parent.Argument.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RefersTo))
                {
                    return true;
                }
                if ((item == this._parent.ReturnValue))
                {
                    return true;
                }
                if ((item == this._parent.ReturnValueRecipient))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> actualGateEnumerator = this._parent.ActualGate.GetEnumerator();
                try
                {
                    for (
                    ; actualGateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = actualGateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    actualGateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> argumentEnumerator = this._parent.Argument.GetEnumerator();
                try
                {
                    for (
                    ; argumentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = argumentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    argumentEnumerator.Dispose();
                }
                if ((this._parent.RefersTo != null))
                {
                    array[arrayIndex] = this._parent.RefersTo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReturnValue != null))
                {
                    array[arrayIndex] = this._parent.ReturnValue;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReturnValueRecipient != null))
                {
                    array[arrayIndex] = this._parent.ReturnValueRecipient;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGate gateItem = item.As<IGate>();
                if (((gateItem != null) 
                            && this._parent.ActualGate.Remove(gateItem)))
                {
                    return true;
                }
                IValueSpecification valueSpecificationItem = item.As<IValueSpecification>();
                if (((valueSpecificationItem != null) 
                            && this._parent.Argument.Remove(valueSpecificationItem)))
                {
                    return true;
                }
                if ((this._parent.RefersTo == item))
                {
                    this._parent.RefersTo = null;
                    return true;
                }
                if ((this._parent.ReturnValue == item))
                {
                    this._parent.ReturnValue = null;
                    return true;
                }
                if ((this._parent.ReturnValueRecipient == item))
                {
                    this._parent.ReturnValueRecipient = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ActualGate).Concat(this._parent.Argument).Concat(this._parent.RefersTo).Concat(this._parent.ReturnValue).Concat(this._parent.ReturnValueRecipient).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the refersTo property
        /// </summary>
        private sealed class RefersToProxy : ModelPropertyChange<IInteractionUse, IInteraction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefersToProxy(IInteractionUse modelElement) : 
                    base(modelElement, "refersTo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteraction Value
            {
                get
                {
                    return this.ModelElement.RefersTo;
                }
                set
                {
                    this.ModelElement.RefersTo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the returnValue property
        /// </summary>
        private sealed class ReturnValueProxy : ModelPropertyChange<IInteractionUse, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReturnValueProxy(IInteractionUse modelElement) : 
                    base(modelElement, "returnValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.ReturnValue;
                }
                set
                {
                    this.ModelElement.ReturnValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the returnValueRecipient property
        /// </summary>
        private sealed class ReturnValueRecipientProxy : ModelPropertyChange<IInteractionUse, IProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReturnValueRecipientProxy(IInteractionUse modelElement) : 
                    base(modelElement, "returnValueRecipient")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProperty Value
            {
                get
                {
                    return this.ModelElement.ReturnValueRecipient;
                }
                set
                {
                    this.ModelElement.ReturnValueRecipient = value;
                }
            }
        }
    }
}
