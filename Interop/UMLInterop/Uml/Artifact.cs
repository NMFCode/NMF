//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
    ///An artifact is the source of a deployment to a node.
    ///<p>From package UML::Deployments.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Artifact")]
    [DebuggerDisplayAttribute("Artifact {Name}")]
    public partial class Artifact : Classifier, IArtifact, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOwnedAttributeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOwnedAttributeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOwnedOperationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOwnedOperationOperation);
        
        /// <summary>
        /// The backing field for the FileName property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _fileName;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _fileNameAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFileNameAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _manifestationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveManifestationReference);
        
        /// <summary>
        /// The backing field for the Manifestation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IManifestation> _manifestation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nestedArtifactReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNestedArtifactReference);
        
        /// <summary>
        /// The backing field for the NestedArtifact property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IArtifact> _nestedArtifact;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedAttributeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedAttributeReference);
        
        /// <summary>
        /// The backing field for the OwnedAttribute property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IProperty> _ownedAttribute;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedOperationReference);
        
        /// <summary>
        /// The backing field for the OwnedOperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<NMF.Interop.Uml.IOperation> _ownedOperation;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Artifact()
        {
            this._manifestation = new ObservableCompositionOrderedSet<IManifestation>(this);
            this._manifestation.CollectionChanging += this.ManifestationCollectionChanging;
            this._manifestation.CollectionChanged += this.ManifestationCollectionChanged;
            this._nestedArtifact = new ObservableCompositionOrderedSet<IArtifact>(this);
            this._nestedArtifact.CollectionChanging += this.NestedArtifactCollectionChanging;
            this._nestedArtifact.CollectionChanged += this.NestedArtifactCollectionChanged;
            this._ownedAttribute = new ObservableCompositionOrderedSet<IProperty>(this);
            this._ownedAttribute.CollectionChanging += this.OwnedAttributeCollectionChanging;
            this._ownedAttribute.CollectionChanged += this.OwnedAttributeCollectionChanged;
            this._ownedOperation = new ObservableCompositionOrderedSet<NMF.Interop.Uml.IOperation>(this);
            this._ownedOperation.CollectionChanging += this.OwnedOperationCollectionChanging;
            this._ownedOperation.CollectionChanged += this.OwnedOperationCollectionChanged;
        }
        
        /// <summary>
        /// A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DisplayNameAttribute("fileName")]
        [DescriptionAttribute("A concrete name that is used to refer to the Artifact in a physical context. Exam" +
            "ple: file system name, universal resource locator.\n<p>From package UML::Deployme" +
            "nts.</p>")]
        [CategoryAttribute("Artifact")]
        [XmlElementNameAttribute("fileName")]
        [XmlAttributeAttribute(true)]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    string old = this._fileName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("FileName", e, _fileNameAttribute);
                    this._fileName = value;
                    this.OnPropertyChanged("FileName", e, _fileNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("manifestation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IManifestation> Manifestation
        {
            get
            {
                return this._manifestation;
            }
        }
        
        /// <summary>
        /// The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedArtifact")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IArtifact> NestedArtifact
        {
            get
            {
                return this._nestedArtifact;
            }
        }
        
        /// <summary>
        /// The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedAttribute")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> OwnedAttribute
        {
            get
            {
                return this._ownedAttribute;
            }
        }
        
        /// <summary>
        /// The Operations defined for the Artifact. The association is a specialization of the ownedMember association.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedOperation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Uml.IOperation> OwnedOperation
        {
            get
            {
                return this._ownedOperation;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ArtifactChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ArtifactReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Artifact")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this artifact.
        /// </summary>
        /// <param name="name">The name for the new attribute, or null.</param>
        /// <param name="type">The type for the new attribute, or null.</param>
        /// <param name="lower">The lower bound for the new attribute.</param>
        /// <param name="upper">The upper bound for the new attribute.</param>
        public IProperty CreateOwnedAttribute(string name, NMF.Interop.Uml.IType type, int lower, object upper)
        {
            System.Func<IArtifact, string, NMF.Interop.Uml.IType, int, object, IProperty> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IArtifact, string, NMF.Interop.Uml.IType, int, object, IProperty>>(_createOwnedAttributeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createOwnedAttribute registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOwnedAttributeOperation.Value, name, type, lower, upper);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOwnedAttributeOperation.Value, e));
            IProperty result = handler.Invoke(this, name, type, lower, upper);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOwnedAttributeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOwnedAttributeOperation()
        {
            return ClassInstance.LookupOperation("createOwnedAttribute");
        }
        
        /// <summary>
        /// Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this artifact.
        /// </summary>
        /// <param name="name">The name for the new operation, or null.</param>
        /// <param name="parameterNames">The parameter names for  the new operation, or null.</param>
        /// <param name="parameterTypes">The parameter types for the new operation, or null.</param>
        /// <param name="returnType">The return type for the new operation, or null.</param>
        public NMF.Interop.Uml.IOperation CreateOwnedOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes, NMF.Interop.Uml.IType returnType)
        {
            System.Func<IArtifact, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IArtifact, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation>>(_createOwnedOperationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createOwnedOperation registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOwnedOperationOperation.Value, name, parameterNames, parameterTypes, returnType);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOwnedOperationOperation.Value, e));
            NMF.Interop.Uml.IOperation result = handler.Invoke(this, name, parameterNames, parameterTypes, returnType);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOwnedOperationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOwnedOperationOperation()
        {
            return ClassInstance.LookupOperation("createOwnedOperation");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFileNameAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Artifact.ClassInstance)).Resolve("fileName")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveManifestationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Artifact.ClassInstance)).Resolve("manifestation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Manifestation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ManifestationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Manifestation", e, _manifestationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Manifestation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ManifestationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Manifestation", e, _manifestationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNestedArtifactReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Artifact.ClassInstance)).Resolve("nestedArtifact")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NestedArtifact property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedArtifactCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NestedArtifact", e, _nestedArtifactReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NestedArtifact property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedArtifactCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NestedArtifact", e, _nestedArtifactReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedAttributeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Artifact.ClassInstance)).Resolve("ownedAttribute")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedAttribute property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedAttributeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedAttribute", e, _ownedAttributeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedAttribute property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedAttributeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedAttribute", e, _ownedAttributeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Artifact.ClassInstance)).Resolve("ownedOperation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedOperation", e, _ownedOperationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedOperation", e, _ownedOperationReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int manifestationIndex = ModelHelper.IndexOfReference(this.Manifestation, element);
            if ((manifestationIndex != -1))
            {
                return ModelHelper.CreatePath("manifestation", manifestationIndex);
            }
            int nestedArtifactIndex = ModelHelper.IndexOfReference(this.NestedArtifact, element);
            if ((nestedArtifactIndex != -1))
            {
                return ModelHelper.CreatePath("nestedArtifact", nestedArtifactIndex);
            }
            int ownedAttributeIndex = ModelHelper.IndexOfReference(this.OwnedAttribute, element);
            if ((ownedAttributeIndex != -1))
            {
                return ModelHelper.CreatePath("ownedAttribute", ownedAttributeIndex);
            }
            int ownedOperationIndex = ModelHelper.IndexOfReference(this.OwnedOperation, element);
            if ((ownedOperationIndex != -1))
            {
                return ModelHelper.CreatePath("ownedOperation", ownedOperationIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MANIFESTATION"))
            {
                if ((index < this.Manifestation.Count))
                {
                    return this.Manifestation[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NESTEDARTIFACT"))
            {
                if ((index < this.NestedArtifact.Count))
                {
                    return this.NestedArtifact[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDATTRIBUTE"))
            {
                if ((index < this.OwnedAttribute.Count))
                {
                    return this.OwnedAttribute[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDOPERATION"))
            {
                if ((index < this.OwnedOperation.Count))
                {
                    return this.OwnedOperation[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FILENAME"))
            {
                return this.FileName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MANIFESTATION"))
            {
                return this._manifestation;
            }
            if ((feature == "NESTEDARTIFACT"))
            {
                return this._nestedArtifact;
            }
            if ((feature == "OWNEDATTRIBUTE"))
            {
                return this._ownedAttribute;
            }
            if ((feature == "OWNEDOPERATION"))
            {
                return this._ownedOperation;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FILENAME"))
            {
                this.FileName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FILENAME"))
            {
                return new FileNameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._manifestation))
            {
                return "manifestation";
            }
            if ((container == this._nestedArtifact))
            {
                return "nestedArtifact";
            }
            if ((container == this._ownedAttribute))
            {
                return "ownedAttribute";
            }
            if ((container == this._ownedOperation))
            {
                return "ownedOperation";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Artifact")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Artifact class
        /// </summary>
        public class ArtifactChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Artifact _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ArtifactChildrenCollection(Artifact parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Manifestation.Count);
                    count = (count + this._parent.NestedArtifact.Count);
                    count = (count + this._parent.OwnedAttribute.Count);
                    count = (count + this._parent.OwnedOperation.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Manifestation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NestedArtifact.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Manifestation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NestedArtifact.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IManifestation manifestationCasted = item.As<IManifestation>();
                if ((manifestationCasted != null))
                {
                    this._parent.Manifestation.Add(manifestationCasted);
                }
                IArtifact nestedArtifactCasted = item.As<IArtifact>();
                if ((nestedArtifactCasted != null))
                {
                    this._parent.NestedArtifact.Add(nestedArtifactCasted);
                }
                IProperty ownedAttributeCasted = item.As<IProperty>();
                if ((ownedAttributeCasted != null))
                {
                    this._parent.OwnedAttribute.Add(ownedAttributeCasted);
                }
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Manifestation.Clear();
                this._parent.NestedArtifact.Clear();
                this._parent.OwnedAttribute.Clear();
                this._parent.OwnedOperation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Manifestation.Contains(item))
                {
                    return true;
                }
                if (this._parent.NestedArtifact.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedAttribute.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> manifestationEnumerator = this._parent.Manifestation.GetEnumerator();
                try
                {
                    for (
                    ; manifestationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = manifestationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    manifestationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nestedArtifactEnumerator = this._parent.NestedArtifact.GetEnumerator();
                try
                {
                    for (
                    ; nestedArtifactEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedArtifactEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedArtifactEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedAttributeEnumerator = this._parent.OwnedAttribute.GetEnumerator();
                try
                {
                    for (
                    ; ownedAttributeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedAttributeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedAttributeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IManifestation manifestationItem = item.As<IManifestation>();
                if (((manifestationItem != null) 
                            && this._parent.Manifestation.Remove(manifestationItem)))
                {
                    return true;
                }
                IArtifact artifactItem = item.As<IArtifact>();
                if (((artifactItem != null) 
                            && this._parent.NestedArtifact.Remove(artifactItem)))
                {
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.OwnedAttribute.Remove(propertyItem)))
                {
                    return true;
                }
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Manifestation).Concat(this._parent.NestedArtifact).Concat(this._parent.OwnedAttribute).Concat(this._parent.OwnedOperation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Artifact class
        /// </summary>
        public class ArtifactReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Artifact _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ArtifactReferencedElementsCollection(Artifact parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Manifestation.Count);
                    count = (count + this._parent.NestedArtifact.Count);
                    count = (count + this._parent.OwnedAttribute.Count);
                    count = (count + this._parent.OwnedOperation.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Manifestation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NestedArtifact.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Manifestation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NestedArtifact.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedAttribute.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IManifestation manifestationCasted = item.As<IManifestation>();
                if ((manifestationCasted != null))
                {
                    this._parent.Manifestation.Add(manifestationCasted);
                }
                IArtifact nestedArtifactCasted = item.As<IArtifact>();
                if ((nestedArtifactCasted != null))
                {
                    this._parent.NestedArtifact.Add(nestedArtifactCasted);
                }
                IProperty ownedAttributeCasted = item.As<IProperty>();
                if ((ownedAttributeCasted != null))
                {
                    this._parent.OwnedAttribute.Add(ownedAttributeCasted);
                }
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Manifestation.Clear();
                this._parent.NestedArtifact.Clear();
                this._parent.OwnedAttribute.Clear();
                this._parent.OwnedOperation.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Manifestation.Contains(item))
                {
                    return true;
                }
                if (this._parent.NestedArtifact.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedAttribute.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> manifestationEnumerator = this._parent.Manifestation.GetEnumerator();
                try
                {
                    for (
                    ; manifestationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = manifestationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    manifestationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nestedArtifactEnumerator = this._parent.NestedArtifact.GetEnumerator();
                try
                {
                    for (
                    ; nestedArtifactEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedArtifactEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedArtifactEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedAttributeEnumerator = this._parent.OwnedAttribute.GetEnumerator();
                try
                {
                    for (
                    ; ownedAttributeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedAttributeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedAttributeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IManifestation manifestationItem = item.As<IManifestation>();
                if (((manifestationItem != null) 
                            && this._parent.Manifestation.Remove(manifestationItem)))
                {
                    return true;
                }
                IArtifact artifactItem = item.As<IArtifact>();
                if (((artifactItem != null) 
                            && this._parent.NestedArtifact.Remove(artifactItem)))
                {
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.OwnedAttribute.Remove(propertyItem)))
                {
                    return true;
                }
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Manifestation).Concat(this._parent.NestedArtifact).Concat(this._parent.OwnedAttribute).Concat(this._parent.OwnedOperation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fileName property
        /// </summary>
        private sealed class FileNameProxy : ModelPropertyChange<IArtifact, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileNameProxy(IArtifact modelElement) : 
                    base(modelElement, "fileName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FileName;
                }
                set
                {
                    this.ModelElement.FileName = value;
                }
            }
        }
    }
}

