//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// InvocationAction is an abstract class for the various actions that request Behavior invocation.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InvocationAction")]
    [DebuggerDisplayAttribute("InvocationAction {Name}")]
    public abstract partial class InvocationAction : Action, IInvocationAction, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _argumentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveArgumentReference);
        
        /// <summary>
        /// The backing field for the Argument property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IInputPin> _argument;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _onPortReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOnPortReference);
        
        /// <summary>
        /// The backing field for the OnPort property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPort _onPort;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public InvocationAction()
        {
            this._argument = new ObservableCompositionOrderedSet<IInputPin>(this);
            this._argument.CollectionChanging += this.ArgumentCollectionChanging;
            this._argument.CollectionChanged += this.ArgumentCollectionChanged;
        }
        
        /// <summary>
        /// The InputPins that provide the argument values passed in the invocation request.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("argument")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInputPin> Argument
        {
            get
            {
                return this._argument;
            }
        }
        
        /// <summary>
        /// For CallOperationActions, SendSignalActions, and SendObjectActions, an optional Port of the target object through which the invocation request is sent.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("onPort")]
        [DescriptionAttribute("For CallOperationActions, SendSignalActions, and SendObjectActions, an optional P" +
            "ort of the target object through which the invocation request is sent.\n<p>From p" +
            "ackage UML::Actions.</p>")]
        [CategoryAttribute("InvocationAction")]
        [XmlElementNameAttribute("onPort")]
        [XmlAttributeAttribute(true)]
        public IPort OnPort
        {
            get
            {
                return this._onPort;
            }
            set
            {
                if ((this._onPort != value))
                {
                    IPort old = this._onPort;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OnPort", e, _onPortReference);
                    this._onPort = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOnPort;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOnPort;
                    }
                    this.OnPropertyChanged("OnPort", e, _onPortReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InvocationActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InvocationActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InvocationAction")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveArgumentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InvocationAction.ClassInstance)).Resolve("argument")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Argument property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Argument", e, _argumentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Argument property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Argument", e, _argumentReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOnPortReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InvocationAction.ClassInstance)).Resolve("onPort")));
        }
        
        /// <summary>
        /// Handles the event that the OnPort property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOnPort(object sender, System.EventArgs eventArgs)
        {
            this.OnPort = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int argumentIndex = ModelHelper.IndexOfReference(this.Argument, element);
            if ((argumentIndex != -1))
            {
                return ModelHelper.CreatePath("argument", argumentIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ARGUMENT"))
            {
                if ((index < this.Argument.Count))
                {
                    return this.Argument[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ONPORT"))
            {
                return this.OnPort;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ARGUMENT"))
            {
                return this._argument;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ONPORT"))
            {
                this.OnPort = ((IPort)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ONPORT"))
            {
                return new OnPortProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._argument))
            {
                return "argument";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InvocationAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InvocationAction class
        /// </summary>
        public class InvocationActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InvocationAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InvocationActionChildrenCollection(InvocationAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Argument.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Argument.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Argument.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInputPin argumentCasted = item.As<IInputPin>();
                if ((argumentCasted != null))
                {
                    this._parent.Argument.Add(argumentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Argument.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Argument.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> argumentEnumerator = this._parent.Argument.GetEnumerator();
                try
                {
                    for (
                    ; argumentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = argumentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    argumentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.Argument.Remove(inputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Argument).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InvocationAction class
        /// </summary>
        public class InvocationActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InvocationAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InvocationActionReferencedElementsCollection(InvocationAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Argument.Count);
                    if ((this._parent.OnPort != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Argument.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Argument.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInputPin argumentCasted = item.As<IInputPin>();
                if ((argumentCasted != null))
                {
                    this._parent.Argument.Add(argumentCasted);
                }
                if ((this._parent.OnPort == null))
                {
                    IPort onPortCasted = item.As<IPort>();
                    if ((onPortCasted != null))
                    {
                        this._parent.OnPort = onPortCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Argument.Clear();
                this._parent.OnPort = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Argument.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OnPort))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> argumentEnumerator = this._parent.Argument.GetEnumerator();
                try
                {
                    for (
                    ; argumentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = argumentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    argumentEnumerator.Dispose();
                }
                if ((this._parent.OnPort != null))
                {
                    array[arrayIndex] = this._parent.OnPort;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.Argument.Remove(inputPinItem)))
                {
                    return true;
                }
                if ((this._parent.OnPort == item))
                {
                    this._parent.OnPort = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Argument).Concat(this._parent.OnPort).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the onPort property
        /// </summary>
        private sealed class OnPortProxy : ModelPropertyChange<IInvocationAction, IPort>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OnPortProxy(IInvocationAction modelElement) : 
                    base(modelElement, "onPort")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPort Value
            {
                get
                {
                    return this.ModelElement.OnPort;
                }
                set
                {
                    this.ModelElement.OnPort = value;
                }
            }
        }
    }
}

