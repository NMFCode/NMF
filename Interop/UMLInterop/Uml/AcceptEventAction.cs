//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An AcceptEventAction is an Action that waits for the occurrence of one or more specific Events.
    ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//AcceptEventAction")]
    [DebuggerDisplayAttribute("AcceptEventAction {Name}")]
    public partial class AcceptEventAction : Action, IAcceptEventAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_output_pinOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_output_pinOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_input_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_input_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_output_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_output_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unmarshall_signal_eventsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnmarshall_signal_eventsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _conforming_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConforming_typeOperation);
        
        /// <summary>
        /// The backing field for the IsUnmarshall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnmarshall = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUnmarshallAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUnmarshallAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOutputPin> _result;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _triggerReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTriggerReference);
        
        /// <summary>
        /// The backing field for the Trigger property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ITrigger> _trigger;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public AcceptEventAction()
        {
            this._result = new ObservableCompositionOrderedSet<IOutputPin>(this);
            this._result.CollectionChanging += this.ResultCollectionChanging;
            this._result.CollectionChanged += this.ResultCollectionChanged;
            this._trigger = new ObservableCompositionOrderedSet<ITrigger>(this);
            this._trigger.CollectionChanging += this.TriggerCollectionChanging;
            this._trigger.CollectionChanged += this.TriggerCollectionChanged;
        }
        
        /// <summary>
        /// Indicates whether there is a single OutputPin for a SignalEvent occurrence, or multiple OutputPins for attribute values of the instance of the Signal associated with a SignalEvent occurrence.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnmarshall")]
        [DescriptionAttribute("Indicates whether there is a single OutputPin for a SignalEvent occurrence, or mu" +
            "ltiple OutputPins for attribute values of the instance of the Signal associated " +
            "with a SignalEvent occurrence.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("AcceptEventAction")]
        [XmlElementNameAttribute("isUnmarshall")]
        [XmlAttributeAttribute(true)]
        public bool IsUnmarshall
        {
            get
            {
                return this._isUnmarshall;
            }
            set
            {
                if ((this._isUnmarshall != value))
                {
                    bool old = this._isUnmarshall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsUnmarshall", e, _isUnmarshallAttribute);
                    this._isUnmarshall = value;
                    this.OnPropertyChanged("IsUnmarshall", e, _isUnmarshallAttribute);
                }
            }
        }
        
        /// <summary>
        /// OutputPins holding the values received from an Event occurrence.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOutputPin> Result
        {
            get
            {
                return this._result;
            }
        }
        
        /// <summary>
        /// The Triggers specifying the Events of which the AcceptEventAction waits for occurrences.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("trigger")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITrigger> Trigger
        {
            get
            {
                return this._trigger;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AcceptEventActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AcceptEventActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//AcceptEventAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If isUnmarshall=false and any of the triggers are for SignalEvents or TimeEvents, there must be exactly one result OutputPin with multiplicity 1..1.
        ///not isUnmarshall and trigger-&gt;exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies 
        ///	output-&gt;size() = 1 and output-&gt;first().is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_output_pin(object diagnostics, object context)
        {
            System.Func<IAcceptEventAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAcceptEventAction, object, object, bool>>(_one_output_pinOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_output_pin registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_output_pinOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_output_pinOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_output_pinOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_output_pinOperation()
        {
            return ClassInstance.LookupOperation("one_output_pin");
        }
        
        /// <summary>
        /// AcceptEventActions may have no input pins.
        ///input-&gt;size() = 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_input_pins(object diagnostics, object context)
        {
            System.Func<IAcceptEventAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAcceptEventAction, object, object, bool>>(_no_input_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_input_pins registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_input_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_input_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_input_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_input_pinsOperation()
        {
            return ClassInstance.LookupOperation("no_input_pins");
        }
        
        /// <summary>
        /// There are no OutputPins if the trigger events are only ChangeEvents and/or CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).
        ///(self.oclIsTypeOf(AcceptEventAction) and
        ///   (trigger-&gt;forAll(event.oclIsKindOf(ChangeEvent) or  
        ///                             event.oclIsKindOf(CallEvent))))
        ///implies output-&gt;size() = 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_output_pins(object diagnostics, object context)
        {
            System.Func<IAcceptEventAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAcceptEventAction, object, object, bool>>(_no_output_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_output_pins registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_output_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_output_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_output_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_output_pinsOperation()
        {
            return ClassInstance.LookupOperation("no_output_pins");
        }
        
        /// <summary>
        /// If isUnmarshall is true (and this is not an AcceptCallAction), there must be exactly one trigger, which is for a SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.
        ///isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies
        ///	trigger-&gt;size()=1 and
        ///	trigger-&gt;asSequence()-&gt;first().event.oclIsKindOf(SignalEvent) and
        ///	let attribute: OrderedSet(Property) = trigger-&gt;asSequence()-&gt;first().event.oclAsType(SignalEvent).signal.allAttributes() in
        ///	attribute-&gt;size()&gt;0 and result-&gt;size() = attribute-&gt;size() and
        ///	Sequence{1..result-&gt;size()}-&gt;forAll(i | 
        ///		result-&gt;at(i).type = attribute-&gt;at(i).type and 
        ///		result-&gt;at(i).isOrdered = attribute-&gt;at(i).isOrdered and
        ///		result-&gt;at(i).includesMultiplicity(attribute-&gt;at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Unmarshall_signal_events(object diagnostics, object context)
        {
            System.Func<IAcceptEventAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAcceptEventAction, object, object, bool>>(_unmarshall_signal_eventsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unmarshall_signal_events registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unmarshall_signal_eventsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unmarshall_signal_eventsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unmarshall_signal_eventsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnmarshall_signal_eventsOperation()
        {
            return ClassInstance.LookupOperation("unmarshall_signal_events");
        }
        
        /// <summary>
        /// If isUnmarshall=false and all the triggers are for SignalEvents, then the type of the single result OutputPin must either be null or all the signals must conform to it.
        ///not isUnmarshall implies 
        ///	result-&gt;isEmpty() or
        ///	let type: Type = result-&gt;first().type in
        ///	type=null or 
        ///		(trigger-&gt;forAll(event.oclIsKindOf(SignalEvent)) and 
        ///		 trigger.event.oclAsType(SignalEvent).signal-&gt;forAll(s | s.conformsTo(type)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Conforming_type(object diagnostics, object context)
        {
            System.Func<IAcceptEventAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAcceptEventAction, object, object, bool>>(_conforming_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method conforming_type registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _conforming_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _conforming_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _conforming_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConforming_typeOperation()
        {
            return ClassInstance.LookupOperation("conforming_type");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUnmarshallAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.AcceptEventAction.ClassInstance)).Resolve("isUnmarshall")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.AcceptEventAction.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Result", e, _resultReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTriggerReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.AcceptEventAction.ClassInstance)).Resolve("trigger")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Trigger property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TriggerCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Trigger", e, _triggerReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Trigger property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TriggerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Trigger", e, _triggerReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int resultIndex = ModelHelper.IndexOfReference(this.Result, element);
            if ((resultIndex != -1))
            {
                return ModelHelper.CreatePath("result", resultIndex);
            }
            int triggerIndex = ModelHelper.IndexOfReference(this.Trigger, element);
            if ((triggerIndex != -1))
            {
                return ModelHelper.CreatePath("trigger", triggerIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RESULT"))
            {
                if ((index < this.Result.Count))
                {
                    return this.Result[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "TRIGGER"))
            {
                if ((index < this.Trigger.Count))
                {
                    return this.Trigger[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISUNMARSHALL"))
            {
                return this.IsUnmarshall;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESULT"))
            {
                return this._result;
            }
            if ((feature == "TRIGGER"))
            {
                return this._trigger;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISUNMARSHALL"))
            {
                this.IsUnmarshall = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISUNMARSHALL"))
            {
                return Observable.Box(new IsUnmarshallProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._result))
            {
                return "result";
            }
            if ((container == this._trigger))
            {
                return "trigger";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//AcceptEventAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AcceptEventAction class
        /// </summary>
        public class AcceptEventActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AcceptEventAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AcceptEventActionChildrenCollection(AcceptEventAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Result.Count);
                    count = (count + this._parent.Trigger.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Trigger.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Trigger.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
                ITrigger triggerCasted = item.As<ITrigger>();
                if ((triggerCasted != null))
                {
                    this._parent.Trigger.Add(triggerCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Result.Clear();
                this._parent.Trigger.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                if (this._parent.Trigger.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
                IEnumerator<IModelElement> triggerEnumerator = this._parent.Trigger.GetEnumerator();
                try
                {
                    for (
                    ; triggerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = triggerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    triggerEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                ITrigger triggerItem = item.As<ITrigger>();
                if (((triggerItem != null) 
                            && this._parent.Trigger.Remove(triggerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Result).Concat(this._parent.Trigger).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AcceptEventAction class
        /// </summary>
        public class AcceptEventActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AcceptEventAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AcceptEventActionReferencedElementsCollection(AcceptEventAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Result.Count);
                    count = (count + this._parent.Trigger.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Trigger.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Trigger.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
                ITrigger triggerCasted = item.As<ITrigger>();
                if ((triggerCasted != null))
                {
                    this._parent.Trigger.Add(triggerCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Result.Clear();
                this._parent.Trigger.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                if (this._parent.Trigger.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
                IEnumerator<IModelElement> triggerEnumerator = this._parent.Trigger.GetEnumerator();
                try
                {
                    for (
                    ; triggerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = triggerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    triggerEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                ITrigger triggerItem = item.As<ITrigger>();
                if (((triggerItem != null) 
                            && this._parent.Trigger.Remove(triggerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Result).Concat(this._parent.Trigger).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnmarshall property
        /// </summary>
        private sealed class IsUnmarshallProxy : ModelPropertyChange<IAcceptEventAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUnmarshallProxy(IAcceptEventAction modelElement) : 
                    base(modelElement, "isUnmarshall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnmarshall;
                }
                set
                {
                    this.ModelElement.IsUnmarshall = value;
                }
            }
        }
    }
}
