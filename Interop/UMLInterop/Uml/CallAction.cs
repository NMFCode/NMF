//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// CallAction is an abstract class for Actions that invoke a Behavior with given argument values and (if the invocation is synchronous) receive reply values.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//CallAction")]
    [DebuggerDisplayAttribute("CallAction {Name}")]
    public abstract partial class CallAction : InvocationAction, ICallAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _argument_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveArgument_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _result_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveResult_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _synchronous_callOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSynchronous_callOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _inputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInputParametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _outputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutputParametersOperation);
        
        /// <summary>
        /// The backing field for the IsSynchronous property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isSynchronous = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isSynchronousAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsSynchronousAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOutputPin> _result;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public CallAction()
        {
            this._result = new ObservableCompositionOrderedSet<IOutputPin>(this);
            this._result.CollectionChanging += this.ResultCollectionChanging;
            this._result.CollectionChanged += this.ResultCollectionChanged;
        }
        
        /// <summary>
        /// If true, the call is synchronous and the caller waits for completion of the invoked Behavior. If false, the call is asynchronous and the caller proceeds immediately and cannot receive return values.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isSynchronous")]
        [DescriptionAttribute("If true, the call is synchronous and the caller waits for completion of the invok" +
            "ed Behavior. If false, the call is asynchronous and the caller proceeds immediat" +
            "ely and cannot receive return values.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("CallAction")]
        [XmlElementNameAttribute("isSynchronous")]
        [XmlAttributeAttribute(true)]
        public bool IsSynchronous
        {
            get
            {
                return this._isSynchronous;
            }
            set
            {
                if ((this._isSynchronous != value))
                {
                    bool old = this._isSynchronous;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsSynchronous", e, _isSynchronousAttribute);
                    this._isSynchronous = value;
                    this.OnPropertyChanged("IsSynchronous", e, _isSynchronousAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OutputPins on which the reply values from the invocation are placed (if the call is synchronous).
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOutputPin> Result
        {
            get
            {
                return this._result;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new CallActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CallActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//CallAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The number of argument InputPins must be the same as the number of input (in and inout) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each argument InputPin must be consistent with the corresponding input Parameter.
        ///let parameter: OrderedSet(Parameter) = self.inputParameters() in
        ///argument->size() = parameter->size() and
        ///Sequence{1..argument->size()}->forAll(i | 
        ///	argument->at(i).type.conformsTo(parameter->at(i).type) and 
        ///	argument->at(i).isOrdered = parameter->at(i).isOrdered and
        ///	argument->at(i).compatibleWith(parameter->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Argument_pins(object diagnostics, object context)
        {
            System.Func<ICallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICallAction, object, object, bool>>(_argument_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method argument_pins registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _argument_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _argument_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _argument_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveArgument_pinsOperation()
        {
            return ClassInstance.LookupOperation("argument_pins");
        }
        
        /// <summary>
        /// The number of result OutputPins must be the same as the number of output (inout, out and return) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.
        ///let parameter: OrderedSet(Parameter) = self.outputParameters() in
        ///result->size() = parameter->size() and
        ///Sequence{1..result->size()}->forAll(i | 
        ///	parameter->at(i).type.conformsTo(result->at(i).type) and 
        ///	parameter->at(i).isOrdered = result->at(i).isOrdered and
        ///	parameter->at(i).compatibleWith(result->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Result_pins(object diagnostics, object context)
        {
            System.Func<ICallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICallAction, object, object, bool>>(_result_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method result_pins registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _result_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _result_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _result_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveResult_pinsOperation()
        {
            return ClassInstance.LookupOperation("result_pins");
        }
        
        /// <summary>
        /// Only synchronous CallActions can have result OutputPins.
        ///result->notEmpty() implies isSynchronous
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Synchronous_call(object diagnostics, object context)
        {
            System.Func<ICallAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICallAction, object, object, bool>>(_synchronous_callOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method synchronous_call registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _synchronous_callOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _synchronous_callOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _synchronous_callOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSynchronous_callOperation()
        {
            return ClassInstance.LookupOperation("synchronous_call");
        }
        
        /// <summary>
        /// Return the in and inout ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> InputParameters()
        {
            System.Func<ICallAction, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICallAction, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_inputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method inputParameters registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _inputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _inputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _inputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInputParametersOperation()
        {
            return ClassInstance.LookupOperation("inputParameters");
        }
        
        /// <summary>
        /// Return the inout, out and return ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> OutputParameters()
        {
            System.Func<ICallAction, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICallAction, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_outputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method outputParameters registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _outputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _outputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _outputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutputParametersOperation()
        {
            return ClassInstance.LookupOperation("outputParameters");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsSynchronousAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.CallAction.ClassInstance)).Resolve("isSynchronous")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.CallAction.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int resultIndex = ModelHelper.IndexOfReference(this.Result, element);
            if ((resultIndex != -1))
            {
                return ModelHelper.CreatePath("result", resultIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RESULT"))
            {
                if ((index < this.Result.Count))
                {
                    return this.Result[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISSYNCHRONOUS"))
            {
                return this.IsSynchronous;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESULT"))
            {
                return this._result;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISSYNCHRONOUS"))
            {
                this.IsSynchronous = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISSYNCHRONOUS"))
            {
                return Observable.Box(new IsSynchronousProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._result))
            {
                return "result";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//CallAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CallAction class
        /// </summary>
        public class CallActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CallAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CallActionChildrenCollection(CallAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Result.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Result.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CallAction class
        /// </summary>
        public class CallActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CallAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CallActionReferencedElementsCollection(CallAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Result.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Result.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isSynchronous property
        /// </summary>
        private sealed class IsSynchronousProxy : ModelPropertyChange<ICallAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsSynchronousProxy(ICallAction modelElement) : 
                    base(modelElement, "isSynchronous")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsSynchronous;
                }
                set
                {
                    this.ModelElement.IsSynchronous = value;
                }
            }
        }
    }
}

