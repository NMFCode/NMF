//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for UnmarshallAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(UnmarshallAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(UnmarshallAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//UnmarshallAction")]
    public interface IUnmarshallAction : IModelElement, IAction
    {
        
        /// <summary>
        /// The InputPin that gives the object to be unmarshalled.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPin Object
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutputPins on which are placed the values of the StructuralFeatures of the input object.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IOutputPin> Result
        {
            get;
        }
        
        /// <summary>
        /// The type of the object to be unmarshalled.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("unmarshallType")]
        [DescriptionAttribute("The type of the object to be unmarshalled.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("UnmarshallAction")]
        [XmlElementNameAttribute("unmarshallType")]
        [XmlAttributeAttribute(true)]
        IClassifier UnmarshallType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The unmarshallType must have at least one StructuralFeature.
        ///unmarshallType.allAttributes()-&gt;size() &gt;= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Structural_feature(object diagnostics, object context);
        
        /// <summary>
        /// The number of result outputPins must be the same as the number of attributes of the unmarshallType.
        ///unmarshallType.allAttributes()-&gt;size() = result-&gt;size()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Number_of_result(object diagnostics, object context);
        
        /// <summary>
        /// The type, ordering and multiplicity of each attribute of the unmarshallType must be compatible with the type, ordering and multiplicity of the corresponding result OutputPin.
        ///let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in
        ///Sequence{1..result-&gt;size()}-&gt;forAll(i | 
        ///	attribute-&gt;at(i).type.conformsTo(result-&gt;at(i).type) and
        ///	attribute-&gt;at(i).isOrdered=result-&gt;at(i).isOrdered and
        ///	attribute-&gt;at(i).compatibleWith(result-&gt;at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Type_ordering_and_multiplicity(object diagnostics, object context);
        
        /// <summary>
        /// The multiplicity of the object InputPin is 1..1
        ///object.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Multiplicity_of_object(object diagnostics, object context);
        
        /// <summary>
        /// The type of the object InputPin conform to the unmarshallType.
        ///object.type.conformsTo(unmarshallType)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Object_type(object diagnostics, object context);
    }
}
