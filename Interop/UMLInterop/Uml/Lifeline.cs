//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Lifeline")]
    [DebuggerDisplayAttribute("Lifeline {Name}")]
    public partial class Lifeline : NamedElement, ILifeline, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _selector_specifiedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSelector_specifiedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _interaction_uses_share_lifelineOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInteraction_uses_share_lifelineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _same_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSame_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _selector_int_or_stringOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSelector_int_or_stringOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _decomposedAsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDecomposedAsReference);
        
        /// <summary>
        /// The backing field for the DecomposedAs property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPartDecomposition _decomposedAs;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interactionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInteractionReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _representsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRepresentsReference);
        
        /// <summary>
        /// The backing field for the Represents property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IConnectableElement _represents;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _selectorReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSelectorReference);
        
        /// <summary>
        /// The backing field for the Selector property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _selector;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _coveredByReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCoveredByReference);
        
        /// <summary>
        /// The backing field for the CoveredBy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private LifelineCoveredByCollection _coveredBy;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Lifeline()
        {
            this._coveredBy = new LifelineCoveredByCollection(this);
            this._coveredBy.CollectionChanging += this.CoveredByCollectionChanging;
            this._coveredBy.CollectionChanged += this.CoveredByCollectionChanged;
        }
        
        /// <summary>
        /// References the Interaction that represents the decomposition.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("decomposedAs")]
        [DescriptionAttribute("References the Interaction that represents the decomposition.\n<p>From package UML" +
            "::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("decomposedAs")]
        [XmlAttributeAttribute(true)]
        public IPartDecomposition DecomposedAs
        {
            get
            {
                return this._decomposedAs;
            }
            set
            {
                if ((this._decomposedAs != value))
                {
                    IPartDecomposition old = this._decomposedAs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("DecomposedAs", e, _decomposedAsReference);
                    this._decomposedAs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDecomposedAs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDecomposedAs;
                    }
                    this.OnPropertyChanged("DecomposedAs", e, _decomposedAsReference);
                }
            }
        }
        
        /// <summary>
        /// References the Interaction enclosing this Lifeline.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("interaction")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("lifeline")]
        public IInteraction Interaction
        {
            get
            {
                return ModelHelper.CastAs<IInteraction>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// References the ConnectableElement within the classifier that contains the enclosing interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("represents")]
        [DescriptionAttribute("References the ConnectableElement within the classifier that contains the enclosi" +
            "ng interaction.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("represents")]
        [XmlAttributeAttribute(true)]
        public IConnectableElement Represents
        {
            get
            {
                return this._represents;
            }
            set
            {
                if ((this._represents != value))
                {
                    IConnectableElement old = this._represents;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Represents", e, _representsReference);
                    this._represents = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRepresents;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRepresents;
                    }
                    this.OnPropertyChanged("Represents", e, _representsReference);
                }
            }
        }
        
        /// <summary>
        /// If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("selector")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Selector
        {
            get
            {
                return this._selector;
            }
            set
            {
                if ((this._selector != value))
                {
                    IValueSpecification old = this._selector;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Selector", e, _selectorReference);
                    this._selector = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetSelector;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSelector;
                    }
                    this.OnPropertyChanged("Selector", e, _selectorReference);
                }
            }
        }
        
        /// <summary>
        /// References the InteractionFragments in which this Lifeline takes part.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("coveredBy")]
        [DescriptionAttribute("References the InteractionFragments in which this Lifeline takes part.\n<p>From pa" +
            "ckage UML::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("coveredBy")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("covered")]
        [ConstantAttribute()]
        public ISetExpression<IInteractionFragment> CoveredBy
        {
            get
            {
                return this._coveredBy;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new LifelineChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LifelineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Lifeline")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The selector for a Lifeline must only be specified if the referenced Part is multivalued.
        /// self.selector-&gt;notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Selector_specified(object diagnostics, object context)
        {
            System.Func<ILifeline, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILifeline, object, object, bool>>(_selector_specifiedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method selector_specified registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _selector_specifiedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _selector_specifiedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _selector_specifiedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSelector_specifiedOperation()
        {
            return ClassInstance.LookupOperation("selector_specified");
        }
        
        /// <summary>
        /// If a lifeline is in an Interaction referred to by an InteractionUse in an enclosing Interaction,  and that lifeline is common with another lifeline in an Interaction referred to by another InteractonUse within that same enclosing Interaction, it must be common to a lifeline within that enclosing Interaction. By common Lifelines we mean Lifelines with the same selector and represents associations.
        ///let intUses : Set(InteractionUse) = interaction.interactionUse  in 
        ///intUses-&gt;forAll
        ///( iuse : InteractionUse | 
        ///let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction-&gt;asSet()
        ///-&gt;union(
        ///iuse.enclosingOperand.combinedFragment-&gt;asSet()-&gt;closure(enclosingOperand.combinedFragment).enclosingInteraction-&gt;asSet()
        ///               ) 
        ///in
        ///let peerUses : Set(InteractionUse) = usingInteraction.fragment-&gt;select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)-&gt;asSet()
        ///-&gt;union(
        ///usingInteraction.fragment-&gt;select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)-&gt;asSet()
        ///-&gt;closure(operand.fragment-&gt;select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment-&gt;
        ///select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)-&gt;asSet()
        ///               )-&gt;excluding(iuse)
        /// in
        ///peerUses-&gt;forAll( peerUse : InteractionUse |
        /// peerUse.refersTo.lifeline-&gt;forAll( l : Lifeline | (l.represents = self.represents and 
        /// ( self.selector.oclIsKindOf(LiteralString) implies
        ///  l.selector.oclIsKindOf(LiteralString) and 
        ///  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
        ///  and 
        ///( self.selector.oclIsKindOf(LiteralInteger) implies
        ///  l.selector.oclIsKindOf(LiteralInteger) and 
        ///  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
        ///)  
        ///implies
        /// usingInteraction.lifeline-&gt;exists(represents = self.represents and
        /// ( self.selector.oclIsKindOf(LiteralString) implies
        ///  l.selector.oclIsKindOf(LiteralString) and 
        ///  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
        ///and 
        ///( self.selector.oclIsKindOf(LiteralInteger) implies
        ///  l.selector.oclIsKindOf(LiteralInteger) and 
        ///  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
        ///)
        ///                                                )
        ///                    )
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Interaction_uses_share_lifeline(object diagnostics, object context)
        {
            System.Func<ILifeline, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILifeline, object, object, bool>>(_interaction_uses_share_lifelineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method interaction_uses_share_lifeline registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _interaction_uses_share_lifelineOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _interaction_uses_share_lifelineOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _interaction_uses_share_lifelineOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInteraction_uses_share_lifelineOperation()
        {
            return ClassInstance.LookupOperation("interaction_uses_share_lifeline");
        }
        
        /// <summary>
        /// The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.
        ///represents.namespace-&gt;closure(namespace)-&gt;includes(interaction._&apos;context&apos;)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Same_classifier(object diagnostics, object context)
        {
            System.Func<ILifeline, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILifeline, object, object, bool>>(_same_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method same_classifier registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _same_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _same_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _same_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSame_classifierOperation()
        {
            return ClassInstance.LookupOperation("same_classifier");
        }
        
        /// <summary>
        /// The selector value, if present, must be a LiteralString or a LiteralInteger
        ///self.selector-&gt;notEmpty() implies 
        ///self.selector.oclIsKindOf(LiteralInteger) or 
        ///self.selector.oclIsKindOf(LiteralString)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Selector_int_or_string(object diagnostics, object context)
        {
            System.Func<ILifeline, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILifeline, object, object, bool>>(_selector_int_or_stringOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method selector_int_or_string registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _selector_int_or_stringOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _selector_int_or_stringOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _selector_int_or_stringOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSelector_int_or_stringOperation()
        {
            return ClassInstance.LookupOperation("selector_int_or_string");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDecomposedAsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Lifeline.ClassInstance)).Resolve("decomposedAs")));
        }
        
        /// <summary>
        /// Handles the event that the DecomposedAs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDecomposedAs(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.DecomposedAs))
            {
                this.DecomposedAs = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInteractionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Lifeline.ClassInstance)).Resolve("interaction")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IInteraction oldInteraction = ModelHelper.CastAs<IInteraction>(oldParent);
            IInteraction newInteraction = ModelHelper.CastAs<IInteraction>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInteraction, newInteraction);
            this.OnPropertyChanging("Interaction", e, _interactionReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IInteraction oldInteraction = ModelHelper.CastAs<IInteraction>(oldParent);
            IInteraction newInteraction = ModelHelper.CastAs<IInteraction>(newParent);
            if ((oldInteraction != null))
            {
                oldInteraction.Lifeline.Remove(this);
            }
            if ((newInteraction != null))
            {
                newInteraction.Lifeline.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInteraction, newInteraction);
            this.OnPropertyChanged("Interaction", e, _interactionReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRepresentsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Lifeline.ClassInstance)).Resolve("represents")));
        }
        
        /// <summary>
        /// Handles the event that the Represents property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRepresents(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Represents))
            {
                this.Represents = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSelectorReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Lifeline.ClassInstance)).Resolve("selector")));
        }
        
        /// <summary>
        /// Handles the event that the Selector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSelector(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Selector))
            {
                this.Selector = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCoveredByReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Lifeline.ClassInstance)).Resolve("coveredBy")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CoveredBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredByCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CoveredBy", e, _coveredByReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CoveredBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredByCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CoveredBy", e, _coveredByReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Selector))
            {
                return ModelHelper.CreatePath("selector");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DECOMPOSEDAS"))
            {
                return this.DecomposedAs;
            }
            if ((reference == "INTERACTION"))
            {
                return this.Interaction;
            }
            if ((reference == "REPRESENTS"))
            {
                return this.Represents;
            }
            if ((reference == "SELECTOR"))
            {
                return this.Selector;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COVEREDBY"))
            {
                return this._coveredBy;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DECOMPOSEDAS"))
            {
                this.DecomposedAs = ((IPartDecomposition)(value));
                return;
            }
            if ((feature == "INTERACTION"))
            {
                this.Interaction = ((IInteraction)(value));
                return;
            }
            if ((feature == "REPRESENTS"))
            {
                this.Represents = ((IConnectableElement)(value));
                return;
            }
            if ((feature == "SELECTOR"))
            {
                this.Selector = ((IValueSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DECOMPOSEDAS"))
            {
                return new DecomposedAsProxy(this);
            }
            if ((reference == "INTERACTION"))
            {
                return new InteractionProxy(this);
            }
            if ((reference == "REPRESENTS"))
            {
                return new RepresentsProxy(this);
            }
            if ((reference == "SELECTOR"))
            {
                return new SelectorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Lifeline")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Lifeline class
        /// </summary>
        public class LifelineChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Lifeline _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LifelineChildrenCollection(Lifeline parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Selector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Selector == null))
                {
                    IValueSpecification selectorCasted = item.As<IValueSpecification>();
                    if ((selectorCasted != null))
                    {
                        this._parent.Selector = selectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Selector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Selector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Selector != null))
                {
                    array[arrayIndex] = this._parent.Selector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Selector == item))
                {
                    this._parent.Selector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Selector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Lifeline class
        /// </summary>
        public class LifelineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Lifeline _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LifelineReferencedElementsCollection(Lifeline parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DecomposedAs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Interaction != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Represents != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Selector != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CoveredBy.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.CoveredBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.CoveredBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DecomposedAs == null))
                {
                    IPartDecomposition decomposedAsCasted = item.As<IPartDecomposition>();
                    if ((decomposedAsCasted != null))
                    {
                        this._parent.DecomposedAs = decomposedAsCasted;
                        return;
                    }
                }
                if ((this._parent.Interaction == null))
                {
                    IInteraction interactionCasted = item.As<IInteraction>();
                    if ((interactionCasted != null))
                    {
                        this._parent.Interaction = interactionCasted;
                        return;
                    }
                }
                if ((this._parent.Represents == null))
                {
                    IConnectableElement representsCasted = item.As<IConnectableElement>();
                    if ((representsCasted != null))
                    {
                        this._parent.Represents = representsCasted;
                        return;
                    }
                }
                if ((this._parent.Selector == null))
                {
                    IValueSpecification selectorCasted = item.As<IValueSpecification>();
                    if ((selectorCasted != null))
                    {
                        this._parent.Selector = selectorCasted;
                        return;
                    }
                }
                IInteractionFragment coveredByCasted = item.As<IInteractionFragment>();
                if ((coveredByCasted != null))
                {
                    this._parent.CoveredBy.Add(coveredByCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DecomposedAs = null;
                this._parent.Interaction = null;
                this._parent.Represents = null;
                this._parent.Selector = null;
                this._parent.CoveredBy.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DecomposedAs))
                {
                    return true;
                }
                if ((item == this._parent.Interaction))
                {
                    return true;
                }
                if ((item == this._parent.Represents))
                {
                    return true;
                }
                if ((item == this._parent.Selector))
                {
                    return true;
                }
                if (this._parent.CoveredBy.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DecomposedAs != null))
                {
                    array[arrayIndex] = this._parent.DecomposedAs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Interaction != null))
                {
                    array[arrayIndex] = this._parent.Interaction;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Represents != null))
                {
                    array[arrayIndex] = this._parent.Represents;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Selector != null))
                {
                    array[arrayIndex] = this._parent.Selector;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> coveredByEnumerator = this._parent.CoveredBy.GetEnumerator();
                try
                {
                    for (
                    ; coveredByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = coveredByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    coveredByEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DecomposedAs == item))
                {
                    this._parent.DecomposedAs = null;
                    return true;
                }
                if ((this._parent.Interaction == item))
                {
                    this._parent.Interaction = null;
                    return true;
                }
                if ((this._parent.Represents == item))
                {
                    this._parent.Represents = null;
                    return true;
                }
                if ((this._parent.Selector == item))
                {
                    this._parent.Selector = null;
                    return true;
                }
                IInteractionFragment interactionFragmentItem = item.As<IInteractionFragment>();
                if (((interactionFragmentItem != null) 
                            && this._parent.CoveredBy.Remove(interactionFragmentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DecomposedAs).Concat(this._parent.Interaction).Concat(this._parent.Represents).Concat(this._parent.Selector).Concat(this._parent.CoveredBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the decomposedAs property
        /// </summary>
        private sealed class DecomposedAsProxy : ModelPropertyChange<ILifeline, IPartDecomposition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DecomposedAsProxy(ILifeline modelElement) : 
                    base(modelElement, "decomposedAs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPartDecomposition Value
            {
                get
                {
                    return this.ModelElement.DecomposedAs;
                }
                set
                {
                    this.ModelElement.DecomposedAs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interaction property
        /// </summary>
        private sealed class InteractionProxy : ModelPropertyChange<ILifeline, IInteraction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InteractionProxy(ILifeline modelElement) : 
                    base(modelElement, "interaction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteraction Value
            {
                get
                {
                    return this.ModelElement.Interaction;
                }
                set
                {
                    this.ModelElement.Interaction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the represents property
        /// </summary>
        private sealed class RepresentsProxy : ModelPropertyChange<ILifeline, IConnectableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepresentsProxy(ILifeline modelElement) : 
                    base(modelElement, "represents")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectableElement Value
            {
                get
                {
                    return this.ModelElement.Represents;
                }
                set
                {
                    this.ModelElement.Represents = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the selector property
        /// </summary>
        private sealed class SelectorProxy : ModelPropertyChange<ILifeline, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SelectorProxy(ILifeline modelElement) : 
                    base(modelElement, "selector")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Selector;
                }
                set
                {
                    this.ModelElement.Selector = value;
                }
            }
        }
    }
}
