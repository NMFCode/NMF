//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Generalization is a taxonomic relationship between a more general Classifier and a more specific Classifier. Each instance of the specific Classifier is also an instance of the general Classifier. The specific Classifier inherits the features of the more general Classifier. A Generalization is owned by the specific Classifier.
    ///<p>From package UML::Classification.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Generalization")]
    public partial class Generalization : DirectedRelationship, IGeneralization, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsSubstitutable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isSubstitutable = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isSubstitutableAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsSubstitutableAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralReference);
        
        /// <summary>
        /// The backing field for the General property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassifier _general;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalizationSetReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralizationSetReference);
        
        /// <summary>
        /// The backing field for the GeneralizationSet property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private GeneralizationGeneralizationSetCollection _generalizationSet;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _specificReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSpecificReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Generalization()
        {
            this._generalizationSet = new GeneralizationGeneralizationSetCollection(this);
            this._generalizationSet.CollectionChanging += this.GeneralizationSetCollectionChanging;
            this._generalizationSet.CollectionChanged += this.GeneralizationSetCollectionChanged;
        }
        
        /// <summary>
        /// Indicates whether the specific Classifier can be used wherever the general Classifier can be used. If true, the execution traces of the specific Classifier shall be a superset of the execution traces of the general Classifier. If false, there is no such constraint on execution traces. If unset, the modeler has not stated whether there is such a constraint or not.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [DisplayNameAttribute("isSubstitutable")]
        [DescriptionAttribute(@"Indicates whether the specific Classifier can be used wherever the general Classifier can be used. If true, the execution traces of the specific Classifier shall be a superset of the execution traces of the general Classifier. If false, there is no such constraint on execution traces. If unset, the modeler has not stated whether there is such a constraint or not.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Generalization")]
        [XmlElementNameAttribute("isSubstitutable")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsSubstitutable
        {
            get
            {
                return this._isSubstitutable;
            }
            set
            {
                if ((this._isSubstitutable != value))
                {
                    Nullable<bool> old = this._isSubstitutable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsSubstitutable", e, _isSubstitutableAttribute);
                    this._isSubstitutable = value;
                    this.OnPropertyChanged("IsSubstitutable", e, _isSubstitutableAttribute);
                }
            }
        }
        
        /// <summary>
        /// The general classifier in the Generalization relationship.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("general")]
        [DescriptionAttribute("The general classifier in the Generalization relationship.\n<p>From package UML::C" +
            "lassification.</p>")]
        [CategoryAttribute("Generalization")]
        [XmlElementNameAttribute("general")]
        [XmlAttributeAttribute(true)]
        public IClassifier General
        {
            get
            {
                return this._general;
            }
            set
            {
                if ((this._general != value))
                {
                    IClassifier old = this._general;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("General", e, _generalReference);
                    this._general = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGeneral;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGeneral;
                    }
                    this.OnPropertyChanged("General", e, _generalReference);
                }
            }
        }
        
        /// <summary>
        /// Represents a set of instances of Generalization.  A Generalization may appear in many GeneralizationSets.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("generalizationSet")]
        [DescriptionAttribute("Represents a set of instances of Generalization.  A Generalization may appear in " +
            "many GeneralizationSets.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Generalization")]
        [XmlElementNameAttribute("generalizationSet")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("generalization")]
        [ConstantAttribute()]
        public ISetExpression<IGeneralizationSet> GeneralizationSet
        {
            get
            {
                return this._generalizationSet;
            }
        }
        
        /// <summary>
        /// The specializing Classifier in the Generalization relationship.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("specific")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("generalization")]
        public IClassifier Specific
        {
            get
            {
                return ModelHelper.CastAs<IClassifier>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GeneralizationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Generalization")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsSubstitutableAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Generalization.ClassInstance)).Resolve("isSubstitutable")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Generalization.ClassInstance)).Resolve("general")));
        }
        
        /// <summary>
        /// Handles the event that the General property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGeneral(object sender, System.EventArgs eventArgs)
        {
            this.General = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralizationSetReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Generalization.ClassInstance)).Resolve("generalizationSet")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneralizationSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralizationSetCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GeneralizationSet", e, _generalizationSetReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneralizationSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralizationSetCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneralizationSet", e, _generalizationSetReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSpecificReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Generalization.ClassInstance)).Resolve("specific")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IClassifier oldSpecific = ModelHelper.CastAs<IClassifier>(oldParent);
            IClassifier newSpecific = ModelHelper.CastAs<IClassifier>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecific, newSpecific);
            this.OnPropertyChanging("Specific", e, _specificReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IClassifier oldSpecific = ModelHelper.CastAs<IClassifier>(oldParent);
            IClassifier newSpecific = ModelHelper.CastAs<IClassifier>(newParent);
            if ((oldSpecific != null))
            {
                oldSpecific.Generalization.Remove(this);
            }
            if ((newSpecific != null))
            {
                newSpecific.Generalization.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecific, newSpecific);
            this.OnPropertyChanged("Specific", e, _specificReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "GENERAL"))
            {
                return this.General;
            }
            if ((reference == "SPECIFIC"))
            {
                return this.Specific;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISSUBSTITUTABLE"))
            {
                return this.IsSubstitutable;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GENERALIZATIONSET"))
            {
                return this._generalizationSet;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERAL"))
            {
                this.General = ((IClassifier)(value));
                return;
            }
            if ((feature == "SPECIFIC"))
            {
                this.Specific = ((IClassifier)(value));
                return;
            }
            if ((feature == "ISSUBSTITUTABLE"))
            {
                this.IsSubstitutable = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISSUBSTITUTABLE"))
            {
                return Observable.Box(new IsSubstitutableProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GENERAL"))
            {
                return new GeneralProxy(this);
            }
            if ((reference == "SPECIFIC"))
            {
                return new SpecificProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Generalization")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Generalization class
        /// </summary>
        public class GeneralizationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Generalization _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GeneralizationReferencedElementsCollection(Generalization parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.General != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneralizationSet.Count);
                    if ((this._parent.Specific != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.GeneralizationSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.GeneralizationSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.General == null))
                {
                    IClassifier generalCasted = item.As<IClassifier>();
                    if ((generalCasted != null))
                    {
                        this._parent.General = generalCasted;
                        return;
                    }
                }
                IGeneralizationSet generalizationSetCasted = item.As<IGeneralizationSet>();
                if ((generalizationSetCasted != null))
                {
                    this._parent.GeneralizationSet.Add(generalizationSetCasted);
                }
                if ((this._parent.Specific == null))
                {
                    IClassifier specificCasted = item.As<IClassifier>();
                    if ((specificCasted != null))
                    {
                        this._parent.Specific = specificCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.General = null;
                this._parent.GeneralizationSet.Clear();
                this._parent.Specific = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.General))
                {
                    return true;
                }
                if (this._parent.GeneralizationSet.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Specific))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.General != null))
                {
                    array[arrayIndex] = this._parent.General;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generalizationSetEnumerator = this._parent.GeneralizationSet.GetEnumerator();
                try
                {
                    for (
                    ; generalizationSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generalizationSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generalizationSetEnumerator.Dispose();
                }
                if ((this._parent.Specific != null))
                {
                    array[arrayIndex] = this._parent.Specific;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.General == item))
                {
                    this._parent.General = null;
                    return true;
                }
                IGeneralizationSet generalizationSetItem = item.As<IGeneralizationSet>();
                if (((generalizationSetItem != null) 
                            && this._parent.GeneralizationSet.Remove(generalizationSetItem)))
                {
                    return true;
                }
                if ((this._parent.Specific == item))
                {
                    this._parent.Specific = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.General).Concat(this._parent.GeneralizationSet).Concat(this._parent.Specific).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isSubstitutable property
        /// </summary>
        private sealed class IsSubstitutableProxy : ModelPropertyChange<IGeneralization, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsSubstitutableProxy(IGeneralization modelElement) : 
                    base(modelElement, "isSubstitutable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsSubstitutable;
                }
                set
                {
                    this.ModelElement.IsSubstitutable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the general property
        /// </summary>
        private sealed class GeneralProxy : ModelPropertyChange<IGeneralization, IClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneralProxy(IGeneralization modelElement) : 
                    base(modelElement, "general")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassifier Value
            {
                get
                {
                    return this.ModelElement.General;
                }
                set
                {
                    this.ModelElement.General = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specific property
        /// </summary>
        private sealed class SpecificProxy : ModelPropertyChange<IGeneralization, IClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecificProxy(IGeneralization modelElement) : 
                    base(modelElement, "specific")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassifier Value
            {
                get
                {
                    return this.ModelElement.Specific;
                }
                set
                {
                    this.ModelElement.Specific = value;
                }
            }
        }
    }
}

