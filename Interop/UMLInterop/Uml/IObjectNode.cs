//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ObjectNode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ObjectNode))]
    [XmlDefaultImplementationTypeAttribute(typeof(ObjectNode))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectNode")]
    public interface IObjectNode : IModelElement, NMF.Interop.Uml.ITypedElement, IActivityNode
    {
        
        /// <summary>
        /// Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isControlType")]
        [DescriptionAttribute("Indicates whether the type of the ObjectNode is to be treated as representing con" +
            "trol values that may traverse ControlFlows.\n<p>From package UML::Activities.</p>" +
            "")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("isControlType")]
        [XmlAttributeAttribute(true)]
        bool IsControlType
        {
            get;
            set;
        }
        
        /// <summary>
        /// Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(ObjectNodeOrderingKind.FIFO)]
        [DisplayNameAttribute("ordering")]
        [DescriptionAttribute("Indicates how the tokens held by the ObjectNode are ordered for selection to trav" +
            "erse ActivityEdges outgoing from the ObjectNode.\n<p>From package UML::Activities" +
            ".</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("ordering")]
        [XmlAttributeAttribute(true)]
        ObjectNodeOrderingKind Ordering
        {
            get;
            set;
        }
        
        /// <summary>
        /// The States required to be associated with the values held by tokens on this ObjectNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inState")]
        [DescriptionAttribute("The States required to be associated with the values held by tokens on this Objec" +
            "tNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("inState")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IState> InState
        {
            get;
        }
        
        /// <summary>
        /// A Behavior used to select tokens to be offered on outgoing ActivityEdges.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("selection")]
        [DescriptionAttribute("A Behavior used to select tokens to be offered on outgoing ActivityEdges.\n<p>From" +
            " package UML::Activities.</p>")]
        [CategoryAttribute("ObjectNode")]
        [XmlElementNameAttribute("selection")]
        [XmlAttributeAttribute(true)]
        IBehavior Selection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("upperBound")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification UpperBound
        {
            get;
            set;
        }
        
        /// <summary>
        /// A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same type as  or a supertype of the type of ObjectNode, be non-unique, and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of ObjectNode. The Behavior cannot have side effects.
        ///selection&lt;&gt;null implies
        ///	selection.inputParameters()-&gt;size()=1 and
        ///	selection.inputParameters()-&gt;forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and
        ///	selection.outputParameters()-&gt;size()=1 and
        ///		selection.inputParameters()-&gt;forAll(p | self.type.conformsTo(p.type))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Input_output_parameter(object diagnostics, object context);
        
        /// <summary>
        /// If an ObjectNode has a selection Behavior, then the ordering of the object node is ordered, and vice versa.
        ///(selection&lt;&gt;null) = (ordering=ObjectNodeOrderingKind::ordered)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Selection_behavior(object diagnostics, object context);
        
        /// <summary>
        /// If isControlType=false, the ActivityEdges incoming to or outgoing from an ObjectNode must all be ObjectFlows.
        ///(not isControlType) implies incoming-&gt;union(outgoing)-&gt;forAll(oclIsKindOf(ObjectFlow))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Object_flow_edges(object diagnostics, object context);
    }
}
