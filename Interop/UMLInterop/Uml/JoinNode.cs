//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A JoinNode is a ControlNode that synchronizes multiple flows.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//JoinNode")]
    [DebuggerDisplayAttribute("JoinNode {Name}")]
    public partial class JoinNode : ControlNode, IJoinNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_outgoing_edgeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_outgoing_edgeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _incoming_object_flowOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncoming_object_flowOperation);
        
        /// <summary>
        /// The backing field for the IsCombineDuplicate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isCombineDuplicate = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isCombineDuplicateAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsCombineDuplicateAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _joinSpecReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveJoinSpecReference);
        
        /// <summary>
        /// The backing field for the JoinSpec property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _joinSpec;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Indicates whether incoming tokens having objects with the same identity are combined into one by the JoinNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isCombineDuplicate")]
        [DescriptionAttribute("Indicates whether incoming tokens having objects with the same identity are combi" +
            "ned into one by the JoinNode.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("JoinNode")]
        [XmlElementNameAttribute("isCombineDuplicate")]
        [XmlAttributeAttribute(true)]
        public bool IsCombineDuplicate
        {
            get
            {
                return this._isCombineDuplicate;
            }
            set
            {
                if ((this._isCombineDuplicate != value))
                {
                    bool old = this._isCombineDuplicate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsCombineDuplicate", e, _isCombineDuplicateAttribute);
                    this._isCombineDuplicate = value;
                    this.OnPropertyChanged("IsCombineDuplicate", e, _isCombineDuplicateAttribute);
                }
            }
        }
        
        /// <summary>
        /// A ValueSpecification giving the condition under which the JoinNode will offer a token on its outgoing ActivityEdge. If no joinSpec is specified, then the JoinNode will offer an outgoing token if tokens are offered on all of its incoming ActivityEdges (an "and" condition).
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("joinSpec")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification JoinSpec
        {
            get
            {
                return this._joinSpec;
            }
            set
            {
                if ((this._joinSpec != value))
                {
                    IValueSpecification old = this._joinSpec;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("JoinSpec", e, _joinSpecReference);
                    this._joinSpec = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetJoinSpec;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetJoinSpec;
                    }
                    this.OnPropertyChanged("JoinSpec", e, _joinSpecReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new JoinNodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new JoinNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//JoinNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A JoinNode has one outgoing ActivityEdge.
        ///outgoing->size() = 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_outgoing_edge(object diagnostics, object context)
        {
            System.Func<IJoinNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IJoinNode, object, object, bool>>(_one_outgoing_edgeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_outgoing_edge registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_outgoing_edgeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_outgoing_edgeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_outgoing_edgeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_outgoing_edgeOperation()
        {
            return ClassInstance.LookupOperation("one_outgoing_edge");
        }
        
        /// <summary>
        /// If one of the incoming ActivityEdges of a JoinNode is an ObjectFlow, then its outgoing ActivityEdge must be an ObjectFlow. Otherwise its outgoing ActivityEdge must be a ControlFlow.
        ///if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))
        ///else outgoing->forAll(oclIsKindOf(ControlFlow))
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Incoming_object_flow(object diagnostics, object context)
        {
            System.Func<IJoinNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IJoinNode, object, object, bool>>(_incoming_object_flowOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method incoming_object_flow registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _incoming_object_flowOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _incoming_object_flowOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _incoming_object_flowOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncoming_object_flowOperation()
        {
            return ClassInstance.LookupOperation("incoming_object_flow");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsCombineDuplicateAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.JoinNode.ClassInstance)).Resolve("isCombineDuplicate")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveJoinSpecReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.JoinNode.ClassInstance)).Resolve("joinSpec")));
        }
        
        /// <summary>
        /// Handles the event that the JoinSpec property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetJoinSpec(object sender, System.EventArgs eventArgs)
        {
            this.JoinSpec = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.JoinSpec))
            {
                return ModelHelper.CreatePath("joinSpec");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "JOINSPEC"))
            {
                return this.JoinSpec;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISCOMBINEDUPLICATE"))
            {
                return this.IsCombineDuplicate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "JOINSPEC"))
            {
                this.JoinSpec = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "ISCOMBINEDUPLICATE"))
            {
                this.IsCombineDuplicate = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISCOMBINEDUPLICATE"))
            {
                return Observable.Box(new IsCombineDuplicateProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "JOINSPEC"))
            {
                return new JoinSpecProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//JoinNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the JoinNode class
        /// </summary>
        public class JoinNodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private JoinNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JoinNodeChildrenCollection(JoinNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.JoinSpec != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.JoinSpec == null))
                {
                    IValueSpecification joinSpecCasted = item.As<IValueSpecification>();
                    if ((joinSpecCasted != null))
                    {
                        this._parent.JoinSpec = joinSpecCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.JoinSpec = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.JoinSpec))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.JoinSpec != null))
                {
                    array[arrayIndex] = this._parent.JoinSpec;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.JoinSpec == item))
                {
                    this._parent.JoinSpec = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.JoinSpec).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the JoinNode class
        /// </summary>
        public class JoinNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private JoinNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JoinNodeReferencedElementsCollection(JoinNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.JoinSpec != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.JoinSpec == null))
                {
                    IValueSpecification joinSpecCasted = item.As<IValueSpecification>();
                    if ((joinSpecCasted != null))
                    {
                        this._parent.JoinSpec = joinSpecCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.JoinSpec = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.JoinSpec))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.JoinSpec != null))
                {
                    array[arrayIndex] = this._parent.JoinSpec;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.JoinSpec == item))
                {
                    this._parent.JoinSpec = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.JoinSpec).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isCombineDuplicate property
        /// </summary>
        private sealed class IsCombineDuplicateProxy : ModelPropertyChange<IJoinNode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsCombineDuplicateProxy(IJoinNode modelElement) : 
                    base(modelElement, "isCombineDuplicate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsCombineDuplicate;
                }
                set
                {
                    this.ModelElement.IsCombineDuplicate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the joinSpec property
        /// </summary>
        private sealed class JoinSpecProxy : ModelPropertyChange<IJoinNode, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public JoinSpecProxy(IJoinNode modelElement) : 
                    base(modelElement, "joinSpec")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.JoinSpec;
                }
                set
                {
                    this.ModelElement.JoinSpec = value;
                }
            }
        }
    }
}

