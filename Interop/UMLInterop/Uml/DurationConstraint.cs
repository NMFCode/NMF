//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A DurationConstraint is a Constraint that refers to a DurationInterval.
    ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//DurationConstraint")]
    [DebuggerDisplayAttribute("DurationConstraint {Name}")]
    public partial class DurationConstraint : IntervalConstraint, IDurationConstraint, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _first_event_multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveFirst_event_multiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_one_or_two_constrainedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_one_or_two_constrainedElementsOperation);
        
        /// <summary>
        /// The backing field for the FirstEvent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableSet<bool> _firstEvent;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _firstEventAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFirstEventAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public DurationConstraint()
        {
            this._firstEvent = new ObservableSet<bool>();
            this._firstEvent.CollectionChanging += this.FirstEventCollectionChanging;
            this._firstEvent.CollectionChanged += this.FirstEventCollectionChanged;
        }
        
        /// <summary>
        /// The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i].
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        [UpperBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("firstEvent")]
        [DescriptionAttribute(@"The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i].
<p>From package UML::Values.</p>")]
        [CategoryAttribute("DurationConstraint")]
        [XmlElementNameAttribute("firstEvent")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<bool> FirstEvent
        {
            get
            {
                return this._firstEvent;
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DurationConstraint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.
        ///if (constrainedElement-&gt;size() = 2)
        ///  then (firstEvent-&gt;size() = 2) else (firstEvent-&gt;size() = 0) 
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool First_event_multiplicity(object diagnostics, object context)
        {
            System.Func<IDurationConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDurationConstraint, object, object, bool>>(_first_event_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method first_event_multiplicity registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _first_event_multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _first_event_multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _first_event_multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveFirst_event_multiplicityOperation()
        {
            return ClassInstance.LookupOperation("first_event_multiplicity");
        }
        
        /// <summary>
        /// A DurationConstraint has either one or two constrainedElements.
        ///constrainedElement-&gt;size() = 1 or constrainedElement-&gt;size()=2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_one_or_two_constrainedElements(object diagnostics, object context)
        {
            System.Func<IDurationConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDurationConstraint, object, object, bool>>(_has_one_or_two_constrainedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_one_or_two_constrainedElements register" +
                        "ed. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_one_or_two_constrainedElementsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_one_or_two_constrainedElementsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_one_or_two_constrainedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_one_or_two_constrainedElementsOperation()
        {
            return ClassInstance.LookupOperation("has_one_or_two_constrainedElements");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFirstEventAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DurationConstraint.ClassInstance)).Resolve("firstEvent")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FirstEvent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FirstEventCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FirstEvent", e, _firstEventAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FirstEvent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FirstEventCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FirstEvent", e, _firstEventAttribute);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FIRSTEVENT"))
            {
                return this._firstEvent;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//DurationConstraint")));
            }
            return _classInstance;
        }
    }
}
