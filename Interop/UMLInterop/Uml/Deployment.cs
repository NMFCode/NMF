//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A deployment is the allocation of an artifact or artifact instance to a deployment target.
    ///A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.
    ///<p>From package UML::Deployments.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Deployment")]
    [DebuggerDisplayAttribute("Deployment {Name}")]
    public partial class Deployment : Dependency, IDeployment, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _configurationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConfigurationReference);
        
        /// <summary>
        /// The backing field for the Configuration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private DeploymentConfigurationCollection _configuration;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _deployedArtifactReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeployedArtifactReference);
        
        /// <summary>
        /// The backing field for the DeployedArtifact property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IDeployedArtifact> _deployedArtifact;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _locationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLocationReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Deployment()
        {
            this._configuration = new DeploymentConfigurationCollection(this);
            this._configuration.CollectionChanging += this.ConfigurationCollectionChanging;
            this._configuration.CollectionChanged += this.ConfigurationCollectionChanged;
            this._deployedArtifact = new ObservableAssociationSet<IDeployedArtifact>();
            this._deployedArtifact.CollectionChanging += this.DeployedArtifactCollectionChanging;
            this._deployedArtifact.CollectionChanged += this.DeployedArtifactCollectionChanged;
        }
        
        /// <summary>
        /// The specification of properties that parameterize the deployment and execution of one or more Artifacts.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("configuration")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("deployment")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IDeploymentSpecification> Configuration
        {
            get
            {
                return this._configuration;
            }
        }
        
        /// <summary>
        /// The Artifacts that are deployed onto a Node. This association specializes the supplier association.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("deployedArtifact")]
        [DescriptionAttribute("The Artifacts that are deployed onto a Node. This association specializes the sup" +
            "plier association.\n<p>From package UML::Deployments.</p>")]
        [CategoryAttribute("Deployment")]
        [XmlElementNameAttribute("deployedArtifact")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IDeployedArtifact> DeployedArtifact
        {
            get
            {
                return this._deployedArtifact;
            }
        }
        
        /// <summary>
        /// The DeployedTarget which is the target of a Deployment.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("location")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("deployment")]
        public IDeploymentTarget Location
        {
            get
            {
                return ModelHelper.CastAs<IDeploymentTarget>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new DeploymentChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DeploymentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Deployment")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConfigurationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Deployment.ClassInstance)).Resolve("configuration")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Configuration property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigurationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Configuration", e, _configurationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Configuration property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigurationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Configuration", e, _configurationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeployedArtifactReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Deployment.ClassInstance)).Resolve("deployedArtifact")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DeployedArtifact property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeployedArtifactCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DeployedArtifact", e, _deployedArtifactReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DeployedArtifact property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeployedArtifactCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DeployedArtifact", e, _deployedArtifactReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLocationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Deployment.ClassInstance)).Resolve("location")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IDeploymentTarget oldLocation = ModelHelper.CastAs<IDeploymentTarget>(oldParent);
            IDeploymentTarget newLocation = ModelHelper.CastAs<IDeploymentTarget>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldLocation, newLocation);
            this.OnPropertyChanging("Location", e, _locationReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IDeploymentTarget oldLocation = ModelHelper.CastAs<IDeploymentTarget>(oldParent);
            IDeploymentTarget newLocation = ModelHelper.CastAs<IDeploymentTarget>(newParent);
            if ((oldLocation != null))
            {
                oldLocation.Deployment.Remove(this);
            }
            if ((newLocation != null))
            {
                newLocation.Deployment.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldLocation, newLocation);
            this.OnPropertyChanged("Location", e, _locationReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int configurationIndex = ModelHelper.IndexOfReference(this.Configuration, element);
            if ((configurationIndex != -1))
            {
                return ModelHelper.CreatePath("configuration", configurationIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONFIGURATION"))
            {
                if ((index < this.Configuration.Count))
                {
                    return this.Configuration[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "LOCATION"))
            {
                return this.Location;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONFIGURATION"))
            {
                return this._configuration;
            }
            if ((feature == "DEPLOYEDARTIFACT"))
            {
                return this._deployedArtifact;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATION"))
            {
                this.Location = ((IDeploymentTarget)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LOCATION"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._configuration))
            {
                return "configuration";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Deployment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Deployment class
        /// </summary>
        public class DeploymentChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Deployment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DeploymentChildrenCollection(Deployment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Configuration.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Configuration.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Configuration.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDeploymentSpecification configurationCasted = item.As<IDeploymentSpecification>();
                if ((configurationCasted != null))
                {
                    this._parent.Configuration.Add(configurationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Configuration.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Configuration.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> configurationEnumerator = this._parent.Configuration.GetEnumerator();
                try
                {
                    for (
                    ; configurationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = configurationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    configurationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDeploymentSpecification deploymentSpecificationItem = item.As<IDeploymentSpecification>();
                if (((deploymentSpecificationItem != null) 
                            && this._parent.Configuration.Remove(deploymentSpecificationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Configuration).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Deployment class
        /// </summary>
        public class DeploymentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Deployment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DeploymentReferencedElementsCollection(Deployment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Configuration.Count);
                    count = (count + this._parent.DeployedArtifact.Count);
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Configuration.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DeployedArtifact.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Configuration.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DeployedArtifact.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDeploymentSpecification configurationCasted = item.As<IDeploymentSpecification>();
                if ((configurationCasted != null))
                {
                    this._parent.Configuration.Add(configurationCasted);
                }
                IDeployedArtifact deployedArtifactCasted = item.As<IDeployedArtifact>();
                if ((deployedArtifactCasted != null))
                {
                    this._parent.DeployedArtifact.Add(deployedArtifactCasted);
                }
                if ((this._parent.Location == null))
                {
                    IDeploymentTarget locationCasted = item.As<IDeploymentTarget>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Configuration.Clear();
                this._parent.DeployedArtifact.Clear();
                this._parent.Location = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Configuration.Contains(item))
                {
                    return true;
                }
                if (this._parent.DeployedArtifact.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> configurationEnumerator = this._parent.Configuration.GetEnumerator();
                try
                {
                    for (
                    ; configurationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = configurationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    configurationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> deployedArtifactEnumerator = this._parent.DeployedArtifact.GetEnumerator();
                try
                {
                    for (
                    ; deployedArtifactEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deployedArtifactEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deployedArtifactEnumerator.Dispose();
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDeploymentSpecification deploymentSpecificationItem = item.As<IDeploymentSpecification>();
                if (((deploymentSpecificationItem != null) 
                            && this._parent.Configuration.Remove(deploymentSpecificationItem)))
                {
                    return true;
                }
                IDeployedArtifact deployedArtifactItem = item.As<IDeployedArtifact>();
                if (((deployedArtifactItem != null) 
                            && this._parent.DeployedArtifact.Remove(deployedArtifactItem)))
                {
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Configuration).Concat(this._parent.DeployedArtifact).Concat(this._parent.Location).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IDeployment, IDeploymentTarget>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IDeployment modelElement) : 
                    base(modelElement, "location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDeploymentTarget Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
    }
}

