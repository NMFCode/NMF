//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Clause
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Clause))]
    [XmlDefaultImplementationTypeAttribute(typeof(Clause))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Clause")]
    public interface IClause : IModelElement, IElement
    {
        
        /// <summary>
        /// The set of ExecutableNodes that are executed if the test evaluates to true and the Clause is chosen over other Clauses within the ConditionalNode that also have tests that evaluate to true.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("The set of ExecutableNodes that are executed if the test evaluates to true and th" +
            "e Clause is chosen over other Clauses within the ConditionalNode that also have " +
            "tests that evaluate to true.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IExecutableNode> Body
        {
            get;
        }
        
        /// <summary>
        /// The OutputPins on Actions within the body section whose values are moved to the result OutputPins of the containing ConditionalNode after execution of the body.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("bodyOutput")]
        [DescriptionAttribute("The OutputPins on Actions within the body section whose values are moved to the r" +
            "esult OutputPins of the containing ConditionalNode after execution of the body.\n" +
            "<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("bodyOutput")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<IOutputPin> BodyOutput
        {
            get;
        }
        
        /// <summary>
        /// An OutputPin on an Action in the test section whose Boolean value determines the result of the test.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("decider")]
        [DescriptionAttribute("An OutputPin on an Action in the test section whose Boolean value determines the " +
            "result of the test.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("decider")]
        [XmlAttributeAttribute(true)]
        IOutputPin Decider
        {
            get;
            set;
        }
        
        /// <summary>
        /// A set of Clauses whose tests must all evaluate to false before this Clause can evaluate its test.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("predecessorClause")]
        [DescriptionAttribute("A set of Clauses whose tests must all evaluate to false before this Clause can ev" +
            "aluate its test.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("predecessorClause")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("successorClause")]
        [ConstantAttribute()]
        ISetExpression<IClause> PredecessorClause
        {
            get;
        }
        
        /// <summary>
        /// A set of Clauses that may not evaluate their tests unless the test for this Clause evaluates to false.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("successorClause")]
        [DescriptionAttribute("A set of Clauses that may not evaluate their tests unless the test for this Claus" +
            "e evaluates to false.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("successorClause")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("predecessorClause")]
        [ConstantAttribute()]
        ISetExpression<IClause> SuccessorClause
        {
            get;
        }
        
        /// <summary>
        /// The set of ExecutableNodes that are executed in order to provide a test result for the Clause.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("test")]
        [DescriptionAttribute("The set of ExecutableNodes that are executed in order to provide a test result fo" +
            "r the Clause.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Clause")]
        [XmlElementNameAttribute("test")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IExecutableNode> Test
        {
            get;
        }
        
        /// <summary>
        /// The bodyOutput Pins are OutputPins on Actions in the body of the Clause.
        ///_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Body_output_pins(object diagnostics, object context);
        
        /// <summary>
        /// The decider Pin must be on an Action in the test section of the Clause and must be of type Boolean with multiplicity 1..1.
        ///test.oclAsType(Action).allActions().output->includes(decider) and
        ///decider.type = Boolean and
        ///decider.is(1,1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Decider_output(object diagnostics, object context);
        
        /// <summary>
        /// The test and body parts of a ConditionalNode must be disjoint with each other.
        ///test->intersection(_'body')->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Test_and_body(object diagnostics, object context);
    }
}

