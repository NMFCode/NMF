//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ConnectionPointReference represents a usage (as part of a submachine State) of an entry/exit point Pseudostate defined in the StateMachine referenced by the submachine State.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectionPointReference")]
    [DebuggerDisplayAttribute("ConnectionPointReference {Name}")]
    public partial class ConnectionPointReference : Vertex, IConnectionPointReference, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _exit_pseudostatesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveExit_pseudostatesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _entry_pseudostatesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEntry_pseudostatesOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _entryReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEntryReference);
        
        /// <summary>
        /// The backing field for the Entry property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IPseudostate> _entry;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _exitReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveExitReference);
        
        /// <summary>
        /// The backing field for the Exit property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IPseudostate> _exit;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _stateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStateReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ConnectionPointReference()
        {
            this._entry = new ObservableAssociationSet<IPseudostate>();
            this._entry.CollectionChanging += this.EntryCollectionChanging;
            this._entry.CollectionChanged += this.EntryCollectionChanged;
            this._exit = new ObservableAssociationSet<IPseudostate>();
            this._exit.CollectionChanging += this.ExitCollectionChanging;
            this._exit.CollectionChanged += this.ExitCollectionChanged;
        }
        
        /// <summary>
        /// The entryPoint Pseudostates corresponding to this connection point.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("entry")]
        [DescriptionAttribute("The entryPoint Pseudostates corresponding to this connection point.\n<p>From packa" +
            "ge UML::StateMachines.</p>")]
        [CategoryAttribute("ConnectionPointReference")]
        [XmlElementNameAttribute("entry")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IPseudostate> Entry
        {
            get
            {
                return this._entry;
            }
        }
        
        /// <summary>
        /// The exitPoints kind Pseudostates corresponding to this connection point.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("exit")]
        [DescriptionAttribute("The exitPoints kind Pseudostates corresponding to this connection point.\n<p>From " +
            "package UML::StateMachines.</p>")]
        [CategoryAttribute("ConnectionPointReference")]
        [XmlElementNameAttribute("exit")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IPseudostate> Exit
        {
            get
            {
                return this._exit;
            }
        }
        
        /// <summary>
        /// The State in which the ConnectionPointReference is defined.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("state")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("connection")]
        public IState State
        {
            get
            {
                return ModelHelper.CastAs<IState>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConnectionPointReferenceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectionPointReference")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The exit Pseudostates must be Pseudostates with kind exitPoint.
        ///exit->forAll(kind = PseudostateKind::exitPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Exit_pseudostates(object diagnostics, object context)
        {
            System.Func<IConnectionPointReference, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectionPointReference, object, object, bool>>(_exit_pseudostatesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method exit_pseudostates registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _exit_pseudostatesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _exit_pseudostatesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _exit_pseudostatesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveExit_pseudostatesOperation()
        {
            return ClassInstance.LookupOperation("exit_pseudostates");
        }
        
        /// <summary>
        /// The entry Pseudostates must be Pseudostates with kind entryPoint.
        ///entry->forAll(kind = PseudostateKind::entryPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Entry_pseudostates(object diagnostics, object context)
        {
            System.Func<IConnectionPointReference, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConnectionPointReference, object, object, bool>>(_entry_pseudostatesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method entry_pseudostates registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _entry_pseudostatesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _entry_pseudostatesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _entry_pseudostatesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEntry_pseudostatesOperation()
        {
            return ClassInstance.LookupOperation("entry_pseudostates");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEntryReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConnectionPointReference.ClassInstance)).Resolve("entry")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Entry property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EntryCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Entry", e, _entryReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Entry property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EntryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Entry", e, _entryReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveExitReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConnectionPointReference.ClassInstance)).Resolve("exit")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Exit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExitCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Exit", e, _exitReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Exit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExitCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Exit", e, _exitReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConnectionPointReference.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IState oldState = ModelHelper.CastAs<IState>(oldParent);
            IState newState = ModelHelper.CastAs<IState>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldState, newState);
            this.OnPropertyChanging("State", e, _stateReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IState oldState = ModelHelper.CastAs<IState>(oldParent);
            IState newState = ModelHelper.CastAs<IState>(newParent);
            if ((oldState != null))
            {
                oldState.Connection.Remove(this);
            }
            if ((newState != null))
            {
                newState.Connection.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldState, newState);
            this.OnPropertyChanged("State", e, _stateReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "STATE"))
            {
                return this.State;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENTRY"))
            {
                return this._entry;
            }
            if ((feature == "EXIT"))
            {
                return this._exit;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATE"))
            {
                this.State = ((IState)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "STATE"))
            {
                return new StateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConnectionPointReference")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConnectionPointReference class
        /// </summary>
        public class ConnectionPointReferenceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConnectionPointReference _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConnectionPointReferenceReferencedElementsCollection(ConnectionPointReference parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Entry.Count);
                    count = (count + this._parent.Exit.Count);
                    if ((this._parent.State != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Entry.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Exit.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Entry.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Exit.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPseudostate entryCasted = item.As<IPseudostate>();
                if ((entryCasted != null))
                {
                    this._parent.Entry.Add(entryCasted);
                }
                IPseudostate exitCasted = item.As<IPseudostate>();
                if ((exitCasted != null))
                {
                    this._parent.Exit.Add(exitCasted);
                }
                if ((this._parent.State == null))
                {
                    IState stateCasted = item.As<IState>();
                    if ((stateCasted != null))
                    {
                        this._parent.State = stateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Entry.Clear();
                this._parent.Exit.Clear();
                this._parent.State = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Entry.Contains(item))
                {
                    return true;
                }
                if (this._parent.Exit.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.State))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> entryEnumerator = this._parent.Entry.GetEnumerator();
                try
                {
                    for (
                    ; entryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = entryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    entryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> exitEnumerator = this._parent.Exit.GetEnumerator();
                try
                {
                    for (
                    ; exitEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = exitEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    exitEnumerator.Dispose();
                }
                if ((this._parent.State != null))
                {
                    array[arrayIndex] = this._parent.State;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPseudostate pseudostateItem = item.As<IPseudostate>();
                if (((pseudostateItem != null) 
                            && this._parent.Entry.Remove(pseudostateItem)))
                {
                    return true;
                }
                if (((pseudostateItem != null) 
                            && this._parent.Exit.Remove(pseudostateItem)))
                {
                    return true;
                }
                if ((this._parent.State == item))
                {
                    this._parent.State = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Entry).Concat(this._parent.Exit).Concat(this._parent.State).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<IConnectionPointReference, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(IConnectionPointReference modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
    }
}

