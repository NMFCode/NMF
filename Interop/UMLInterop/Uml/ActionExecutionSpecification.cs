//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an Action.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActionExecutionSpecification")]
    [DebuggerDisplayAttribute("ActionExecutionSpecification {Name}")]
    public partial class ActionExecutionSpecification : ExecutionSpecification, IActionExecutionSpecification, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _action_referencedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAction_referencedOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _actionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveActionReference);
        
        /// <summary>
        /// The backing field for the Action property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAction _action;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Action whose execution is occurring.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("action")]
        [DescriptionAttribute("Action whose execution is occurring.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("ActionExecutionSpecification")]
        [XmlElementNameAttribute("action")]
        [XmlAttributeAttribute(true)]
        public IAction Action
        {
            get
            {
                return this._action;
            }
            set
            {
                if ((this._action != value))
                {
                    IAction old = this._action;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Action", e, _actionReference);
                    this._action = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAction;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAction;
                    }
                    this.OnPropertyChanged("Action", e, _actionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ActionExecutionSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActionExecutionSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The Action referenced by the ActionExecutionSpecification must be owned by the Interaction owning that ActionExecutionSpecification.
        ///(enclosingInteraction-&gt;notEmpty() or enclosingOperand.combinedFragment-&gt;notEmpty()) and
        ///let parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)-&gt;asSet()-&gt;union(
        ///enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)-&gt;
        ///collect(enclosingInteraction).oclAsType(Interaction)-&gt;asSet()) in
        ///(parentInteraction-&gt;size() = 1) and self.action.interaction-&gt;asSet() = parentInteraction
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Action_referenced(object diagnostics, object context)
        {
            System.Func<IActionExecutionSpecification, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActionExecutionSpecification, object, object, bool>>(_action_referencedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method action_referenced registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _action_referencedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _action_referencedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _action_referencedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAction_referencedOperation()
        {
            return ClassInstance.LookupOperation("action_referenced");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveActionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActionExecutionSpecification.ClassInstance)).Resolve("action")));
        }
        
        /// <summary>
        /// Handles the event that the Action property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAction(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Action))
            {
                this.Action = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ACTION"))
            {
                return this.Action;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTION"))
            {
                this.Action = ((IAction)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ACTION"))
            {
                return new ActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActionExecutionSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActionExecutionSpecification class
        /// </summary>
        public class ActionExecutionSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActionExecutionSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActionExecutionSpecificationReferencedElementsCollection(ActionExecutionSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Action != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Action == null))
                {
                    IAction actionCasted = item.As<IAction>();
                    if ((actionCasted != null))
                    {
                        this._parent.Action = actionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Action = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Action))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Action != null))
                {
                    array[arrayIndex] = this._parent.Action;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Action == item))
                {
                    this._parent.Action = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Action).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the action property
        /// </summary>
        private sealed class ActionProxy : ModelPropertyChange<IActionExecutionSpecification, IAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActionProxy(IActionExecutionSpecification modelElement) : 
                    base(modelElement, "action")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAction Value
            {
                get
                {
                    return this.ModelElement.Action;
                }
                set
                {
                    this.ModelElement.Action = value;
                }
            }
        }
    }
}
