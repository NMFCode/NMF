//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.
    ///<p>From package UML::CommonBehavior.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Behavior")]
    [DebuggerDisplayAttribute("Behavior {Name}")]
    public abstract partial class Behavior : Class, IBehavior, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _most_one_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMost_one_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parameters_matchOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParameters_matchOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _feature_of_context_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveFeature_of_context_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getContextOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetContextOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _behavioredClassifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBehavioredClassifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _inputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInputParametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _outputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutputParametersOperation);
        
        /// <summary>
        /// The backing field for the IsReentrant property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<bool> _isReentrant = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isReentrantAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsReentrantAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _specificationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSpecificationReference);
        
        /// <summary>
        /// The backing field for the Specification property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavioralFeature _specification;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameterReference);
        
        /// <summary>
        /// The backing field for the OwnedParameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<NMF.Interop.Uml.IParameter> _ownedParameter;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameterSetReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameterSetReference);
        
        /// <summary>
        /// The backing field for the OwnedParameterSet property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IParameterSet> _ownedParameterSet;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _postconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePostconditionReference);
        
        /// <summary>
        /// The backing field for the Postcondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IConstraint> _postcondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _preconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePreconditionReference);
        
        /// <summary>
        /// The backing field for the Precondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IConstraint> _precondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedBehaviorReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedBehaviorReference);
        
        /// <summary>
        /// The backing field for the RedefinedBehavior property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IBehavior> _redefinedBehavior;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Behavior()
        {
            this._ownedParameter = new ObservableCompositionOrderedSet<NMF.Interop.Uml.IParameter>(this);
            this._ownedParameter.CollectionChanging += this.OwnedParameterCollectionChanging;
            this._ownedParameter.CollectionChanged += this.OwnedParameterCollectionChanged;
            this._ownedParameterSet = new ObservableCompositionOrderedSet<IParameterSet>(this);
            this._ownedParameterSet.CollectionChanging += this.OwnedParameterSetCollectionChanging;
            this._ownedParameterSet.CollectionChanged += this.OwnedParameterSetCollectionChanged;
            this._postcondition = new ObservableAssociationSet<IConstraint>();
            this._postcondition.CollectionChanging += this.PostconditionCollectionChanging;
            this._postcondition.CollectionChanged += this.PostconditionCollectionChanged;
            this._precondition = new ObservableAssociationSet<IConstraint>();
            this._precondition.CollectionChanging += this.PreconditionCollectionChanging;
            this._precondition.CollectionChanged += this.PreconditionCollectionChanged;
            this._redefinedBehavior = new ObservableAssociationSet<IBehavior>();
            this._redefinedBehavior.CollectionChanging += this.RedefinedBehaviorCollectionChanging;
            this._redefinedBehavior.CollectionChanged += this.RedefinedBehaviorCollectionChanged;
        }
        
        /// <summary>
        /// Tells whether the Behavior can be invoked while it is still executing from a previous invocation.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [DisplayNameAttribute("isReentrant")]
        [DescriptionAttribute("Tells whether the Behavior can be invoked while it is still executing from a prev" +
            "ious invocation.\n<p>From package UML::CommonBehavior.</p>")]
        [CategoryAttribute("Behavior")]
        [XmlElementNameAttribute("isReentrant")]
        [XmlAttributeAttribute(true)]
        public Nullable<bool> IsReentrant
        {
            get
            {
                return this._isReentrant;
            }
            set
            {
                if ((this._isReentrant != value))
                {
                    Nullable<bool> old = this._isReentrant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsReentrant", e, _isReentrantAttribute);
                    this._isReentrant = value;
                    this.OnPropertyChanged("IsReentrant", e, _isReentrantAttribute);
                }
            }
        }
        
        /// <summary>
        /// Designates a BehavioralFeature that the Behavior implements. The BehavioralFeature must be owned by the BehavioredClassifier that owns the Behavior or be inherited by it. The Parameters of the BehavioralFeature and the implementing Behavior must match. A Behavior does not need to have a specification, in which case it either is the classifierBehavior of a BehavioredClassifier or it can only be invoked by another Behavior of the Classifier.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DisplayNameAttribute("specification")]
        [DescriptionAttribute(@"Designates a BehavioralFeature that the Behavior implements. The BehavioralFeature must be owned by the BehavioredClassifier that owns the Behavior or be inherited by it. The Parameters of the BehavioralFeature and the implementing Behavior must match. A Behavior does not need to have a specification, in which case it either is the classifierBehavior of a BehavioredClassifier or it can only be invoked by another Behavior of the Classifier.
<p>From package UML::CommonBehavior.</p>")]
        [CategoryAttribute("Behavior")]
        [XmlElementNameAttribute("specification")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("method")]
        public IBehavioralFeature Specification
        {
            get
            {
                return this._specification;
            }
            set
            {
                if ((this._specification != value))
                {
                    IBehavioralFeature old = this._specification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Specification", e, _specificationReference);
                    this._specification = value;
                    if ((old != null))
                    {
                        old.Method.Remove(this);
                        old.Deleted -= this.OnResetSpecification;
                    }
                    if ((value != null))
                    {
                        value.Method.Add(this);
                        value.Deleted += this.OnResetSpecification;
                    }
                    this.OnPropertyChanged("Specification", e, _specificationReference);
                }
            }
        }
        
        /// <summary>
        /// References a list of Parameters to the Behavior which describes the order and type of arguments that can be given when the Behavior is invoked and of the values which will be returned when the Behavior completes its execution.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> OwnedParameter
        {
            get
            {
                return this._ownedParameter;
            }
        }
        
        /// <summary>
        /// The ParameterSets owned by this Behavior.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameterSet")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IParameterSet> OwnedParameterSet
        {
            get
            {
                return this._ownedParameterSet;
            }
        }
        
        /// <summary>
        /// An optional set of Constraints specifying what is fulfilled after the execution of the Behavior is completed, if its precondition was fulfilled before its invocation.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("postcondition")]
        [DescriptionAttribute("An optional set of Constraints specifying what is fulfilled after the execution o" +
            "f the Behavior is completed, if its precondition was fulfilled before its invoca" +
            "tion.\n<p>From package UML::CommonBehavior.</p>")]
        [CategoryAttribute("Behavior")]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Postcondition
        {
            get
            {
                return this._postcondition;
            }
        }
        
        /// <summary>
        /// An optional set of Constraints specifying what must be fulfilled before the Behavior is invoked.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("precondition")]
        [DescriptionAttribute("An optional set of Constraints specifying what must be fulfilled before the Behav" +
            "ior is invoked.\n<p>From package UML::CommonBehavior.</p>")]
        [CategoryAttribute("Behavior")]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Precondition
        {
            get
            {
                return this._precondition;
            }
        }
        
        /// <summary>
        /// References the Behavior that this Behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the Behavior implements a BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a classifierBehavior, it extends the redefined Behavior.
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedBehavior")]
        [DescriptionAttribute(@"References the Behavior that this Behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the Behavior implements a BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a classifierBehavior, it extends the redefined Behavior.
<p>From package UML::CommonBehavior.</p>")]
        [CategoryAttribute("Behavior")]
        [XmlElementNameAttribute("redefinedBehavior")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IBehavior> RedefinedBehavior
        {
            get
            {
                return this._redefinedBehavior;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BehaviorChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BehaviorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Behavior")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// There may be at most one Behavior for a given pairing of BehavioredClassifier (as owner of the Behavior) and BehavioralFeature (as specification of the Behavior).
        ///specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Most_one_behavior(object diagnostics, object context)
        {
            System.Func<IBehavior, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, object, object, bool>>(_most_one_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method most_one_behavior registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _most_one_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _most_one_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _most_one_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMost_one_behaviorOperation()
        {
            return ClassInstance.LookupOperation("most_one_behavior");
        }
        
        /// <summary>
        /// If a Behavior has a specification BehavioralFeature, then it must have the same number of ownedParameters as its specification. The Behavior Parameters must also "match" the BehavioralParameter Parameters, but the exact requirements for this matching are not formalized.
        ///specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Parameters_match(object diagnostics, object context)
        {
            System.Func<IBehavior, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, object, object, bool>>(_parameters_matchOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parameters_match registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parameters_matchOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parameters_matchOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parameters_matchOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParameters_matchOperation()
        {
            return ClassInstance.LookupOperation("parameters_match");
        }
        
        /// <summary>
        /// The specification BehavioralFeature must be a feature (possibly inherited) of the context BehavioredClassifier of the Behavior.
        ///_'context'.feature->includes(specification)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Feature_of_context_classifier(object diagnostics, object context)
        {
            System.Func<IBehavior, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, object, object, bool>>(_feature_of_context_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method feature_of_context_classifier registered. U" +
                        "se the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _feature_of_context_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _feature_of_context_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _feature_of_context_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveFeature_of_context_classifierOperation()
        {
            return ClassInstance.LookupOperation("feature_of_context_classifier");
        }
        
        /// <summary>
        /// A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior.
        ///result = (if nestingClass <> null then
        ///    null
        ///else
        ///    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in
        ///    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' <> null then 
        ///        b.oclAsType(Behavior)._'context'
        ///    else 
        ///        b 
        ///    endif
        ///endif
        ///        )
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        public IBehavioredClassifier GetContext()
        {
            System.Func<IBehavior, IBehavioredClassifier> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, IBehavioredClassifier>>(_getContextOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getContext registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getContextOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getContextOperation.Value, e));
            IBehavioredClassifier result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getContextOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetContextOperation()
        {
            return ClassInstance.LookupOperation("getContext");
        }
        
        /// <summary>
        /// The first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any.
        ///if from.oclIsKindOf(BehavioredClassifier) then
        ///    from.oclAsType(BehavioredClassifier)
        ///else if from.owner = null then
        ///    null
        ///else
        ///    self.behavioredClassifier(from.owner)
        ///endif
        ///endif
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        /// <param name="from"></param>
        public IBehavioredClassifier BehavioredClassifier(IElement from)
        {
            System.Func<IBehavior, IElement, IBehavioredClassifier> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, IElement, IBehavioredClassifier>>(_behavioredClassifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method behavioredClassifier registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _behavioredClassifierOperation.Value, from);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _behavioredClassifierOperation.Value, e));
            IBehavioredClassifier result = handler.Invoke(this, from);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _behavioredClassifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBehavioredClassifierOperation()
        {
            return ClassInstance.LookupOperation("behavioredClassifier");
        }
        
        /// <summary>
        /// The in and inout ownedParameters of the Behavior.
        ///result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> InputParameters()
        {
            System.Func<IBehavior, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_inputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method inputParameters registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _inputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _inputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _inputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInputParametersOperation()
        {
            return ClassInstance.LookupOperation("inputParameters");
        }
        
        /// <summary>
        /// The out, inout and return ownedParameters.
        ///result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
        ///<p>From package UML::CommonBehavior.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> OutputParameters()
        {
            System.Func<IBehavior, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavior, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_outputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method outputParameters registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _outputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _outputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _outputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutputParametersOperation()
        {
            return ClassInstance.LookupOperation("outputParameters");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsReentrantAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("isReentrant")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSpecificationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("specification")));
        }
        
        /// <summary>
        /// Handles the event that the Specification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecification(object sender, System.EventArgs eventArgs)
        {
            this.Specification = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("ownedParameter")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedParameter", e, _ownedParameterReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedParameter", e, _ownedParameterReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameterSetReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("ownedParameterSet")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterSetCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedParameterSet", e, _ownedParameterSetReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterSetCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedParameterSet", e, _ownedParameterSetReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePostconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("postcondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Postcondition", e, _postconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Postcondition", e, _postconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePreconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("precondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Precondition", e, _preconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Precondition", e, _preconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedBehaviorReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Behavior.ClassInstance)).Resolve("redefinedBehavior")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedBehavior property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedBehaviorCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedBehavior", e, _redefinedBehaviorReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedBehavior property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedBehaviorCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedBehavior", e, _redefinedBehaviorReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedParameterIndex = ModelHelper.IndexOfReference(this.OwnedParameter, element);
            if ((ownedParameterIndex != -1))
            {
                return ModelHelper.CreatePath("ownedParameter", ownedParameterIndex);
            }
            int ownedParameterSetIndex = ModelHelper.IndexOfReference(this.OwnedParameterSet, element);
            if ((ownedParameterSetIndex != -1))
            {
                return ModelHelper.CreatePath("ownedParameterSet", ownedParameterSetIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SPECIFICATION"))
            {
                return this.Specification;
            }
            if ((reference == "OWNEDPARAMETER"))
            {
                if ((index < this.OwnedParameter.Count))
                {
                    return this.OwnedParameter[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDPARAMETERSET"))
            {
                if ((index < this.OwnedParameterSet.Count))
                {
                    return this.OwnedParameterSet[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISREENTRANT"))
            {
                return this.IsReentrant;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OWNEDPARAMETER"))
            {
                return this._ownedParameter;
            }
            if ((feature == "OWNEDPARAMETERSET"))
            {
                return this._ownedParameterSet;
            }
            if ((feature == "POSTCONDITION"))
            {
                return this._postcondition;
            }
            if ((feature == "PRECONDITION"))
            {
                return this._precondition;
            }
            if ((feature == "REDEFINEDBEHAVIOR"))
            {
                return this._redefinedBehavior;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIFICATION"))
            {
                this.Specification = ((IBehavioralFeature)(value));
                return;
            }
            if ((feature == "ISREENTRANT"))
            {
                this.IsReentrant = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISREENTRANT"))
            {
                return Observable.Box(new IsReentrantProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SPECIFICATION"))
            {
                return new SpecificationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ownedParameter))
            {
                return "ownedParameter";
            }
            if ((container == this._ownedParameterSet))
            {
                return "ownedParameterSet";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Behavior")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Behavior class
        /// </summary>
        public class BehaviorChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Behavior _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BehaviorChildrenCollection(Behavior parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.OwnedParameterSet.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Uml.IParameter ownedParameterCasted = item.As<NMF.Interop.Uml.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                IParameterSet ownedParameterSetCasted = item.As<IParameterSet>();
                if ((ownedParameterSetCasted != null))
                {
                    this._parent.OwnedParameterSet.Add(ownedParameterSetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedParameter.Clear();
                this._parent.OwnedParameterSet.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameterSet.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterSetEnumerator = this._parent.OwnedParameterSet.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterSetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Uml.IParameter parameterItem = item.As<NMF.Interop.Uml.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                IParameterSet parameterSetItem = item.As<IParameterSet>();
                if (((parameterSetItem != null) 
                            && this._parent.OwnedParameterSet.Remove(parameterSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedParameter).Concat(this._parent.OwnedParameterSet).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Behavior class
        /// </summary>
        public class BehaviorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Behavior _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BehaviorReferencedElementsCollection(Behavior parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Specification != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.OwnedParameterSet.Count);
                    count = (count + this._parent.Postcondition.Count);
                    count = (count + this._parent.Precondition.Count);
                    count = (count + this._parent.RedefinedBehavior.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RedefinedBehavior.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RedefinedBehavior.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Specification == null))
                {
                    IBehavioralFeature specificationCasted = item.As<IBehavioralFeature>();
                    if ((specificationCasted != null))
                    {
                        this._parent.Specification = specificationCasted;
                        return;
                    }
                }
                NMF.Interop.Uml.IParameter ownedParameterCasted = item.As<NMF.Interop.Uml.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                IParameterSet ownedParameterSetCasted = item.As<IParameterSet>();
                if ((ownedParameterSetCasted != null))
                {
                    this._parent.OwnedParameterSet.Add(ownedParameterSetCasted);
                }
                IConstraint postconditionCasted = item.As<IConstraint>();
                if ((postconditionCasted != null))
                {
                    this._parent.Postcondition.Add(postconditionCasted);
                }
                IConstraint preconditionCasted = item.As<IConstraint>();
                if ((preconditionCasted != null))
                {
                    this._parent.Precondition.Add(preconditionCasted);
                }
                IBehavior redefinedBehaviorCasted = item.As<IBehavior>();
                if ((redefinedBehaviorCasted != null))
                {
                    this._parent.RedefinedBehavior.Add(redefinedBehaviorCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Specification = null;
                this._parent.OwnedParameter.Clear();
                this._parent.OwnedParameterSet.Clear();
                this._parent.Postcondition.Clear();
                this._parent.Precondition.Clear();
                this._parent.RedefinedBehavior.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Specification))
                {
                    return true;
                }
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameterSet.Contains(item))
                {
                    return true;
                }
                if (this._parent.Postcondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Precondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.RedefinedBehavior.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Specification != null))
                {
                    array[arrayIndex] = this._parent.Specification;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterSetEnumerator = this._parent.OwnedParameterSet.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterSetEnumerator.Dispose();
                }
                IEnumerator<IModelElement> postconditionEnumerator = this._parent.Postcondition.GetEnumerator();
                try
                {
                    for (
                    ; postconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = postconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    postconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> preconditionEnumerator = this._parent.Precondition.GetEnumerator();
                try
                {
                    for (
                    ; preconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = preconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    preconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> redefinedBehaviorEnumerator = this._parent.RedefinedBehavior.GetEnumerator();
                try
                {
                    for (
                    ; redefinedBehaviorEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedBehaviorEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedBehaviorEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Specification == item))
                {
                    this._parent.Specification = null;
                    return true;
                }
                NMF.Interop.Uml.IParameter parameterItem = item.As<NMF.Interop.Uml.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                IParameterSet parameterSetItem = item.As<IParameterSet>();
                if (((parameterSetItem != null) 
                            && this._parent.OwnedParameterSet.Remove(parameterSetItem)))
                {
                    return true;
                }
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.Postcondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.Precondition.Remove(constraintItem)))
                {
                    return true;
                }
                IBehavior behaviorItem = item.As<IBehavior>();
                if (((behaviorItem != null) 
                            && this._parent.RedefinedBehavior.Remove(behaviorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Specification).Concat(this._parent.OwnedParameter).Concat(this._parent.OwnedParameterSet).Concat(this._parent.Postcondition).Concat(this._parent.Precondition).Concat(this._parent.RedefinedBehavior).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isReentrant property
        /// </summary>
        private sealed class IsReentrantProxy : ModelPropertyChange<IBehavior, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsReentrantProxy(IBehavior modelElement) : 
                    base(modelElement, "isReentrant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsReentrant;
                }
                set
                {
                    this.ModelElement.IsReentrant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specification property
        /// </summary>
        private sealed class SpecificationProxy : ModelPropertyChange<IBehavior, IBehavioralFeature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecificationProxy(IBehavior modelElement) : 
                    base(modelElement, "specification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavioralFeature Value
            {
                get
                {
                    return this.ModelElement.Specification;
                }
                set
                {
                    this.ModelElement.Specification = value;
                }
            }
        }
    }
}

