//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An Actor specifies a role played by a user or any other system that interacts with the subject.
    ///&lt;p&gt;From package UML::UseCases.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Actor")]
    [DebuggerDisplayAttribute("Actor {Name}")]
    public partial class Actor : BehavioredClassifier, IActor, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _associationsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAssociationsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _must_have_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMust_have_nameOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Actor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// An Actor can only have Associations to UseCases, Components, and Classes. Furthermore these Associations must be binary.
        ///Association.allInstances()-&gt;forAll( a |
        ///  a.memberEnd-&gt;collect(type)-&gt;includes(self) implies
        ///  (
        ///    a.memberEnd-&gt;size() = 2 and
        ///    let actorEnd : Property = a.memberEnd-&gt;any(type = self) in
        ///      actorEnd.opposite.class.oclIsKindOf(UseCase) or
        ///      ( actorEnd.opposite.class.oclIsKindOf(Class) and not
        ///         actorEnd.opposite.class.oclIsKindOf(Behavior))
        ///      )
        ///  )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Associations(object diagnostics, object context)
        {
            System.Func<IActor, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActor, object, object, bool>>(_associationsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method associations registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _associationsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _associationsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _associationsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAssociationsOperation()
        {
            return ClassInstance.LookupOperation("associations");
        }
        
        /// <summary>
        /// An Actor must have a name.
        ///name-&gt;notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Must_have_name(object diagnostics, object context)
        {
            System.Func<IActor, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActor, object, object, bool>>(_must_have_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method must_have_name registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _must_have_nameOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _must_have_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _must_have_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMust_have_nameOperation()
        {
            return ClassInstance.LookupOperation("must_have_name");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Actor")));
            }
            return _classInstance;
        }
    }
}
