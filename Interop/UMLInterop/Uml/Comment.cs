//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Comment is a textual annotation that can be attached to a set of Elements.
    ///<p>From package UML::CommonStructure.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Comment")]
    public partial class Comment : Element, IComment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Body property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _body;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _annotatedElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAnnotatedElementReference);
        
        /// <summary>
        /// The backing field for the AnnotatedElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IElement> _annotatedElement;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Comment()
        {
            this._annotatedElement = new ObservableAssociationSet<IElement>();
            this._annotatedElement.CollectionChanging += this.AnnotatedElementCollectionChanging;
            this._annotatedElement.CollectionChanged += this.AnnotatedElementCollectionChanged;
        }
        
        /// <summary>
        /// Specifies a string that is the comment.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("Specifies a string that is the comment.\n<p>From package UML::CommonStructure.</p>" +
            "")]
        [CategoryAttribute("Comment")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    string old = this._body;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Body", e, _bodyAttribute);
                    this._body = value;
                    this.OnPropertyChanged("Body", e, _bodyAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Element(s) being commented.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("annotatedElement")]
        [DescriptionAttribute("References the Element(s) being commented.\n<p>From package UML::CommonStructure.<" +
            "/p>")]
        [CategoryAttribute("Comment")]
        [XmlElementNameAttribute("annotatedElement")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IElement> AnnotatedElement
        {
            get
            {
                return this._annotatedElement;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CommentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Comment")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Comment.ClassInstance)).Resolve("body")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAnnotatedElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Comment.ClassInstance)).Resolve("annotatedElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AnnotatedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnnotatedElementCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AnnotatedElement", e, _annotatedElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AnnotatedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnnotatedElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AnnotatedElement", e, _annotatedElementReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BODY"))
            {
                return this.Body;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ANNOTATEDELEMENT"))
            {
                return this._annotatedElement;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BODY"))
            {
                this.Body = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BODY"))
            {
                return new BodyProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Comment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Comment class
        /// </summary>
        public class CommentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Comment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CommentReferencedElementsCollection(Comment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AnnotatedElement.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AnnotatedElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AnnotatedElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IElement annotatedElementCasted = item.As<IElement>();
                if ((annotatedElementCasted != null))
                {
                    this._parent.AnnotatedElement.Add(annotatedElementCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AnnotatedElement.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AnnotatedElement.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> annotatedElementEnumerator = this._parent.AnnotatedElement.GetEnumerator();
                try
                {
                    for (
                    ; annotatedElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = annotatedElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    annotatedElementEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IElement elementItem = item.As<IElement>();
                if (((elementItem != null) 
                            && this._parent.AnnotatedElement.Remove(elementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AnnotatedElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the body property
        /// </summary>
        private sealed class BodyProxy : ModelPropertyChange<IComment, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BodyProxy(IComment modelElement) : 
                    base(modelElement, "body")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Body;
                }
                set
                {
                    this.ModelElement.Body = value;
                }
            }
        }
    }
}

