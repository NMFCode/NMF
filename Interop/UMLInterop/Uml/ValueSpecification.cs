//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ValueSpecification is the specification of a (possibly empty) set of values. A ValueSpecification is a ParameterableElement that may be exposed as a formal TemplateParameter and provided as the actual parameter in the binding of a template.
    ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification")]
    [DebuggerDisplayAttribute("ValueSpecification {Name}")]
    public abstract partial class ValueSpecification : PackageableElement, IValueSpecification, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _booleanValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBooleanValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _integerValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIntegerValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isComputableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsComputableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isNullOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsNullOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _realValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRealValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _stringValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveStringValueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _unlimitedValueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUnlimitedValueOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Uml.IType _type;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The type of the TypedElement.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("The type of the TypedElement.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Uml.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Uml.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ValueSpecificationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The query booleanValue() gives a single Boolean value when one can be computed.
        ///result = (null)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public bool BooleanValue()
        {
            System.Func<IValueSpecification, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, bool>>(_booleanValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method booleanValue registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _booleanValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _booleanValueOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _booleanValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBooleanValueOperation()
        {
            return ClassInstance.LookupOperation("booleanValue");
        }
        
        /// <summary>
        /// The query integerValue() gives a single Integer value when one can be computed.
        ///result = (null)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public int IntegerValue()
        {
            System.Func<IValueSpecification, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, int>>(_integerValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method integerValue registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _integerValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _integerValueOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _integerValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIntegerValueOperation()
        {
            return ClassInstance.LookupOperation("integerValue");
        }
        
        /// <summary>
        /// The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.
        ///result = (false)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public bool IsComputable()
        {
            System.Func<IValueSpecification, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, bool>>(_isComputableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isComputable registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isComputableOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isComputableOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isComputableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsComputableOperation()
        {
            return ClassInstance.LookupOperation("isComputable");
        }
        
        /// <summary>
        /// The query isNull() returns true when it can be computed that the value is null.
        ///result = (false)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public bool IsNull()
        {
            System.Func<IValueSpecification, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, bool>>(_isNullOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isNull registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isNullOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isNullOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isNullOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsNullOperation()
        {
            return ClassInstance.LookupOperation("isNull");
        }
        
        /// <summary>
        /// The query realValue() gives a single Real value when one can be computed.
        ///result = (null)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public double RealValue()
        {
            System.Func<IValueSpecification, double> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, double>>(_realValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method realValue registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _realValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _realValueOperation.Value, e));
            double result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _realValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRealValueOperation()
        {
            return ClassInstance.LookupOperation("realValue");
        }
        
        /// <summary>
        /// The query stringValue() gives a single String value when one can be computed.
        ///result = (null)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public string StringValue()
        {
            System.Func<IValueSpecification, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IValueSpecification, string>>(_stringValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method stringValue registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _stringValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _stringValueOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _stringValueOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveStringValueOperation()
        {
            return ClassInstance.LookupOperation("stringValue");
        }
        
        /// <summary>
        /// The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.
        ///result = (null)
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        public void UnlimitedValue()
        {
            System.Action<IValueSpecification> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IValueSpecification>>(_unlimitedValueOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method unlimitedValue registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _unlimitedValueOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _unlimitedValueOperation.Value, e));
            handler.Invoke(this);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _unlimitedValueOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUnlimitedValueOperation()
        {
            return ClassInstance.LookupOperation("unlimitedValue");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Type))
            {
                this.Type = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Uml.IType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ValueSpecification class
        /// </summary>
        public class ValueSpecificationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ValueSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ValueSpecificationChildrenCollection(ValueSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Uml.ITypedElement, NMF.Interop.Uml.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Uml.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}
