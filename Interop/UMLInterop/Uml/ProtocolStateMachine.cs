//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ProtocolStateMachine is always defined in the context of a Classifier. It specifies which BehavioralFeatures of the Classifier can be called in which State and under which conditions, thus specifying the allowed invocation sequences on the Classifier&apos;s BehavioralFeatures. A ProtocolStateMachine specifies the possible and permitted Transitions on the instances of its context Classifier, together with the BehavioralFeatures that carry the Transitions. In this manner, an instance lifecycle can be specified for a Classifier, by defining the order in which the BehavioralFeatures can be activated and the States through which an instance progresses during its existence.
    ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolStateMachine")]
    [DebuggerDisplayAttribute("ProtocolStateMachine {Name}")]
    public partial class ProtocolStateMachine : StateMachine, IProtocolStateMachine, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deep_or_shallow_historyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeep_or_shallow_historyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _entry_exit_doOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEntry_exit_doOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _protocol_transitionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveProtocol_transitionsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _conformanceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConformanceReference);
        
        /// <summary>
        /// The backing field for the Conformance property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ProtocolStateMachineConformanceCollection _conformance;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ProtocolStateMachine()
        {
            this._conformance = new ProtocolStateMachineConformanceCollection(this);
            this._conformance.CollectionChanging += this.ConformanceCollectionChanging;
            this._conformance.CollectionChanged += this.ConformanceCollectionChanged;
        }
        
        /// <summary>
        /// Conformance between ProtocolStateMachine
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("conformance")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("specificMachine")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProtocolConformance> Conformance
        {
            get
            {
                return this._conformance;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ProtocolStateMachineChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProtocolStateMachineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolStateMachine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// ProtocolStateMachines cannot have deep or shallow history Pseudostates.
        ///region-&gt;forAll (r | r.subvertex-&gt;forAll (v | v.oclIsKindOf(Pseudostate) implies
        ///((v.oclAsType(Pseudostate).kind &lt;&gt;  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind &lt;&gt; PseudostateKind::shallowHistory))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Deep_or_shallow_history(object diagnostics, object context)
        {
            System.Func<IProtocolStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProtocolStateMachine, object, object, bool>>(_deep_or_shallow_historyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method deep_or_shallow_history registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deep_or_shallow_historyOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deep_or_shallow_historyOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deep_or_shallow_historyOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeep_or_shallow_historyOperation()
        {
            return ClassInstance.LookupOperation("deep_or_shallow_history");
        }
        
        /// <summary>
        /// The states of a ProtocolStateMachine cannot have entry, exit, or do activity Behaviors.
        ///region-&gt;forAll(r | r.subvertex-&gt;forAll(v | v.oclIsKindOf(State) implies
        ///(v.oclAsType(State).entry-&gt;isEmpty() and v.oclAsType(State).exit-&gt;isEmpty() and v.oclAsType(State).doActivity-&gt;isEmpty())))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Entry_exit_do(object diagnostics, object context)
        {
            System.Func<IProtocolStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProtocolStateMachine, object, object, bool>>(_entry_exit_doOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method entry_exit_do registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _entry_exit_doOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _entry_exit_doOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _entry_exit_doOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEntry_exit_doOperation()
        {
            return ClassInstance.LookupOperation("entry_exit_do");
        }
        
        /// <summary>
        /// All Transitions of a ProtocolStateMachine must be ProtocolTransitions.
        ///region-&gt;forAll(r | r.transition-&gt;forAll(t | t.oclIsTypeOf(ProtocolTransition)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Protocol_transitions(object diagnostics, object context)
        {
            System.Func<IProtocolStateMachine, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProtocolStateMachine, object, object, bool>>(_protocol_transitionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method protocol_transitions registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _protocol_transitionsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _protocol_transitionsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _protocol_transitionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveProtocol_transitionsOperation()
        {
            return ClassInstance.LookupOperation("protocol_transitions");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConformanceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProtocolStateMachine.ClassInstance)).Resolve("conformance")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Conformance property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConformanceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Conformance", e, _conformanceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Conformance property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConformanceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Conformance", e, _conformanceReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int conformanceIndex = ModelHelper.IndexOfReference(this.Conformance, element);
            if ((conformanceIndex != -1))
            {
                return ModelHelper.CreatePath("conformance", conformanceIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONFORMANCE"))
            {
                if ((index < this.Conformance.Count))
                {
                    return this.Conformance[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONFORMANCE"))
            {
                return this._conformance;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._conformance))
            {
                return "conformance";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolStateMachine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProtocolStateMachine class
        /// </summary>
        public class ProtocolStateMachineChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProtocolStateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProtocolStateMachineChildrenCollection(ProtocolStateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProtocolStateMachine class
        /// </summary>
        public class ProtocolStateMachineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProtocolStateMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProtocolStateMachineReferencedElementsCollection(ProtocolStateMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
    }
}
