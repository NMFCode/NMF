//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An extension end is used to tie an extension to a stereotype when extending a metaclass.
    ///The default multiplicity of an extension end is 0..1.
    ///<p>From package UML::Packages.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ExtensionEnd")]
    [DebuggerDisplayAttribute("ExtensionEnd {Name}")]
    public partial class ExtensionEnd : Property, IExtensionEnd, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMultiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _aggregationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAggregationOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExtensionEnd")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The multiplicity of ExtensionEnd is 0..1 or 1.
        ///(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Multiplicity(object diagnostics, object context)
        {
            System.Func<IExtensionEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtensionEnd, object, object, bool>>(_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method multiplicity registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("multiplicity");
        }
        
        /// <summary>
        /// The aggregation of an ExtensionEnd is composite.
        ///self.aggregation = AggregationKind::composite
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Aggregation(object diagnostics, object context)
        {
            System.Func<IExtensionEnd, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IExtensionEnd, object, object, bool>>(_aggregationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method aggregation registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _aggregationOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _aggregationOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _aggregationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAggregationOperation()
        {
            return ClassInstance.LookupOperation("aggregation");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ExtensionEnd")));
            }
            return _classInstance;
        }
    }
}

