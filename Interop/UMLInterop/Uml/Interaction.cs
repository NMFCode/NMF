//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An Interaction is a unit of Behavior that focuses on the observable exchange of information between connectable elements.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Interaction")]
    [DebuggerDisplayAttribute("Interaction {Name}")]
    public partial class Interaction : Behavior, IInteraction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_containedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_containedOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lifelineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLifelineReference);
        
        /// <summary>
        /// The backing field for the Lifeline property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionLifelineCollection _lifeline;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _fragmentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFragmentReference);
        
        /// <summary>
        /// The backing field for the Fragment property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionFragmentCollection _fragment;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _actionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveActionReference);
        
        /// <summary>
        /// The backing field for the Action property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IAction> _action;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _formalGateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFormalGateReference);
        
        /// <summary>
        /// The backing field for the FormalGate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IGate> _formalGate;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _messageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMessageReference);
        
        /// <summary>
        /// The backing field for the Message property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionMessageCollection _message;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _coveredReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCoveredReference);
        
        /// <summary>
        /// The backing field for the Covered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionFragmentCoveredCollection _covered;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _enclosingOperandReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEnclosingOperandReference);
        
        /// <summary>
        /// The backing field for the EnclosingOperand property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteractionOperand _enclosingOperand;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _enclosingInteractionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEnclosingInteractionReference);
        
        /// <summary>
        /// The backing field for the EnclosingInteraction property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteraction _enclosingInteraction;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalOrderingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralOrderingReference);
        
        /// <summary>
        /// The backing field for the GeneralOrdering property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IGeneralOrdering> _generalOrdering;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Interaction()
        {
            this._lifeline = new InteractionLifelineCollection(this);
            this._lifeline.CollectionChanging += this.LifelineCollectionChanging;
            this._lifeline.CollectionChanged += this.LifelineCollectionChanged;
            this._fragment = new InteractionFragmentCollection(this);
            this._fragment.CollectionChanging += this.FragmentCollectionChanging;
            this._fragment.CollectionChanged += this.FragmentCollectionChanged;
            this._action = new ObservableCompositionOrderedSet<IAction>(this);
            this._action.CollectionChanging += this.ActionCollectionChanging;
            this._action.CollectionChanged += this.ActionCollectionChanged;
            this._formalGate = new ObservableCompositionOrderedSet<IGate>(this);
            this._formalGate.CollectionChanging += this.FormalGateCollectionChanging;
            this._formalGate.CollectionChanged += this.FormalGateCollectionChanged;
            this._message = new InteractionMessageCollection(this);
            this._message.CollectionChanging += this.MessageCollectionChanging;
            this._message.CollectionChanged += this.MessageCollectionChanged;
            this._covered = new InteractionFragmentCoveredCollection(this);
            this._covered.CollectionChanging += this.CoveredCollectionChanging;
            this._covered.CollectionChanged += this.CoveredCollectionChanged;
            this._generalOrdering = new ObservableCompositionOrderedSet<IGeneralOrdering>(this);
            this._generalOrdering.CollectionChanging += this.GeneralOrderingCollectionChanging;
            this._generalOrdering.CollectionChanged += this.GeneralOrderingCollectionChanged;
        }
        
        /// <summary>
        /// Specifies the participants in this Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("lifeline")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("interaction")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ILifeline> Lifeline
        {
            get
            {
                return this._lifeline;
            }
        }
        
        /// <summary>
        /// The ordered set of fragments in the Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("fragment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("enclosingInteraction")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInteractionFragment> Fragment
        {
            get
            {
                return this._fragment;
            }
        }
        
        /// <summary>
        /// Actions owned by the Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("action")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IAction> Action
        {
            get
            {
                return this._action;
            }
        }
        
        /// <summary>
        /// Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("formalGate")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IGate> FormalGate
        {
            get
            {
                return this._formalGate;
            }
        }
        
        /// <summary>
        /// The Messages contained in this Interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("message")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("interaction")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMessage> Message
        {
            get
            {
                return this._message;
            }
        }
        
        /// <summary>
        /// References the Lifelines that the InteractionFragment involves.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("covered")]
        [DescriptionAttribute("References the Lifelines that the InteractionFragment involves.\n<p>From package U" +
            "ML::Interactions.</p>")]
        [CategoryAttribute("InteractionFragment")]
        [XmlElementNameAttribute("covered")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("coveredBy")]
        [ConstantAttribute()]
        public ISetExpression<ILifeline> Covered
        {
            get
            {
                return this._covered;
            }
        }
        
        /// <summary>
        /// The operand enclosing this InteractionFragment (they may nest recursively).
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("enclosingOperand")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("fragment")]
        public IInteractionOperand EnclosingOperand
        {
            get
            {
                return this._enclosingOperand;
            }
            set
            {
                if ((this._enclosingOperand != value))
                {
                    IInteractionOperand old = this._enclosingOperand;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("EnclosingOperand", e, _enclosingOperandReference);
                    this._enclosingOperand = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Fragment.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Fragment.Add(this);
                    }
                    this.OnPropertyChanged("EnclosingOperand", e, _enclosingOperandReference);
                }
            }
        }
        
        /// <summary>
        /// The Interaction enclosing this InteractionFragment.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("enclosingInteraction")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("fragment")]
        public IInteraction EnclosingInteraction
        {
            get
            {
                return this._enclosingInteraction;
            }
            set
            {
                if ((this._enclosingInteraction != value))
                {
                    IInteraction old = this._enclosingInteraction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("EnclosingInteraction", e, _enclosingInteractionReference);
                    this._enclosingInteraction = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Fragment.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Fragment.Add(this);
                    }
                    this.OnPropertyChanged("EnclosingInteraction", e, _enclosingInteractionReference);
                }
            }
        }
        
        /// <summary>
        /// The general ordering relationships contained in this fragment.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("generalOrdering")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IGeneralOrdering> GeneralOrdering
        {
            get
            {
                return this._generalOrdering;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InteractionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InteractionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Interaction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// An Interaction instance must not be contained within another Interaction instance.
        ///enclosingInteraction-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_contained(object diagnostics, object context)
        {
            System.Func<IInteraction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteraction, object, object, bool>>(_not_containedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_contained registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_containedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_containedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_containedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_containedOperation()
        {
            return ClassInstance.LookupOperation("not_contained");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLifelineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interaction.ClassInstance)).Resolve("lifeline")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Lifeline property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LifelineCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Lifeline", e, _lifelineReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Lifeline property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LifelineCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Lifeline", e, _lifelineReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFragmentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interaction.ClassInstance)).Resolve("fragment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Fragment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FragmentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Fragment", e, _fragmentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Fragment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FragmentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Fragment", e, _fragmentReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveActionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interaction.ClassInstance)).Resolve("action")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Action property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Action", e, _actionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Action property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Action", e, _actionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFormalGateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interaction.ClassInstance)).Resolve("formalGate")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FormalGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FormalGateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FormalGate", e, _formalGateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FormalGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FormalGateCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FormalGate", e, _formalGateReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMessageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Interaction.ClassInstance)).Resolve("message")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Message property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MessageCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Message", e, _messageReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Message property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MessageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Message", e, _messageReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCoveredReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("covered")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Covered property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Covered", e, _coveredReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Covered property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Covered", e, _coveredReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEnclosingOperandReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("enclosingOperand")));
        }
        
        /// <summary>
        /// Handles the event that the EnclosingOperand property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnclosingOperand(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.EnclosingOperand))
            {
                this.EnclosingOperand = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEnclosingInteractionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("enclosingInteraction")));
        }
        
        /// <summary>
        /// Handles the event that the EnclosingInteraction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnclosingInteraction(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.EnclosingInteraction))
            {
                this.EnclosingInteraction = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralOrderingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("generalOrdering")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneralOrdering property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralOrderingCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GeneralOrdering", e, _generalOrderingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneralOrdering property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralOrderingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneralOrdering", e, _generalOrderingReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int lifelineIndex = ModelHelper.IndexOfReference(this.Lifeline, element);
            if ((lifelineIndex != -1))
            {
                return ModelHelper.CreatePath("lifeline", lifelineIndex);
            }
            int fragmentIndex = ModelHelper.IndexOfReference(this.Fragment, element);
            if ((fragmentIndex != -1))
            {
                return ModelHelper.CreatePath("fragment", fragmentIndex);
            }
            int actionIndex = ModelHelper.IndexOfReference(this.Action, element);
            if ((actionIndex != -1))
            {
                return ModelHelper.CreatePath("action", actionIndex);
            }
            int formalGateIndex = ModelHelper.IndexOfReference(this.FormalGate, element);
            if ((formalGateIndex != -1))
            {
                return ModelHelper.CreatePath("formalGate", formalGateIndex);
            }
            int messageIndex = ModelHelper.IndexOfReference(this.Message, element);
            if ((messageIndex != -1))
            {
                return ModelHelper.CreatePath("message", messageIndex);
            }
            int generalOrderingIndex = ModelHelper.IndexOfReference(this.GeneralOrdering, element);
            if ((generalOrderingIndex != -1))
            {
                return ModelHelper.CreatePath("generalOrdering", generalOrderingIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LIFELINE"))
            {
                if ((index < this.Lifeline.Count))
                {
                    return this.Lifeline[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FRAGMENT"))
            {
                if ((index < this.Fragment.Count))
                {
                    return this.Fragment[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ACTION"))
            {
                if ((index < this.Action.Count))
                {
                    return this.Action[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FORMALGATE"))
            {
                if ((index < this.FormalGate.Count))
                {
                    return this.FormalGate[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "MESSAGE"))
            {
                if ((index < this.Message.Count))
                {
                    return this.Message[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ENCLOSINGOPERAND"))
            {
                return this.EnclosingOperand;
            }
            if ((reference == "ENCLOSINGINTERACTION"))
            {
                return this.EnclosingInteraction;
            }
            if ((reference == "GENERALORDERING"))
            {
                if ((index < this.GeneralOrdering.Count))
                {
                    return this.GeneralOrdering[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LIFELINE"))
            {
                return this._lifeline;
            }
            if ((feature == "FRAGMENT"))
            {
                return this._fragment;
            }
            if ((feature == "ACTION"))
            {
                return this._action;
            }
            if ((feature == "FORMALGATE"))
            {
                return this._formalGate;
            }
            if ((feature == "MESSAGE"))
            {
                return this._message;
            }
            if ((feature == "COVERED"))
            {
                return this._covered;
            }
            if ((feature == "GENERALORDERING"))
            {
                return this._generalOrdering;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENCLOSINGOPERAND"))
            {
                this.EnclosingOperand = ((IInteractionOperand)(value));
                return;
            }
            if ((feature == "ENCLOSINGINTERACTION"))
            {
                this.EnclosingInteraction = ((IInteraction)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ENCLOSINGOPERAND"))
            {
                return new EnclosingOperandProxy(this);
            }
            if ((reference == "ENCLOSINGINTERACTION"))
            {
                return new EnclosingInteractionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._lifeline))
            {
                return "lifeline";
            }
            if ((container == this._fragment))
            {
                return "fragment";
            }
            if ((container == this._action))
            {
                return "action";
            }
            if ((container == this._formalGate))
            {
                return "formalGate";
            }
            if ((container == this._message))
            {
                return "message";
            }
            if ((container == this._generalOrdering))
            {
                return "generalOrdering";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Interaction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Interaction class
        /// </summary>
        public class InteractionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Interaction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionChildrenCollection(Interaction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Interaction class
        /// </summary>
        public class InteractionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Interaction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionReferencedElementsCollection(Interaction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enclosingOperand property
        /// </summary>
        private sealed class EnclosingOperandProxy : ModelPropertyChange<IInteractionFragment, IInteractionOperand>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnclosingOperandProxy(IInteractionFragment modelElement) : 
                    base(modelElement, "enclosingOperand")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteractionOperand Value
            {
                get
                {
                    return this.ModelElement.EnclosingOperand;
                }
                set
                {
                    this.ModelElement.EnclosingOperand = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enclosingInteraction property
        /// </summary>
        private sealed class EnclosingInteractionProxy : ModelPropertyChange<IInteractionFragment, IInteraction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnclosingInteractionProxy(IInteractionFragment modelElement) : 
                    base(modelElement, "enclosingInteraction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteraction Value
            {
                get
                {
                    return this.ModelElement.EnclosingInteraction;
                }
                set
                {
                    this.ModelElement.EnclosingInteraction = value;
                }
            }
        }
    }
}
