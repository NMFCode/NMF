//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A GeneralizationSet is a PackageableElement whose instances represent sets of Generalization relationships.
    ///<p>From package UML::Classification.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//GeneralizationSet")]
    [DebuggerDisplayAttribute("GeneralizationSet {Name}")]
    public partial class GeneralizationSet : PackageableElement, IGeneralizationSet, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _generalization_same_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGeneralization_same_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _maps_to_generalization_setOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMaps_to_generalization_setOperation);
        
        /// <summary>
        /// The backing field for the IsCovering property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isCovering = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isCoveringAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsCoveringAttribute);
        
        /// <summary>
        /// The backing field for the IsDisjoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDisjoint = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDisjointAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDisjointAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _powertypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePowertypeReference);
        
        /// <summary>
        /// The backing field for the Powertype property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassifier _powertype;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalizationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralizationReference);
        
        /// <summary>
        /// The backing field for the Generalization property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private GeneralizationSetGeneralizationCollection _generalization;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public GeneralizationSet()
        {
            this._generalization = new GeneralizationSetGeneralizationCollection(this);
            this._generalization.CollectionChanging += this.GeneralizationCollectionChanging;
            this._generalization.CollectionChanged += this.GeneralizationCollectionChanged;
        }
        
        /// <summary>
        /// Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isCovering")]
        [DescriptionAttribute(@"Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("isCovering")]
        [XmlAttributeAttribute(true)]
        public bool IsCovering
        {
            get
            {
                return this._isCovering;
            }
            set
            {
                if ((this._isCovering != value))
                {
                    bool old = this._isCovering;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsCovering", e, _isCoveringAttribute);
                    this._isCovering = value;
                    this.OnPropertyChanged("IsCovering", e, _isCoveringAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDisjoint")]
        [DescriptionAttribute(@"Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("isDisjoint")]
        [XmlAttributeAttribute(true)]
        public bool IsDisjoint
        {
            get
            {
                return this._isDisjoint;
            }
            set
            {
                if ((this._isDisjoint != value))
                {
                    bool old = this._isDisjoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDisjoint", e, _isDisjointAttribute);
                    this._isDisjoint = value;
                    this.OnPropertyChanged("IsDisjoint", e, _isDisjointAttribute);
                }
            }
        }
        
        /// <summary>
        /// Designates the Classifier that is defined as the power type for the associated GeneralizationSet, if there is one.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DisplayNameAttribute("powertype")]
        [DescriptionAttribute("Designates the Classifier that is defined as the power type for the associated Ge" +
            "neralizationSet, if there is one.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("powertype")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("powertypeExtent")]
        public IClassifier Powertype
        {
            get
            {
                return this._powertype;
            }
            set
            {
                if ((this._powertype != value))
                {
                    IClassifier old = this._powertype;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Powertype", e, _powertypeReference);
                    this._powertype = value;
                    if ((old != null))
                    {
                        old.PowertypeExtent.Remove(this);
                        old.Deleted -= this.OnResetPowertype;
                    }
                    if ((value != null))
                    {
                        value.PowertypeExtent.Add(this);
                        value.Deleted += this.OnResetPowertype;
                    }
                    this.OnPropertyChanged("Powertype", e, _powertypeReference);
                }
            }
        }
        
        /// <summary>
        /// Designates the instances of Generalization that are members of this GeneralizationSet.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("generalization")]
        [DescriptionAttribute("Designates the instances of Generalization that are members of this Generalizatio" +
            "nSet.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("generalization")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("generalizationSet")]
        [ConstantAttribute()]
        public ISetExpression<IGeneralization> Generalization
        {
            get
            {
                return this._generalization;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GeneralizationSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//GeneralizationSet")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.
        ///generalization->collect(general)->asSet()->size() <= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Generalization_same_classifier(object diagnostics, object context)
        {
            System.Func<IGeneralizationSet, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IGeneralizationSet, object, object, bool>>(_generalization_same_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method generalization_same_classifier registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _generalization_same_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _generalization_same_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _generalization_same_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGeneralization_same_classifierOperation()
        {
            return ClassInstance.LookupOperation("generalization_same_classifier");
        }
        
        /// <summary>
        /// The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.
        ///powertype <> null implies generalization->forAll( gen | 
        ///    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)
        ///  )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Maps_to_generalization_set(object diagnostics, object context)
        {
            System.Func<IGeneralizationSet, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IGeneralizationSet, object, object, bool>>(_maps_to_generalization_setOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method maps_to_generalization_set registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _maps_to_generalization_setOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _maps_to_generalization_setOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _maps_to_generalization_setOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMaps_to_generalization_setOperation()
        {
            return ClassInstance.LookupOperation("maps_to_generalization_set");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsCoveringAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.GeneralizationSet.ClassInstance)).Resolve("isCovering")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDisjointAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.GeneralizationSet.ClassInstance)).Resolve("isDisjoint")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePowertypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.GeneralizationSet.ClassInstance)).Resolve("powertype")));
        }
        
        /// <summary>
        /// Handles the event that the Powertype property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowertype(object sender, System.EventArgs eventArgs)
        {
            this.Powertype = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralizationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.GeneralizationSet.ClassInstance)).Resolve("generalization")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Generalization property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralizationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Generalization", e, _generalizationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Generalization property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralizationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Generalization", e, _generalizationReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "POWERTYPE"))
            {
                return this.Powertype;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISCOVERING"))
            {
                return this.IsCovering;
            }
            if ((attribute == "ISDISJOINT"))
            {
                return this.IsDisjoint;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GENERALIZATION"))
            {
                return this._generalization;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POWERTYPE"))
            {
                this.Powertype = ((IClassifier)(value));
                return;
            }
            if ((feature == "ISCOVERING"))
            {
                this.IsCovering = ((bool)(value));
                return;
            }
            if ((feature == "ISDISJOINT"))
            {
                this.IsDisjoint = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISCOVERING"))
            {
                return Observable.Box(new IsCoveringProxy(this));
            }
            if ((attribute == "ISDISJOINT"))
            {
                return Observable.Box(new IsDisjointProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "POWERTYPE"))
            {
                return new PowertypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//GeneralizationSet")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GeneralizationSet class
        /// </summary>
        public class GeneralizationSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GeneralizationSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GeneralizationSetReferencedElementsCollection(GeneralizationSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Powertype != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Generalization.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Generalization.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Generalization.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Powertype == null))
                {
                    IClassifier powertypeCasted = item.As<IClassifier>();
                    if ((powertypeCasted != null))
                    {
                        this._parent.Powertype = powertypeCasted;
                        return;
                    }
                }
                IGeneralization generalizationCasted = item.As<IGeneralization>();
                if ((generalizationCasted != null))
                {
                    this._parent.Generalization.Add(generalizationCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Powertype = null;
                this._parent.Generalization.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Powertype))
                {
                    return true;
                }
                if (this._parent.Generalization.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Powertype != null))
                {
                    array[arrayIndex] = this._parent.Powertype;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generalizationEnumerator = this._parent.Generalization.GetEnumerator();
                try
                {
                    for (
                    ; generalizationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generalizationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generalizationEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Powertype == item))
                {
                    this._parent.Powertype = null;
                    return true;
                }
                IGeneralization generalizationItem = item.As<IGeneralization>();
                if (((generalizationItem != null) 
                            && this._parent.Generalization.Remove(generalizationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Powertype).Concat(this._parent.Generalization).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isCovering property
        /// </summary>
        private sealed class IsCoveringProxy : ModelPropertyChange<IGeneralizationSet, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsCoveringProxy(IGeneralizationSet modelElement) : 
                    base(modelElement, "isCovering")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsCovering;
                }
                set
                {
                    this.ModelElement.IsCovering = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDisjoint property
        /// </summary>
        private sealed class IsDisjointProxy : ModelPropertyChange<IGeneralizationSet, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDisjointProxy(IGeneralizationSet modelElement) : 
                    base(modelElement, "isDisjoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDisjoint;
                }
                set
                {
                    this.ModelElement.IsDisjoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the powertype property
        /// </summary>
        private sealed class PowertypeProxy : ModelPropertyChange<IGeneralizationSet, IClassifier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowertypeProxy(IGeneralizationSet modelElement) : 
                    base(modelElement, "powertype")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassifier Value
            {
                get
                {
                    return this.ModelElement.Powertype;
                }
                set
                {
                    this.ModelElement.Powertype = value;
                }
            }
        }
    }
}

