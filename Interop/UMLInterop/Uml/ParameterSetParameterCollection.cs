//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// Denotes a class to implement the parameter reference
    /// </summary>
    public class ParameterSetParameterCollection : ObservableOppositeSet<IParameterSet, NMF.Interop.Uml.IParameter>
    {
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="parent">the parent ParameterSet</param>
        public ParameterSetParameterCollection(IParameterSet parent) : 
                base(parent)
        {
        }
        
        private void OnItemDeleted(object sender, System.EventArgs e)
        {
            this.Remove(((NMF.Interop.Uml.IParameter)(sender)));
        }
        
        /// <summary>
        /// Sets the opposite of the given item
        /// </summary>
        /// <param name="item">the item</param>
        /// <param name="newParent">the new parent or null, if the item is removed from the collection</param>
        protected override void SetOpposite(NMF.Interop.Uml.IParameter item, IParameterSet newParent)
        {
            if ((newParent != null))
            {
                item.Deleted += this.OnItemDeleted;
                item.ParameterSet.Add(newParent);
            }
            else
            {
                item.Deleted -= this.OnItemDeleted;
                item.ParameterSet.Remove(this.Parent);
            }
        }
    }
}
