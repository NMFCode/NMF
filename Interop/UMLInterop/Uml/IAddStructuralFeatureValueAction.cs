//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for AddStructuralFeatureValueAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(AddStructuralFeatureValueAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(AddStructuralFeatureValueAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//AddStructuralFeatureValueAction")]
    public interface IAddStructuralFeatureValueAction : IModelElement, IWriteStructuralFeatureAction
    {
        
        /// <summary>
        /// Specifies whether existing values of the StructuralFeature should be removed before adding the new value.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReplaceAll")]
        [DescriptionAttribute("Specifies whether existing values of the StructuralFeature should be removed befo" +
            "re adding the new value.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("AddStructuralFeatureValueAction")]
        [XmlElementNameAttribute("isReplaceAll")]
        [XmlAttributeAttribute(true)]
        bool IsReplaceAll
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("insertAt")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IInputPin InsertAt
        {
            get;
            set;
        }
        
        /// <summary>
        /// A value InputPin is required.
        ///value<>null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Required_value(object diagnostics, object context);
        
        /// <summary>
        /// AddStructuralFeatureActions adding a value to ordered StructuralFeatures must have a single InputPin for the insertion point with type UnlimitedNatural and multiplicity of 1..1 if isReplaceAll=false, and must have no Input Pin for the insertion point when the StructuralFeature is unordered.
        ///if not structuralFeature.isOrdered then insertAt = null
        ///else 
        ///  not isReplaceAll implies
        ///  	insertAt<>null and 
        ///  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
        ///endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool InsertAt_pin(object diagnostics, object context);
    }
}

