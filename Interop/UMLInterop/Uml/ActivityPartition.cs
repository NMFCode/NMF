//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ActivityPartition is a kind of ActivityGroup for identifying ActivityNodes that have some characteristic in common.
    ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityPartition")]
    [DebuggerDisplayAttribute("ActivityPartition {Name}")]
    public partial class ActivityPartition : ActivityGroup, IActivityPartition, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _represents_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRepresents_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _represents_property_and_is_containedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRepresents_property_and_is_containedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _represents_propertyOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRepresents_propertyOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _dimension_not_containedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDimension_not_containedOperation);
        
        /// <summary>
        /// The backing field for the IsDimension property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDimension = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDimensionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDimensionAttribute);
        
        /// <summary>
        /// The backing field for the IsExternal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isExternal = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isExternalAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsExternalAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNodeReference);
        
        /// <summary>
        /// The backing field for the Node property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityPartitionNodeCollection _node;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _representsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRepresentsReference);
        
        /// <summary>
        /// The backing field for the Represents property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElement _represents;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subpartitionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubpartitionReference);
        
        /// <summary>
        /// The backing field for the Subpartition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityPartitionSubpartitionCollection _subpartition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _superPartitionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSuperPartitionReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _edgeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEdgeReference);
        
        /// <summary>
        /// The backing field for the Edge property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityPartitionEdgeCollection _edge;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ActivityPartition()
        {
            this._node = new ActivityPartitionNodeCollection(this);
            this._node.CollectionChanging += this.NodeCollectionChanging;
            this._node.CollectionChanged += this.NodeCollectionChanged;
            this._subpartition = new ActivityPartitionSubpartitionCollection(this);
            this._subpartition.CollectionChanging += this.SubpartitionCollectionChanging;
            this._subpartition.CollectionChanged += this.SubpartitionCollectionChanged;
            this._edge = new ActivityPartitionEdgeCollection(this);
            this._edge.CollectionChanging += this.EdgeCollectionChanging;
            this._edge.CollectionChanged += this.EdgeCollectionChanged;
        }
        
        /// <summary>
        /// Indicates whether the ActivityPartition groups other ActivityPartitions along a dimension.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDimension")]
        [DescriptionAttribute("Indicates whether the ActivityPartition groups other ActivityPartitions along a d" +
            "imension.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("isDimension")]
        [XmlAttributeAttribute(true)]
        public bool IsDimension
        {
            get
            {
                return this._isDimension;
            }
            set
            {
                if ((this._isDimension != value))
                {
                    bool old = this._isDimension;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDimension", e, _isDimensionAttribute);
                    this._isDimension = value;
                    this.OnPropertyChanged("IsDimension", e, _isDimensionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the ActivityPartition represents an entity to which the partitioning structure does not apply.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isExternal")]
        [DescriptionAttribute("Indicates whether the ActivityPartition represents an entity to which the partiti" +
            "oning structure does not apply.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("isExternal")]
        [XmlAttributeAttribute(true)]
        public bool IsExternal
        {
            get
            {
                return this._isExternal;
            }
            set
            {
                if ((this._isExternal != value))
                {
                    bool old = this._isExternal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsExternal", e, _isExternalAttribute);
                    this._isExternal = value;
                    this.OnPropertyChanged("IsExternal", e, _isExternalAttribute);
                }
            }
        }
        
        /// <summary>
        /// ActivityNodes immediately contained in the ActivityPartition.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("node")]
        [DescriptionAttribute("ActivityNodes immediately contained in the ActivityPartition.\n<p>From package UML" +
            "::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inPartition")]
        [ConstantAttribute()]
        public ISetExpression<IActivityNode> Node
        {
            get
            {
                return this._node;
            }
        }
        
        /// <summary>
        /// An Element represented by the functionality modeled within the ActivityPartition.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("represents")]
        [DescriptionAttribute("An Element represented by the functionality modeled within the ActivityPartition." +
            "\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("represents")]
        [XmlAttributeAttribute(true)]
        public IElement Represents
        {
            get
            {
                return this._represents;
            }
            set
            {
                if ((this._represents != value))
                {
                    IElement old = this._represents;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Represents", e, _representsReference);
                    this._represents = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRepresents;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRepresents;
                    }
                    this.OnPropertyChanged("Represents", e, _representsReference);
                }
            }
        }
        
        /// <summary>
        /// Other ActivityPartitions immediately contained in this ActivityPartition (as its subgroups).
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("subpartition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("superPartition")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IActivityPartition> Subpartition
        {
            get
            {
                return this._subpartition;
            }
        }
        
        /// <summary>
        /// Other ActivityPartitions immediately containing this ActivityPartition (as its superGroups).
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("superPartition")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("subpartition")]
        public IActivityPartition SuperPartition
        {
            get
            {
                return ModelHelper.CastAs<IActivityPartition>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// ActivityEdges immediately contained in the ActivityPartition.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("edge")]
        [DescriptionAttribute("ActivityEdges immediately contained in the ActivityPartition.\n<p>From package UML" +
            "::Activities.</p>")]
        [CategoryAttribute("ActivityPartition")]
        [XmlElementNameAttribute("edge")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inPartition")]
        [ConstantAttribute()]
        public ISetExpression<IActivityEdge> Edge
        {
            get
            {
                return this._edge;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ActivityPartitionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ActivityPartitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityPartition")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If a non-external ActivityPartition represents a Classifier and has a superPartition, then the superPartition must represent a Classifier, and the Classifier of the subpartition must be nested (nestedClassifier or ownedBehavior) in the Classifier represented by the superPartition, or be at the contained end of a composition Association with the Classifier represented by the superPartition.
        ///(not isExternal and represents.oclIsKindOf(Classifier) and superPartition-&gt;notEmpty()) implies
        ///(
        ///   let representedClassifier : Classifier = represents.oclAsType(Classifier) in
        ///     superPartition.represents.oclIsKindOf(Classifier) and
        ///      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in
        ///       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and 
        ///        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior-&gt;includes(representedClassifier.oclAsType(Behavior))) 
        ///       or
        ///       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier-&gt;includes(representedClassifier))
        ///       or
        ///       (Association.allInstances()-&gt;exists(a | a.memberEnd-&gt;exists(end1 | end1.isComposite and end1.type = representedClassifier and 
        ///                                                                      a.memberEnd-&gt;exists(end2 | end1&lt;&gt;end2 and end2.type = representedSuperClassifier))))
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Represents_classifier(object diagnostics, object context)
        {
            System.Func<IActivityPartition, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityPartition, object, object, bool>>(_represents_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method represents_classifier registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _represents_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _represents_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _represents_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRepresents_classifierOperation()
        {
            return ClassInstance.LookupOperation("represents_classifier");
        }
        
        /// <summary>
        /// If an ActivityPartition represents a Property and has a superPartition, then the Property must be of a Classifier represented by the superPartition, or of a Classifier that is the type of a Property represented by the superPartition.
        ///(represents.oclIsKindOf(Property) and superPartition-&gt;notEmpty()) implies
        ///(
        ///  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or 
        ///  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Represents_property_and_is_contained(object diagnostics, object context)
        {
            System.Func<IActivityPartition, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityPartition, object, object, bool>>(_represents_property_and_is_containedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method represents_property_and_is_contained regist" +
                        "ered. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _represents_property_and_is_containedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _represents_property_and_is_containedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _represents_property_and_is_containedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRepresents_property_and_is_containedOperation()
        {
            return ClassInstance.LookupOperation("represents_property_and_is_contained");
        }
        
        /// <summary>
        /// If an ActivityPartition represents a Property and has a superPartition representing a Classifier, then all the other non-external subpartitions of the superPartition must represent Properties directly owned by the same Classifier.
        ///(represents.oclIsKindOf(Property) and superPartition-&gt;notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies
        ///(
        ///  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)
        ///  in
        ///    superPartition.subpartition-&gt;reject(isExternal)-&gt;forAll(p | 
        ///       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Represents_property(object diagnostics, object context)
        {
            System.Func<IActivityPartition, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityPartition, object, object, bool>>(_represents_propertyOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method represents_property registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _represents_propertyOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _represents_propertyOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _represents_propertyOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRepresents_propertyOperation()
        {
            return ClassInstance.LookupOperation("represents_property");
        }
        
        /// <summary>
        /// An ActvivityPartition with isDimension = true may not be contained by another ActivityPartition.
        ///isDimension implies superPartition-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Dimension_not_contained(object diagnostics, object context)
        {
            System.Func<IActivityPartition, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityPartition, object, object, bool>>(_dimension_not_containedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method dimension_not_contained registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _dimension_not_containedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _dimension_not_containedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _dimension_not_containedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDimension_not_containedOperation()
        {
            return ClassInstance.LookupOperation("dimension_not_contained");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDimensionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("isDimension")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsExternalAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("isExternal")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("node")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Node", e, _nodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Node property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Node", e, _nodeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRepresentsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("represents")));
        }
        
        /// <summary>
        /// Handles the event that the Represents property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRepresents(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Represents))
            {
                this.Represents = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubpartitionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("subpartition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Subpartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubpartitionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Subpartition", e, _subpartitionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Subpartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubpartitionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Subpartition", e, _subpartitionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSuperPartitionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("superPartition")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IActivityPartition oldSuperPartition = ModelHelper.CastAs<IActivityPartition>(oldParent);
            IActivityPartition newSuperPartition = ModelHelper.CastAs<IActivityPartition>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSuperPartition, newSuperPartition);
            this.OnPropertyChanging("SuperPartition", e, _superPartitionReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IActivityPartition oldSuperPartition = ModelHelper.CastAs<IActivityPartition>(oldParent);
            IActivityPartition newSuperPartition = ModelHelper.CastAs<IActivityPartition>(newParent);
            if ((oldSuperPartition != null))
            {
                oldSuperPartition.Subpartition.Remove(this);
            }
            if ((newSuperPartition != null))
            {
                newSuperPartition.Subpartition.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSuperPartition, newSuperPartition);
            this.OnPropertyChanged("SuperPartition", e, _superPartitionReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEdgeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityPartition.ClassInstance)).Resolve("edge")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Edge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EdgeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Edge", e, _edgeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Edge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EdgeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Edge", e, _edgeReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int subpartitionIndex = ModelHelper.IndexOfReference(this.Subpartition, element);
            if ((subpartitionIndex != -1))
            {
                return ModelHelper.CreatePath("subpartition", subpartitionIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "REPRESENTS"))
            {
                return this.Represents;
            }
            if ((reference == "SUBPARTITION"))
            {
                if ((index < this.Subpartition.Count))
                {
                    return this.Subpartition[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SUPERPARTITION"))
            {
                return this.SuperPartition;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISDIMENSION"))
            {
                return this.IsDimension;
            }
            if ((attribute == "ISEXTERNAL"))
            {
                return this.IsExternal;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NODE"))
            {
                return this._node;
            }
            if ((feature == "SUBPARTITION"))
            {
                return this._subpartition;
            }
            if ((feature == "EDGE"))
            {
                return this._edge;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPRESENTS"))
            {
                this.Represents = ((IElement)(value));
                return;
            }
            if ((feature == "SUPERPARTITION"))
            {
                this.SuperPartition = ((IActivityPartition)(value));
                return;
            }
            if ((feature == "ISDIMENSION"))
            {
                this.IsDimension = ((bool)(value));
                return;
            }
            if ((feature == "ISEXTERNAL"))
            {
                this.IsExternal = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISDIMENSION"))
            {
                return Observable.Box(new IsDimensionProxy(this));
            }
            if ((attribute == "ISEXTERNAL"))
            {
                return Observable.Box(new IsExternalProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REPRESENTS"))
            {
                return new RepresentsProxy(this);
            }
            if ((reference == "SUPERPARTITION"))
            {
                return new SuperPartitionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._subpartition))
            {
                return "subpartition";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityPartition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityPartition class
        /// </summary>
        public class ActivityPartitionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityPartition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityPartitionChildrenCollection(ActivityPartition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Subpartition.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Subpartition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Subpartition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IActivityPartition subpartitionCasted = item.As<IActivityPartition>();
                if ((subpartitionCasted != null))
                {
                    this._parent.Subpartition.Add(subpartitionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Subpartition.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Subpartition.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> subpartitionEnumerator = this._parent.Subpartition.GetEnumerator();
                try
                {
                    for (
                    ; subpartitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subpartitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subpartitionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IActivityPartition activityPartitionItem = item.As<IActivityPartition>();
                if (((activityPartitionItem != null) 
                            && this._parent.Subpartition.Remove(activityPartitionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Subpartition).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityPartition class
        /// </summary>
        public class ActivityPartitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityPartition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityPartitionReferencedElementsCollection(ActivityPartition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Node.Count);
                    if ((this._parent.Represents != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Subpartition.Count);
                    if ((this._parent.SuperPartition != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Edge.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Node.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Subpartition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Edge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Node.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Subpartition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Edge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IActivityNode nodeCasted = item.As<IActivityNode>();
                if ((nodeCasted != null))
                {
                    this._parent.Node.Add(nodeCasted);
                }
                if ((this._parent.Represents == null))
                {
                    IElement representsCasted = item.As<IElement>();
                    if ((representsCasted != null))
                    {
                        this._parent.Represents = representsCasted;
                        return;
                    }
                }
                IActivityPartition subpartitionCasted = item.As<IActivityPartition>();
                if ((subpartitionCasted != null))
                {
                    this._parent.Subpartition.Add(subpartitionCasted);
                }
                if ((this._parent.SuperPartition == null))
                {
                    IActivityPartition superPartitionCasted = item.As<IActivityPartition>();
                    if ((superPartitionCasted != null))
                    {
                        this._parent.SuperPartition = superPartitionCasted;
                        return;
                    }
                }
                IActivityEdge edgeCasted = item.As<IActivityEdge>();
                if ((edgeCasted != null))
                {
                    this._parent.Edge.Add(edgeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Node.Clear();
                this._parent.Represents = null;
                this._parent.Subpartition.Clear();
                this._parent.SuperPartition = null;
                this._parent.Edge.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Node.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Represents))
                {
                    return true;
                }
                if (this._parent.Subpartition.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SuperPartition))
                {
                    return true;
                }
                if (this._parent.Edge.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nodeEnumerator = this._parent.Node.GetEnumerator();
                try
                {
                    for (
                    ; nodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeEnumerator.Dispose();
                }
                if ((this._parent.Represents != null))
                {
                    array[arrayIndex] = this._parent.Represents;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> subpartitionEnumerator = this._parent.Subpartition.GetEnumerator();
                try
                {
                    for (
                    ; subpartitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subpartitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subpartitionEnumerator.Dispose();
                }
                if ((this._parent.SuperPartition != null))
                {
                    array[arrayIndex] = this._parent.SuperPartition;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> edgeEnumerator = this._parent.Edge.GetEnumerator();
                try
                {
                    for (
                    ; edgeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = edgeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    edgeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IActivityNode activityNodeItem = item.As<IActivityNode>();
                if (((activityNodeItem != null) 
                            && this._parent.Node.Remove(activityNodeItem)))
                {
                    return true;
                }
                if ((this._parent.Represents == item))
                {
                    this._parent.Represents = null;
                    return true;
                }
                IActivityPartition activityPartitionItem = item.As<IActivityPartition>();
                if (((activityPartitionItem != null) 
                            && this._parent.Subpartition.Remove(activityPartitionItem)))
                {
                    return true;
                }
                if ((this._parent.SuperPartition == item))
                {
                    this._parent.SuperPartition = null;
                    return true;
                }
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.Edge.Remove(activityEdgeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Node).Concat(this._parent.Represents).Concat(this._parent.Subpartition).Concat(this._parent.SuperPartition).Concat(this._parent.Edge).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDimension property
        /// </summary>
        private sealed class IsDimensionProxy : ModelPropertyChange<IActivityPartition, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDimensionProxy(IActivityPartition modelElement) : 
                    base(modelElement, "isDimension")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDimension;
                }
                set
                {
                    this.ModelElement.IsDimension = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isExternal property
        /// </summary>
        private sealed class IsExternalProxy : ModelPropertyChange<IActivityPartition, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsExternalProxy(IActivityPartition modelElement) : 
                    base(modelElement, "isExternal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsExternal;
                }
                set
                {
                    this.ModelElement.IsExternal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the represents property
        /// </summary>
        private sealed class RepresentsProxy : ModelPropertyChange<IActivityPartition, IElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepresentsProxy(IActivityPartition modelElement) : 
                    base(modelElement, "represents")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElement Value
            {
                get
                {
                    return this.ModelElement.Represents;
                }
                set
                {
                    this.ModelElement.Represents = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the superPartition property
        /// </summary>
        private sealed class SuperPartitionProxy : ModelPropertyChange<IActivityPartition, IActivityPartition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuperPartitionProxy(IActivityPartition modelElement) : 
                    base(modelElement, "superPartition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivityPartition Value
            {
                get
                {
                    return this.ModelElement.SuperPartition;
                }
                set
                {
                    this.ModelElement.SuperPartition = value;
                }
            }
        }
    }
}
