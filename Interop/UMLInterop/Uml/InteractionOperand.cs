//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represents one operand of the expression given by the enclosing CombinedFragment.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionOperand")]
    [DebuggerDisplayAttribute("InteractionOperand {Name}")]
    public partial class InteractionOperand : Namespace, IInteractionOperand, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _guard_contain_referencesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGuard_contain_referencesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _guard_directly_priorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGuard_directly_priorOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _fragmentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFragmentReference);
        
        /// <summary>
        /// The backing field for the Fragment property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionOperandFragmentCollection _fragment;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _guardReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGuardReference);
        
        /// <summary>
        /// The backing field for the Guard property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteractionConstraint _guard;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _coveredReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCoveredReference);
        
        /// <summary>
        /// The backing field for the Covered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionFragmentCoveredCollection _covered;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _enclosingOperandReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEnclosingOperandReference);
        
        /// <summary>
        /// The backing field for the EnclosingOperand property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteractionOperand _enclosingOperand;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _enclosingInteractionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEnclosingInteractionReference);
        
        /// <summary>
        /// The backing field for the EnclosingInteraction property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInteraction _enclosingInteraction;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalOrderingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralOrderingReference);
        
        /// <summary>
        /// The backing field for the GeneralOrdering property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IGeneralOrdering> _generalOrdering;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public InteractionOperand()
        {
            this._fragment = new InteractionOperandFragmentCollection(this);
            this._fragment.CollectionChanging += this.FragmentCollectionChanging;
            this._fragment.CollectionChanged += this.FragmentCollectionChanged;
            this._covered = new InteractionFragmentCoveredCollection(this);
            this._covered.CollectionChanging += this.CoveredCollectionChanging;
            this._covered.CollectionChanged += this.CoveredCollectionChanged;
            this._generalOrdering = new ObservableCompositionOrderedSet<IGeneralOrdering>(this);
            this._generalOrdering.CollectionChanging += this.GeneralOrderingCollectionChanging;
            this._generalOrdering.CollectionChanged += this.GeneralOrderingCollectionChanged;
        }
        
        /// <summary>
        /// The fragments of the operand.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("fragment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("enclosingOperand")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInteractionFragment> Fragment
        {
            get
            {
                return this._fragment;
            }
        }
        
        /// <summary>
        /// Constraint of the operand.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("guard")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInteractionConstraint Guard
        {
            get
            {
                return this._guard;
            }
            set
            {
                if ((this._guard != value))
                {
                    IInteractionConstraint old = this._guard;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Guard", e, _guardReference);
                    this._guard = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetGuard;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetGuard;
                    }
                    this.OnPropertyChanged("Guard", e, _guardReference);
                }
            }
        }
        
        /// <summary>
        /// References the Lifelines that the InteractionFragment involves.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("covered")]
        [DescriptionAttribute("References the Lifelines that the InteractionFragment involves.\n<p>From package U" +
            "ML::Interactions.</p>")]
        [CategoryAttribute("InteractionFragment")]
        [XmlElementNameAttribute("covered")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("coveredBy")]
        [ConstantAttribute()]
        public ISetExpression<ILifeline> Covered
        {
            get
            {
                return this._covered;
            }
        }
        
        /// <summary>
        /// The operand enclosing this InteractionFragment (they may nest recursively).
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("enclosingOperand")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("fragment")]
        public IInteractionOperand EnclosingOperand
        {
            get
            {
                return this._enclosingOperand;
            }
            set
            {
                if ((this._enclosingOperand != value))
                {
                    IInteractionOperand old = this._enclosingOperand;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("EnclosingOperand", e, _enclosingOperandReference);
                    this._enclosingOperand = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Fragment.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Fragment.Add(this);
                    }
                    this.OnPropertyChanged("EnclosingOperand", e, _enclosingOperandReference);
                }
            }
        }
        
        /// <summary>
        /// The Interaction enclosing this InteractionFragment.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("enclosingInteraction")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("fragment")]
        public IInteraction EnclosingInteraction
        {
            get
            {
                return this._enclosingInteraction;
            }
            set
            {
                if ((this._enclosingInteraction != value))
                {
                    IInteraction old = this._enclosingInteraction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("EnclosingInteraction", e, _enclosingInteractionReference);
                    this._enclosingInteraction = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Fragment.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Fragment.Add(this);
                    }
                    this.OnPropertyChanged("EnclosingInteraction", e, _enclosingInteractionReference);
                }
            }
        }
        
        /// <summary>
        /// The general ordering relationships contained in this fragment.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("generalOrdering")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IGeneralOrdering> GeneralOrdering
        {
            get
            {
                return this._generalOrdering;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InteractionOperandChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InteractionOperandReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionOperand")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Guard_contain_references(object diagnostics, object context)
        {
            System.Func<IInteractionOperand, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionOperand, object, object, bool>>(_guard_contain_referencesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method guard_contain_references registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _guard_contain_referencesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _guard_contain_referencesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _guard_contain_referencesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGuard_contain_referencesOperation()
        {
            return ClassInstance.LookupOperation("guard_contain_references");
        }
        
        /// <summary>
        /// The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Guard_directly_prior(object diagnostics, object context)
        {
            System.Func<IInteractionOperand, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInteractionOperand, object, object, bool>>(_guard_directly_priorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method guard_directly_prior registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _guard_directly_priorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _guard_directly_priorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _guard_directly_priorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGuard_directly_priorOperation()
        {
            return ClassInstance.LookupOperation("guard_directly_prior");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFragmentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionOperand.ClassInstance)).Resolve("fragment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Fragment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FragmentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Fragment", e, _fragmentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Fragment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FragmentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Fragment", e, _fragmentReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGuardReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionOperand.ClassInstance)).Resolve("guard")));
        }
        
        /// <summary>
        /// Handles the event that the Guard property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGuard(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Guard))
            {
                this.Guard = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCoveredReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("covered")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Covered property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Covered", e, _coveredReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Covered property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoveredCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Covered", e, _coveredReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEnclosingOperandReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("enclosingOperand")));
        }
        
        /// <summary>
        /// Handles the event that the EnclosingOperand property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnclosingOperand(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.EnclosingOperand))
            {
                this.EnclosingOperand = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEnclosingInteractionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("enclosingInteraction")));
        }
        
        /// <summary>
        /// Handles the event that the EnclosingInteraction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnclosingInteraction(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.EnclosingInteraction))
            {
                this.EnclosingInteraction = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralOrderingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InteractionFragment.ClassInstance)).Resolve("generalOrdering")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneralOrdering property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralOrderingCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GeneralOrdering", e, _generalOrderingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneralOrdering property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralOrderingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneralOrdering", e, _generalOrderingReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int fragmentIndex = ModelHelper.IndexOfReference(this.Fragment, element);
            if ((fragmentIndex != -1))
            {
                return ModelHelper.CreatePath("fragment", fragmentIndex);
            }
            if ((element == this.Guard))
            {
                return ModelHelper.CreatePath("guard");
            }
            int generalOrderingIndex = ModelHelper.IndexOfReference(this.GeneralOrdering, element);
            if ((generalOrderingIndex != -1))
            {
                return ModelHelper.CreatePath("generalOrdering", generalOrderingIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FRAGMENT"))
            {
                if ((index < this.Fragment.Count))
                {
                    return this.Fragment[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "GUARD"))
            {
                return this.Guard;
            }
            if ((reference == "ENCLOSINGOPERAND"))
            {
                return this.EnclosingOperand;
            }
            if ((reference == "ENCLOSINGINTERACTION"))
            {
                return this.EnclosingInteraction;
            }
            if ((reference == "GENERALORDERING"))
            {
                if ((index < this.GeneralOrdering.Count))
                {
                    return this.GeneralOrdering[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FRAGMENT"))
            {
                return this._fragment;
            }
            if ((feature == "COVERED"))
            {
                return this._covered;
            }
            if ((feature == "GENERALORDERING"))
            {
                return this._generalOrdering;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GUARD"))
            {
                this.Guard = ((IInteractionConstraint)(value));
                return;
            }
            if ((feature == "ENCLOSINGOPERAND"))
            {
                this.EnclosingOperand = ((IInteractionOperand)(value));
                return;
            }
            if ((feature == "ENCLOSINGINTERACTION"))
            {
                this.EnclosingInteraction = ((IInteraction)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GUARD"))
            {
                return new GuardProxy(this);
            }
            if ((reference == "ENCLOSINGOPERAND"))
            {
                return new EnclosingOperandProxy(this);
            }
            if ((reference == "ENCLOSINGINTERACTION"))
            {
                return new EnclosingInteractionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._fragment))
            {
                return "fragment";
            }
            if ((container == this._generalOrdering))
            {
                return "generalOrdering";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InteractionOperand")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionOperand class
        /// </summary>
        public class InteractionOperandChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionOperand _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionOperandChildrenCollection(InteractionOperand parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Fragment.Count);
                    if ((this._parent.Guard != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneralOrdering.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Fragment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.GeneralOrdering.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Fragment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.GeneralOrdering.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInteractionFragment fragmentCasted = item.As<IInteractionFragment>();
                if ((fragmentCasted != null))
                {
                    this._parent.Fragment.Add(fragmentCasted);
                }
                if ((this._parent.Guard == null))
                {
                    IInteractionConstraint guardCasted = item.As<IInteractionConstraint>();
                    if ((guardCasted != null))
                    {
                        this._parent.Guard = guardCasted;
                        return;
                    }
                }
                IGeneralOrdering generalOrderingCasted = item.As<IGeneralOrdering>();
                if ((generalOrderingCasted != null))
                {
                    this._parent.GeneralOrdering.Add(generalOrderingCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Fragment.Clear();
                this._parent.Guard = null;
                this._parent.GeneralOrdering.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Fragment.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Guard))
                {
                    return true;
                }
                if (this._parent.GeneralOrdering.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> fragmentEnumerator = this._parent.Fragment.GetEnumerator();
                try
                {
                    for (
                    ; fragmentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fragmentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fragmentEnumerator.Dispose();
                }
                if ((this._parent.Guard != null))
                {
                    array[arrayIndex] = this._parent.Guard;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generalOrderingEnumerator = this._parent.GeneralOrdering.GetEnumerator();
                try
                {
                    for (
                    ; generalOrderingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generalOrderingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generalOrderingEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInteractionFragment interactionFragmentItem = item.As<IInteractionFragment>();
                if (((interactionFragmentItem != null) 
                            && this._parent.Fragment.Remove(interactionFragmentItem)))
                {
                    return true;
                }
                if ((this._parent.Guard == item))
                {
                    this._parent.Guard = null;
                    return true;
                }
                IGeneralOrdering generalOrderingItem = item.As<IGeneralOrdering>();
                if (((generalOrderingItem != null) 
                            && this._parent.GeneralOrdering.Remove(generalOrderingItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Fragment).Concat(this._parent.Guard).Concat(this._parent.GeneralOrdering).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InteractionOperand class
        /// </summary>
        public class InteractionOperandReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InteractionOperand _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InteractionOperandReferencedElementsCollection(InteractionOperand parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Fragment.Count);
                    if ((this._parent.Guard != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Covered.Count);
                    if ((this._parent.EnclosingOperand != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EnclosingInteraction != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneralOrdering.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Fragment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.Covered.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.GeneralOrdering.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Fragment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.Covered.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.GeneralOrdering.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInteractionFragment fragmentCasted = item.As<IInteractionFragment>();
                if ((fragmentCasted != null))
                {
                    this._parent.Fragment.Add(fragmentCasted);
                }
                if ((this._parent.Guard == null))
                {
                    IInteractionConstraint guardCasted = item.As<IInteractionConstraint>();
                    if ((guardCasted != null))
                    {
                        this._parent.Guard = guardCasted;
                        return;
                    }
                }
                ILifeline coveredCasted = item.As<ILifeline>();
                if ((coveredCasted != null))
                {
                    this._parent.Covered.Add(coveredCasted);
                }
                if ((this._parent.EnclosingOperand == null))
                {
                    IInteractionOperand enclosingOperandCasted = item.As<IInteractionOperand>();
                    if ((enclosingOperandCasted != null))
                    {
                        this._parent.EnclosingOperand = enclosingOperandCasted;
                        return;
                    }
                }
                if ((this._parent.EnclosingInteraction == null))
                {
                    IInteraction enclosingInteractionCasted = item.As<IInteraction>();
                    if ((enclosingInteractionCasted != null))
                    {
                        this._parent.EnclosingInteraction = enclosingInteractionCasted;
                        return;
                    }
                }
                IGeneralOrdering generalOrderingCasted = item.As<IGeneralOrdering>();
                if ((generalOrderingCasted != null))
                {
                    this._parent.GeneralOrdering.Add(generalOrderingCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Fragment.Clear();
                this._parent.Guard = null;
                this._parent.Covered.Clear();
                this._parent.EnclosingOperand = null;
                this._parent.EnclosingInteraction = null;
                this._parent.GeneralOrdering.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Fragment.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Guard))
                {
                    return true;
                }
                if (this._parent.Covered.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.EnclosingOperand))
                {
                    return true;
                }
                if ((item == this._parent.EnclosingInteraction))
                {
                    return true;
                }
                if (this._parent.GeneralOrdering.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> fragmentEnumerator = this._parent.Fragment.GetEnumerator();
                try
                {
                    for (
                    ; fragmentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fragmentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fragmentEnumerator.Dispose();
                }
                if ((this._parent.Guard != null))
                {
                    array[arrayIndex] = this._parent.Guard;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> coveredEnumerator = this._parent.Covered.GetEnumerator();
                try
                {
                    for (
                    ; coveredEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = coveredEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    coveredEnumerator.Dispose();
                }
                if ((this._parent.EnclosingOperand != null))
                {
                    array[arrayIndex] = this._parent.EnclosingOperand;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EnclosingInteraction != null))
                {
                    array[arrayIndex] = this._parent.EnclosingInteraction;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generalOrderingEnumerator = this._parent.GeneralOrdering.GetEnumerator();
                try
                {
                    for (
                    ; generalOrderingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generalOrderingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generalOrderingEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInteractionFragment interactionFragmentItem = item.As<IInteractionFragment>();
                if (((interactionFragmentItem != null) 
                            && this._parent.Fragment.Remove(interactionFragmentItem)))
                {
                    return true;
                }
                if ((this._parent.Guard == item))
                {
                    this._parent.Guard = null;
                    return true;
                }
                ILifeline lifelineItem = item.As<ILifeline>();
                if (((lifelineItem != null) 
                            && this._parent.Covered.Remove(lifelineItem)))
                {
                    return true;
                }
                if ((this._parent.EnclosingOperand == item))
                {
                    this._parent.EnclosingOperand = null;
                    return true;
                }
                if ((this._parent.EnclosingInteraction == item))
                {
                    this._parent.EnclosingInteraction = null;
                    return true;
                }
                IGeneralOrdering generalOrderingItem = item.As<IGeneralOrdering>();
                if (((generalOrderingItem != null) 
                            && this._parent.GeneralOrdering.Remove(generalOrderingItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Fragment).Concat(this._parent.Guard).Concat(this._parent.Covered).Concat(this._parent.EnclosingOperand).Concat(this._parent.EnclosingInteraction).Concat(this._parent.GeneralOrdering).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the guard property
        /// </summary>
        private sealed class GuardProxy : ModelPropertyChange<IInteractionOperand, IInteractionConstraint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GuardProxy(IInteractionOperand modelElement) : 
                    base(modelElement, "guard")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteractionConstraint Value
            {
                get
                {
                    return this.ModelElement.Guard;
                }
                set
                {
                    this.ModelElement.Guard = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enclosingOperand property
        /// </summary>
        private sealed class EnclosingOperandProxy : ModelPropertyChange<IInteractionFragment, IInteractionOperand>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnclosingOperandProxy(IInteractionFragment modelElement) : 
                    base(modelElement, "enclosingOperand")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteractionOperand Value
            {
                get
                {
                    return this.ModelElement.EnclosingOperand;
                }
                set
                {
                    this.ModelElement.EnclosingOperand = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enclosingInteraction property
        /// </summary>
        private sealed class EnclosingInteractionProxy : ModelPropertyChange<IInteractionFragment, IInteraction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnclosingInteractionProxy(IInteractionFragment modelElement) : 
                    base(modelElement, "enclosingInteraction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInteraction Value
            {
                get
                {
                    return this.ModelElement.EnclosingInteraction;
                }
                set
                {
                    this.ModelElement.EnclosingInteraction = value;
                }
            }
        }
    }
}
