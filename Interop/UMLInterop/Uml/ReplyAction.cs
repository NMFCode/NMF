//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ReplyAction is an Action that accepts a set of reply values and a value containing return information produced by a previous AcceptCallAction. The ReplyAction returns the values to the caller of the previous call, completing execution of the call.
    ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReplyAction")]
    [DebuggerDisplayAttribute("ReplyAction {Name}")]
    public partial class ReplyAction : Action, IReplyAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _pins_match_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrievePins_match_parameterOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _event_on_reply_to_call_triggerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEvent_on_reply_to_call_triggerOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _replyToCallReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReplyToCallReference);
        
        /// <summary>
        /// The backing field for the ReplyToCall property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITrigger _replyToCall;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _replyValueReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReplyValueReference);
        
        /// <summary>
        /// The backing field for the ReplyValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IInputPin> _replyValue;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _returnInformationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReturnInformationReference);
        
        /// <summary>
        /// The backing field for the ReturnInformation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _returnInformation;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ReplyAction()
        {
            this._replyValue = new ObservableCompositionOrderedSet<IInputPin>(this);
            this._replyValue.CollectionChanging += this.ReplyValueCollectionChanging;
            this._replyValue.CollectionChanged += this.ReplyValueCollectionChanged;
        }
        
        /// <summary>
        /// The Trigger specifying the Operation whose call is being replied to.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("replyToCall")]
        [DescriptionAttribute("The Trigger specifying the Operation whose call is being replied to.\n<p>From pack" +
            "age UML::Actions.</p>")]
        [CategoryAttribute("ReplyAction")]
        [XmlElementNameAttribute("replyToCall")]
        [XmlAttributeAttribute(true)]
        public ITrigger ReplyToCall
        {
            get
            {
                return this._replyToCall;
            }
            set
            {
                if ((this._replyToCall != value))
                {
                    ITrigger old = this._replyToCall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ReplyToCall", e, _replyToCallReference);
                    this._replyToCall = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReplyToCall;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReplyToCall;
                    }
                    this.OnPropertyChanged("ReplyToCall", e, _replyToCallReference);
                }
            }
        }
        
        /// <summary>
        /// A list of InputPins providing the values for the output (inout, out, and return) Parameters of the Operation. These values are returned to the caller.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("replyValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInputPin> ReplyValue
        {
            get
            {
                return this._replyValue;
            }
        }
        
        /// <summary>
        /// An InputPin that holds the return information value produced by an earlier AcceptCallAction.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("returnInformation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin ReturnInformation
        {
            get
            {
                return this._returnInformation;
            }
            set
            {
                if ((this._returnInformation != value))
                {
                    IInputPin old = this._returnInformation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ReturnInformation", e, _returnInformationReference);
                    this._returnInformation = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetReturnInformation;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetReturnInformation;
                    }
                    this.OnPropertyChanged("ReturnInformation", e, _returnInformationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ReplyActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReplyActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReplyAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The replyValue InputPins must match the output (return, out, and inout) parameters of the operation of the event of the replyToCall Trigger in number, type, ordering, and multiplicity.
        ///let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in
        ///replyValue-&gt;size()=parameter-&gt;size() and
        ///Sequence{1..replyValue-&gt;size()}-&gt;forAll(i |
        ///	replyValue-&gt;at(i).type.conformsTo(parameter-&gt;at(i).type) and
        ///	replyValue-&gt;at(i).isOrdered=parameter-&gt;at(i).isOrdered and
        ///	replyValue-&gt;at(i).compatibleWith(parameter-&gt;at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Pins_match_parameter(object diagnostics, object context)
        {
            System.Func<IReplyAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReplyAction, object, object, bool>>(_pins_match_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method pins_match_parameter registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _pins_match_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _pins_match_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _pins_match_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrievePins_match_parameterOperation()
        {
            return ClassInstance.LookupOperation("pins_match_parameter");
        }
        
        /// <summary>
        /// The event of the replyToCall Trigger must be a CallEvent.
        ///replyToCall.event.oclIsKindOf(CallEvent)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Event_on_reply_to_call_trigger(object diagnostics, object context)
        {
            System.Func<IReplyAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReplyAction, object, object, bool>>(_event_on_reply_to_call_triggerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method event_on_reply_to_call_trigger registered. " +
                        "Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _event_on_reply_to_call_triggerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _event_on_reply_to_call_triggerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _event_on_reply_to_call_triggerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEvent_on_reply_to_call_triggerOperation()
        {
            return ClassInstance.LookupOperation("event_on_reply_to_call_trigger");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReplyToCallReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReplyAction.ClassInstance)).Resolve("replyToCall")));
        }
        
        /// <summary>
        /// Handles the event that the ReplyToCall property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReplyToCall(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.ReplyToCall))
            {
                this.ReplyToCall = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReplyValueReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReplyAction.ClassInstance)).Resolve("replyValue")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReplyValue property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReplyValueCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ReplyValue", e, _replyValueReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReplyValue property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReplyValueCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReplyValue", e, _replyValueReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReturnInformationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReplyAction.ClassInstance)).Resolve("returnInformation")));
        }
        
        /// <summary>
        /// Handles the event that the ReturnInformation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReturnInformation(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.ReturnInformation))
            {
                this.ReturnInformation = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int replyValueIndex = ModelHelper.IndexOfReference(this.ReplyValue, element);
            if ((replyValueIndex != -1))
            {
                return ModelHelper.CreatePath("replyValue", replyValueIndex);
            }
            if ((element == this.ReturnInformation))
            {
                return ModelHelper.CreatePath("returnInformation");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "REPLYTOCALL"))
            {
                return this.ReplyToCall;
            }
            if ((reference == "REPLYVALUE"))
            {
                if ((index < this.ReplyValue.Count))
                {
                    return this.ReplyValue[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "RETURNINFORMATION"))
            {
                return this.ReturnInformation;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REPLYVALUE"))
            {
                return this._replyValue;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPLYTOCALL"))
            {
                this.ReplyToCall = ((ITrigger)(value));
                return;
            }
            if ((feature == "RETURNINFORMATION"))
            {
                this.ReturnInformation = ((IInputPin)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REPLYTOCALL"))
            {
                return new ReplyToCallProxy(this);
            }
            if ((reference == "RETURNINFORMATION"))
            {
                return new ReturnInformationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._replyValue))
            {
                return "replyValue";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReplyAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReplyAction class
        /// </summary>
        public class ReplyActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReplyAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReplyActionChildrenCollection(ReplyAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ReplyValue.Count);
                    if ((this._parent.ReturnInformation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ReplyValue.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ReplyValue.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInputPin replyValueCasted = item.As<IInputPin>();
                if ((replyValueCasted != null))
                {
                    this._parent.ReplyValue.Add(replyValueCasted);
                }
                if ((this._parent.ReturnInformation == null))
                {
                    IInputPin returnInformationCasted = item.As<IInputPin>();
                    if ((returnInformationCasted != null))
                    {
                        this._parent.ReturnInformation = returnInformationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReplyValue.Clear();
                this._parent.ReturnInformation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ReplyValue.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReturnInformation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> replyValueEnumerator = this._parent.ReplyValue.GetEnumerator();
                try
                {
                    for (
                    ; replyValueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = replyValueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    replyValueEnumerator.Dispose();
                }
                if ((this._parent.ReturnInformation != null))
                {
                    array[arrayIndex] = this._parent.ReturnInformation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.ReplyValue.Remove(inputPinItem)))
                {
                    return true;
                }
                if ((this._parent.ReturnInformation == item))
                {
                    this._parent.ReturnInformation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReplyValue).Concat(this._parent.ReturnInformation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReplyAction class
        /// </summary>
        public class ReplyActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReplyAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReplyActionReferencedElementsCollection(ReplyAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ReplyToCall != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ReplyValue.Count);
                    if ((this._parent.ReturnInformation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.ReplyValue.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.ReplyValue.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ReplyToCall == null))
                {
                    ITrigger replyToCallCasted = item.As<ITrigger>();
                    if ((replyToCallCasted != null))
                    {
                        this._parent.ReplyToCall = replyToCallCasted;
                        return;
                    }
                }
                IInputPin replyValueCasted = item.As<IInputPin>();
                if ((replyValueCasted != null))
                {
                    this._parent.ReplyValue.Add(replyValueCasted);
                }
                if ((this._parent.ReturnInformation == null))
                {
                    IInputPin returnInformationCasted = item.As<IInputPin>();
                    if ((returnInformationCasted != null))
                    {
                        this._parent.ReturnInformation = returnInformationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReplyToCall = null;
                this._parent.ReplyValue.Clear();
                this._parent.ReturnInformation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ReplyToCall))
                {
                    return true;
                }
                if (this._parent.ReplyValue.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReturnInformation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ReplyToCall != null))
                {
                    array[arrayIndex] = this._parent.ReplyToCall;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> replyValueEnumerator = this._parent.ReplyValue.GetEnumerator();
                try
                {
                    for (
                    ; replyValueEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = replyValueEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    replyValueEnumerator.Dispose();
                }
                if ((this._parent.ReturnInformation != null))
                {
                    array[arrayIndex] = this._parent.ReturnInformation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ReplyToCall == item))
                {
                    this._parent.ReplyToCall = null;
                    return true;
                }
                IInputPin inputPinItem = item.As<IInputPin>();
                if (((inputPinItem != null) 
                            && this._parent.ReplyValue.Remove(inputPinItem)))
                {
                    return true;
                }
                if ((this._parent.ReturnInformation == item))
                {
                    this._parent.ReturnInformation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReplyToCall).Concat(this._parent.ReplyValue).Concat(this._parent.ReturnInformation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the replyToCall property
        /// </summary>
        private sealed class ReplyToCallProxy : ModelPropertyChange<IReplyAction, ITrigger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReplyToCallProxy(IReplyAction modelElement) : 
                    base(modelElement, "replyToCall")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITrigger Value
            {
                get
                {
                    return this.ModelElement.ReplyToCall;
                }
                set
                {
                    this.ModelElement.ReplyToCall = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the returnInformation property
        /// </summary>
        private sealed class ReturnInformationProxy : ModelPropertyChange<IReplyAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReturnInformationProxy(IReplyAction modelElement) : 
                    base(modelElement, "returnInformation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.ReturnInformation;
                }
                set
                {
                    this.ModelElement.ReturnInformation = value;
                }
            }
        }
    }
}
