//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    public class InteractionOperatorKindConverter : TypeConverter
    {
        
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(InteractionOperatorKind);
            }
            string valueString = value.ToString();
            if ((valueString == "seq"))
            {
                return InteractionOperatorKind.Seq;
            }
            if ((valueString == "alt"))
            {
                return InteractionOperatorKind.Alt;
            }
            if ((valueString == "opt"))
            {
                return InteractionOperatorKind.Opt;
            }
            if ((valueString == "break"))
            {
                return InteractionOperatorKind.Break;
            }
            if ((valueString == "par"))
            {
                return InteractionOperatorKind.Par;
            }
            if ((valueString == "strict"))
            {
                return InteractionOperatorKind.Strict;
            }
            if ((valueString == "loop"))
            {
                return InteractionOperatorKind.Loop;
            }
            if ((valueString == "critical"))
            {
                return InteractionOperatorKind.Critical;
            }
            if ((valueString == "neg"))
            {
                return InteractionOperatorKind.Neg;
            }
            if ((valueString == "assert"))
            {
                return InteractionOperatorKind.Assert;
            }
            if ((valueString == "ignore"))
            {
                return InteractionOperatorKind.Ignore;
            }
            if ((valueString == "consider"))
            {
                return InteractionOperatorKind.Consider;
            }
            return default(InteractionOperatorKind);
        }
        
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            InteractionOperatorKind valueCasted = ((InteractionOperatorKind)(value));
            if ((valueCasted == InteractionOperatorKind.Seq))
            {
                return "seq";
            }
            if ((valueCasted == InteractionOperatorKind.Alt))
            {
                return "alt";
            }
            if ((valueCasted == InteractionOperatorKind.Opt))
            {
                return "opt";
            }
            if ((valueCasted == InteractionOperatorKind.Break))
            {
                return "break";
            }
            if ((valueCasted == InteractionOperatorKind.Par))
            {
                return "par";
            }
            if ((valueCasted == InteractionOperatorKind.Strict))
            {
                return "strict";
            }
            if ((valueCasted == InteractionOperatorKind.Loop))
            {
                return "loop";
            }
            if ((valueCasted == InteractionOperatorKind.Critical))
            {
                return "critical";
            }
            if ((valueCasted == InteractionOperatorKind.Neg))
            {
                return "neg";
            }
            if ((valueCasted == InteractionOperatorKind.Assert))
            {
                return "assert";
            }
            if ((valueCasted == InteractionOperatorKind.Ignore))
            {
                return "ignore";
            }
            if ((valueCasted == InteractionOperatorKind.Consider))
            {
                return "consider";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

