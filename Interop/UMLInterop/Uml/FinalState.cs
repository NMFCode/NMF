//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//FinalState")]
    [DebuggerDisplayAttribute("FinalState {Name}")]
    public partial class FinalState : State, IFinalState, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_exit_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_exit_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_outgoing_transitionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_outgoing_transitionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_regionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_regionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _cannot_reference_submachineOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCannot_reference_submachineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_entry_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_entry_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_state_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_state_behaviorOperation);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//FinalState")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A FinalState has no exit Behavior.
        ///exit->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_exit_behavior(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_no_exit_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_exit_behavior registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_exit_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_exit_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_exit_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_exit_behaviorOperation()
        {
            return ClassInstance.LookupOperation("no_exit_behavior");
        }
        
        /// <summary>
        /// A FinalState cannot have any outgoing Transitions.
        ///outgoing->size() = 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_outgoing_transitions(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_no_outgoing_transitionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_outgoing_transitions registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_outgoing_transitionsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_outgoing_transitionsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_outgoing_transitionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_outgoing_transitionsOperation()
        {
            return ClassInstance.LookupOperation("no_outgoing_transitions");
        }
        
        /// <summary>
        /// A FinalState cannot have Regions.
        ///region->size() = 0
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_regions(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_no_regionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_regions registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_regionsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_regionsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_regionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_regionsOperation()
        {
            return ClassInstance.LookupOperation("no_regions");
        }
        
        /// <summary>
        /// A FinalState cannot reference a submachine.
        ///submachine->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Cannot_reference_submachine(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_cannot_reference_submachineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method cannot_reference_submachine registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _cannot_reference_submachineOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _cannot_reference_submachineOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _cannot_reference_submachineOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCannot_reference_submachineOperation()
        {
            return ClassInstance.LookupOperation("cannot_reference_submachine");
        }
        
        /// <summary>
        /// A FinalState has no entry Behavior.
        ///entry->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_entry_behavior(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_no_entry_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_entry_behavior registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_entry_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_entry_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_entry_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_entry_behaviorOperation()
        {
            return ClassInstance.LookupOperation("no_entry_behavior");
        }
        
        /// <summary>
        /// A FinalState has no state (doActivity) Behavior.
        ///doActivity->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_state_behavior(object diagnostics, object context)
        {
            System.Func<IFinalState, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IFinalState, object, object, bool>>(_no_state_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_state_behavior registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_state_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_state_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_state_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_state_behaviorOperation()
        {
            return ClassInstance.LookupOperation("no_state_behavior");
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//FinalState")));
            }
            return _classInstance;
        }
    }
}

