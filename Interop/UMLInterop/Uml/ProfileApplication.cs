//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A profile application is used to show which profiles have been applied to a package.
    ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ProfileApplication")]
    public partial class ProfileApplication : DirectedRelationship, IProfileApplication, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedDefinitionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedDefinitionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAppliedDefinitionOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAppliedDefinitionOperation);
        
        /// <summary>
        /// The backing field for the IsStrict property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isStrict = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isStrictAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsStrictAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _appliedProfileReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAppliedProfileReference);
        
        /// <summary>
        /// The backing field for the AppliedProfile property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProfile _appliedProfile;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _applyingPackageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveApplyingPackageReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isStrict")]
        [DescriptionAttribute("Specifies that the Profile filtering rules for the metaclasses of the referenced " +
            "metamodel shall be strictly applied.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("ProfileApplication")]
        [XmlElementNameAttribute("isStrict")]
        [XmlAttributeAttribute(true)]
        public bool IsStrict
        {
            get
            {
                return this._isStrict;
            }
            set
            {
                if ((this._isStrict != value))
                {
                    bool old = this._isStrict;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsStrict", e, _isStrictAttribute);
                    this._isStrict = value;
                    this.OnPropertyChanged("IsStrict", e, _isStrictAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Profiles that are applied to a Package through this ProfileApplication.
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("appliedProfile")]
        [DescriptionAttribute("References the Profiles that are applied to a Package through this ProfileApplica" +
            "tion.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("ProfileApplication")]
        [XmlElementNameAttribute("appliedProfile")]
        [XmlAttributeAttribute(true)]
        public IProfile AppliedProfile
        {
            get
            {
                return this._appliedProfile;
            }
            set
            {
                if ((this._appliedProfile != value))
                {
                    IProfile old = this._appliedProfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("AppliedProfile", e, _appliedProfileReference);
                    this._appliedProfile = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAppliedProfile;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAppliedProfile;
                    }
                    this.OnPropertyChanged("AppliedProfile", e, _appliedProfileReference);
                }
            }
        }
        
        /// <summary>
        /// The package that owns the profile application.
        ///&lt;p&gt;From package UML::Packages.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("applyingPackage")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("profileApplication")]
        public IPackage ApplyingPackage
        {
            get
            {
                return ModelHelper.CastAs<IPackage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProfileApplicationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProfileApplication")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Retrieves the definition (Ecore representation) of the profile associated with this profile application.
        /// </summary>
        public IEPackage GetAppliedDefinition()
        {
            System.Func<IProfileApplication, IEPackage> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfileApplication, IEPackage>>(_getAppliedDefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedDefinition registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedDefinitionOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedDefinitionOperation.Value, e));
            IEPackage result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedDefinitionOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Retrieves the definition (Ecore representation) of the specified named element in the profile associated with this profile application.
        /// </summary>
        /// <param name="namedElement">The named element for which to retrieve the applied definition.</param>
        public IENamedElement GetAppliedDefinition(INamedElement namedElement)
        {
            System.Func<IProfileApplication, INamedElement, IENamedElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfileApplication, INamedElement, IENamedElement>>(_getAppliedDefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAppliedDefinition registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAppliedDefinitionOperation.Value, namedElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAppliedDefinitionOperation.Value, e));
            IENamedElement result = handler.Invoke(this, namedElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAppliedDefinitionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedDefinitionOperation()
        {
            return ClassInstance.LookupOperation("getAppliedDefinition");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAppliedDefinitionOperation_()
        {
            return ClassInstance.LookupOperation("getAppliedDefinition");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsStrictAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProfileApplication.ClassInstance)).Resolve("isStrict")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAppliedProfileReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProfileApplication.ClassInstance)).Resolve("appliedProfile")));
        }
        
        /// <summary>
        /// Handles the event that the AppliedProfile property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAppliedProfile(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.AppliedProfile))
            {
                this.AppliedProfile = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveApplyingPackageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProfileApplication.ClassInstance)).Resolve("applyingPackage")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldApplyingPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newApplyingPackage = ModelHelper.CastAs<IPackage>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldApplyingPackage, newApplyingPackage);
            this.OnPropertyChanging("ApplyingPackage", e, _applyingPackageReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldApplyingPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newApplyingPackage = ModelHelper.CastAs<IPackage>(newParent);
            if ((oldApplyingPackage != null))
            {
                oldApplyingPackage.ProfileApplication.Remove(this);
            }
            if ((newApplyingPackage != null))
            {
                newApplyingPackage.ProfileApplication.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldApplyingPackage, newApplyingPackage);
            this.OnPropertyChanged("ApplyingPackage", e, _applyingPackageReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "APPLIEDPROFILE"))
            {
                return this.AppliedProfile;
            }
            if ((reference == "APPLYINGPACKAGE"))
            {
                return this.ApplyingPackage;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISSTRICT"))
            {
                return this.IsStrict;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "APPLIEDPROFILE"))
            {
                this.AppliedProfile = ((IProfile)(value));
                return;
            }
            if ((feature == "APPLYINGPACKAGE"))
            {
                this.ApplyingPackage = ((IPackage)(value));
                return;
            }
            if ((feature == "ISSTRICT"))
            {
                this.IsStrict = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISSTRICT"))
            {
                return Observable.Box(new IsStrictProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "APPLIEDPROFILE"))
            {
                return new AppliedProfileProxy(this);
            }
            if ((reference == "APPLYINGPACKAGE"))
            {
                return new ApplyingPackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProfileApplication")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProfileApplication class
        /// </summary>
        public class ProfileApplicationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProfileApplication _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProfileApplicationReferencedElementsCollection(ProfileApplication parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AppliedProfile != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ApplyingPackage != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AppliedProfile == null))
                {
                    IProfile appliedProfileCasted = item.As<IProfile>();
                    if ((appliedProfileCasted != null))
                    {
                        this._parent.AppliedProfile = appliedProfileCasted;
                        return;
                    }
                }
                if ((this._parent.ApplyingPackage == null))
                {
                    IPackage applyingPackageCasted = item.As<IPackage>();
                    if ((applyingPackageCasted != null))
                    {
                        this._parent.ApplyingPackage = applyingPackageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AppliedProfile = null;
                this._parent.ApplyingPackage = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AppliedProfile))
                {
                    return true;
                }
                if ((item == this._parent.ApplyingPackage))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AppliedProfile != null))
                {
                    array[arrayIndex] = this._parent.AppliedProfile;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ApplyingPackage != null))
                {
                    array[arrayIndex] = this._parent.ApplyingPackage;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AppliedProfile == item))
                {
                    this._parent.AppliedProfile = null;
                    return true;
                }
                if ((this._parent.ApplyingPackage == item))
                {
                    this._parent.ApplyingPackage = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AppliedProfile).Concat(this._parent.ApplyingPackage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isStrict property
        /// </summary>
        private sealed class IsStrictProxy : ModelPropertyChange<IProfileApplication, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsStrictProxy(IProfileApplication modelElement) : 
                    base(modelElement, "isStrict")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsStrict;
                }
                set
                {
                    this.ModelElement.IsStrict = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the appliedProfile property
        /// </summary>
        private sealed class AppliedProfileProxy : ModelPropertyChange<IProfileApplication, IProfile>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AppliedProfileProxy(IProfileApplication modelElement) : 
                    base(modelElement, "appliedProfile")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProfile Value
            {
                get
                {
                    return this.ModelElement.AppliedProfile;
                }
                set
                {
                    this.ModelElement.AppliedProfile = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the applyingPackage property
        /// </summary>
        private sealed class ApplyingPackageProxy : ModelPropertyChange<IProfileApplication, IPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApplyingPackageProxy(IProfileApplication modelElement) : 
                    base(modelElement, "applyingPackage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackage Value
            {
                get
                {
                    return this.ModelElement.ApplyingPackage;
                }
                set
                {
                    this.ModelElement.ApplyingPackage = value;
                }
            }
        }
    }
}
