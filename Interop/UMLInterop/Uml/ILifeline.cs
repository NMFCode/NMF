//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Lifeline
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Lifeline))]
    [XmlDefaultImplementationTypeAttribute(typeof(Lifeline))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Lifeline")]
    public interface ILifeline : IModelElement, INamedElement
    {
        
        /// <summary>
        /// References the Interaction that represents the decomposition.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("decomposedAs")]
        [DescriptionAttribute("References the Interaction that represents the decomposition.\n<p>From package UML" +
            "::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("decomposedAs")]
        [XmlAttributeAttribute(true)]
        IPartDecomposition DecomposedAs
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the Interaction enclosing this Lifeline.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("interaction")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("lifeline")]
        IInteraction Interaction
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the ConnectableElement within the classifier that contains the enclosing interaction.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("represents")]
        [DescriptionAttribute("References the ConnectableElement within the classifier that contains the enclosi" +
            "ng interaction.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("represents")]
        [XmlAttributeAttribute(true)]
        IConnectableElement Represents
        {
            get;
            set;
        }
        
        /// <summary>
        /// If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("selector")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IValueSpecification Selector
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the InteractionFragments in which this Lifeline takes part.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("coveredBy")]
        [DescriptionAttribute("References the InteractionFragments in which this Lifeline takes part.\n<p>From pa" +
            "ckage UML::Interactions.</p>")]
        [CategoryAttribute("Lifeline")]
        [XmlElementNameAttribute("coveredBy")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("covered")]
        [ConstantAttribute()]
        ISetExpression<IInteractionFragment> CoveredBy
        {
            get;
        }
        
        /// <summary>
        /// The selector for a Lifeline must only be specified if the referenced Part is multivalued.
        /// self.selector-&gt;notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Selector_specified(object diagnostics, object context);
        
        /// <summary>
        /// If a lifeline is in an Interaction referred to by an InteractionUse in an enclosing Interaction,  and that lifeline is common with another lifeline in an Interaction referred to by another InteractonUse within that same enclosing Interaction, it must be common to a lifeline within that enclosing Interaction. By common Lifelines we mean Lifelines with the same selector and represents associations.
        ///let intUses : Set(InteractionUse) = interaction.interactionUse  in 
        ///intUses-&gt;forAll
        ///( iuse : InteractionUse | 
        ///let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction-&gt;asSet()
        ///-&gt;union(
        ///iuse.enclosingOperand.combinedFragment-&gt;asSet()-&gt;closure(enclosingOperand.combinedFragment).enclosingInteraction-&gt;asSet()
        ///               ) 
        ///in
        ///let peerUses : Set(InteractionUse) = usingInteraction.fragment-&gt;select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)-&gt;asSet()
        ///-&gt;union(
        ///usingInteraction.fragment-&gt;select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)-&gt;asSet()
        ///-&gt;closure(operand.fragment-&gt;select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment-&gt;
        ///select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)-&gt;asSet()
        ///               )-&gt;excluding(iuse)
        /// in
        ///peerUses-&gt;forAll( peerUse : InteractionUse |
        /// peerUse.refersTo.lifeline-&gt;forAll( l : Lifeline | (l.represents = self.represents and 
        /// ( self.selector.oclIsKindOf(LiteralString) implies
        ///  l.selector.oclIsKindOf(LiteralString) and 
        ///  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
        ///  and 
        ///( self.selector.oclIsKindOf(LiteralInteger) implies
        ///  l.selector.oclIsKindOf(LiteralInteger) and 
        ///  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
        ///)  
        ///implies
        /// usingInteraction.lifeline-&gt;exists(represents = self.represents and
        /// ( self.selector.oclIsKindOf(LiteralString) implies
        ///  l.selector.oclIsKindOf(LiteralString) and 
        ///  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
        ///and 
        ///( self.selector.oclIsKindOf(LiteralInteger) implies
        ///  l.selector.oclIsKindOf(LiteralInteger) and 
        ///  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
        ///)
        ///                                                )
        ///                    )
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Interaction_uses_share_lifeline(object diagnostics, object context);
        
        /// <summary>
        /// The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.
        ///represents.namespace-&gt;closure(namespace)-&gt;includes(interaction._&apos;context&apos;)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Same_classifier(object diagnostics, object context);
        
        /// <summary>
        /// The selector value, if present, must be a LiteralString or a LiteralInteger
        ///self.selector-&gt;notEmpty() implies 
        ///self.selector.oclIsKindOf(LiteralInteger) or 
        ///self.selector.oclIsKindOf(LiteralString)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Selector_int_or_string(object diagnostics, object context);
    }
}
