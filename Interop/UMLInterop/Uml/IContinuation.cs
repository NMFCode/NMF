//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Continuation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Continuation))]
    [XmlDefaultImplementationTypeAttribute(typeof(Continuation))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Continuation")]
    public interface IContinuation : IModelElement, IInteractionFragment
    {
        
        /// <summary>
        /// True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("setting")]
        [DescriptionAttribute("True: when the Continuation is at the end of the enclosing InteractionFragment an" +
            "d False when it is in the beginning.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("Continuation")]
        [XmlElementNameAttribute("setting")]
        [XmlAttributeAttribute(true)]
        bool Setting
        {
            get;
            set;
        }
        
        /// <summary>
        /// Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionOperand.
        /// enclosingOperand-&gt;notEmpty() and 
        /// let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in 
        ///   ( peerFragments-&gt;notEmpty() and 
        ///   ((peerFragments-&gt;first() = self) or  (peerFragments-&gt;last() = self)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool First_or_last_interaction_fragment(object diagnostics, object context);
        
        /// <summary>
        /// Across all Interaction instances having the same context value, every Lifeline instance covered by a Continuation (self) must be common with one covered Lifeline instance of all other Continuation instances with the same name as self, and every Lifeline instance covered by a Continuation instance with the same name as self must be common with one covered Lifeline instance of self. Lifeline instances are common if they have the same selector and represents associationEnd values.
        ///enclosingOperand.combinedFragment-&gt;notEmpty() and
        ///let parentInteraction : Set(Interaction) = 
        ///enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)-&gt;
        ///collect(enclosingInteraction).oclAsType(Interaction)-&gt;asSet()
        ///in 
        ///(parentInteraction-&gt;size() = 1) 
        ///and let peerInteractions : Set(Interaction) =
        /// (parentInteraction-&gt;union(parentInteraction-&gt;collect(_&apos;context&apos;)-&gt;collect(behavior)-&gt;
        /// select(oclIsKindOf(Interaction)).oclAsType(Interaction)-&gt;asSet())-&gt;asSet()) in
        /// (peerInteractions-&gt;notEmpty()) and 
        ///  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment-&gt;
        /// select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)-&gt;asSet() in
        ///   combinedFragments1-&gt;notEmpty() and  combinedFragments1-&gt;closure(operand.fragment-&gt;
        ///   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))-&gt;asSet().operand.fragment-&gt;
        ///   select(oclIsKindOf(Continuation)).oclAsType(Continuation)-&gt;asSet()-&gt;
        ///   forAll(c : Continuation |  (c.name = self.name) implies 
        ///  (c.covered-&gt;asSet()-&gt;forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self
        ///  self.covered-&gt;asSet()-&gt;
        ///  select(represents = cl.represents and selector = cl.selector)-&gt;asSet()-&gt;size()=1))
        ///   and
        /// (self.covered-&gt;asSet()-&gt;forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c
        /// c.covered-&gt;asSet()-&gt;
        ///  select(represents = cl.represents and selector = cl.selector)-&gt;asSet()-&gt;size()=1))
        ///  )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Same_name(object diagnostics, object context);
        
        /// <summary>
        /// Continuations are always global in the enclosing InteractionFragment e.g., it always covers all Lifelines covered by the enclosing InteractionOperator.
        ///enclosingOperand-&gt;notEmpty() and
        ///  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in 
        ///    (operandLifelines-&gt;notEmpty() and 
        ///    operandLifelines-&gt;forAll(ol :Lifeline |self.covered-&gt;includes(ol)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Global(object diagnostics, object context);
    }
}
