//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for StringExpression
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StringExpression))]
    [XmlDefaultImplementationTypeAttribute(typeof(StringExpression))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StringExpression")]
    public interface IStringExpression : IModelElement, ITemplateableElement, IExpression
    {
        
        /// <summary>
        /// The StringExpression of which this StringExpression is a subExpression.
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningExpression")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("subExpression")]
        IStringExpression OwningExpression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StringExpressions that constitute this StringExpression.
        ///&lt;p&gt;From package UML::Values.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("subExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owningExpression")]
        [ConstantAttribute()]
        IOrderedSetExpression<IStringExpression> SubExpression
        {
            get;
        }
        
        /// <summary>
        /// All the operands of a StringExpression must be LiteralStrings
        ///operand-&gt;forAll (oclIsKindOf (LiteralString))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Operands(object diagnostics, object context);
        
        /// <summary>
        /// If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).
        ///if subExpression-&gt;notEmpty() then operand-&gt;isEmpty() else operand-&gt;notEmpty() endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Subexpressions(object diagnostics, object context);
    }
}
