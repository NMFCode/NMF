//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for StateMachine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StateMachine))]
    [XmlDefaultImplementationTypeAttribute(typeof(StateMachine))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StateMachine")]
    public interface IStateMachine : IModelElement, IBehavior
    {
        
        /// <summary>
        /// The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("connectionPoint")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("stateMachine")]
        [ConstantAttribute()]
        IOrderedSetExpression<IPseudostate> ConnectionPoint
        {
            get;
        }
        
        /// <summary>
        /// References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("submachineState")]
        [DescriptionAttribute("References the submachine(s) in case of a submachine State. Multiple machines are" +
            " referenced in case of a concurrent State.\n<p>From package UML::StateMachines.</" +
            "p>")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("submachineState")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("submachine")]
        [ConstantAttribute()]
        ISetExpression<IState> SubmachineState
        {
            get;
        }
        
        /// <summary>
        /// The Regions owned directly by the StateMachine.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("region")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("stateMachine")]
        [ConstantAttribute()]
        IOrderedSetExpression<IRegion> Region
        {
            get;
        }
        
        /// <summary>
        /// The StateMachines of which this is an extension.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("extendedStateMachine")]
        [DescriptionAttribute("The StateMachines of which this is an extension.\n<p>From package UML::StateMachin" +
            "es.</p>")]
        [CategoryAttribute("StateMachine")]
        [XmlElementNameAttribute("extendedStateMachine")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IStateMachine> ExtendedStateMachine
        {
            get;
        }
        
        /// <summary>
        /// The connection points of a StateMachine are Pseudostates of kind entry point or exit point.
        ///connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Connection_points(object diagnostics, object context);
        
        /// <summary>
        /// The Classifier context of a StateMachine cannot be an Interface.
        ///_'context' <> null implies not _'context'.oclIsKindOf(Interface)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Classifier_context(object diagnostics, object context);
        
        /// <summary>
        /// A StateMachine as the method for a BehavioralFeature cannot have entry/exit connection points.
        ///specification <> null implies connectionPoint->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Method(object diagnostics, object context);
        
        /// <summary>
        /// The context Classifier of the method StateMachine of a BehavioralFeature must be the Classifier that owns the BehavioralFeature.
        ///specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Context_classifier(object diagnostics, object context);
        
        /// <summary>
        /// The operation LCA(s1,s2) returns the Region that is the least common ancestor of Vertices s1 and s2, based on the StateMachine containment hierarchy.
        ///result = (if ancestor(s1, s2) then 
        ///    s2.container
        ///else
        ///	if ancestor(s2, s1) then
        ///	    s1.container 
        ///	else 
        ///	    LCA(s1.container.state, s2.container.state)
        ///	endif
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="s1"></param>
        /// <param name="s2"></param>
        IRegion LCA(IVertex s1, IVertex s2);
        
        /// <summary>
        /// The query ancestor(s1, s2) checks whether Vertex s2 is an ancestor of Vertex s1.
        ///result = (if (s2 = s1) then 
        ///	true 
        ///else 
        ///	if s1.container.stateMachine->notEmpty() then 
        ///	    true
        ///	else 
        ///	    if s2.container.stateMachine->notEmpty() then 
        ///	        false
        ///	    else
        ///	        ancestor(s1, s2.container.state)
        ///	     endif
        ///	 endif
        ///endif  )
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="s1"></param>
        /// <param name="s2"></param>
        bool Ancestor(IVertex s1, IVertex s2);
        
        /// <summary>
        /// This utility funciton is like the LCA, except that it returns the nearest composite State that contains both input Vertices.
        ///result = (if v2.oclIsTypeOf(State) and ancestor(v1, v2) then
        ///	v2.oclAsType(State)
        ///else if v1.oclIsTypeOf(State) and ancestor(v2, v1) then
        ///	v1.oclAsType(State)
        ///else if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then 
        ///	null.oclAsType(State)
        ///else LCAState(v1.container.state, v2.container.state)
        ///endif endif endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="v1"></param>
        /// <param name="v2"></param>
        IState LCAState(IVertex v1, IVertex v2);
    }
}

