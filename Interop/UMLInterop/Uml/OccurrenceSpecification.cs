//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An OccurrenceSpecification is the basic semantic unit of Interactions. The sequences of occurrences specified by them are the meanings of Interactions.
    ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//OccurrenceSpecification")]
    [DebuggerDisplayAttribute("OccurrenceSpecification {Name}")]
    public partial class OccurrenceSpecification : InteractionFragment, IOccurrenceSpecification, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getCoveredOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetCoveredOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _setCoveredOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSetCoveredOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _toAfterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveToAfterReference);
        
        /// <summary>
        /// The backing field for the ToAfter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private OccurrenceSpecificationToAfterCollection _toAfter;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _toBeforeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveToBeforeReference);
        
        /// <summary>
        /// The backing field for the ToBefore property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private OccurrenceSpecificationToBeforeCollection _toBefore;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public OccurrenceSpecification()
        {
            this._toAfter = new OccurrenceSpecificationToAfterCollection(this);
            this._toAfter.CollectionChanging += this.ToAfterCollectionChanging;
            this._toAfter.CollectionChanged += this.ToAfterCollectionChanged;
            this._toBefore = new OccurrenceSpecificationToBeforeCollection(this);
            this._toBefore.CollectionChanging += this.ToBeforeCollectionChanging;
            this._toBefore.CollectionChanged += this.ToBeforeCollectionChanged;
        }
        
        /// <summary>
        /// References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("toAfter")]
        [DescriptionAttribute("References the GeneralOrderings that specify EventOcurrences that must occur afte" +
            "r this OccurrenceSpecification.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("OccurrenceSpecification")]
        [XmlElementNameAttribute("toAfter")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("before")]
        [ConstantAttribute()]
        public ISetExpression<IGeneralOrdering> ToAfter
        {
            get
            {
                return this._toAfter;
            }
        }
        
        /// <summary>
        /// References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification.
        ///&lt;p&gt;From package UML::Interactions.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("toBefore")]
        [DescriptionAttribute("References the GeneralOrderings that specify EventOcurrences that must occur befo" +
            "re this OccurrenceSpecification.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("OccurrenceSpecification")]
        [XmlElementNameAttribute("toBefore")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("after")]
        [ConstantAttribute()]
        public ISetExpression<IGeneralOrdering> ToBefore
        {
            get
            {
                return this._toBefore;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OccurrenceSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//OccurrenceSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Returns the Lifeline on which the OccurrenceSpecification appears.
        /// </summary>
        public ILifeline GetCovered()
        {
            System.Func<IOccurrenceSpecification, ILifeline> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IOccurrenceSpecification, ILifeline>>(_getCoveredOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getCovered registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getCoveredOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getCoveredOperation.Value, e));
            ILifeline result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getCoveredOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetCoveredOperation()
        {
            return ClassInstance.LookupOperation("getCovered");
        }
        
        /// <summary>
        /// Sets the Lifeline on which the OccurrenceSpecification appears.
        /// </summary>
        /// <param name="value"></param>
        public void SetCovered(ILifeline value)
        {
            System.Action<IOccurrenceSpecification, ILifeline> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<IOccurrenceSpecification, ILifeline>>(_setCoveredOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method setCovered registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _setCoveredOperation.Value, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _setCoveredOperation.Value, e));
            handler.Invoke(this, value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _setCoveredOperation.Value, e));
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSetCoveredOperation()
        {
            return ClassInstance.LookupOperation("setCovered");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveToAfterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.OccurrenceSpecification.ClassInstance)).Resolve("toAfter")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToAfter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToAfterCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ToAfter", e, _toAfterReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToAfter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToAfterCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToAfter", e, _toAfterReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveToBeforeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.OccurrenceSpecification.ClassInstance)).Resolve("toBefore")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToBefore property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeforeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ToBefore", e, _toBeforeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToBefore property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeforeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToBefore", e, _toBeforeReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TOAFTER"))
            {
                return this._toAfter;
            }
            if ((feature == "TOBEFORE"))
            {
                return this._toBefore;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//OccurrenceSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OccurrenceSpecification class
        /// </summary>
        public class OccurrenceSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OccurrenceSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OccurrenceSpecificationReferencedElementsCollection(OccurrenceSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ToAfter.Count);
                    count = (count + this._parent.ToBefore.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ToAfter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToBefore.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ToAfter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToBefore.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGeneralOrdering toAfterCasted = item.As<IGeneralOrdering>();
                if ((toAfterCasted != null))
                {
                    this._parent.ToAfter.Add(toAfterCasted);
                }
                IGeneralOrdering toBeforeCasted = item.As<IGeneralOrdering>();
                if ((toBeforeCasted != null))
                {
                    this._parent.ToBefore.Add(toBeforeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ToAfter.Clear();
                this._parent.ToBefore.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ToAfter.Contains(item))
                {
                    return true;
                }
                if (this._parent.ToBefore.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> toAfterEnumerator = this._parent.ToAfter.GetEnumerator();
                try
                {
                    for (
                    ; toAfterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toAfterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toAfterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> toBeforeEnumerator = this._parent.ToBefore.GetEnumerator();
                try
                {
                    for (
                    ; toBeforeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toBeforeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toBeforeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGeneralOrdering generalOrderingItem = item.As<IGeneralOrdering>();
                if (((generalOrderingItem != null) 
                            && this._parent.ToAfter.Remove(generalOrderingItem)))
                {
                    return true;
                }
                if (((generalOrderingItem != null) 
                            && this._parent.ToBefore.Remove(generalOrderingItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ToAfter).Concat(this._parent.ToBefore).GetEnumerator();
            }
        }
    }
}
