//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Actor
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Actor))]
    [XmlDefaultImplementationTypeAttribute(typeof(Actor))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Actor")]
    public interface IActor : IModelElement, IBehavioredClassifier
    {
        
        /// <summary>
        /// An Actor can only have Associations to UseCases, Components, and Classes. Furthermore these Associations must be binary.
        ///Association.allInstances()-&gt;forAll( a |
        ///  a.memberEnd-&gt;collect(type)-&gt;includes(self) implies
        ///  (
        ///    a.memberEnd-&gt;size() = 2 and
        ///    let actorEnd : Property = a.memberEnd-&gt;any(type = self) in
        ///      actorEnd.opposite.class.oclIsKindOf(UseCase) or
        ///      ( actorEnd.opposite.class.oclIsKindOf(Class) and not
        ///         actorEnd.opposite.class.oclIsKindOf(Behavior))
        ///      )
        ///  )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Associations(object diagnostics, object context);
        
        /// <summary>
        /// An Actor must have a name.
        ///name-&gt;notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Must_have_name(object diagnostics, object context);
    }
}
