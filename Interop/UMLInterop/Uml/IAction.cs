//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Action
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Action))]
    [XmlDefaultImplementationTypeAttribute(typeof(Action))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Action")]
    public interface IAction : IModelElement, IExecutableNode
    {
        
        /// <summary>
        /// If true, the Action can begin a new, concurrent execution, even if there is already another execution of the Action ongoing. If false, the Action cannot begin a new execution until any previous execution has completed.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isLocallyReentrant")]
        [DescriptionAttribute("If true, the Action can begin a new, concurrent execution, even if there is alrea" +
            "dy another execution of the Action ongoing. If false, the Action cannot begin a " +
            "new execution until any previous execution has completed.\n<p>From package UML::A" +
            "ctions.</p>")]
        [CategoryAttribute("Action")]
        [XmlElementNameAttribute("isLocallyReentrant")]
        [XmlAttributeAttribute(true)]
        bool IsLocallyReentrant
        {
            get;
            set;
        }
        
        /// <summary>
        /// A Constraint that must be satisfied when execution of the Action is completed.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("localPostcondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> LocalPostcondition
        {
            get;
        }
        
        /// <summary>
        /// A Constraint that must be satisfied when execution of the Action is started.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("localPrecondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> LocalPrecondition
        {
            get;
        }
        
        /// <summary>
        /// The derivation for the context property.
        ///result = (let behavior: Behavior = self.containingBehavior() in
        ///if behavior=null then null
        ///else if behavior._'context' = null then behavior
        ///else behavior._'context'
        ///endif
        ///endif)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        IClassifier GetContext();
        
        /// <summary>
        /// Return this Action and all Actions contained directly or indirectly in it. By default only the Action itself is returned, but the operation is overridden for StructuredActivityNodes.
        ///result = (self->asSet())
        ///<p>From package UML::Actions.</p>
        /// </summary>
        ISetExpression<IAction> AllActions();
        
        /// <summary>
        /// Returns all the ActivityNodes directly or indirectly owned by this Action. This includes at least all the Pins of the Action.
        ///result = (input.oclAsType(Pin)->asSet()->union(output->asSet()))
        ///<p>From package UML::Actions.</p>
        /// </summary>
        ISetExpression<IActivityNode> AllOwnedNodes();
        
        /// <summary>
        /// result = (if inStructuredNode<>null then inStructuredNode.containingBehavior() 
        ///else if activity<>null then activity
        ///else interaction 
        ///endif
        ///endif
        ///)
        ///<p>From package UML::Actions.</p>
        /// </summary>
        IBehavior ContainingBehavior();
    }
}

