//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for InformationItem
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InformationItem))]
    [XmlDefaultImplementationTypeAttribute(typeof(InformationItem))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InformationItem")]
    public interface IInformationItem : IModelElement, IClassifier
    {
        
        /// <summary>
        /// Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.
        ///&lt;p&gt;From package UML::InformationFlows.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("represented")]
        [DescriptionAttribute("Determines the classifiers that will specify the structure and nature of the info" +
            "rmation. An information item represents all its represented classifiers.\n<p>From" +
            " package UML::InformationFlows.</p>")]
        [CategoryAttribute("InformationItem")]
        [XmlElementNameAttribute("represented")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IClassifier> Represented
        {
            get;
        }
        
        /// <summary>
        /// The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any. The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.
        ///(self.represented-&gt;select(oclIsKindOf(InformationItem))-&gt;forAll(p |
        ///  p.conveyingFlow.source-&gt;forAll(q | self.conveyingFlow.source-&gt;includes(q)) and
        ///    p.conveyingFlow.target-&gt;forAll(q | self.conveyingFlow.target-&gt;includes(q)))) and
        ///      (self.represented-&gt;forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or
        ///        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Sources_and_targets(object diagnostics, object context);
        
        /// <summary>
        /// An informationItem has no feature, no generalization, and no associations.
        ///self.generalization-&gt;isEmpty() and self.feature-&gt;isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Has_no(object diagnostics, object context);
        
        /// <summary>
        /// It is not instantiable.
        ///isAbstract
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_instantiable(object diagnostics, object context);
    }
}
