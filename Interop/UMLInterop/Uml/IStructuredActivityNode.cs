//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for StructuredActivityNode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StructuredActivityNode))]
    [XmlDefaultImplementationTypeAttribute(typeof(StructuredActivityNode))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StructuredActivityNode")]
    public interface IStructuredActivityNode : IModelElement, IActivityGroup, NMF.Interop.Uml.INamespace, IAction
    {
        
        /// <summary>
        /// If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("mustIsolate")]
        [DescriptionAttribute(@"If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.
<p>From package UML::Actions.</p>")]
        [CategoryAttribute("StructuredActivityNode")]
        [XmlElementNameAttribute("mustIsolate")]
        [XmlAttributeAttribute(true)]
        bool MustIsolate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ActivityEdges immediately contained in the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("edge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("inStructuredNode")]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityEdge> Edge
        {
            get;
        }
        
        /// <summary>
        /// The InputPins owned by the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("structuredNodeInput")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IInputPin> StructuredNodeInput
        {
            get;
        }
        
        /// <summary>
        /// The OutputPins owned by the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("structuredNodeOutput")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IOutputPin> StructuredNodeOutput
        {
            get;
        }
        
        /// <summary>
        /// The Variables defined in the scope of the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("scope")]
        [ConstantAttribute()]
        IOrderedSetExpression<IVariable> Variable
        {
            get;
        }
        
        /// <summary>
        /// The ActivityNodes immediately contained in the StructuredActivityNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("inStructuredNode")]
        [ConstantAttribute()]
        IOrderedSetExpression<IActivityNode> Node
        {
            get;
        }
        
        /// <summary>
        /// The outgoing ActivityEdges of the OutputPins of a StructuredActivityNode must have targets that are not within the StructuredActivityNode.
        ///output.outgoing.target->excludesAll(allOwnedNodes()-input)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Output_pin_edges(object diagnostics, object context);
        
        /// <summary>
        /// The edges of a StructuredActivityNode are all the ActivityEdges with source and target ActivityNodes contained directly or indirectly within the StructuredActivityNode and at least one of the source or target not contained in any more deeply nested StructuredActivityNode.
        ///edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->
        ///	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Edges(object diagnostics, object context);
        
        /// <summary>
        /// The incoming ActivityEdges of an InputPin of a StructuredActivityNode must have sources that are not within the StructuredActivityNode.
        ///input.incoming.source->excludesAll(allOwnedNodes()-output)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Input_pin_edges(object diagnostics, object context);
        
        /// <summary>
        /// Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as sources of edges owned by the StructuredActivityNode.
        ///result = (node->union(input.oclAsType(ActivityNode)->asSet())->
        ///  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet())
        ///<p>From package UML::Actions.</p>
        /// </summary>
        ISetExpression<IActivityNode> SourceNodes();
        
        /// <summary>
        /// Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as targets of edges owned by the StructuredActivityNode.
        ///result = (node->union(output.oclAsType(ActivityNode)->asSet())->
        ///  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet())
        ///<p>From package UML::Actions.</p>
        /// </summary>
        ISetExpression<IActivityNode> TargetNodes();
    }
}

