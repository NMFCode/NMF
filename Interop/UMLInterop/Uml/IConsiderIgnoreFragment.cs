//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ConsiderIgnoreFragment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConsiderIgnoreFragment))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConsiderIgnoreFragment))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConsiderIgnoreFragment")]
    public interface IConsiderIgnoreFragment : IModelElement, ICombinedFragment
    {
        
        /// <summary>
        /// The set of messages that apply to this fragment.
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("message")]
        [DescriptionAttribute("The set of messages that apply to this fragment.\n<p>From package UML::Interaction" +
            "s.</p>")]
        [CategoryAttribute("ConsiderIgnoreFragment")]
        [XmlElementNameAttribute("message")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<INamedElement> Message
        {
            get;
        }
        
        /// <summary>
        /// The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.
        ///(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Consider_or_ignore(object diagnostics, object context);
        
        /// <summary>
        /// The NamedElements must be of a type of element that can be a signature for a message (i.e.., an Operation, or a Signal).
        ///message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Type(object diagnostics, object context);
    }
}

