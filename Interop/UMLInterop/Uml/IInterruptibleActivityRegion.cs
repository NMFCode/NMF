//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for InterruptibleActivityRegion
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InterruptibleActivityRegion))]
    [XmlDefaultImplementationTypeAttribute(typeof(InterruptibleActivityRegion))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InterruptibleActivityRegion")]
    public interface IInterruptibleActivityRegion : IModelElement, IActivityGroup
    {
        
        /// <summary>
        /// The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing token will result in the termination of other tokens flowing in the InterruptibleActivityRegion.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("interruptingEdge")]
        [DescriptionAttribute("The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing t" +
            "oken will result in the termination of other tokens flowing in the Interruptible" +
            "ActivityRegion.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("InterruptibleActivityRegion")]
        [XmlElementNameAttribute("interruptingEdge")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("interrupts")]
        [ConstantAttribute()]
        ISetExpression<IActivityEdge> InterruptingEdge
        {
            get;
        }
        
        /// <summary>
        /// ActivityNodes immediately contained in the InterruptibleActivityRegion.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("node")]
        [DescriptionAttribute("ActivityNodes immediately contained in the InterruptibleActivityRegion.\n<p>From p" +
            "ackage UML::Activities.</p>")]
        [CategoryAttribute("InterruptibleActivityRegion")]
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inInterruptibleRegion")]
        [ConstantAttribute()]
        ISetExpression<IActivityNode> Node
        {
            get;
        }
        
        /// <summary>
        /// The interruptingEdges of an InterruptibleActivityRegion must have their source in the region and their target outside the region, but within the same Activity containing the region.
        ///interruptingEdge->forAll(edge | 
        ///  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Interrupting_edges(object diagnostics, object context);
    }
}

