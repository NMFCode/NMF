//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ConditionalNode is a StructuredActivityNode that chooses one among some number of alternative collections of ExecutableNodes to execute.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ConditionalNode")]
    [DebuggerDisplayAttribute("ConditionalNode {Name}")]
    public partial class ConditionalNode : StructuredActivityNode, IConditionalNode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _result_no_incomingOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveResult_no_incomingOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_input_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_input_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_clause_with_executable_nodeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_clause_with_executable_nodeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _matching_output_pinsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMatching_output_pinsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _executable_nodesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveExecutable_nodesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _clause_no_predecessorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClause_no_predecessorOperation);
        
        /// <summary>
        /// The backing field for the IsAssured property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isAssured = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isAssuredAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsAssuredAttribute);
        
        /// <summary>
        /// The backing field for the IsDeterminate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDeterminate = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDeterminateAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDeterminateAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _clauseReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClauseReference);
        
        /// <summary>
        /// The backing field for the Clause property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IClause> _clause;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IOutputPin> _result;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ConditionalNode()
        {
            this._clause = new ObservableCompositionOrderedSet<IClause>(this);
            this._clause.CollectionChanging += this.ClauseCollectionChanging;
            this._clause.CollectionChanged += this.ClauseCollectionChanged;
            this._result = new ObservableCompositionOrderedSet<IOutputPin>(this);
            this._result.CollectionChanging += this.ResultCollectionChanging;
            this._result.CollectionChanged += this.ResultCollectionChanged;
        }
        
        /// <summary>
        /// If true, the modeler asserts that the test for at least one Clause of the ConditionalNode will succeed.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isAssured")]
        [DescriptionAttribute("If true, the modeler asserts that the test for at least one Clause of the Conditi" +
            "onalNode will succeed.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("ConditionalNode")]
        [XmlElementNameAttribute("isAssured")]
        [XmlAttributeAttribute(true)]
        public bool IsAssured
        {
            get
            {
                return this._isAssured;
            }
            set
            {
                if ((this._isAssured != value))
                {
                    bool old = this._isAssured;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsAssured", e, _isAssuredAttribute);
                    this._isAssured = value;
                    this.OnPropertyChanged("IsAssured", e, _isAssuredAttribute);
                }
            }
        }
        
        /// <summary>
        /// If true, the modeler asserts that the test for at most one Clause of the ConditionalNode will succeed.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDeterminate")]
        [DescriptionAttribute("If true, the modeler asserts that the test for at most one Clause of the Conditio" +
            "nalNode will succeed.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("ConditionalNode")]
        [XmlElementNameAttribute("isDeterminate")]
        [XmlAttributeAttribute(true)]
        public bool IsDeterminate
        {
            get
            {
                return this._isDeterminate;
            }
            set
            {
                if ((this._isDeterminate != value))
                {
                    bool old = this._isDeterminate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDeterminate", e, _isDeterminateAttribute);
                    this._isDeterminate = value;
                    this.OnPropertyChanged("IsDeterminate", e, _isDeterminateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The set of Clauses composing the ConditionalNode.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("clause")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IClause> Clause
        {
            get
            {
                return this._clause;
            }
        }
        
        /// <summary>
        /// The OutputPins that onto which are moved values from the bodyOutputs of the Clause selected for execution.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IOutputPin> Result
        {
            get
            {
                return this._result;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ConditionalNodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConditionalNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConditionalNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The result OutputPins have no incoming edges.
        ///result.incoming->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Result_no_incoming(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_result_no_incomingOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method result_no_incoming registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _result_no_incomingOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _result_no_incomingOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _result_no_incomingOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveResult_no_incomingOperation()
        {
            return ClassInstance.LookupOperation("result_no_incoming");
        }
        
        /// <summary>
        /// A ConditionalNode has no InputPins.
        ///input->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_input_pins(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_no_input_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_input_pins registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_input_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_input_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_input_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_input_pinsOperation()
        {
            return ClassInstance.LookupOperation("no_input_pins");
        }
        
        /// <summary>
        /// No ExecutableNode in the ConditionNode may appear in the test or body part of more than one clause of a ConditionalNode.
        ///node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | 
        ///	self.clause->select(test->union(_'body')->includes(n))->size()=1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_clause_with_executable_node(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_one_clause_with_executable_nodeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_clause_with_executable_node registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_clause_with_executable_nodeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_clause_with_executable_nodeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_clause_with_executable_nodeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_clause_with_executable_nodeOperation()
        {
            return ClassInstance.LookupOperation("one_clause_with_executable_node");
        }
        
        /// <summary>
        /// Each clause of a ConditionalNode must have the same number of bodyOutput pins as the ConditionalNode has result OutputPins, and each clause bodyOutput Pin must be compatible with the corresponding result OutputPin (by positional order) in type, multiplicity, ordering, and uniqueness.
        ///clause->forAll(
        ///	bodyOutput->size()=self.result->size() and
        ///	Sequence{1..self.result->size()}->forAll(i |
        ///		bodyOutput->at(i).type.conformsTo(result->at(i).type) and
        ///		bodyOutput->at(i).isOrdered = result->at(i).isOrdered and
        ///		bodyOutput->at(i).isUnique = result->at(i).isUnique and
        ///		bodyOutput->at(i).compatibleWith(result->at(i))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Matching_output_pins(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_matching_output_pinsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method matching_output_pins registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _matching_output_pinsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _matching_output_pinsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _matching_output_pinsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMatching_output_pinsOperation()
        {
            return ClassInstance.LookupOperation("matching_output_pins");
        }
        
        /// <summary>
        /// The union of the ExecutableNodes in the test and body parts of all clauses must be the same as the subset of nodes contained in the ConditionalNode (considered as a StructuredActivityNode) that are ExecutableNodes.
        ///clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Executable_nodes(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_executable_nodesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method executable_nodes registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _executable_nodesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _executable_nodesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _executable_nodesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveExecutable_nodesOperation()
        {
            return ClassInstance.LookupOperation("executable_nodes");
        }
        
        /// <summary>
        /// No two clauses within a ConditionalNode may be predecessorClauses of each other, either directly or indirectly.
        ///clause->closure(predecessorClause)->intersection(clause)->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Clause_no_predecessor(object diagnostics, object context)
        {
            System.Func<IConditionalNode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConditionalNode, object, object, bool>>(_clause_no_predecessorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method clause_no_predecessor registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _clause_no_predecessorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _clause_no_predecessorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _clause_no_predecessorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClause_no_predecessorOperation()
        {
            return ClassInstance.LookupOperation("clause_no_predecessor");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsAssuredAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConditionalNode.ClassInstance)).Resolve("isAssured")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDeterminateAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConditionalNode.ClassInstance)).Resolve("isDeterminate")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClauseReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConditionalNode.ClassInstance)).Resolve("clause")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Clause property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClauseCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Clause", e, _clauseReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Clause property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClauseCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Clause", e, _clauseReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ConditionalNode.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Result property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResultCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Result", e, _resultReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int clauseIndex = ModelHelper.IndexOfReference(this.Clause, element);
            if ((clauseIndex != -1))
            {
                return ModelHelper.CreatePath("clause", clauseIndex);
            }
            int resultIndex = ModelHelper.IndexOfReference(this.Result, element);
            if ((resultIndex != -1))
            {
                return ModelHelper.CreatePath("result", resultIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLAUSE"))
            {
                if ((index < this.Clause.Count))
                {
                    return this.Clause[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "RESULT"))
            {
                if ((index < this.Result.Count))
                {
                    return this.Result[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISASSURED"))
            {
                return this.IsAssured;
            }
            if ((attribute == "ISDETERMINATE"))
            {
                return this.IsDeterminate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CLAUSE"))
            {
                return this._clause;
            }
            if ((feature == "RESULT"))
            {
                return this._result;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISASSURED"))
            {
                this.IsAssured = ((bool)(value));
                return;
            }
            if ((feature == "ISDETERMINATE"))
            {
                this.IsDeterminate = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISASSURED"))
            {
                return Observable.Box(new IsAssuredProxy(this));
            }
            if ((attribute == "ISDETERMINATE"))
            {
                return Observable.Box(new IsDeterminateProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._clause))
            {
                return "clause";
            }
            if ((container == this._result))
            {
                return "result";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ConditionalNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalNode class
        /// </summary>
        public class ConditionalNodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalNodeChildrenCollection(ConditionalNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Clause.Count);
                    count = (count + this._parent.Result.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Clause.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Clause.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClause clauseCasted = item.As<IClause>();
                if ((clauseCasted != null))
                {
                    this._parent.Clause.Add(clauseCasted);
                }
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Clause.Clear();
                this._parent.Result.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Clause.Contains(item))
                {
                    return true;
                }
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> clauseEnumerator = this._parent.Clause.GetEnumerator();
                try
                {
                    for (
                    ; clauseEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = clauseEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    clauseEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClause clauseItem = item.As<IClause>();
                if (((clauseItem != null) 
                            && this._parent.Clause.Remove(clauseItem)))
                {
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Clause).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalNode class
        /// </summary>
        public class ConditionalNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalNodeReferencedElementsCollection(ConditionalNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Clause.Count);
                    count = (count + this._parent.Result.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Clause.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Result.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Clause.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Result.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClause clauseCasted = item.As<IClause>();
                if ((clauseCasted != null))
                {
                    this._parent.Clause.Add(clauseCasted);
                }
                IOutputPin resultCasted = item.As<IOutputPin>();
                if ((resultCasted != null))
                {
                    this._parent.Result.Add(resultCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Clause.Clear();
                this._parent.Result.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Clause.Contains(item))
                {
                    return true;
                }
                if (this._parent.Result.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> clauseEnumerator = this._parent.Clause.GetEnumerator();
                try
                {
                    for (
                    ; clauseEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = clauseEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    clauseEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resultEnumerator = this._parent.Result.GetEnumerator();
                try
                {
                    for (
                    ; resultEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resultEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resultEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClause clauseItem = item.As<IClause>();
                if (((clauseItem != null) 
                            && this._parent.Clause.Remove(clauseItem)))
                {
                    return true;
                }
                IOutputPin outputPinItem = item.As<IOutputPin>();
                if (((outputPinItem != null) 
                            && this._parent.Result.Remove(outputPinItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Clause).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isAssured property
        /// </summary>
        private sealed class IsAssuredProxy : ModelPropertyChange<IConditionalNode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAssuredProxy(IConditionalNode modelElement) : 
                    base(modelElement, "isAssured")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAssured;
                }
                set
                {
                    this.ModelElement.IsAssured = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDeterminate property
        /// </summary>
        private sealed class IsDeterminateProxy : ModelPropertyChange<IConditionalNode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDeterminateProxy(IConditionalNode modelElement) : 
                    base(modelElement, "isDeterminate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDeterminate;
                }
                set
                {
                    this.ModelElement.IsDeterminate = value;
                }
            }
        }
    }
}

