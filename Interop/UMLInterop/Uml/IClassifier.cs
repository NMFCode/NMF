//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Classifier
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Classifier))]
    [XmlDefaultImplementationTypeAttribute(typeof(Classifier))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Classifier")]
    public interface IClassifier : IModelElement, ITemplateableElement, NMF.Interop.Uml.IType, IRedefinableElement, NMF.Interop.Uml.INamespace
    {
        
        /// <summary>
        /// If true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isAbstract")]
        [DescriptionAttribute(@"If true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("isAbstract")]
        [XmlAttributeAttribute(true)]
        bool IsAbstract
        {
            get;
            set;
        }
        
        /// <summary>
        /// If true, the Classifier cannot be specialized.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isFinalSpecialization")]
        [DescriptionAttribute("If true, the Classifier cannot be specialized.\n<p>From package UML::Classificatio" +
            "n.</p>")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("isFinalSpecialization")]
        [XmlAttributeAttribute(true)]
        bool IsFinalSpecialization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Generalization relationships for this Classifier. These Generalizations navigate to more general Classifiers in the generalization hierarchy.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("generalization")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("specific")]
        [ConstantAttribute()]
        IOrderedSetExpression<IGeneralization> Generalization
        {
            get;
        }
        
        /// <summary>
        /// The GeneralizationSet of which this Classifier is a power type.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("powertypeExtent")]
        [DescriptionAttribute("The GeneralizationSet of which this Classifier is a power type.\n<p>From package U" +
            "ML::Classification.</p>")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("powertypeExtent")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("powertype")]
        [ConstantAttribute()]
        ISetExpression<IGeneralizationSet> PowertypeExtent
        {
            get;
        }
        
        /// <summary>
        /// The UseCases owned by this classifier.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedUseCase")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IUseCase> OwnedUseCase
        {
            get;
        }
        
        /// <summary>
        /// The set of UseCases for which this Classifier is the subject.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("useCase")]
        [DescriptionAttribute("The set of UseCases for which this Classifier is the subject.\n<p>From package UML" +
            "::Classification.</p>")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("useCase")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("subject")]
        [ConstantAttribute()]
        ISetExpression<IUseCase> UseCase
        {
            get;
        }
        
        /// <summary>
        /// The Classifiers redefined by this Classifier.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedClassifier")]
        [DescriptionAttribute("The Classifiers redefined by this Classifier.\n<p>From package UML::Classification" +
            ".</p>")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("redefinedClassifier")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ICollectionExpression<IClassifier> RedefinedClassifier
        {
            get;
        }
        
        /// <summary>
        /// A CollaborationUse which indicates the Collaboration that represents this Classifier.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("representation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        ICollaborationUse Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Substitutions owned by this Classifier.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("substitution")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("substitutingClassifier")]
        [ConstantAttribute()]
        IOrderedSetExpression<ISubstitution> Substitution
        {
            get;
        }
        
        /// <summary>
        /// The CollaborationUses owned by the Classifier.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("collaborationUse")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IListExpression<ICollaborationUse> CollaborationUse
        {
            get;
        }
        
        /// <summary>
        /// A Classifier may only specialize Classifiers of a valid type.
        ///parents()-&gt;forAll(c | self.maySpecializeType(c))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Specialize_type(object diagnostics, object context);
        
        /// <summary>
        /// The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.
        ///powertypeExtent-&gt;forAll( gs | 
        ///  gs.generalization-&gt;forAll( gen | 
        ///    not (gen.general = self) and not gen.general.allParents()-&gt;includes(self) and not (gen.specific = self) and not self.allParents()-&gt;includes(gen.specific) 
        ///  ))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maps_to_generalization_set(object diagnostics, object context);
        
        /// <summary>
        /// The parents of a Classifier must be non-final.
        ///parents()-&gt;forAll(not isFinalSpecialization)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Non_final_parents(object diagnostics, object context);
        
        /// <summary>
        /// Generalization hierarchies must be directed and acyclical. A Classifier can not be both a transitively general and transitively specific Classifier of the same Classifier.
        ///not allParents()-&gt;includes(self)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool No_cycles_in_generalization(object diagnostics, object context);
        
        /// <summary>
        /// Retrieves all the attributes of this classifier, including those inherited from its parents.
        /// </summary>
        ISetExpression<IProperty> GetAllAttributes();
        
        /// <summary>
        /// Retrieves all the operations of this classifier, including those inherited from its parents.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IOperation> GetAllOperations();
        
        /// <summary>
        /// Retrieves all the interfaces on which this classifier or any of its parents has a usage dependency.
        /// </summary>
        ISetExpression<IInterface> GetAllUsedInterfaces();
        
        /// <summary>
        /// Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier.
        /// </summary>
        /// <param name="name">The name of the operation to retrieve, or null.</param>
        /// <param name="parameterNames">The parameter names of the operation to retrieve, or null.</param>
        /// <param name="parameterTypes">The parameter types of the operation to retrieve, or null.</param>
        NMF.Interop.Uml.IOperation GetOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes);
        
        /// <summary>
        /// Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier, ignoring case if indicated.
        /// </summary>
        /// <param name="name">The name of the operation to retrieve, or null.</param>
        /// <param name="parameterNames">The parameter names of the operation to retrieve, or null.</param>
        /// <param name="parameterTypes">The parameter types of the operation to retrieve, or null.</param>
        /// <param name="ignoreCase">Whether to ignore case in String comparisons.</param>
        NMF.Interop.Uml.IOperation GetOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes, bool ignoreCase);
        
        /// <summary>
        /// Retrieves the operations of this classifier.
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IOperation> GetOperations();
        
        /// <summary>
        /// Retrieves the interfaces on which this classifier has a usage dependency.
        /// </summary>
        ISetExpression<IInterface> GetUsedInterfaces();
        
        /// <summary>
        /// The query allFeatures() gives all of the Features in the namespace of the Classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.
        ///result = (member-&gt;select(oclIsKindOf(Feature))-&gt;collect(oclAsType(Feature))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IFeature> AllFeatures();
        
        /// <summary>
        /// The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.
        ///result = (parents()-&gt;union(parents()-&gt;collect(allParents())-&gt;asSet()))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IClassifier> AllParents();
        
        /// <summary>
        /// The general Classifiers are the ones referenced by the Generalization relationships.
        ///result = (parents())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IClassifier> GetGenerals();
        
        /// <summary>
        /// The query hasVisibilityOf() determines whether a NamedElement is visible in the classifier. Non-private members are visible. It is only called when the argument is something owned by a parent.
        ///allParents()-&gt;including(self)-&gt;collect(member)-&gt;includes(n)
        ///result = (n.visibility &lt;&gt; VisibilityKind::private)
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        /// <param name="n"></param>
        bool HasVisibilityOf(INamedElement n);
        
        /// <summary>
        /// The query inherit() defines how to inherit a set of elements passed as its argument.  It excludes redefined elements from the result.
        ///result = (inhs-&gt;reject(inh |
        ///  inh.oclIsKindOf(RedefinableElement) and
        ///  ownedMember-&gt;select(oclIsKindOf(RedefinableElement))-&gt;
        ///    select(redefinedElement-&gt;includes(inh.oclAsType(RedefinableElement)))
        ///       -&gt;notEmpty()))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        /// <param name="inhs"></param>
        ISetExpression<INamedElement> Inherit(IEnumerable<INamedElement> inhs);
        
        /// <summary>
        /// The query inheritableMembers() gives all of the members of a Classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.
        ///c.allParents()-&gt;includes(self)
        ///result = (member-&gt;select(m | c.hasVisibilityOf(m)))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        /// <param name="c"></param>
        ISetExpression<INamedElement> InheritableMembers(IClassifier c);
        
        /// <summary>
        /// The inheritedMember association is derived by inheriting the inheritable members of the parents.
        ///result = (inherit(parents()-&gt;collect(inheritableMembers(self))-&gt;asSet()))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<INamedElement> GetInheritedMembers();
        
        /// <summary>
        /// The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.
        ///result = (self.oclIsKindOf(c.oclType()))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        /// <param name="c"></param>
        bool MaySpecializeType(IClassifier c);
        
        /// <summary>
        /// The query parents() gives all of the immediate ancestors of a generalized Classifier.
        ///result = (generalization.general-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IClassifier> Parents();
        
        /// <summary>
        /// The Interfaces directly realized by this Classifier
        ///result = ((clientDependency-&gt;
        ///  select(oclIsKindOf(Realization) and supplier-&gt;forAll(oclIsKindOf(Interface))))-&gt;
        ///      collect(supplier.oclAsType(Interface))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> DirectlyRealizedInterfaces();
        
        /// <summary>
        /// The Interfaces directly used by this Classifier
        ///result = ((supplierDependency-&gt;
        ///  select(oclIsKindOf(Usage) and client-&gt;forAll(oclIsKindOf(Interface))))-&gt;
        ///    collect(client.oclAsType(Interface))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> DirectlyUsedInterfaces();
        
        /// <summary>
        /// The Interfaces realized by this Classifier and all of its generalizations
        ///result = (directlyRealizedInterfaces()-&gt;union(self.allParents()-&gt;collect(directlyRealizedInterfaces()))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> AllRealizedInterfaces();
        
        /// <summary>
        /// The Interfaces used by this Classifier and all of its generalizations
        ///result = (directlyUsedInterfaces()-&gt;union(self.allParents()-&gt;collect(directlyUsedInterfaces()))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IInterface> AllUsedInterfaces();
        
        /// <summary>
        /// result = (substitution.contract-&gt;includes(contract))
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        /// <param name="contract"></param>
        bool IsSubstitutableFor(IClassifier contract);
        
        /// <summary>
        /// The query allAttributes gives an ordered set of all owned and inherited attributes of the Classifier. All owned attributes appear before any inherited attributes, and the attributes inherited from any more specific parent Classifier appear before those of any more general parent Classifier. However, if the Classifier has multiple immediate parents, then the relative ordering of the sets of attributes from those parents is not defined.
        ///result = (attribute-&gt;asSequence()-&gt;union(parents()-&gt;asSequence().allAttributes())-&gt;select(p | member-&gt;includes(p))-&gt;asOrderedSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        IOrderedSetExpression<IProperty> AllAttributes();
        
        /// <summary>
        /// All StructuralFeatures related to the Classifier that may have Slots, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures.
        ///result = (member-&gt;select(oclIsKindOf(StructuralFeature))-&gt;
        ///  collect(oclAsType(StructuralFeature))-&gt;
        ///   union(self.inherit(self.allParents()-&gt;collect(p | p.attribute)-&gt;asSet())-&gt;
        ///     collect(oclAsType(StructuralFeature)))-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<IStructuralFeature> AllSlottableFeatures();
    }
}
