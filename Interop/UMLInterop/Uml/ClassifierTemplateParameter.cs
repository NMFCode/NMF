//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ClassifierTemplateParameter exposes a Classifier as a formal template parameter.
    ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ClassifierTemplateParameter")]
    public partial class ClassifierTemplateParameter : TemplateParameter, IClassifierTemplateParameter, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_constraining_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_constraining_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parametered_element_no_featuresOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParametered_element_no_featuresOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _matching_abstractOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMatching_abstractOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _actual_is_classifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveActual_is_classifierOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _constraining_classifiers_constrain_argsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConstraining_classifiers_constrain_argsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _constraining_classifiers_constrain_parametered_elementOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConstraining_classifiers_constrain_parametered_elementOperation);
        
        /// <summary>
        /// The backing field for the AllowSubstitutable property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _allowSubstitutable = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _allowSubstitutableAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAllowSubstitutableAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _constrainingClassifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConstrainingClassifierReference);
        
        /// <summary>
        /// The backing field for the ConstrainingClassifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _constrainingClassifier;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ClassifierTemplateParameter()
        {
            this._constrainingClassifier = new ObservableAssociationSet<IClassifier>();
            this._constrainingClassifier.CollectionChanging += this.ConstrainingClassifierCollectionChanging;
            this._constrainingClassifier.CollectionChanged += this.ConstrainingClassifierCollectionChanged;
        }
        
        /// <summary>
        /// Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("allowSubstitutable")]
        [DescriptionAttribute("Constrains the required relationship between an actual parameter and the paramete" +
            "redElement for this formal parameter.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("ClassifierTemplateParameter")]
        [XmlElementNameAttribute("allowSubstitutable")]
        [XmlAttributeAttribute(true)]
        public bool AllowSubstitutable
        {
            get
            {
                return this._allowSubstitutable;
            }
            set
            {
                if ((this._allowSubstitutable != value))
                {
                    bool old = this._allowSubstitutable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("AllowSubstitutable", e, _allowSubstitutableAttribute);
                    this._allowSubstitutable = value;
                    this.OnPropertyChanged("AllowSubstitutable", e, _allowSubstitutableAttribute);
                }
            }
        }
        
        /// <summary>
        /// The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("constrainingClassifier")]
        [DescriptionAttribute(@"The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("ClassifierTemplateParameter")]
        [XmlElementNameAttribute("constrainingClassifier")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> ConstrainingClassifier
        {
            get
            {
                return this._constrainingClassifier;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassifierTemplateParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ClassifierTemplateParameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If allowSubstitutable is true, then there must be a constrainingClassifier.
        ///allowSubstitutable implies constrainingClassifier-&gt;notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_constraining_classifier(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_has_constraining_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_constraining_classifier registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_constraining_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_constraining_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_constraining_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_constraining_classifierOperation()
        {
            return ClassInstance.LookupOperation("has_constraining_classifier");
        }
        
        /// <summary>
        /// The parameteredElement has no direct features, and if constrainedElement is empty it has no generalizations.
        ///parameteredElement.feature-&gt;isEmpty() and (constrainingClassifier-&gt;isEmpty() implies  parameteredElement.allParents()-&gt;isEmpty())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Parametered_element_no_features(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_parametered_element_no_featuresOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parametered_element_no_features registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parametered_element_no_featuresOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parametered_element_no_featuresOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parametered_element_no_featuresOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParametered_element_no_featuresOperation()
        {
            return ClassInstance.LookupOperation("parametered_element_no_features");
        }
        
        /// <summary>
        /// If the parameteredElement is not abstract, then the Classifier used as an argument shall not be abstract.
        ///(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual-&gt;forAll(a | not a.oclAsType(Classifier).isAbstract)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Matching_abstract(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_matching_abstractOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method matching_abstract registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _matching_abstractOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _matching_abstractOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _matching_abstractOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMatching_abstractOperation()
        {
            return ClassInstance.LookupOperation("matching_abstract");
        }
        
        /// <summary>
        /// The argument to a ClassifierTemplateParameter is a Classifier.
        /// templateParameterSubstitution.actual-&gt;forAll(a | a.oclIsKindOf(Classifier))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Actual_is_classifier(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_actual_is_classifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method actual_is_classifier registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _actual_is_classifierOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _actual_is_classifierOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _actual_is_classifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveActual_is_classifierOperation()
        {
            return ClassInstance.LookupOperation("actual_is_classifier");
        }
        
        /// <summary>
        /// If there are any constrainingClassifiers, then every argument must be the same as or a specialization of them, or if allowSubstitutable is true, then it can also be substitutable.
        ///templateParameterSubstitution.actual-&gt;forAll( a |
        ///  let arg : Classifier = a.oclAsType(Classifier) in
        ///    constrainingClassifier-&gt;forAll(
        ///      cc |  
        ///         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))
        ///      )
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Constraining_classifiers_constrain_args(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_constraining_classifiers_constrain_argsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method constraining_classifiers_constrain_args reg" +
                        "istered. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _constraining_classifiers_constrain_argsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _constraining_classifiers_constrain_argsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _constraining_classifiers_constrain_argsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConstraining_classifiers_constrain_argsOperation()
        {
            return ClassInstance.LookupOperation("constraining_classifiers_constrain_args");
        }
        
        /// <summary>
        /// If there are any constrainingClassifiers, then the parameteredElement must be the same as or a specialization of them, or if allowSubstitutable is true, then it can also be substitutable.
        ///constrainingClassifier-&gt;forAll(
        ///     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))
        ///)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Constraining_classifiers_constrain_parametered_element(object diagnostics, object context)
        {
            System.Func<IClassifierTemplateParameter, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifierTemplateParameter, object, object, bool>>(_constraining_classifiers_constrain_parametered_elementOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method constraining_classifiers_constrain_paramete" +
                        "red_element registered. Use the method broker to register a method implementatio" +
                        "n.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _constraining_classifiers_constrain_parametered_elementOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _constraining_classifiers_constrain_parametered_elementOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _constraining_classifiers_constrain_parametered_elementOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConstraining_classifiers_constrain_parametered_elementOperation()
        {
            return ClassInstance.LookupOperation("constraining_classifiers_constrain_parametered_element");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAllowSubstitutableAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ClassifierTemplateParameter.ClassInstance)).Resolve("allowSubstitutable")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConstrainingClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ClassifierTemplateParameter.ClassInstance)).Resolve("constrainingClassifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConstrainingClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstrainingClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConstrainingClassifier", e, _constrainingClassifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConstrainingClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstrainingClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConstrainingClassifier", e, _constrainingClassifierReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ALLOWSUBSTITUTABLE"))
            {
                return this.AllowSubstitutable;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONSTRAININGCLASSIFIER"))
            {
                return this._constrainingClassifier;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ALLOWSUBSTITUTABLE"))
            {
                this.AllowSubstitutable = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ALLOWSUBSTITUTABLE"))
            {
                return Observable.Box(new AllowSubstitutableProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ClassifierTemplateParameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassifierTemplateParameter class
        /// </summary>
        public class ClassifierTemplateParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassifierTemplateParameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassifierTemplateParameterReferencedElementsCollection(ClassifierTemplateParameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the allowSubstitutable property
        /// </summary>
        private sealed class AllowSubstitutableProxy : ModelPropertyChange<IClassifierTemplateParameter, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AllowSubstitutableProxy(IClassifierTemplateParameter modelElement) : 
                    base(modelElement, "allowSubstitutable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AllowSubstitutable;
                }
                set
                {
                    this.ModelElement.AllowSubstitutable = value;
                }
            }
        }
    }
}
