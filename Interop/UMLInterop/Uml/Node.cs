//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Node is computational resource upon which artifacts may be deployed for execution. Nodes can be interconnected through communication paths to define network structures.
    ///<p>From package UML::Deployments.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Node")]
    [DebuggerDisplayAttribute("Node {Name}")]
    public partial class Node : Class, INode, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _internal_structureOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInternal_structureOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createCommunicationPathOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateCommunicationPathOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getCommunicationPathsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetCommunicationPathsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nestedNodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNestedNodeReference);
        
        /// <summary>
        /// The backing field for the NestedNode property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<INode> _nestedNode;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDeployedElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDeployedElementsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _deploymentReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDeploymentReference);
        
        /// <summary>
        /// The backing field for the Deployment property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private DeploymentTargetDeploymentCollection _deployment;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Node()
        {
            this._nestedNode = new ObservableCompositionOrderedSet<INode>(this);
            this._nestedNode.CollectionChanging += this.NestedNodeCollectionChanging;
            this._nestedNode.CollectionChanged += this.NestedNodeCollectionChanged;
            this._deployment = new DeploymentTargetDeploymentCollection(this);
            this._deployment.CollectionChanging += this.DeploymentCollectionChanging;
            this._deployment.CollectionChanged += this.DeploymentCollectionChanged;
        }
        
        /// <summary>
        /// The Nodes that are defined (nested) within the Node.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedNode")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<INode> NestedNode
        {
            get
            {
                return this._nestedNode;
            }
        }
        
        /// <summary>
        /// The set of Deployments for a DeploymentTarget.
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("deployment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("location")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IDeployment> Deployment
        {
            get
            {
                return this._deployment;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new NodeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Node")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The internal structure of a Node (if defined) consists solely of parts of type Node.
        ///part->forAll(oclIsKindOf(Node))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Internal_structure(object diagnostics, object context)
        {
            System.Func<INode, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INode, object, object, bool>>(_internal_structureOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method internal_structure registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _internal_structureOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _internal_structureOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _internal_structureOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInternal_structureOperation()
        {
            return ClassInstance.LookupOperation("internal_structure");
        }
        
        /// <summary>
        /// Creates a (binary) communication path between this node and the specified other node, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this node's nearest package.
        /// </summary>
        /// <param name="end1IsNavigable">The navigability for the first end of the new communication path.</param>
        /// <param name="end1Aggregation">The aggregation for the first end of the new communication path.</param>
        /// <param name="end1Name">The name for the first end of the new communication path.</param>
        /// <param name="end1Lower">The lower bound for the first end of the new communication path.</param>
        /// <param name="end1Upper">The upper bound for the first end of the new communication path.</param>
        /// <param name="end1Node">The type for the first end of the new communication path.</param>
        /// <param name="end2IsNavigable">The navigability for the second end of the new communication path.</param>
        /// <param name="end2Aggregation">The aggregation for the second end of the new communication path.</param>
        /// <param name="end2Name">The name for the second end of the new communication path.</param>
        /// <param name="end2Lower">The lower bound for the second end of the new communication path.</param>
        /// <param name="end2Upper">The upper bound for the second end of the new communication path.</param>
        public ICommunicationPath CreateCommunicationPath(bool end1IsNavigable, AggregationKind end1Aggregation, string end1Name, int end1Lower, object end1Upper, INode end1Node, bool end2IsNavigable, AggregationKind end2Aggregation, string end2Name, int end2Lower, object end2Upper)
        {
            System.Func<INode, bool, AggregationKind, string, int, object, INode, bool, AggregationKind, string, int, object, ICommunicationPath> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INode, bool, AggregationKind, string, int, object, INode, bool, AggregationKind, string, int, object, ICommunicationPath>>(_createCommunicationPathOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createCommunicationPath registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createCommunicationPathOperation.Value, end1IsNavigable, end1Aggregation, end1Name, end1Lower, end1Upper, end1Node, end2IsNavigable, end2Aggregation, end2Name, end2Lower, end2Upper);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createCommunicationPathOperation.Value, e));
            ICommunicationPath result = handler.Invoke(this, end1IsNavigable, end1Aggregation, end1Name, end1Lower, end1Upper, end1Node, end2IsNavigable, end2Aggregation, end2Name, end2Lower, end2Upper);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createCommunicationPathOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateCommunicationPathOperation()
        {
            return ClassInstance.LookupOperation("createCommunicationPath");
        }
        
        /// <summary>
        /// Retrieves the communication paths in which this node is involved.
        /// </summary>
        public ISetExpression<ICommunicationPath> GetCommunicationPaths()
        {
            System.Func<INode, ISetExpression<ICommunicationPath>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INode, ISetExpression<ICommunicationPath>>>(_getCommunicationPathsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getCommunicationPaths registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getCommunicationPathsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getCommunicationPathsOperation.Value, e));
            ISetExpression<ICommunicationPath> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getCommunicationPathsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetCommunicationPathsOperation()
        {
            return ClassInstance.LookupOperation("getCommunicationPaths");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNestedNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Node.ClassInstance)).Resolve("nestedNode")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NestedNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedNodeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NestedNode", e, _nestedNodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NestedNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedNodeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NestedNode", e, _nestedNodeReference);
        }
        
        /// <summary>
        /// Derivation for DeploymentTarget::/deployedElement
        ///result = (deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())
        ///<p>From package UML::Deployments.</p>
        /// </summary>
        public ISetExpression<IPackageableElement> GetDeployedElements()
        {
            System.Func<IDeploymentTarget, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IDeploymentTarget, ISetExpression<IPackageableElement>>>(_getDeployedElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDeployedElements registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDeployedElementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDeployedElementsOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDeployedElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDeployedElementsOperation()
        {
            return ClassInstance.LookupOperation("getDeployedElements");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDeploymentReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.DeploymentTarget.ClassInstance)).Resolve("deployment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Deployment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeploymentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Deployment", e, _deploymentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Deployment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeploymentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Deployment", e, _deploymentReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int nestedNodeIndex = ModelHelper.IndexOfReference(this.NestedNode, element);
            if ((nestedNodeIndex != -1))
            {
                return ModelHelper.CreatePath("nestedNode", nestedNodeIndex);
            }
            int deploymentIndex = ModelHelper.IndexOfReference(this.Deployment, element);
            if ((deploymentIndex != -1))
            {
                return ModelHelper.CreatePath("deployment", deploymentIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NESTEDNODE"))
            {
                if ((index < this.NestedNode.Count))
                {
                    return this.NestedNode[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DEPLOYMENT"))
            {
                if ((index < this.Deployment.Count))
                {
                    return this.Deployment[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NESTEDNODE"))
            {
                return this._nestedNode;
            }
            if ((feature == "DEPLOYMENT"))
            {
                return this._deployment;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._nestedNode))
            {
                return "nestedNode";
            }
            if ((container == this._deployment))
            {
                return "deployment";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Node")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Node class
        /// </summary>
        public class NodeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Node _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NodeChildrenCollection(Node parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NestedNode.Count);
                    count = (count + this._parent.Deployment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NestedNode.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NestedNode.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                INode nestedNodeCasted = item.As<INode>();
                if ((nestedNodeCasted != null))
                {
                    this._parent.NestedNode.Add(nestedNodeCasted);
                }
                IDeployment deploymentCasted = item.As<IDeployment>();
                if ((deploymentCasted != null))
                {
                    this._parent.Deployment.Add(deploymentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NestedNode.Clear();
                this._parent.Deployment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NestedNode.Contains(item))
                {
                    return true;
                }
                if (this._parent.Deployment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nestedNodeEnumerator = this._parent.NestedNode.GetEnumerator();
                try
                {
                    for (
                    ; nestedNodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedNodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedNodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> deploymentEnumerator = this._parent.Deployment.GetEnumerator();
                try
                {
                    for (
                    ; deploymentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deploymentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deploymentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                INode nodeItem = item.As<INode>();
                if (((nodeItem != null) 
                            && this._parent.NestedNode.Remove(nodeItem)))
                {
                    return true;
                }
                IDeployment deploymentItem = item.As<IDeployment>();
                if (((deploymentItem != null) 
                            && this._parent.Deployment.Remove(deploymentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NestedNode).Concat(this._parent.Deployment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Node class
        /// </summary>
        public class NodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Node _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NodeReferencedElementsCollection(Node parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NestedNode.Count);
                    count = (count + this._parent.Deployment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NestedNode.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NestedNode.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Deployment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                INode nestedNodeCasted = item.As<INode>();
                if ((nestedNodeCasted != null))
                {
                    this._parent.NestedNode.Add(nestedNodeCasted);
                }
                IDeployment deploymentCasted = item.As<IDeployment>();
                if ((deploymentCasted != null))
                {
                    this._parent.Deployment.Add(deploymentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NestedNode.Clear();
                this._parent.Deployment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NestedNode.Contains(item))
                {
                    return true;
                }
                if (this._parent.Deployment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nestedNodeEnumerator = this._parent.NestedNode.GetEnumerator();
                try
                {
                    for (
                    ; nestedNodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedNodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedNodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> deploymentEnumerator = this._parent.Deployment.GetEnumerator();
                try
                {
                    for (
                    ; deploymentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deploymentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deploymentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                INode nodeItem = item.As<INode>();
                if (((nodeItem != null) 
                            && this._parent.NestedNode.Remove(nodeItem)))
                {
                    return true;
                }
                IDeployment deploymentItem = item.As<IDeployment>();
                if (((deploymentItem != null) 
                            && this._parent.Deployment.Remove(deploymentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NestedNode).Concat(this._parent.Deployment).GetEnumerator();
            }
        }
    }
}

