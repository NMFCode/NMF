//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A BroadcastSignalAction is an InvocationAction that transmits a Signal instance to all the potential target objects in the system. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instances are sent out and cannot receive reply values.
    ///<p>From package UML::Actions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//BroadcastSignalAction")]
    [DebuggerDisplayAttribute("BroadcastSignalAction {Name}")]
    public partial class BroadcastSignalAction : InvocationAction, IBroadcastSignalAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _number_of_argumentsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNumber_of_argumentsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _type_ordering_multiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveType_ordering_multiplicityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_onportOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_onportOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _signalReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSignalReference);
        
        /// <summary>
        /// The backing field for the Signal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ISignal _signal;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The Signal whose instances are to be sent.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DisplayNameAttribute("signal")]
        [DescriptionAttribute("The Signal whose instances are to be sent.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("BroadcastSignalAction")]
        [XmlElementNameAttribute("signal")]
        [XmlAttributeAttribute(true)]
        public ISignal Signal
        {
            get
            {
                return this._signal;
            }
            set
            {
                if ((this._signal != value))
                {
                    ISignal old = this._signal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Signal", e, _signalReference);
                    this._signal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSignal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSignal;
                    }
                    this.OnPropertyChanged("Signal", e, _signalReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BroadcastSignalActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//BroadcastSignalAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The number of argument InputPins must be the same as the number of attributes in the signal.
        ///argument->size() = signal.allAttributes()->size()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Number_of_arguments(object diagnostics, object context)
        {
            System.Func<IBroadcastSignalAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBroadcastSignalAction, object, object, bool>>(_number_of_argumentsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method number_of_arguments registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _number_of_argumentsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _number_of_argumentsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _number_of_argumentsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNumber_of_argumentsOperation()
        {
            return ClassInstance.LookupOperation("number_of_arguments");
        }
        
        /// <summary>
        /// The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal.
        ///let attribute: OrderedSet(Property) = signal.allAttributes() in
        ///Sequence{1..argument->size()}->forAll(i | 
        ///	argument->at(i).type.conformsTo(attribute->at(i).type) and 
        ///	argument->at(i).isOrdered = attribute->at(i).isOrdered and
        ///	argument->at(i).compatibleWith(attribute->at(i)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Type_ordering_multiplicity(object diagnostics, object context)
        {
            System.Func<IBroadcastSignalAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBroadcastSignalAction, object, object, bool>>(_type_ordering_multiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method type_ordering_multiplicity registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _type_ordering_multiplicityOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _type_ordering_multiplicityOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _type_ordering_multiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveType_ordering_multiplicityOperation()
        {
            return ClassInstance.LookupOperation("type_ordering_multiplicity");
        }
        
        /// <summary>
        /// A BroadcaseSignalAction may not specify onPort.
        ///onPort=null
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_onport(object diagnostics, object context)
        {
            System.Func<IBroadcastSignalAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBroadcastSignalAction, object, object, bool>>(_no_onportOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_onport registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_onportOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_onportOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_onportOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_onportOperation()
        {
            return ClassInstance.LookupOperation("no_onport");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSignalReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BroadcastSignalAction.ClassInstance)).Resolve("signal")));
        }
        
        /// <summary>
        /// Handles the event that the Signal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSignal(object sender, System.EventArgs eventArgs)
        {
            this.Signal = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SIGNAL"))
            {
                return this.Signal;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SIGNAL"))
            {
                this.Signal = ((ISignal)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SIGNAL"))
            {
                return new SignalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//BroadcastSignalAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BroadcastSignalAction class
        /// </summary>
        public class BroadcastSignalActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BroadcastSignalAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BroadcastSignalActionReferencedElementsCollection(BroadcastSignalAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Signal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Signal == null))
                {
                    ISignal signalCasted = item.As<ISignal>();
                    if ((signalCasted != null))
                    {
                        this._parent.Signal = signalCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Signal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Signal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Signal != null))
                {
                    array[arrayIndex] = this._parent.Signal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Signal == item))
                {
                    this._parent.Signal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Signal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the signal property
        /// </summary>
        private sealed class SignalProxy : ModelPropertyChange<IBroadcastSignalAction, ISignal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SignalProxy(IBroadcastSignalAction modelElement) : 
                    base(modelElement, "signal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISignal Value
            {
                get
                {
                    return this.ModelElement.Signal;
                }
                set
                {
                    this.ModelElement.Signal = value;
                }
            }
        }
    }
}

