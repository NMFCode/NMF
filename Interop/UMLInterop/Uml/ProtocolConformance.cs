//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ProtocolStateMachine can be redefined into a more specific ProtocolStateMachine or into behavioral StateMachine. ProtocolConformance declares that the specific ProtocolStateMachine specifies a protocol that conforms to the general ProtocolStateMachine or that the specific behavioral StateMachine abides by the protocol of the general ProtocolStateMachine.
    ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolConformance")]
    public partial class ProtocolConformance : DirectedRelationship, IProtocolConformance, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalMachineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralMachineReference);
        
        /// <summary>
        /// The backing field for the GeneralMachine property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IProtocolStateMachine _generalMachine;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _specificMachineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSpecificMachineReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("generalMachine")]
        [DescriptionAttribute("Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine con" +
            "forms.\n<p>From package UML::StateMachines.</p>")]
        [CategoryAttribute("ProtocolConformance")]
        [XmlElementNameAttribute("generalMachine")]
        [XmlAttributeAttribute(true)]
        public IProtocolStateMachine GeneralMachine
        {
            get
            {
                return this._generalMachine;
            }
            set
            {
                if ((this._generalMachine != value))
                {
                    IProtocolStateMachine old = this._generalMachine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("GeneralMachine", e, _generalMachineReference);
                    this._generalMachine = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGeneralMachine;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGeneralMachine;
                    }
                    this.OnPropertyChanged("GeneralMachine", e, _generalMachineReference);
                }
            }
        }
        
        /// <summary>
        /// Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine.
        ///&lt;p&gt;From package UML::StateMachines.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("specificMachine")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("conformance")]
        public IProtocolStateMachine SpecificMachine
        {
            get
            {
                return ModelHelper.CastAs<IProtocolStateMachine>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProtocolConformanceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolConformance")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralMachineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProtocolConformance.ClassInstance)).Resolve("generalMachine")));
        }
        
        /// <summary>
        /// Handles the event that the GeneralMachine property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGeneralMachine(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.GeneralMachine))
            {
                this.GeneralMachine = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSpecificMachineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ProtocolConformance.ClassInstance)).Resolve("specificMachine")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IProtocolStateMachine oldSpecificMachine = ModelHelper.CastAs<IProtocolStateMachine>(oldParent);
            IProtocolStateMachine newSpecificMachine = ModelHelper.CastAs<IProtocolStateMachine>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecificMachine, newSpecificMachine);
            this.OnPropertyChanging("SpecificMachine", e, _specificMachineReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IProtocolStateMachine oldSpecificMachine = ModelHelper.CastAs<IProtocolStateMachine>(oldParent);
            IProtocolStateMachine newSpecificMachine = ModelHelper.CastAs<IProtocolStateMachine>(newParent);
            if ((oldSpecificMachine != null))
            {
                oldSpecificMachine.Conformance.Remove(this);
            }
            if ((newSpecificMachine != null))
            {
                newSpecificMachine.Conformance.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecificMachine, newSpecificMachine);
            this.OnPropertyChanged("SpecificMachine", e, _specificMachineReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "GENERALMACHINE"))
            {
                return this.GeneralMachine;
            }
            if ((reference == "SPECIFICMACHINE"))
            {
                return this.SpecificMachine;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERALMACHINE"))
            {
                this.GeneralMachine = ((IProtocolStateMachine)(value));
                return;
            }
            if ((feature == "SPECIFICMACHINE"))
            {
                this.SpecificMachine = ((IProtocolStateMachine)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GENERALMACHINE"))
            {
                return new GeneralMachineProxy(this);
            }
            if ((reference == "SPECIFICMACHINE"))
            {
                return new SpecificMachineProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolConformance")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProtocolConformance class
        /// </summary>
        public class ProtocolConformanceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProtocolConformance _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProtocolConformanceReferencedElementsCollection(ProtocolConformance parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GeneralMachine != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SpecificMachine != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GeneralMachine == null))
                {
                    IProtocolStateMachine generalMachineCasted = item.As<IProtocolStateMachine>();
                    if ((generalMachineCasted != null))
                    {
                        this._parent.GeneralMachine = generalMachineCasted;
                        return;
                    }
                }
                if ((this._parent.SpecificMachine == null))
                {
                    IProtocolStateMachine specificMachineCasted = item.As<IProtocolStateMachine>();
                    if ((specificMachineCasted != null))
                    {
                        this._parent.SpecificMachine = specificMachineCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GeneralMachine = null;
                this._parent.SpecificMachine = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GeneralMachine))
                {
                    return true;
                }
                if ((item == this._parent.SpecificMachine))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GeneralMachine != null))
                {
                    array[arrayIndex] = this._parent.GeneralMachine;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SpecificMachine != null))
                {
                    array[arrayIndex] = this._parent.SpecificMachine;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GeneralMachine == item))
                {
                    this._parent.GeneralMachine = null;
                    return true;
                }
                if ((this._parent.SpecificMachine == item))
                {
                    this._parent.SpecificMachine = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GeneralMachine).Concat(this._parent.SpecificMachine).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the generalMachine property
        /// </summary>
        private sealed class GeneralMachineProxy : ModelPropertyChange<IProtocolConformance, IProtocolStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneralMachineProxy(IProtocolConformance modelElement) : 
                    base(modelElement, "generalMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProtocolStateMachine Value
            {
                get
                {
                    return this.ModelElement.GeneralMachine;
                }
                set
                {
                    this.ModelElement.GeneralMachine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specificMachine property
        /// </summary>
        private sealed class SpecificMachineProxy : ModelPropertyChange<IProtocolConformance, IProtocolStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecificMachineProxy(IProtocolConformance modelElement) : 
                    base(modelElement, "specificMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProtocolStateMachine Value
            {
                get
                {
                    return this.ModelElement.SpecificMachine;
                }
                set
                {
                    this.ModelElement.SpecificMachine = value;
                }
            }
        }
    }
}
