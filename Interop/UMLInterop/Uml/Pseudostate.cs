//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Pseudostate")]
    [DebuggerDisplayAttribute("Pseudostate {Name}")]
    public partial class Pseudostate : Vertex, IPseudostate, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _transitions_outgoingOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTransitions_outgoingOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _choice_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveChoice_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _outgoing_from_initialOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutgoing_from_initialOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _join_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveJoin_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _junction_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveJunction_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _history_verticesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHistory_verticesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _initial_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInitial_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _fork_vertexOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveFork_vertexOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _transitions_incomingOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTransitions_incomingOperation);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private PseudostateKind _kind = PseudostateKind.Initial;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _kindAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _stateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStateReference);
        
        /// <summary>
        /// The backing field for the State property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IState _state;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _stateMachineReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveStateMachineReference);
        
        /// <summary>
        /// The backing field for the StateMachine property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStateMachine _stateMachine;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DefaultValueAttribute(PseudostateKind.Initial)]
        [DisplayNameAttribute("kind")]
        [DescriptionAttribute("Determines the precise type of the Pseudostate and can be one of: entryPoint, exi" +
            "tPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or" +
            " choice.\n<p>From package UML::StateMachines.</p>")]
        [CategoryAttribute("Pseudostate")]
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public PseudostateKind Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    PseudostateKind old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The State that owns this Pseudostate and in which it appears.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("state")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("connectionPoint")]
        public IState State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    IState old = this._state;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("State", e, _stateReference);
                    this._state = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ConnectionPoint.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.ConnectionPoint.Add(this);
                    }
                    this.OnPropertyChanged("State", e, _stateReference);
                }
            }
        }
        
        /// <summary>
        /// The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("stateMachine")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("connectionPoint")]
        public IStateMachine StateMachine
        {
            get
            {
                return this._stateMachine;
            }
            set
            {
                if ((this._stateMachine != value))
                {
                    IStateMachine old = this._stateMachine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("StateMachine", e, _stateMachineReference);
                    this._stateMachine = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ConnectionPoint.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.ConnectionPoint.Add(this);
                    }
                    this.OnPropertyChanged("StateMachine", e, _stateMachineReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PseudostateReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Pseudostate")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.
        ///(kind = PseudostateKind::fork) implies
        ///
        ///-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions 
        ///-- such that these targets belong to different regions of that orthogonal state 
        ///
        ///outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in
        ///	((contState <> null) and (contState.region
        ///		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Transitions_outgoing(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_transitions_outgoingOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method transitions_outgoing registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _transitions_outgoingOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _transitions_outgoingOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _transitions_outgoingOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTransitions_outgoingOperation()
        {
            return ClassInstance.LookupOperation("transitions_outgoing");
        }
        
        /// <summary>
        /// In a complete statemachine, a choice Vertex must have at least one incoming and one outgoing Transition.
        ///(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Choice_vertex(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_choice_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method choice_vertex registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _choice_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _choice_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _choice_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveChoice_vertexOperation()
        {
            return ClassInstance.LookupOperation("choice_vertex");
        }
        
        /// <summary>
        /// The outgoing Transition from an initial vertex may have a behavior, but not a trigger or a guard.
        ///(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Outgoing_from_initial(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_outgoing_from_initialOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method outgoing_from_initial registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _outgoing_from_initialOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _outgoing_from_initialOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _outgoing_from_initialOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutgoing_from_initialOperation()
        {
            return ClassInstance.LookupOperation("outgoing_from_initial");
        }
        
        /// <summary>
        /// In a complete StateMachine, a join Vertex must have at least two incoming Transitions and exactly one outgoing Transition.
        ///(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Join_vertex(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_join_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method join_vertex registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _join_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _join_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _join_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveJoin_vertexOperation()
        {
            return ClassInstance.LookupOperation("join_vertex");
        }
        
        /// <summary>
        /// In a complete StateMachine, a junction Vertex must have at least one incoming and one outgoing Transition.
        ///(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Junction_vertex(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_junction_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method junction_vertex registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _junction_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _junction_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _junction_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveJunction_vertexOperation()
        {
            return ClassInstance.LookupOperation("junction_vertex");
        }
        
        /// <summary>
        /// History Vertices can have at most one outgoing Transition.
        ///((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool History_vertices(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_history_verticesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method history_vertices registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _history_verticesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _history_verticesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _history_verticesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHistory_verticesOperation()
        {
            return ClassInstance.LookupOperation("history_vertices");
        }
        
        /// <summary>
        /// An initial Vertex can have at most one outgoing Transition.
        ///(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Initial_vertex(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_initial_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method initial_vertex registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _initial_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _initial_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _initial_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInitial_vertexOperation()
        {
            return ClassInstance.LookupOperation("initial_vertex");
        }
        
        /// <summary>
        /// In a complete StateMachine, a fork Vertex must have at least two outgoing Transitions and exactly one incoming Transition.
        ///(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Fork_vertex(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_fork_vertexOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method fork_vertex registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _fork_vertexOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _fork_vertexOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _fork_vertexOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveFork_vertexOperation()
        {
            return ClassInstance.LookupOperation("fork_vertex");
        }
        
        /// <summary>
        /// All Transitions incoming a join Vertex must originate in different Regions of an orthogonal State.
        ///(kind = PseudostateKind::join) implies
        ///
        ///-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions 
        ///-- such that these source vertices belong to different regions of that orthogonal state 
        ///
        ///incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in
        ///	((contState <> null) and (contState.region
        ///		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Transitions_incoming(object diagnostics, object context)
        {
            System.Func<IPseudostate, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IPseudostate, object, object, bool>>(_transitions_incomingOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method transitions_incoming registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _transitions_incomingOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _transitions_incomingOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _transitions_incomingOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTransitions_incomingOperation()
        {
            return ClassInstance.LookupOperation("transitions_incoming");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveKindAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Pseudostate.ClassInstance)).Resolve("kind")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Pseudostate.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Handles the event that the State property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetState(object sender, System.EventArgs eventArgs)
        {
            this.State = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveStateMachineReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Pseudostate.ClassInstance)).Resolve("stateMachine")));
        }
        
        /// <summary>
        /// Handles the event that the StateMachine property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStateMachine(object sender, System.EventArgs eventArgs)
        {
            this.StateMachine = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "STATE"))
            {
                return this.State;
            }
            if ((reference == "STATEMACHINE"))
            {
                return this.StateMachine;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATE"))
            {
                this.State = ((IState)(value));
                return;
            }
            if ((feature == "STATEMACHINE"))
            {
                this.StateMachine = ((IStateMachine)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((PseudostateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "KIND"))
            {
                return Observable.Box(new KindProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "STATE"))
            {
                return new StateProxy(this);
            }
            if ((reference == "STATEMACHINE"))
            {
                return new StateMachineProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Pseudostate")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Pseudostate class
        /// </summary>
        public class PseudostateReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Pseudostate _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PseudostateReferencedElementsCollection(Pseudostate parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.State != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StateMachine != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.State == null))
                {
                    IState stateCasted = item.As<IState>();
                    if ((stateCasted != null))
                    {
                        this._parent.State = stateCasted;
                        return;
                    }
                }
                if ((this._parent.StateMachine == null))
                {
                    IStateMachine stateMachineCasted = item.As<IStateMachine>();
                    if ((stateMachineCasted != null))
                    {
                        this._parent.StateMachine = stateMachineCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.State = null;
                this._parent.StateMachine = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.State))
                {
                    return true;
                }
                if ((item == this._parent.StateMachine))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.State != null))
                {
                    array[arrayIndex] = this._parent.State;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StateMachine != null))
                {
                    array[arrayIndex] = this._parent.StateMachine;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.State == item))
                {
                    this._parent.State = null;
                    return true;
                }
                if ((this._parent.StateMachine == item))
                {
                    this._parent.StateMachine = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.State).Concat(this._parent.StateMachine).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IPseudostate, PseudostateKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IPseudostate modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override PseudostateKind Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<IPseudostate, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(IPseudostate modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stateMachine property
        /// </summary>
        private sealed class StateMachineProxy : ModelPropertyChange<IPseudostate, IStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateMachineProxy(IPseudostate modelElement) : 
                    base(modelElement, "stateMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStateMachine Value
            {
                get
                {
                    return this.ModelElement.StateMachine;
                }
                set
                {
                    this.ModelElement.StateMachine = value;
                }
            }
        }
    }
}

