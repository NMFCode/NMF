//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Pin
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Pin))]
    [XmlDefaultImplementationTypeAttribute(typeof(Pin))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Pin")]
    public interface IPin : IModelElement, IMultiplicityElement, IObjectNode
    {
        
        /// <summary>
        /// Indicates whether the Pin provides data to the Action or just controls how the Action executes.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isControl")]
        [DescriptionAttribute("Indicates whether the Pin provides data to the Action or just controls how the Ac" +
            "tion executes.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("Pin")]
        [XmlElementNameAttribute("isControl")]
        [XmlAttributeAttribute(true)]
        bool IsControl
        {
            get;
            set;
        }
        
        /// <summary>
        /// A control Pin has a control type.
        ///isControl implies isControlType
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Control_pins(object diagnostics, object context);
        
        /// <summary>
        /// Pin multiplicity is not unique.
        ///not isUnique
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Not_unique(object diagnostics, object context);
    }
}

