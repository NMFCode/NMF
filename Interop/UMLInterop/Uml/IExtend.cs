//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Extend
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Extend))]
    [XmlDefaultImplementationTypeAttribute(typeof(Extend))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Extend")]
    public interface IExtend : IModelElement, IDirectedRelationship, INamedElement
    {
        
        /// <summary>
        /// References the condition that must hold when the first ExtensionPoint is reached for the extension to take place. If no constraint is associated with the Extend relationship, the extension is unconditional.
        ///&lt;p&gt;From package UML::UseCases.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("condition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint Condition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The UseCase that is being extended.
        ///&lt;p&gt;From package UML::UseCases.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("extendedCase")]
        [DescriptionAttribute("The UseCase that is being extended.\n<p>From package UML::UseCases.</p>")]
        [CategoryAttribute("Extend")]
        [XmlElementNameAttribute("extendedCase")]
        [XmlAttributeAttribute(true)]
        IUseCase ExtendedCase
        {
            get;
            set;
        }
        
        /// <summary>
        /// An ordered list of ExtensionPoints belonging to the extended UseCase, specifying where the respective behavioral fragments of the extending UseCase are to be inserted. The first fragment in the extending UseCase is associated with the first extension point in the list, the second fragment with the second point, and so on. Note that, in most practical cases, the extending UseCase has just a single behavior fragment, so that the list of ExtensionPoints is trivial.
        ///&lt;p&gt;From package UML::UseCases.&lt;/p&gt;
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("extensionLocation")]
        [DescriptionAttribute(@"An ordered list of ExtensionPoints belonging to the extended UseCase, specifying where the respective behavioral fragments of the extending UseCase are to be inserted. The first fragment in the extending UseCase is associated with the first extension point in the list, the second fragment with the second point, and so on. Note that, in most practical cases, the extending UseCase has just a single behavior fragment, so that the list of ExtensionPoints is trivial.
<p>From package UML::UseCases.</p>")]
        [CategoryAttribute("Extend")]
        [XmlElementNameAttribute("extensionLocation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<IExtensionPoint> ExtensionLocation
        {
            get;
        }
        
        /// <summary>
        /// The UseCase that represents the extension and owns the Extend relationship.
        ///&lt;p&gt;From package UML::UseCases.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("extension")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("extend")]
        IUseCase Extension
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ExtensionPoints referenced by the Extend relationship must belong to the UseCase that is being extended.
        ///extensionLocation-&gt;forAll (xp | extendedCase.extensionPoint-&gt;includes(xp))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Extension_points(object diagnostics, object context);
    }
}
