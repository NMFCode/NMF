//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.
    ///<p>From package UML::Packages.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Model")]
    [DebuggerDisplayAttribute("Model {Name}")]
    public partial class Model : Package, NMF.Interop.Uml.IModel, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMetamodelOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMetamodelOperation);
        
        /// <summary>
        /// The backing field for the Viewpoint property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _viewpoint;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _viewpointAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveViewpointAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The name of the viewpoint that is expressed by a model (this name may refer to a profile definition).
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DisplayNameAttribute("viewpoint")]
        [DescriptionAttribute("The name of the viewpoint that is expressed by a model (this name may refer to a " +
            "profile definition).\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Model")]
        [XmlElementNameAttribute("viewpoint")]
        [XmlAttributeAttribute(true)]
        public string Viewpoint
        {
            get
            {
                return this._viewpoint;
            }
            set
            {
                if ((this._viewpoint != value))
                {
                    string old = this._viewpoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Viewpoint", e, _viewpointAttribute);
                    this._viewpoint = value;
                    this.OnPropertyChanged("Viewpoint", e, _viewpointAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Model")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Determines whether this model is a metamodel.
        /// </summary>
        public bool IsMetamodel()
        {
            System.Func<NMF.Interop.Uml.IModel, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IModel, bool>>(_isMetamodelOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMetamodel registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMetamodelOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMetamodelOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMetamodelOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMetamodelOperation()
        {
            return ClassInstance.LookupOperation("isMetamodel");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveViewpointAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Model.ClassInstance)).Resolve("viewpoint")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VIEWPOINT"))
            {
                return this.Viewpoint;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VIEWPOINT"))
            {
                this.Viewpoint = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "VIEWPOINT"))
            {
                return new ViewpointProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Model")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the viewpoint property
        /// </summary>
        private sealed class ViewpointProxy : ModelPropertyChange<NMF.Interop.Uml.IModel, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ViewpointProxy(NMF.Interop.Uml.IModel modelElement) : 
                    base(modelElement, "viewpoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Viewpoint;
                }
                set
                {
                    this.ModelElement.Viewpoint = value;
                }
            }
        }
    }
}

