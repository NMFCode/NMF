//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Vertex is an abstraction of a node in a StateMachine graph. It can be the source or destination of any number of Transitions.
    ///<p>From package UML::StateMachines.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Vertex")]
    [DebuggerDisplayAttribute("Vertex {Name}")]
    public abstract partial class Vertex : NamedElement, IVertex, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _containingStateMachineOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveContainingStateMachineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getIncomingsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetIncomingsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOutgoingsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOutgoingsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isContainedInStateOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsContainedInStateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isContainedInRegionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsContainedInRegionOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _containerReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveContainerReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The Region that contains this Vertex.
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("container")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("subvertex")]
        public IRegion Container
        {
            get
            {
                return ModelHelper.CastAs<IRegion>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VertexReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Vertex")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The operation containingStateMachine() returns the StateMachine in which this Vertex is defined.
        ///result = (if container <> null
        ///then
        ///-- the container is a region
        ///   container.containingStateMachine()
        ///else 
        ///   if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then
        ///      self.oclAsType(Pseudostate).stateMachine
        ///   else 
        ///      if (self.oclIsKindOf(ConnectionPointReference)) then
        ///          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible
        ///      else 
        ///          null
        ///      endif
        ///   endif
        ///endif
        ///)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public IStateMachine ContainingStateMachine()
        {
            System.Func<IVertex, IStateMachine> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IVertex, IStateMachine>>(_containingStateMachineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method containingStateMachine registered. Use the " +
                        "method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _containingStateMachineOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _containingStateMachineOperation.Value, e));
            IStateMachine result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _containingStateMachineOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveContainingStateMachineOperation()
        {
            return ClassInstance.LookupOperation("containingStateMachine");
        }
        
        /// <summary>
        /// Derivation for Vertex::/incoming.
        ///result = (Transition.allInstances()->select(target=self))
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public ISetExpression<ITransition> GetIncomings()
        {
            System.Func<IVertex, ISetExpression<ITransition>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IVertex, ISetExpression<ITransition>>>(_getIncomingsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getIncomings registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getIncomingsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getIncomingsOperation.Value, e));
            ISetExpression<ITransition> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getIncomingsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetIncomingsOperation()
        {
            return ClassInstance.LookupOperation("getIncomings");
        }
        
        /// <summary>
        /// Derivation for Vertex::/outgoing
        ///result = (Transition.allInstances()->select(source=self))
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        public ISetExpression<ITransition> GetOutgoings()
        {
            System.Func<IVertex, ISetExpression<ITransition>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IVertex, ISetExpression<ITransition>>>(_getOutgoingsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getOutgoings registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOutgoingsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOutgoingsOperation.Value, e));
            ISetExpression<ITransition> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOutgoingsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOutgoingsOperation()
        {
            return ClassInstance.LookupOperation("getOutgoings");
        }
        
        /// <summary>
        /// This utility operation returns true if the Vertex is contained in the State s (input argument).
        ///result = (if not s.isComposite() or container->isEmpty() then
        ///	false
        ///else
        ///	if container.state = s then 
        ///		true
        ///	else
        ///		container.state.isContainedInState(s)
        ///	endif
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="s"></param>
        public bool IsContainedInState(IState s)
        {
            System.Func<IVertex, IState, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IVertex, IState, bool>>(_isContainedInStateOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isContainedInState registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isContainedInStateOperation.Value, s);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isContainedInStateOperation.Value, e));
            bool result = handler.Invoke(this, s);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isContainedInStateOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsContainedInStateOperation()
        {
            return ClassInstance.LookupOperation("isContainedInState");
        }
        
        /// <summary>
        /// This utility query returns true if the Vertex is contained in the Region r (input argument).
        ///result = (if (container = r) then
        ///	true
        ///else
        ///	if (r.state->isEmpty()) then
        ///		false
        ///	else
        ///		container.state.isContainedInRegion(r)
        ///	endif
        ///endif)
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        /// <param name="r"></param>
        public bool IsContainedInRegion(IRegion r)
        {
            System.Func<IVertex, IRegion, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IVertex, IRegion, bool>>(_isContainedInRegionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isContainedInRegion registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isContainedInRegionOperation.Value, r);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isContainedInRegionOperation.Value, e));
            bool result = handler.Invoke(this, r);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isContainedInRegionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsContainedInRegionOperation()
        {
            return ClassInstance.LookupOperation("isContainedInRegion");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveContainerReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Vertex.ClassInstance)).Resolve("container")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IRegion oldContainer = ModelHelper.CastAs<IRegion>(oldParent);
            IRegion newContainer = ModelHelper.CastAs<IRegion>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldContainer, newContainer);
            this.OnPropertyChanging("Container", e, _containerReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRegion oldContainer = ModelHelper.CastAs<IRegion>(oldParent);
            IRegion newContainer = ModelHelper.CastAs<IRegion>(newParent);
            if ((oldContainer != null))
            {
                oldContainer.Subvertex.Remove(this);
            }
            if ((newContainer != null))
            {
                newContainer.Subvertex.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldContainer, newContainer);
            this.OnPropertyChanged("Container", e, _containerReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONTAINER"))
            {
                return this.Container;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONTAINER"))
            {
                this.Container = ((IRegion)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CONTAINER"))
            {
                return new ContainerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Vertex")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Vertex class
        /// </summary>
        public class VertexReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Vertex _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VertexReferencedElementsCollection(Vertex parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Container != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Container == null))
                {
                    IRegion containerCasted = item.As<IRegion>();
                    if ((containerCasted != null))
                    {
                        this._parent.Container = containerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Container = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Container))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Container != null))
                {
                    array[arrayIndex] = this._parent.Container;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Container == item))
                {
                    this._parent.Container = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Container).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the container property
        /// </summary>
        private sealed class ContainerProxy : ModelPropertyChange<IVertex, IRegion>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContainerProxy(IVertex modelElement) : 
                    base(modelElement, "container")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegion Value
            {
                get
                {
                    return this.ModelElement.Container;
                }
                set
                {
                    this.ModelElement.Container = value;
                }
            }
        }
    }
}

