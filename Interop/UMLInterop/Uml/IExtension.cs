//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Extension
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Extension))]
    [XmlDefaultImplementationTypeAttribute(typeof(Extension))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Extension")]
    public interface IExtension : IModelElement, IAssociation
    {
        
        /// <summary>
        /// The non-owned end of an Extension is typed by a Class.
        ///metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Non_owned_end(object diagnostics, object context);
        
        /// <summary>
        /// An Extension is binary, i.e., it has only two memberEnds.
        ///memberEnd->size() = 2
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Is_binary(object diagnostics, object context);
        
        /// <summary>
        /// Retrieves the stereotype that extends a metaclass through this extension.
        /// </summary>
        IStereotype GetStereotype();
        
        /// <summary>
        /// Retrieves the extension end that is typed by a stereotype (as opposed to a metaclass).
        /// </summary>
        IProperty GetStereotypeEnd();
        
        /// <summary>
        /// The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.
        ///result = (ownedEnd.lowerBound() = 1)
        ///<p>From package UML::Packages.</p>
        /// </summary>
        bool IsRequired();
        
        /// <summary>
        /// The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).
        ///result = (metaclassEnd().type.oclAsType(Class))
        ///<p>From package UML::Packages.</p>
        /// </summary>
        NMF.Interop.Uml.IClass GetMetaclass();
        
        /// <summary>
        /// The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).
        ///result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))
        ///<p>From package UML::Packages.</p>
        /// </summary>
        IProperty MetaclassEnd();
    }
}

