//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ActivityEdge is an abstract class for directed connections between two ActivityNodes.
    ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge")]
    [DebuggerDisplayAttribute("ActivityEdge {Name}")]
    public abstract partial class ActivityEdge : RedefinableElement, IActivityEdge, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _source_and_targetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSource_and_targetOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _activityReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveActivityReference);
        
        /// <summary>
        /// The backing field for the Activity property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IActivity _activity;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _guardReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGuardReference);
        
        /// <summary>
        /// The backing field for the Guard property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _guard;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inPartitionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInPartitionReference);
        
        /// <summary>
        /// The backing field for the InPartition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ActivityEdgeInPartitionCollection _inPartition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interruptsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInterruptsReference);
        
        /// <summary>
        /// The backing field for the Interrupts property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInterruptibleActivityRegion _interrupts;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _inStructuredNodeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInStructuredNodeReference);
        
        /// <summary>
        /// The backing field for the InStructuredNode property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStructuredActivityNode _inStructuredNode;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _targetReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTargetReference);
        
        /// <summary>
        /// The backing field for the Target property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IActivityNode _target;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _sourceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSourceReference);
        
        /// <summary>
        /// The backing field for the Source property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IActivityNode _source;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedEdgeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedEdgeReference);
        
        /// <summary>
        /// The backing field for the RedefinedEdge property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IActivityEdge> _redefinedEdge;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _weightReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveWeightReference);
        
        /// <summary>
        /// The backing field for the Weight property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _weight;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public ActivityEdge()
        {
            this._inPartition = new ActivityEdgeInPartitionCollection(this);
            this._inPartition.CollectionChanging += this.InPartitionCollectionChanging;
            this._inPartition.CollectionChanged += this.InPartitionCollectionChanged;
            this._redefinedEdge = new ObservableAssociationSet<IActivityEdge>();
            this._redefinedEdge.CollectionChanging += this.RedefinedEdgeCollectionChanging;
            this._redefinedEdge.CollectionChanged += this.RedefinedEdgeCollectionChanged;
        }
        
        /// <summary>
        /// The Activity containing the ActivityEdge, if it is directly owned by an Activity.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("activity")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("edge")]
        public IActivity Activity
        {
            get
            {
                return this._activity;
            }
            set
            {
                if ((this._activity != value))
                {
                    IActivity old = this._activity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Activity", e, _activityReference);
                    this._activity = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Edge.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Edge.Add(this);
                    }
                    this.OnPropertyChanged("Activity", e, _activityReference);
                }
            }
        }
        
        /// <summary>
        /// A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("guard")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Guard
        {
            get
            {
                return this._guard;
            }
            set
            {
                if ((this._guard != value))
                {
                    IValueSpecification old = this._guard;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Guard", e, _guardReference);
                    this._guard = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetGuard;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetGuard;
                    }
                    this.OnPropertyChanged("Guard", e, _guardReference);
                }
            }
        }
        
        /// <summary>
        /// ActivityPartitions containing the ActivityEdge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("inPartition")]
        [DescriptionAttribute("ActivityPartitions containing the ActivityEdge.\n<p>From package UML::Activities.<" +
            "/p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("inPartition")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("edge")]
        [ConstantAttribute()]
        public ISetExpression<IActivityPartition> InPartition
        {
            get
            {
                return this._inPartition;
            }
        }
        
        /// <summary>
        /// The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("interrupts")]
        [DescriptionAttribute("The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdg" +
            "e.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("interrupts")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("interruptingEdge")]
        public IInterruptibleActivityRegion Interrupts
        {
            get
            {
                return this._interrupts;
            }
            set
            {
                if ((this._interrupts != value))
                {
                    IInterruptibleActivityRegion old = this._interrupts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Interrupts", e, _interruptsReference);
                    this._interrupts = value;
                    if ((old != null))
                    {
                        old.InterruptingEdge.Remove(this);
                        old.Deleted -= this.OnResetInterrupts;
                    }
                    if ((value != null))
                    {
                        value.InterruptingEdge.Add(this);
                        value.Deleted += this.OnResetInterrupts;
                    }
                    this.OnPropertyChanged("Interrupts", e, _interruptsReference);
                }
            }
        }
        
        /// <summary>
        /// The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inStructuredNode")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("edge")]
        public IStructuredActivityNode InStructuredNode
        {
            get
            {
                return this._inStructuredNode;
            }
            set
            {
                if ((this._inStructuredNode != value))
                {
                    IStructuredActivityNode old = this._inStructuredNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("InStructuredNode", e, _inStructuredNodeReference);
                    this._inStructuredNode = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Edge.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.Edge.Add(this);
                    }
                    this.OnPropertyChanged("InStructuredNode", e, _inStructuredNodeReference);
                }
            }
        }
        
        /// <summary>
        /// The ActivityNode to which tokens are put when they traverse the ActivityEdge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("target")]
        [DescriptionAttribute("The ActivityNode to which tokens are put when they traverse the ActivityEdge.\n<p>" +
            "From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("incoming")]
        public IActivityNode Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    IActivityNode old = this._target;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Target", e, _targetReference);
                    this._target = value;
                    if ((old != null))
                    {
                        old.Incoming.Remove(this);
                        old.Deleted -= this.OnResetTarget;
                    }
                    if ((value != null))
                    {
                        value.Incoming.Add(this);
                        value.Deleted += this.OnResetTarget;
                    }
                    this.OnPropertyChanged("Target", e, _targetReference);
                }
            }
        }
        
        /// <summary>
        /// The ActivityNode from which tokens are taken when they traverse the ActivityEdge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("source")]
        [DescriptionAttribute("The ActivityNode from which tokens are taken when they traverse the ActivityEdge." +
            "\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outgoing")]
        public IActivityNode Source
        {
            get
            {
                return this._source;
            }
            set
            {
                if ((this._source != value))
                {
                    IActivityNode old = this._source;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Source", e, _sourceReference);
                    this._source = value;
                    if ((old != null))
                    {
                        old.Outgoing.Remove(this);
                        old.Deleted -= this.OnResetSource;
                    }
                    if ((value != null))
                    {
                        value.Outgoing.Add(this);
                        value.Deleted += this.OnResetSource;
                    }
                    this.OnPropertyChanged("Source", e, _sourceReference);
                }
            }
        }
        
        /// <summary>
        /// ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedEdge")]
        [DescriptionAttribute("ActivityEdges from a generalization of the Activity containing this ActivityEdge " +
            "that are redefined by this ActivityEdge.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ActivityEdge")]
        [XmlElementNameAttribute("redefinedEdge")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IActivityEdge> RedefinedEdge
        {
            get
            {
                return this._redefinedEdge;
            }
        }
        
        /// <summary>
        /// The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1.
        ///&lt;p&gt;From package UML::Activities.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("weight")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    IValueSpecification old = this._weight;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Weight", e, _weightReference);
                    this._weight = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetWeight;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetWeight;
                    }
                    this.OnPropertyChanged("Weight", e, _weightReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ActivityEdgeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ActivityEdgeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If an ActivityEdge is directly owned by an Activity, then its source and target must be directly or indirectly contained in the same Activity.
        ///activity&lt;&gt;null implies source.containingActivity() = activity and target.containingActivity() = activity
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Source_and_target(object diagnostics, object context)
        {
            System.Func<IActivityEdge, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IActivityEdge, object, object, bool>>(_source_and_targetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method source_and_target registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _source_and_targetOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _source_and_targetOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _source_and_targetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSource_and_targetOperation()
        {
            return ClassInstance.LookupOperation("source_and_target");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveActivityReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("activity")));
        }
        
        /// <summary>
        /// Handles the event that the Activity property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActivity(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Activity))
            {
                this.Activity = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGuardReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("guard")));
        }
        
        /// <summary>
        /// Handles the event that the Guard property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGuard(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Guard))
            {
                this.Guard = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInPartitionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("inPartition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InPartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InPartitionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InPartition", e, _inPartitionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InPartition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InPartitionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InPartition", e, _inPartitionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInterruptsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("interrupts")));
        }
        
        /// <summary>
        /// Handles the event that the Interrupts property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInterrupts(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Interrupts))
            {
                this.Interrupts = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInStructuredNodeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("inStructuredNode")));
        }
        
        /// <summary>
        /// Handles the event that the InStructuredNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInStructuredNode(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.InStructuredNode))
            {
                this.InStructuredNode = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTargetReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("target")));
        }
        
        /// <summary>
        /// Handles the event that the Target property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTarget(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Target))
            {
                this.Target = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSourceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("source")));
        }
        
        /// <summary>
        /// Handles the event that the Source property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSource(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Source))
            {
                this.Source = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedEdgeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("redefinedEdge")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedEdge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedEdgeCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedEdge", e, _redefinedEdgeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedEdge property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedEdgeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedEdge", e, _redefinedEdgeReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveWeightReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ActivityEdge.ClassInstance)).Resolve("weight")));
        }
        
        /// <summary>
        /// Handles the event that the Weight property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWeight(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Weight))
            {
                this.Weight = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Guard))
            {
                return ModelHelper.CreatePath("guard");
            }
            if ((element == this.Weight))
            {
                return ModelHelper.CreatePath("weight");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ACTIVITY"))
            {
                return this.Activity;
            }
            if ((reference == "GUARD"))
            {
                return this.Guard;
            }
            if ((reference == "INTERRUPTS"))
            {
                return this.Interrupts;
            }
            if ((reference == "INSTRUCTUREDNODE"))
            {
                return this.InStructuredNode;
            }
            if ((reference == "TARGET"))
            {
                return this.Target;
            }
            if ((reference == "SOURCE"))
            {
                return this.Source;
            }
            if ((reference == "WEIGHT"))
            {
                return this.Weight;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INPARTITION"))
            {
                return this._inPartition;
            }
            if ((feature == "REDEFINEDEDGE"))
            {
                return this._redefinedEdge;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVITY"))
            {
                this.Activity = ((IActivity)(value));
                return;
            }
            if ((feature == "GUARD"))
            {
                this.Guard = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "INTERRUPTS"))
            {
                this.Interrupts = ((IInterruptibleActivityRegion)(value));
                return;
            }
            if ((feature == "INSTRUCTUREDNODE"))
            {
                this.InStructuredNode = ((IStructuredActivityNode)(value));
                return;
            }
            if ((feature == "TARGET"))
            {
                this.Target = ((IActivityNode)(value));
                return;
            }
            if ((feature == "SOURCE"))
            {
                this.Source = ((IActivityNode)(value));
                return;
            }
            if ((feature == "WEIGHT"))
            {
                this.Weight = ((IValueSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ACTIVITY"))
            {
                return new ActivityProxy(this);
            }
            if ((reference == "GUARD"))
            {
                return new GuardProxy(this);
            }
            if ((reference == "INTERRUPTS"))
            {
                return new InterruptsProxy(this);
            }
            if ((reference == "INSTRUCTUREDNODE"))
            {
                return new InStructuredNodeProxy(this);
            }
            if ((reference == "TARGET"))
            {
                return new TargetProxy(this);
            }
            if ((reference == "SOURCE"))
            {
                return new SourceProxy(this);
            }
            if ((reference == "WEIGHT"))
            {
                return new WeightProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityEdge class
        /// </summary>
        public class ActivityEdgeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityEdge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityEdgeChildrenCollection(ActivityEdge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Guard != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Weight != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Guard == null))
                {
                    IValueSpecification guardCasted = item.As<IValueSpecification>();
                    if ((guardCasted != null))
                    {
                        this._parent.Guard = guardCasted;
                        return;
                    }
                }
                if ((this._parent.Weight == null))
                {
                    IValueSpecification weightCasted = item.As<IValueSpecification>();
                    if ((weightCasted != null))
                    {
                        this._parent.Weight = weightCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Guard = null;
                this._parent.Weight = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Guard))
                {
                    return true;
                }
                if ((item == this._parent.Weight))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Guard != null))
                {
                    array[arrayIndex] = this._parent.Guard;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Weight != null))
                {
                    array[arrayIndex] = this._parent.Weight;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Guard == item))
                {
                    this._parent.Guard = null;
                    return true;
                }
                if ((this._parent.Weight == item))
                {
                    this._parent.Weight = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Guard).Concat(this._parent.Weight).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityEdge class
        /// </summary>
        public class ActivityEdgeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityEdge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityEdgeReferencedElementsCollection(ActivityEdge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Activity != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Guard != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.InPartition.Count);
                    if ((this._parent.Interrupts != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InStructuredNode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Target != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Source != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RedefinedEdge.Count);
                    if ((this._parent.Weight != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.InPartition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.RedefinedEdge.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.InPartition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.RedefinedEdge.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Activity == null))
                {
                    IActivity activityCasted = item.As<IActivity>();
                    if ((activityCasted != null))
                    {
                        this._parent.Activity = activityCasted;
                        return;
                    }
                }
                if ((this._parent.Guard == null))
                {
                    IValueSpecification guardCasted = item.As<IValueSpecification>();
                    if ((guardCasted != null))
                    {
                        this._parent.Guard = guardCasted;
                        return;
                    }
                }
                IActivityPartition inPartitionCasted = item.As<IActivityPartition>();
                if ((inPartitionCasted != null))
                {
                    this._parent.InPartition.Add(inPartitionCasted);
                }
                if ((this._parent.Interrupts == null))
                {
                    IInterruptibleActivityRegion interruptsCasted = item.As<IInterruptibleActivityRegion>();
                    if ((interruptsCasted != null))
                    {
                        this._parent.Interrupts = interruptsCasted;
                        return;
                    }
                }
                if ((this._parent.InStructuredNode == null))
                {
                    IStructuredActivityNode inStructuredNodeCasted = item.As<IStructuredActivityNode>();
                    if ((inStructuredNodeCasted != null))
                    {
                        this._parent.InStructuredNode = inStructuredNodeCasted;
                        return;
                    }
                }
                if ((this._parent.Target == null))
                {
                    IActivityNode targetCasted = item.As<IActivityNode>();
                    if ((targetCasted != null))
                    {
                        this._parent.Target = targetCasted;
                        return;
                    }
                }
                if ((this._parent.Source == null))
                {
                    IActivityNode sourceCasted = item.As<IActivityNode>();
                    if ((sourceCasted != null))
                    {
                        this._parent.Source = sourceCasted;
                        return;
                    }
                }
                IActivityEdge redefinedEdgeCasted = item.As<IActivityEdge>();
                if ((redefinedEdgeCasted != null))
                {
                    this._parent.RedefinedEdge.Add(redefinedEdgeCasted);
                }
                if ((this._parent.Weight == null))
                {
                    IValueSpecification weightCasted = item.As<IValueSpecification>();
                    if ((weightCasted != null))
                    {
                        this._parent.Weight = weightCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Activity = null;
                this._parent.Guard = null;
                this._parent.InPartition.Clear();
                this._parent.Interrupts = null;
                this._parent.InStructuredNode = null;
                this._parent.Target = null;
                this._parent.Source = null;
                this._parent.RedefinedEdge.Clear();
                this._parent.Weight = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Activity))
                {
                    return true;
                }
                if ((item == this._parent.Guard))
                {
                    return true;
                }
                if (this._parent.InPartition.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Interrupts))
                {
                    return true;
                }
                if ((item == this._parent.InStructuredNode))
                {
                    return true;
                }
                if ((item == this._parent.Target))
                {
                    return true;
                }
                if ((item == this._parent.Source))
                {
                    return true;
                }
                if (this._parent.RedefinedEdge.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Weight))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Activity != null))
                {
                    array[arrayIndex] = this._parent.Activity;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Guard != null))
                {
                    array[arrayIndex] = this._parent.Guard;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> inPartitionEnumerator = this._parent.InPartition.GetEnumerator();
                try
                {
                    for (
                    ; inPartitionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inPartitionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inPartitionEnumerator.Dispose();
                }
                if ((this._parent.Interrupts != null))
                {
                    array[arrayIndex] = this._parent.Interrupts;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InStructuredNode != null))
                {
                    array[arrayIndex] = this._parent.InStructuredNode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Target != null))
                {
                    array[arrayIndex] = this._parent.Target;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Source != null))
                {
                    array[arrayIndex] = this._parent.Source;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> redefinedEdgeEnumerator = this._parent.RedefinedEdge.GetEnumerator();
                try
                {
                    for (
                    ; redefinedEdgeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedEdgeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedEdgeEnumerator.Dispose();
                }
                if ((this._parent.Weight != null))
                {
                    array[arrayIndex] = this._parent.Weight;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Activity == item))
                {
                    this._parent.Activity = null;
                    return true;
                }
                if ((this._parent.Guard == item))
                {
                    this._parent.Guard = null;
                    return true;
                }
                IActivityPartition activityPartitionItem = item.As<IActivityPartition>();
                if (((activityPartitionItem != null) 
                            && this._parent.InPartition.Remove(activityPartitionItem)))
                {
                    return true;
                }
                if ((this._parent.Interrupts == item))
                {
                    this._parent.Interrupts = null;
                    return true;
                }
                if ((this._parent.InStructuredNode == item))
                {
                    this._parent.InStructuredNode = null;
                    return true;
                }
                if ((this._parent.Target == item))
                {
                    this._parent.Target = null;
                    return true;
                }
                if ((this._parent.Source == item))
                {
                    this._parent.Source = null;
                    return true;
                }
                IActivityEdge activityEdgeItem = item.As<IActivityEdge>();
                if (((activityEdgeItem != null) 
                            && this._parent.RedefinedEdge.Remove(activityEdgeItem)))
                {
                    return true;
                }
                if ((this._parent.Weight == item))
                {
                    this._parent.Weight = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Activity).Concat(this._parent.Guard).Concat(this._parent.InPartition).Concat(this._parent.Interrupts).Concat(this._parent.InStructuredNode).Concat(this._parent.Target).Concat(this._parent.Source).Concat(this._parent.RedefinedEdge).Concat(this._parent.Weight).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activity property
        /// </summary>
        private sealed class ActivityProxy : ModelPropertyChange<IActivityEdge, IActivity>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivityProxy(IActivityEdge modelElement) : 
                    base(modelElement, "activity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivity Value
            {
                get
                {
                    return this.ModelElement.Activity;
                }
                set
                {
                    this.ModelElement.Activity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the guard property
        /// </summary>
        private sealed class GuardProxy : ModelPropertyChange<IActivityEdge, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GuardProxy(IActivityEdge modelElement) : 
                    base(modelElement, "guard")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Guard;
                }
                set
                {
                    this.ModelElement.Guard = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interrupts property
        /// </summary>
        private sealed class InterruptsProxy : ModelPropertyChange<IActivityEdge, IInterruptibleActivityRegion>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterruptsProxy(IActivityEdge modelElement) : 
                    base(modelElement, "interrupts")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInterruptibleActivityRegion Value
            {
                get
                {
                    return this.ModelElement.Interrupts;
                }
                set
                {
                    this.ModelElement.Interrupts = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inStructuredNode property
        /// </summary>
        private sealed class InStructuredNodeProxy : ModelPropertyChange<IActivityEdge, IStructuredActivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InStructuredNodeProxy(IActivityEdge modelElement) : 
                    base(modelElement, "inStructuredNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStructuredActivityNode Value
            {
                get
                {
                    return this.ModelElement.InStructuredNode;
                }
                set
                {
                    this.ModelElement.InStructuredNode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the target property
        /// </summary>
        private sealed class TargetProxy : ModelPropertyChange<IActivityEdge, IActivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetProxy(IActivityEdge modelElement) : 
                    base(modelElement, "target")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivityNode Value
            {
                get
                {
                    return this.ModelElement.Target;
                }
                set
                {
                    this.ModelElement.Target = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the source property
        /// </summary>
        private sealed class SourceProxy : ModelPropertyChange<IActivityEdge, IActivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceProxy(IActivityEdge modelElement) : 
                    base(modelElement, "source")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivityNode Value
            {
                get
                {
                    return this.ModelElement.Source;
                }
                set
                {
                    this.ModelElement.Source = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the weight property
        /// </summary>
        private sealed class WeightProxy : ModelPropertyChange<IActivityEdge, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeightProxy(IActivityEdge modelElement) : 
                    base(modelElement, "weight")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Weight;
                }
                set
                {
                    this.ModelElement.Weight = value;
                }
            }
        }
    }
}
