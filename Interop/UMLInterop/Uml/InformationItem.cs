//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// InformationItems represent many kinds of information that can flow from sources to targets in very abstract ways.  They represent the kinds of information that may move within a system, but do not elaborate details of the transferred information.  Details of transferred information are the province of other Classifiers that may ultimately define InformationItems.  Consequently, InformationItems cannot be instantiated and do not themselves have features, generalizations, or associations. An important use of InformationItems is to represent information during early design stages, possibly before the detailed modeling decisions that will ultimately define them have been made. Another purpose of InformationItems is to abstract portions of complex models in less precise, but perhaps more general and communicable, ways.
    ///<p>From package UML::InformationFlows.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InformationItem")]
    [DebuggerDisplayAttribute("InformationItem {Name}")]
    public partial class InformationItem : Classifier, IInformationItem, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _sources_and_targetsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSources_and_targetsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _has_noOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHas_noOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_instantiableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_instantiableOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _representedReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRepresentedReference);
        
        /// <summary>
        /// The backing field for the Represented property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _represented;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public InformationItem()
        {
            this._represented = new ObservableAssociationSet<IClassifier>();
            this._represented.CollectionChanging += this.RepresentedCollectionChanging;
            this._represented.CollectionChanged += this.RepresentedCollectionChanged;
        }
        
        /// <summary>
        /// Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("represented")]
        [DescriptionAttribute("Determines the classifiers that will specify the structure and nature of the info" +
            "rmation. An information item represents all its represented classifiers.\n<p>From" +
            " package UML::InformationFlows.</p>")]
        [CategoryAttribute("InformationItem")]
        [XmlElementNameAttribute("represented")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> Represented
        {
            get
            {
                return this._represented;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InformationItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InformationItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any. The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.
        ///(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |
        ///  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and
        ///    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and
        ///      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or
        ///        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Sources_and_targets(object diagnostics, object context)
        {
            System.Func<IInformationItem, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInformationItem, object, object, bool>>(_sources_and_targetsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method sources_and_targets registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _sources_and_targetsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _sources_and_targetsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _sources_and_targetsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSources_and_targetsOperation()
        {
            return ClassInstance.LookupOperation("sources_and_targets");
        }
        
        /// <summary>
        /// An informationItem has no feature, no generalization, and no associations.
        ///self.generalization->isEmpty() and self.feature->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Has_no(object diagnostics, object context)
        {
            System.Func<IInformationItem, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInformationItem, object, object, bool>>(_has_noOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method has_no registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _has_noOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _has_noOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _has_noOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHas_noOperation()
        {
            return ClassInstance.LookupOperation("has_no");
        }
        
        /// <summary>
        /// It is not instantiable.
        ///isAbstract
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Not_instantiable(object diagnostics, object context)
        {
            System.Func<IInformationItem, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IInformationItem, object, object, bool>>(_not_instantiableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_instantiable registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_instantiableOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_instantiableOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_instantiableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_instantiableOperation()
        {
            return ClassInstance.LookupOperation("not_instantiable");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRepresentedReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.InformationItem.ClassInstance)).Resolve("represented")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Represented property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RepresentedCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Represented", e, _representedReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Represented property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RepresentedCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Represented", e, _representedReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REPRESENTED"))
            {
                return this._represented;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//InformationItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InformationItem class
        /// </summary>
        public class InformationItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InformationItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InformationItemReferencedElementsCollection(InformationItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Represented.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Represented.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Represented.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier representedCasted = item.As<IClassifier>();
                if ((representedCasted != null))
                {
                    this._parent.Represented.Add(representedCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Represented.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Represented.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> representedEnumerator = this._parent.Represented.GetEnumerator();
                try
                {
                    for (
                    ; representedEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = representedEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    representedEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.Represented.Remove(classifierItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Represented).GetEnumerator();
            }
        }
    }
}

