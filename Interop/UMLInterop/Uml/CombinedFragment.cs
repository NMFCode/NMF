//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner.
    ///<p>From package UML::Interactions.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//CombinedFragment")]
    [DebuggerDisplayAttribute("CombinedFragment {Name}")]
    public partial class CombinedFragment : InteractionFragment, ICombinedFragment, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _breakOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveBreakOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _consider_and_ignoreOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConsider_and_ignoreOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _opt_loop_break_negOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOpt_loop_break_negOperation);
        
        /// <summary>
        /// The backing field for the InteractionOperator property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private InteractionOperatorKind _interactionOperator = InteractionOperatorKind.Seq;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interactionOperatorAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInteractionOperatorAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _cfragmentGateReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCfragmentGateReference);
        
        /// <summary>
        /// The backing field for the CfragmentGate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IGate> _cfragmentGate;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _operandReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOperandReference);
        
        /// <summary>
        /// The backing field for the Operand property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IInteractionOperand> _operand;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public CombinedFragment()
        {
            this._cfragmentGate = new ObservableCompositionOrderedSet<IGate>(this);
            this._cfragmentGate.CollectionChanging += this.CfragmentGateCollectionChanging;
            this._cfragmentGate.CollectionChanged += this.CfragmentGateCollectionChanged;
            this._operand = new ObservableCompositionOrderedSet<IInteractionOperand>(this);
            this._operand.CollectionChanging += this.OperandCollectionChanging;
            this._operand.CollectionChanged += this.OperandCollectionChanged;
        }
        
        /// <summary>
        /// Specifies the operation which defines the semantics of this combination of InteractionFragments.
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [DefaultValueAttribute(InteractionOperatorKind.Seq)]
        [DisplayNameAttribute("interactionOperator")]
        [DescriptionAttribute("Specifies the operation which defines the semantics of this combination of Intera" +
            "ctionFragments.\n<p>From package UML::Interactions.</p>")]
        [CategoryAttribute("CombinedFragment")]
        [XmlElementNameAttribute("interactionOperator")]
        [XmlAttributeAttribute(true)]
        public InteractionOperatorKind InteractionOperator
        {
            get
            {
                return this._interactionOperator;
            }
            set
            {
                if ((this._interactionOperator != value))
                {
                    InteractionOperatorKind old = this._interactionOperator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("InteractionOperator", e, _interactionOperatorAttribute);
                    this._interactionOperator = value;
                    this.OnPropertyChanged("InteractionOperator", e, _interactionOperatorAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the gates that form the interface between this CombinedFragment and its surroundings
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("cfragmentGate")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IGate> CfragmentGate
        {
            get
            {
                return this._cfragmentGate;
            }
        }
        
        /// <summary>
        /// The set of operands of the combined fragment.
        ///<p>From package UML::Interactions.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("operand")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInteractionOperand> Operand
        {
            get
            {
                return this._operand;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new CombinedFragmentChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CombinedFragmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//CombinedFragment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines covered by the enclosing InteractionFragment.
        ///interactionOperator=InteractionOperatorKind::break  implies   
        ///enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(
        ///   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Break(object diagnostics, object context)
        {
            System.Func<ICombinedFragment, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICombinedFragment, object, object, bool>>(_breakOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method break registered. Use the method broker to " +
                        "register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _breakOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _breakOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _breakOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveBreakOperation()
        {
            return ClassInstance.LookupOperation("break");
        }
        
        /// <summary>
        /// The interaction operators 'consider' and 'ignore' can only be used for the ConsiderIgnoreFragment subtype of CombinedFragment
        ///((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Consider_and_ignore(object diagnostics, object context)
        {
            System.Func<ICombinedFragment, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICombinedFragment, object, object, bool>>(_consider_and_ignoreOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method consider_and_ignore registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _consider_and_ignoreOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _consider_and_ignoreOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _consider_and_ignoreOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConsider_and_ignoreOperation()
        {
            return ClassInstance.LookupOperation("consider_and_ignore");
        }
        
        /// <summary>
        /// If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand.
        ///(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or
        ///interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or
        ///interactionOperator = InteractionOperatorKind::neg)
        ///implies operand->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Opt_loop_break_neg(object diagnostics, object context)
        {
            System.Func<ICombinedFragment, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ICombinedFragment, object, object, bool>>(_opt_loop_break_negOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method opt_loop_break_neg registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _opt_loop_break_negOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _opt_loop_break_negOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _opt_loop_break_negOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOpt_loop_break_negOperation()
        {
            return ClassInstance.LookupOperation("opt_loop_break_neg");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInteractionOperatorAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.CombinedFragment.ClassInstance)).Resolve("interactionOperator")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCfragmentGateReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.CombinedFragment.ClassInstance)).Resolve("cfragmentGate")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CfragmentGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CfragmentGateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CfragmentGate", e, _cfragmentGateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CfragmentGate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CfragmentGateCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CfragmentGate", e, _cfragmentGateReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOperandReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.CombinedFragment.ClassInstance)).Resolve("operand")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Operand property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperandCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Operand", e, _operandReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Operand property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperandCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Operand", e, _operandReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int cfragmentGateIndex = ModelHelper.IndexOfReference(this.CfragmentGate, element);
            if ((cfragmentGateIndex != -1))
            {
                return ModelHelper.CreatePath("cfragmentGate", cfragmentGateIndex);
            }
            int operandIndex = ModelHelper.IndexOfReference(this.Operand, element);
            if ((operandIndex != -1))
            {
                return ModelHelper.CreatePath("operand", operandIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CFRAGMENTGATE"))
            {
                if ((index < this.CfragmentGate.Count))
                {
                    return this.CfragmentGate[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OPERAND"))
            {
                if ((index < this.Operand.Count))
                {
                    return this.Operand[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INTERACTIONOPERATOR"))
            {
                return this.InteractionOperator;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CFRAGMENTGATE"))
            {
                return this._cfragmentGate;
            }
            if ((feature == "OPERAND"))
            {
                return this._operand;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INTERACTIONOPERATOR"))
            {
                this.InteractionOperator = ((InteractionOperatorKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INTERACTIONOPERATOR"))
            {
                return Observable.Box(new InteractionOperatorProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._cfragmentGate))
            {
                return "cfragmentGate";
            }
            if ((container == this._operand))
            {
                return "operand";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//CombinedFragment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CombinedFragment class
        /// </summary>
        public class CombinedFragmentChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CombinedFragment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CombinedFragmentChildrenCollection(CombinedFragment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CfragmentGate.Count);
                    count = (count + this._parent.Operand.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CfragmentGate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Operand.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CfragmentGate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Operand.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGate cfragmentGateCasted = item.As<IGate>();
                if ((cfragmentGateCasted != null))
                {
                    this._parent.CfragmentGate.Add(cfragmentGateCasted);
                }
                IInteractionOperand operandCasted = item.As<IInteractionOperand>();
                if ((operandCasted != null))
                {
                    this._parent.Operand.Add(operandCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CfragmentGate.Clear();
                this._parent.Operand.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CfragmentGate.Contains(item))
                {
                    return true;
                }
                if (this._parent.Operand.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> cfragmentGateEnumerator = this._parent.CfragmentGate.GetEnumerator();
                try
                {
                    for (
                    ; cfragmentGateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cfragmentGateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cfragmentGateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> operandEnumerator = this._parent.Operand.GetEnumerator();
                try
                {
                    for (
                    ; operandEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operandEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operandEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGate gateItem = item.As<IGate>();
                if (((gateItem != null) 
                            && this._parent.CfragmentGate.Remove(gateItem)))
                {
                    return true;
                }
                IInteractionOperand interactionOperandItem = item.As<IInteractionOperand>();
                if (((interactionOperandItem != null) 
                            && this._parent.Operand.Remove(interactionOperandItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CfragmentGate).Concat(this._parent.Operand).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CombinedFragment class
        /// </summary>
        public class CombinedFragmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CombinedFragment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CombinedFragmentReferencedElementsCollection(CombinedFragment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CfragmentGate.Count);
                    count = (count + this._parent.Operand.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CfragmentGate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Operand.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CfragmentGate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Operand.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGate cfragmentGateCasted = item.As<IGate>();
                if ((cfragmentGateCasted != null))
                {
                    this._parent.CfragmentGate.Add(cfragmentGateCasted);
                }
                IInteractionOperand operandCasted = item.As<IInteractionOperand>();
                if ((operandCasted != null))
                {
                    this._parent.Operand.Add(operandCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CfragmentGate.Clear();
                this._parent.Operand.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CfragmentGate.Contains(item))
                {
                    return true;
                }
                if (this._parent.Operand.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> cfragmentGateEnumerator = this._parent.CfragmentGate.GetEnumerator();
                try
                {
                    for (
                    ; cfragmentGateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cfragmentGateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cfragmentGateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> operandEnumerator = this._parent.Operand.GetEnumerator();
                try
                {
                    for (
                    ; operandEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operandEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operandEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGate gateItem = item.As<IGate>();
                if (((gateItem != null) 
                            && this._parent.CfragmentGate.Remove(gateItem)))
                {
                    return true;
                }
                IInteractionOperand interactionOperandItem = item.As<IInteractionOperand>();
                if (((interactionOperandItem != null) 
                            && this._parent.Operand.Remove(interactionOperandItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CfragmentGate).Concat(this._parent.Operand).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interactionOperator property
        /// </summary>
        private sealed class InteractionOperatorProxy : ModelPropertyChange<ICombinedFragment, InteractionOperatorKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InteractionOperatorProxy(ICombinedFragment modelElement) : 
                    base(modelElement, "interactionOperator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override InteractionOperatorKind Value
            {
                get
                {
                    return this.ModelElement.InteractionOperator;
                }
                set
                {
                    this.ModelElement.InteractionOperator = value;
                }
            }
        }
    }
}

