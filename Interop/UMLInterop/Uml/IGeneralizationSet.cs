//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for GeneralizationSet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GeneralizationSet))]
    [XmlDefaultImplementationTypeAttribute(typeof(GeneralizationSet))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//GeneralizationSet")]
    public interface IGeneralizationSet : IModelElement, IPackageableElement
    {
        
        /// <summary>
        /// Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isCovering")]
        [DescriptionAttribute(@"Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("isCovering")]
        [XmlAttributeAttribute(true)]
        bool IsCovering
        {
            get;
            set;
        }
        
        /// <summary>
        /// Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDisjoint")]
        [DescriptionAttribute(@"Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("isDisjoint")]
        [XmlAttributeAttribute(true)]
        bool IsDisjoint
        {
            get;
            set;
        }
        
        /// <summary>
        /// Designates the Classifier that is defined as the power type for the associated GeneralizationSet, if there is one.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("powertype")]
        [DescriptionAttribute("Designates the Classifier that is defined as the power type for the associated Ge" +
            "neralizationSet, if there is one.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("powertype")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("powertypeExtent")]
        IClassifier Powertype
        {
            get;
            set;
        }
        
        /// <summary>
        /// Designates the instances of Generalization that are members of this GeneralizationSet.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("generalization")]
        [DescriptionAttribute("Designates the instances of Generalization that are members of this Generalizatio" +
            "nSet.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("GeneralizationSet")]
        [XmlElementNameAttribute("generalization")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("generalizationSet")]
        [ConstantAttribute()]
        ISetExpression<IGeneralization> Generalization
        {
            get;
        }
        
        /// <summary>
        /// Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.
        ///generalization-&gt;collect(general)-&gt;asSet()-&gt;size() &lt;= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Generalization_same_classifier(object diagnostics, object context);
        
        /// <summary>
        /// The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.
        ///powertype &lt;&gt; null implies generalization-&gt;forAll( gen | 
        ///    not (gen.general = powertype) and not gen.general.allParents()-&gt;includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()-&gt;includes(gen.specific)
        ///  )
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Maps_to_generalization_set(object diagnostics, object context);
    }
}
