//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Connector
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Connector))]
    [XmlDefaultImplementationTypeAttribute(typeof(Connector))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Connector")]
    public interface IConnector : IModelElement, IFeature
    {
        
        /// <summary>
        /// The set of Behaviors that specify the valid interaction patterns across the Connector.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("contract")]
        [DescriptionAttribute("The set of Behaviors that specify the valid interaction patterns across the Conne" +
            "ctor.\n<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Connector")]
        [XmlElementNameAttribute("contract")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IBehavior> Contract
        {
            get;
        }
        
        /// <summary>
        /// A Connector has at least two ConnectorEnds, each representing the participation of instances of the Classifiers typing the ConnectableElements attached to the end. The set of ConnectorEnds is ordered.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("end")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConnectorEnd> End
        {
            get;
        }
        
        /// <summary>
        /// A Connector may be redefined when its containing Classifier is specialized. The redefining Connector may have a type that specializes the type of the redefined Connector. The types of the ConnectorEnds of the redefining Connector may specialize the types of the ConnectorEnds of the redefined Connector. The properties of the ConnectorEnds of the redefining Connector may be replaced.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedConnector")]
        [DescriptionAttribute(@"A Connector may be redefined when its containing Classifier is specialized. The redefining Connector may have a type that specializes the type of the redefined Connector. The types of the ConnectorEnds of the redefining Connector may specialize the types of the ConnectorEnds of the redefined Connector. The properties of the ConnectorEnds of the redefining Connector may be replaced.
<p>From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Connector")]
        [XmlElementNameAttribute("redefinedConnector")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IConnector> RedefinedConnector
        {
            get;
        }
        
        /// <summary>
        /// An optional Association that classifies links corresponding to this Connector.
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("An optional Association that classifies links corresponding to this Connector.\n<p" +
            ">From package UML::StructuredClassifiers.</p>")]
        [CategoryAttribute("Connector")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        IAssociation Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// The types of the ConnectableElements that the ends of a Connector are attached to must conform to the types of the ends of the Association that types the Connector, if any.
        ///type&lt;&gt;null implies 
        ///  let noOfEnds : Integer = end-&gt;size() in 
        ///  (type.memberEnd-&gt;size() = noOfEnds) and Sequence{1..noOfEnds}-&gt;forAll(i | end-&gt;at(i).role.type.conformsTo(type.memberEnd-&gt;at(i).type))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Types(object diagnostics, object context);
        
        /// <summary>
        /// The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be owned or inherited roles of the Classifier that owned the Connector, or they must be Ports of such roles.
        ///structuredClassifier &lt;&gt; null
        ///and
        ///  end-&gt;forAll( e | structuredClassifier.allRoles()-&gt;includes(e.role)
        ///or
        ///  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()-&gt;includes(e.partWithPort))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Roles(object diagnostics, object context);
        
        /// <summary>
        /// Derivation for Connector::/kind : ConnectorKind
        ///result = (if end-&gt;exists(
        ///		role.oclIsKindOf(Port) 
        ///		and partWithPort-&gt;isEmpty()
        ///		and not role.oclAsType(Port).isBehavior)
        ///then ConnectorKind::delegation 
        ///else ConnectorKind::assembly 
        ///endif)
        ///&lt;p&gt;From package UML::StructuredClassifiers.&lt;/p&gt;
        /// </summary>
        ConnectorKind GetKind();
    }
}
