//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for InformationFlow
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InformationFlow))]
    [XmlDefaultImplementationTypeAttribute(typeof(InformationFlow))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//InformationFlow")]
    public interface IInformationFlow : IModelElement, IDirectedRelationship, IPackageableElement
    {
        
        /// <summary>
        /// Specifies the information items that may circulate on this information flow.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("conveyed")]
        [DescriptionAttribute("Specifies the information items that may circulate on this information flow.\n<p>F" +
            "rom package UML::InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("conveyed")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IClassifier> Conveyed
        {
            get;
        }
        
        /// <summary>
        /// Defines from which source the conveyed InformationItems are initiated.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("informationSource")]
        [DescriptionAttribute("Defines from which source the conveyed InformationItems are initiated.\n<p>From pa" +
            "ckage UML::InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("informationSource")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<INamedElement> InformationSource
        {
            get;
        }
        
        /// <summary>
        /// Defines to which target the conveyed InformationItems are directed.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("informationTarget")]
        [DescriptionAttribute("Defines to which target the conveyed InformationItems are directed.\n<p>From packa" +
            "ge UML::InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("informationTarget")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<INamedElement> InformationTarget
        {
            get;
        }
        
        /// <summary>
        /// Determines which Relationship will realize the specified flow.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("realization")]
        [DescriptionAttribute("Determines which Relationship will realize the specified flow.\n<p>From package UM" +
            "L::InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("realization")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IRelationship> Realization
        {
            get;
        }
        
        /// <summary>
        /// Determines which ActivityEdges will realize the specified flow.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("realizingActivityEdge")]
        [DescriptionAttribute("Determines which ActivityEdges will realize the specified flow.\n<p>From package U" +
            "ML::InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("realizingActivityEdge")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IActivityEdge> RealizingActivityEdge
        {
            get;
        }
        
        /// <summary>
        /// Determines which Connectors will realize the specified flow.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("realizingConnector")]
        [DescriptionAttribute("Determines which Connectors will realize the specified flow.\n<p>From package UML:" +
            ":InformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("realizingConnector")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IConnector> RealizingConnector
        {
            get;
        }
        
        /// <summary>
        /// Determines which Messages will realize the specified flow.
        ///<p>From package UML::InformationFlows.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("realizingMessage")]
        [DescriptionAttribute("Determines which Messages will realize the specified flow.\n<p>From package UML::I" +
            "nformationFlows.</p>")]
        [CategoryAttribute("InformationFlow")]
        [XmlElementNameAttribute("realizingMessage")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IMessage> RealizingMessage
        {
            get;
        }
        
        /// <summary>
        /// The sources and targets of the information flow must conform to the sources and targets or conversely the targets and sources of the realization relationships.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Must_conform(object diagnostics, object context);
        
        /// <summary>
        /// The sources and targets of the information flow can only be one of the following kind: Actor, Node, UseCase, Artifact, Class, Component, Port, Property, Interface, Package, ActivityNode, ActivityPartition,
        ///Behavior and InstanceSpecification except when its classifier is a relationship (i.e. it represents a link).
        ///(self.informationSource->forAll( sis |
        ///  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
        ///  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
        ///  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
        ///  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) 
        ///
        ///and
        ///
        ///(self.informationTarget->forAll( sit | 
        ///  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
        ///  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
        ///  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
        ///(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Sources_and_targets_kind(object diagnostics, object context);
        
        /// <summary>
        /// An information flow can only convey classifiers that are allowed to represent an information item.
        ///self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)
        ///  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Convey_classifiers(object diagnostics, object context);
    }
}

